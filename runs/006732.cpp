// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={15,16,16,-1,8,1,0,-3,-3,-4,2,-9,0,0,-10,-3,9,10,-4,-4,8,-7,-2,-5,-5,0,4,2,-5,-11,-12,-1,5,0,1,-9,-2,3,2,-6,3,8,16,4,8,-6,-3,-3,9,1,4,-11,2,0,5,-6,-5,5,7,-5,0,-11,11,-15,5,4,1,-5,22,15,3,6,-9,13,10,1,9,6,10,22,2,-2,8,3,14,2,-2,-3,-11,1,4,0,0,-2,14,17,17,5,11,0,4,0,-10,-8,-15,0,-11,-27,-12,-7,4,29,27,8,-4,-12,-5,-3,-4,-16,-22,-17,-15,-12,-11,-14,-4,3,14,4,-1,-11,-8,-1,1,-18,-2,0,-4,-16,-7,-8,15,-6,19,9,6,3,-2,-6,-4,-12,-3,-14,-4,-5,-3,6,6,-9,14,16,11,11,5,-2,7,0,-6,-6,4,-2,7,-10,-6,-6,13,4,13,10,7,10,-1,-1,-7,9,3,-10,4,-9,-14,-9,12,-3,2,-3,11,3,5,-3,-11,3,2,0,3,-2,4,-18,-5,2,4,4,4,16,15,8,-13,7,-1,-11,2,-7,1,-19,3,2,9,-1,3,7,3,-1,-6,-3,-1,-7,1,6,-8,-18,4,-4,-8,-8,-11,-8,-1,-7,-4,-6,-7,1,-2,-3,-11,-5,6,21,-19,-16,-37,-6,-9,-8,-18,-3,-7,5,27,23,1,22,-10,25,11,5,-22,-6,-12,4,-13,-8,-4,-16,-8,-19,-7,15,15,17,4,-1,8,11,13,15,-11,10,-3,-1,-4,-13,-18,22,14,-15,7,-5,-8,8,23,7,-2,23,-2,-3,-6,-21,-17,11,-12,1,12,-5,6,15,3,14,8,26,1,20,1,-1,-1,11,1,4,7,-13,1,-1,13,-2,2,-1,-16,14,-17,-4,0,9,17,18,-6,-13,-1,-14,10,2,-3,10,3,-11,-19,-8,6,24,21,24,7,-1,-15,-6,4,-2,-3,-16,-24,-14,-9,-11,-7,22,7,-13,-16,-19,-10,9,-8,1,-9,2,-5,-6,-12,-14,2,18,-1,-1,-26,-12,13,-12,-6,4,-2,8,-9,-11,-1,4,8,-2,-9,9,-3,-12,-7,6,5,2,-4,5,-2,6,15,19,3,-12,-3,-28,4,-15,-8,12,-10,-7,-10,1,5,1,10,9,-30,-24,-2,-26,2,-18,12,14,0,10,-3,2,-1,14,33,9,0,-26,2,1,-16,-3,-7,-10,10,-1,-1,8,-2,3,5,-6,0,-7,-4,5,-15,-17,-15,0,-4,11,-7,17,-9,2,6,12,22,29,15,18,13,23,-8,2,-15,-10,-3,-8,-14,11,7,21,24,40,15,8,13,4,11,-4,7,-2,-5,-15,-11,-5,-8,1,5,-8,1,-3,-12,-3,-15,-12,-3,-1,-4,0,-8,-6,0,-4,-15,6,9,-3,5,-2,-5,1,-13,-8,-11,-8,0,1,6,-4,0,0,4,-3,-5,2,5,1,1,-9,-9,-7,-7,11,3,1,5,-1,-6,-2,-4,1,9,9,3,7,2,3,-6,0,10,-6,0,8,10,7,9,6,5,-3,0,-4,3,-13,-6,-4,-2,-1,6,9,4,19,8,1,1,-11,-18,0,1,-3,-2,-10,3,-2,15,-1,2,-3,-10,-10,2,-7,-16,-7,0,-3,0,7,12,17,2,-7,0,5,5,6,4,4,-17,-2,-2,-4,14,1,4,3,-6,-22,2,13,11,2,5,8,1,3,-1,0,0,-19,-6,-10,-15,-32,7,-1,-8,3,7,-6,4,-1,-5,3,-1,-15,-11,-13,-23,-23,6,-6,-6,-11,4,4,4,-1,-1,3,-7,-12,-4,-14,-12,-7,11,1,-2,1,15,23,13,2,8,0,-3,-4,12,0,8,13,7,1,-4,4,10,12,19,-4,-6,9,7,0,4,-7,0,19,12,12,6,7,4,-3,-2,-4,1,1,-4,-6,-2,0,16,28,18,33,19,-7,-8,-10,-2,-8,-2,-1,-4,-3,0,17,31,17,61,16,50,13,-17,36,-7,11,-12,-15,-9,-22,-41,-9,-10,-14,17,18,-11,-20,-3,-27,16,9,-11,3,-5,-8,-13,4,-7,-29,24,21,10,-20,25,17,-6,-14,-8,-7,-5,0,14,-4,-12,-15,10,8,30,-9,3,-12,-23,-17,-16,1,-4,-12,-7,-10,-29,24,-15,-16,29,-23,28,20,20,3,-1,16,4,-8,14,11,33,27,-14,-22,-7,-21,-10,-22,21,15,25,3,8,30,15,5,10,18,19,-21,-36,-37,0,-24,-7,-1,-7,-9,9,6,-9,-10,-7,-5,21,6,-14,-16,11,-14,21,25,-23,-32,-4,-16,-8,-5,-36,-18,32,9,7,-28,-11,6,-3,21,2,7,10,21,6,16,8,-25,6,-17,0,-38,-21,-39,13,-4,-24,-4,7,6,-2,26,46,16,32,8,-4,-12,-18,-24,-9,-6,6,-3,9,-15,7,9,55,17,26,-23,0,-7,0,-15,-1,-19,-19,-5,0,-2,7,-4,16,28,34,27,-18,-4,26,7,0,-24,-2,9,12,0,4,-19,19,1,27,20,-4,-5,-10,35,21,-1,-10,7,-2,-19,12,-27,3,-1,29,1,-8,-2,-28,4,0,6,7,1,3,1,7,-9,-7,1,47,33,5,-3,-23,7,-15,-6,-24,-8,-27,-20,-11,9,-30,-24,10,10,10,6,-3,-9,-4,4,-7,-12,-6,-4,8,-5,-1,-1,6,3,-8,-8,-10,-13,2,-11,-15,-4,-1,-15,-1,-1,-4,2,10,-7,2,-12,-5,-13,-6,-13,-8,3,3,-12,2,2,1,1,9,-3,-8,-10,-7,-8,-10,-14,4,-7,-7,-4,-6,-9,-9,-5,7,-3,0,3,-9,1,1,0,-1,-9,3,6,8,-1,-4,-1,11,-8,0,-6,-1,-3,2,-4,4,-1,4,-3,9,-5,-7,-6,4,2,-5,5,-1,4,-1,11,1,6,0,-7,3,-1,-5,-4,1,-1,0,7,3,4,-8,-4,-11,4,-5,-9,3,-4,1,-1,4,5,6,9,12,11,10,3,4,3,5,-2,3,5,9,6,12,14,18,13,1,8,3,1,4,8,3,-7,2,5,3,6,1,18,1,13,3,8,12,7,7,16,3,-1,4,-7,2,-1,5,6,1,-1,5,9,10,8,13,16,5,0,5,-8,4,-3,18,4,-16,-2,9,18,1,5,11,13,12,1,-5,5,0,0,5,-5,-10,-14,-3,-7,-3,3,1,-1,10,-4,-3,-6,-1,0,10,-10,-11,-18,-18,-13,-18,-9,-4,-3,-2,5,-3,-6,2,10,13,7,2,-12,-8,-18,-14,-13,-3,-11,1,-1,0,10,17,-5,17,4,16,20,20,7,-4,-24,9,-19,-8,-27,-7,9,20,-5,4,-11,22,7,21,3,2,-10,-20,-20,-10,-16,-11,-11,14,28,1,-13,19,17,-2,5,4,-9,-20,-3,29,17,-9,-21,16,-5,-8,-20,-11,-13,0,15,-14,-21,26,7,21,-27,4,-27,-27,-17,-28,-10,-27,21,16,2,-1,-4,-5,-17,-15,2,0,-7,-29,-26,20,1,29,15,6,23,20,-26,11,-2,-1,-26,4,-21,5,-5,15,6,1,3,10,22,3,-3,-2,10,8,-6,-29,15,5,15,-5,-8,-1,6,-8,-8,-15,-1,-3,4,28,9,0,-15,21,-18,34,13,13,21,-10,-12,-11,-33,-5,-6,-8,-13,9,-3,-17,13,7,-12,-15,-19,-8,25,-30,5,1,-2,-12,-30,-2,5,12,-8,-14,-41,-19,-21,-7,10,-15,-10,21,-6,-11,-7,11,14,7,-2,20,-8,9,-9,25,-17,-9,-3,2,1,1,-1,-5,3,-1,6,27,-19,23,16,-11,-1,-15,-2,18,7,8,1,1,4,10,18,51,14,-5,4,-5,-12,-6,11,24,14,20,0,-1,7,10,1,36,35,-1,-18,-5,-27,-16,1,7,8,-5,5,7,2,3,-12,18,21,1,36,-6,-16,-8,-18,-10,-8,3,-6,9,-22,-3,4,27,14,7,-6,-8,7,-15,-14,-9,-5,-18,13,1,-3,-16,14,12,-1,-14,-12,-2,-4,-1,-1,-10,8,-33,-8,-8,-15,13,-14,0,-1,-5,1,11,2,-3,-1,15,-5,-13,-14,-17,-31,7,30,7,-28,0,-7,2,-7,-21,-21,-9,5,-14,-27,-2,5,-28,16,25,-11,4,-1,8,4,-6,3,21,-4,-11,-17,-5,3,-13,-11,15,-1,-2,4,-2,-17,1,-7,-3,-9,-3,-28,-20,-19,-27,-27,30,10,-5,-18,-9,-17,0,3,5,3,11,10,2,-1,-8,-20,32,20,-11,-12,7,-7,6,8,7,8,3,-6,11,23,19,0,16,17,6,2,8,-12,-9,0,-2,5,5,-12,3,-2,16,-6,7,23,17,19,13,-2,8,-5,-18,-1,8,9,3,-1,6,-14,15,34,36,17,8,26,11,-6,-7,-1,9,-4,9,0,-2,-3,-5,2,11,-6,2,11,3,-9,5,-3,8,0,15,-13,-9,-8,8,-1,1,1,-6,9,7,-5,-2,-7,-6,9,14,-3,19,12,3,-16,16,1,18,15,6,-6,0,8,7,2,-1,5,-2,-14,-14,-1,3,-3,10,4,7,-11,1,-14,-14,-8,-13,1,20,13,15,6,6,-8,-5,-2,5,1,-13,-15,-16,-8,20,19,6,10,15,28,42,25,12,5,-11,-10,-13,-6,-7,-11,-6,-2,8,16,12,8,4,-4,12,7,8,-9,5,7,5,-8,-15,0,8,18,17,13,12,-2,7,2,3,7,5,-3,-4,-14,-1,-3,4,3,-6,8,-6,-8,4,-4,-7,5,5,5,3,-15,-6,9,18,-4,22,7,9,-12,5,7,5,-2,11,2,-1,-5,9,13,-6,-9,6,-2,4,-3,1,-11,3,-8,-8,-5,11,8,3,20,7,-14,11,2,-9,-5,-22,2,-11,-8,-8,-5,-4,-15,-3,0,-25,-12,11,7,-14,-6,-18,-2,-5,6,3,1,11,0,-6,-5,-7,15,4,-4,-10,-10,13,-16,-8,-9,-4,3,-1,-5,6,-5,-4,-4,0,3,1,5,9,1,-2,-6,-1,0,-4,-6,-9,-6,0,2,9,13,1,-3,11,11,-4,6,11,-10,-1,-3,0,-12,2,-8,12,4,-4,6,4,16,20,4,1,7,1,17,-6,-4,-8,-2,8,-5,3,3,13,4,5,0,-1,4,3,14,1,-2,-2,-6,2,1,-11,-11,1,2,-6,4,-1,7,5,-5,-2,-8,-8,5,6,-1,4,-10,0,-9,-3,0,-3,-12,-1,-12,-4,-16,-6,-12,7,-4,5,-24,-26,-7,1,-6,-19,-15,-2,-8,-1,-20,-20,-8,27,17,5,14,8,-12,2,-20,-21,-8,-6,-6,-8,-10,-4,-5,16,5,-3,11,-3,-9,3,-18,-15,-6,5,-24,-7,-9,-11,1,5,4,10,-11,3,12,2,-18,-16,-15,-8,-33,7,-21,2,0,14,-5,14,2,1,-10,10,-5,1,-8,-4,-9,24,-5,-1,-12,2,12,12,-7,16,5,-5,6,-21,-3,-11,7,17,-2,22,3,-3,10,20,4,15,8,23,-3,-23,-10,7,2,23,9,31,19,-23,7,2,3,9,32,32,-3,13,-9,-6,-19,-7,-8,-2,-21,-16,-26,-1,-12,-2,4,2,-7,-13,1,-13,-8,-5,-23,0,-30,-13,-5,-6,-17,6,3,-6,17,18,10,-3,-4,6,-8,3,-8,9,18,26,30,38,12,-8,13,14,17,20,0,10,16,10,-20,28,30,20,-1,0,-8,-19,-9,1,10,6,12,4,-3,18,2,12,6,-6,-12,-13,10,-20,-3,-8,-2,12,-11,-13,-9,-8,8,37,10,-1,-6,-9,7,-3,-6,-13,-6,4,-18,-6,12,6,0,15,18,-2,-5,4,3,4,9,-6,4,7,-11,-4,-3,-4,-7,3,4,19,-6,-5,12,-7,0,-6,-8,-19,-17,-3,-10,21,11,25,-4,-12,-2,-13,-5,-5,-4,-12,-12,-21,-19,-26,21,6,-7,15,4,1,-7,6,15,17,-10,0,7,-1,-6,-5,-26,-13,8,20,8,13,-15,-16,-5,-3,-1,0,3,-7,-19,-9,-5,-8,-15,27,13,-1,-6,7,4,-2,-7,-16,4,1,-6,-3,-13,-4,4,22,-4,7,-7,4,-1,-8,-16,-5,7,9,2,7,-10,-13,7,11,3,5,-8,16,-4,-17,-2,4,9,10,-22,9,2,-3,5,24,17,12,6,-3,8,10,3,3,-5,6,3,-6,-7,5,19,31,9,12,3,-2,-1,4,-4,-26,-10,3,-12,-11,5,20,30,11,18,16,-8,14,-1,-5,3,-8,-5,-24,-9,7,-3,1,24,-8,5,5,8,4,4,11,1,-1,13,-18,5,3,-7,5,5,-16,-20,-6,7,4,15,18,15,7,-1,5,-5,-5,-1,4,-1,7,-12,-19,-25,-8,9,12,6,5,7,4,-1,3,2,4,1,-7,-21,-4,-19,1,-12,3,-4,-15,-6,-3,-2,11,2,-8,-11,20,-3,2,-7,1,-4,-14,-2,6,13,-7,-3,21,1,10,-23,13,1,2,-13,-1,-8,-1,-4,-12,8,-1,-7,7,-2,-5,-11,8,7,2,-2,-1,5,-1,-6,-12,-14,-4,-24,-8,-10,5,2,10,0,1,5,3,-7,-10,-3,-12,-19,-19,-13,-19,-6,0,0,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool bp=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt==m-1) {bp=true; }
			}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if (((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1)||bp) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-1) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

