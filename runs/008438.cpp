#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{4,15,2,38,0,41,1,87,5,2},
{9,26,20,58,0,47,3,125,10,10},
{31,29,47,83,4,85,21,103,35,15},
{50,46,76,95,27,117,43,105,44,59},
{69,76,92,113,31,115,65,106,85,101},
{98,83,101,111,59,101,75,106,98,101},
{95,89,102,125,72,98,69,106,95,86},
{88,88,101,125,68,122,68,93,100,97},
{97,113,110,124,75,127,100,115,112,100},
{107,114,116,142,88,121,105,112,133,135},
{118,103,113,138,89,126,126,112,124,144},
{100,123,89,134,98,127,114,116,111,97},
{53,123,58,89,92,126,88,116,87,63},
{30,97,53,74,82,121,79,116,48,36},
{5,99,37,66,63,114,68,116,33,36},
{4,99,20,34,55,83,56,113,18,8},
{32,54,62,47,0,43,33,76,28,47},
{40,69,84,72,0,50,44,104,46,61},
{79,72,101,97,27,103,66,103,97,100},
{94,74,97,86,32,107,76,102,98,93},
{92,94,95,94,78,100,72,101,106,86},
{96,98,95,94,74,92,82,101,95,84},
{91,104,92,98,69,112,75,101,84,85},
{84,107,96,104,79,113,88,101,90,97},
{81,138,104,101,93,111,88,122,86,102},
{81,143,113,111,94,115,89,125,92,105},
{92,130,111,116,99,120,101,141,108,107},
{96,133,112,140,105,123,123,142,103,127},
{119,133,113,144,98,122,112,133,106,129},
{87,103,110,147,88,122,80,139,117,124},
{51,98,66,68,65,102,67,138,81,100},
{33,87,33,30,49,33,33,96,27,86},
{40,52,79,63,0,44,38,49,39,85},
{97,60,89,81,5,80,69,71,85,101},
{98,58,84,76,35,104,111,71,101,72},
{105,74,86,69,77,108,106,62,112,85},
{99,79,86,76,93,93,89,55,107,100},
{103,96,86,66,74,90,81,57,92,100},
{91,104,75,68,87,101,62,63,79,57},
{54,114,85,66,90,85,69,74,48,44},
{49,142,93,88,90,82,68,102,49,69},
{72,135,97,94,96,61,73,120,48,87},
{81,120,94,104,103,66,91,128,68,100},
{83,130,103,97,102,56,65,138,75,114},
{89,133,111,121,101,55,62,144,85,114},
{112,96,113,96,86,48,56,123,117,137},
{87,89,118,85,58,44,55,111,93,140},
{51,69,66,40,49,22,27,14,60,73},
{68,63,84,54,0,46,51,62,46,100},
{98,71,78,72,15,92,111,61,94,80},
{110,78,85,78,81,106,112,61,110,106},
{105,87,77,66,93,104,91,57,108,107},
{107,82,79,64,73,94,85,55,108,83},
{101,79,81,67,87,96,84,58,79,66},
{78,70,74,87,85,92,78,60,63,47},
{43,81,68,91,89,72,62,105,48,35},
{33,110,81,91,96,75,66,107,41,39},
{54,120,83,101,100,56,73,113,49,89},
{63,117,96,105,105,56,63,123,75,96},
{79,123,116,94,107,54,63,131,91,109},
{89,122,119,98,103,52,66,120,103,116},
{92,96,120,83,87,48,43,92,99,137},
{119,71,119,79,58,23,42,58,95,119},
{86,62,95,39,51,5,26,17,50,92},
{97,37,63,7,48,53,104,2,52,109},
{109,74,71,18,58,84,112,28,80,113},
{117,74,68,61,87,81,114,28,106,115},
{110,57,64,61,96,84,94,1,103,91},
{96,57,59,75,92,96,92,3,109,74},
{91,55,59,94,82,113,102,6,98,61},
{66,85,54,79,72,81,83,45,68,60},
{36,90,37,89,86,95,75,61,60,55},
{32,104,51,107,91,100,62,71,74,60},
{53,118,98,107,106,108,57,77,91,89},
{61,110,102,107,131,93,63,109,87,104},
{78,119,113,89,131,76,60,101,92,119},
{87,122,117,96,100,62,60,90,98,113},
{91,73,111,90,78,41,16,85,84,126},
{110,68,106,54,57,38,23,20,59,126},
{118,59,84,24,47,12,32,13,41,114},
{109,47,32,8,59,62,111,0,19,133},
{118,56,38,40,86,83,115,0,57,111},
{118,56,36,40,100,77,117,0,90,111},
{108,49,18,64,115,85,100,0,112,105},
{95,43,13,88,85,87,106,22,107,82},
{80,53,13,97,71,111,113,25,108,79},
{66,76,48,90,67,89,100,59,106,65},
{21,88,61,97,82,85,87,71,101,59},
{17,103,100,85,76,95,90,100,82,81},
{53,119,106,101,108,123,92,94,93,95},
{60,110,106,114,135,139,106,97,103,101},
{80,119,108,113,128,141,86,100,93,97},
{86,99,107,102,95,106,85,89,89,111},
{97,73,106,61,81,92,69,53,72,126},
{110,60,83,31,54,48,54,13,26,115},
{111,59,67,6,49,40,7,2,0,97},
{111,29,21,24,63,50,113,0,44,55},
{120,38,11,24,108,72,119,0,78,103},
{107,38,11,25,125,52,120,0,88,89},
{96,39,18,32,123,53,122,24,97,87},
{87,47,18,48,93,51,115,26,120,86},
{80,70,49,76,77,67,101,59,121,75},
{51,76,81,96,67,50,77,95,93,49},
{21,90,104,96,89,58,66,101,106,66},
{17,101,104,90,91,79,61,89,87,99},
{52,121,101,99,112,111,74,85,90,98},
{60,107,105,114,137,131,89,100,109,86},
{80,101,108,121,140,118,107,92,112,118},
{96,99,95,118,110,127,121,76,104,103},
{97,73,80,95,92,115,92,17,74,108},
{110,59,41,53,78,100,74,0,52,97},
{108,59,24,13,67,64,42,0,21,95},
{120,29,0,7,87,33,117,0,69,50},
{120,38,8,7,117,45,120,0,91,66},
{107,43,42,17,112,33,123,18,94,83},
{88,46,53,22,82,30,113,26,104,53},
{85,64,56,34,74,29,102,53,110,51},
{80,70,62,33,68,24,79,95,103,51},
{67,70,114,55,65,24,59,84,73,79},
{36,90,103,56,92,62,48,83,48,78},
{32,108,104,62,89,71,44,85,51,68},
{52,121,96,73,112,89,57,100,56,68},
{62,90,90,93,131,95,80,96,80,100},
{87,92,58,119,128,115,82,87,87,106},
{95,99,49,115,104,118,115,46,94,90},
{97,73,45,122,87,115,88,11,104,97},
{101,59,20,112,77,110,90,0,93,97},
{107,53,0,84,64,92,80,0,70,93},
{119,29,32,31,61,52,121,0,92,21},
{120,39,33,42,63,35,142,19,113,32},
{108,45,46,46,59,36,137,47,114,31},
{89,64,56,35,36,33,93,53,108,57},
{84,64,64,43,36,32,72,91,66,62},
{80,70,93,41,37,33,64,96,64,59},
{67,74,95,57,44,51,64,79,58,57},
{36,92,82,74,107,61,54,86,42,37},
{32,109,87,82,103,43,51,100,49,55},
{52,104,82,80,118,71,72,101,61,93},
{73,85,78,77,135,101,95,93,55,92},
{89,92,66,94,122,112,99,77,76,94},
{95,99,61,100,99,112,113,7,90,88},
{88,64,48,123,88,110,101,0,99,97},
{107,59,48,123,73,100,105,0,94,94},
{95,50,28,120,68,100,97,0,94,81},
{90,29,33,81,50,88,111,19,106,40},
{120,45,52,82,40,83,142,42,127,49},
{102,63,61,85,36,68,127,53,121,49},
{90,64,65,69,77,64,94,79,89,48},
{85,64,96,82,74,82,85,88,58,48},
{81,65,96,80,79,77,65,80,50,68},
{68,77,90,78,84,54,56,108,34,64},
{38,97,86,59,110,54,47,96,28,57},
{43,100,89,67,114,75,44,97,49,48},
{66,104,79,70,133,90,63,97,56,81},
{83,81,78,79,134,98,84,90,80,75},
{90,92,75,95,119,107,84,59,87,88},
{87,91,69,100,113,100,111,0,81,83},
{89,55,70,123,104,97,89,0,92,95},
{96,53,59,119,88,100,98,0,94,91},
{52,50,51,114,84,98,87,0,91,76},
{59,35,55,87,5,93,70,43,125,53},
{119,63,70,86,5,99,142,53,126,61},
{109,63,80,94,5,99,132,78,103,61},
{95,64,104,81,43,88,93,88,85,51},
{89,59,104,88,45,85,85,70,51,77},
{81,70,106,69,53,69,77,109,40,83},
{81,78,86,64,55,71,59,120,60,72},
{51,78,97,63,80,69,50,101,57,44},
{61,100,102,76,90,82,48,101,43,48},
{78,99,99,80,105,95,71,96,75,72},
{85,81,97,80,121,90,93,68,89,75},
{81,92,90,98,117,94,109,4,97,87},
{78,90,95,110,88,92,116,0,77,83},
{97,55,66,117,76,100,79,0,90,92},
{64,51,71,111,62,96,80,0,91,54},
{40,50,67,52,55,56,52,0,59,48},
{40,72,80,93,0,89,53,51,75,22},
{59,88,101,121,0,124,74,80,106,68},
{90,88,122,115,0,128,104,85,128,99},
{105,89,116,113,38,117,99,90,121,80},
{104,89,111,91,40,103,112,107,91,93},
{110,89,111,91,48,84,100,111,85,89},
{104,73,105,87,48,80,95,120,87,70},
{90,85,108,88,82,81,91,101,86,83},
{86,93,116,92,91,83,90,100,80,88},
{64,101,115,88,108,80,90,94,81,95},
{72,102,117,90,116,88,87,69,82,73},
{92,109,111,115,116,100,110,8,81,87},
{97,110,111,113,88,95,114,4,90,68},
{60,78,104,67,74,65,59,0,88,53},
{32,76,102,41,58,43,34,0,53,49},
{22,75,82,17,51,25,17,0,29,43},
{0,89,86,44,0,29,12,30,17,9},
{11,90,104,85,0,59,29,81,35,21},
{12,101,101,82,0,68,45,88,56,15},
{44,101,101,110,42,63,62,88,88,56},
{76,96,105,116,44,103,86,74,97,116},
{118,78,105,119,61,106,109,92,109,117},
{101,92,89,114,71,98,75,98,105,94},
{92,94,90,112,84,101,79,101,98,97},
{98,100,103,104,93,100,109,88,80,92},
{87,94,101,73,100,84,94,71,91,87},
{96,96,101,50,117,69,112,34,78,41},
{40,95,97,23,120,40,80,8,53,50},
{9,114,113,8,97,3,56,4,27,9},
{5,110,94,0,87,2,35,0,5,7},
{5,105,85,0,76,0,35,0,0,6},
{0,101,80,0,71,0,32,0,0,1}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    int mid_v = 0;
    for (i = 0; i < komp; i++)
    {
        mid_v += dim[i][3] - dim[i][1];
    }    
    mid_v = mid_v / komp;
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            if ((dim[i][3] - dim[i][1]) < mid_v/2)
            {
                dim[i][5] = 1;
            }    
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
