// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={16,17,17,2,11,2,1,-4,-2,-5,-1,-10,1,3,-7,0,10,11,-3,-3,9,-6,-3,-6,-4,1,1,1,-6,-8,-13,2,8,1,0,-6,-1,4,1,-7,4,5,11,3,7,-5,-2,0,8,0,5,-8,3,3,2,-5,-4,4,6,-4,1,-8,10,-12,2,5,2,-2,23,16,4,9,-8,12,11,4,10,7,11,21,1,-3,7,2,13,1,-1,-2,-8,2,5,1,1,-1,13,18,16,4,10,-1,3,-1,-9,-7,-12,1,-10,-26,-11,-6,5,30,26,7,-5,-13,-6,-6,-5,-15,-19,-18,-14,-11,-10,-11,-3,6,13,1,-2,-10,-9,0,0,-17,-1,-1,-5,-15,-6,-3,16,-3,18,8,7,4,-1,-5,-3,-11,-4,-13,-5,-2,-2,11,7,-6,15,15,12,10,6,-3,8,1,-7,-5,3,1,8,-7,-5,-3,14,3,14,9,8,9,-2,-2,-6,6,2,-9,5,-8,-13,-6,11,-4,3,-4,12,2,4,-4,-10,2,3,1,4,1,5,-13,-4,1,5,3,5,15,14,9,-10,10,0,-10,3,-4,2,-18,4,1,8,0,4,8,4,0,-3,-2,-2,-6,2,7,-9,-15,5,-3,-9,-7,-10,-7,0,-6,-3,-7,-8,-2,-1,-4,-10,-2,13,18,-12,-13,-28,-11,-14,-13,-19,0,-8,8,24,20,4,23,-1,24,6,8,-15,-5,-9,3,-8,-3,-1,-15,-5,-10,-4,14,14,10,1,8,11,12,10,12,-6,7,0,0,-3,-12,-11,19,7,-14,0,-2,-7,1,18,8,5,16,-1,-4,-9,-18,-12,14,-11,-6,11,-2,3,10,4,15,9,13,-2,13,2,-6,0,14,0,3,2,-10,-4,-4,14,3,-3,2,-1,19,-10,-3,5,12,14,7,-9,-14,0,-11,7,-3,-2,11,4,-4,-14,-9,3,23,18,23,0,-2,-12,-11,3,1,-2,-13,-17,-15,-16,-18,-6,21,8,-12,-13,-18,-9,-2,-3,4,-6,5,-6,-9,-17,-15,1,13,4,-2,-21,-11,10,-11,-1,5,3,3,-8,-8,-4,-1,5,1,-6,6,-4,-15,-6,3,4,1,-5,4,1,1,10,10,0,-7,-4,-23,1,-10,-3,9,-9,-4,-11,-2,8,2,9,6,-19,-15,1,-17,1,-13,13,9,1,7,-4,-1,2,9,28,6,1,-17,9,2,-15,-2,-2,-13,5,-8,-2,1,-3,0,10,-5,3,-2,3,8,-10,-10,-8,-1,-3,6,-6,14,-8,7,9,7,17,26,16,15,10,20,-3,3,-10,-5,2,-5,-3,14,6,12,19,31,15,8,13,4,13,-2,7,-2,-3,-15,-11,-5,-8,1,5,-8,1,-3,-12,-3,-13,-12,-3,-1,-2,0,-8,-6,2,-4,-17,6,9,-1,5,-2,-5,-1,-13,-8,-11,-8,0,-1,6,-4,0,-2,2,-3,-7,2,5,1,1,-11,-11,-9,-7,11,3,1,5,-1,-6,-2,-4,1,9,9,1,5,0,1,-6,0,10,-4,0,8,10,7,9,6,5,-3,-2,-6,1,-15,-8,-4,-2,1,6,9,4,19,8,1,1,-11,-20,-2,-1,-5,-4,-10,5,0,15,-1,2,-3,-10,-10,2,-7,-18,-9,-2,-5,0,7,14,17,2,-7,0,5,5,6,4,4,-19,-2,-2,-4,14,1,6,3,-6,-22,2,13,11,2,5,8,-1,3,-1,0,-2,-19,-6,-10,-15,-32,7,-1,-8,3,7,-6,2,-1,-5,1,-3,-17,-11,-13,-23,-23,6,-6,-6,-11,4,4,0,-3,-1,1,-9,-12,-4,-14,-12,-7,11,1,-2,1,15,21,11,0,8,0,-3,-4,12,0,8,13,5,1,-4,2,10,10,17,-2,-4,11,7,0,4,-7,0,19,10,10,4,5,4,-5,-2,-2,3,3,-4,-6,-2,0,16,26,16,29,15,-9,-8,-12,-4,-8,0,-1,-6,-5,0,15,27,13,52,17,47,8,-10,31,-6,12,-7,-14,-8,-21,-38,-8,-7,-13,16,21,-12,-17,-4,-26,17,8,-6,-4,-2,-7,-10,1,-14,-34,25,14,9,-11,24,18,-5,-13,-7,-4,-4,-11,15,-5,-13,-24,15,13,29,-6,2,-17,-28,-14,-13,8,-1,-15,-6,-9,-20,15,-8,-19,22,-24,23,17,25,4,4,17,5,-9,13,8,26,20,-9,-29,-10,-24,-11,-23,20,18,32,8,7,29,16,0,13,17,16,-20,-37,-32,5,-17,-2,0,-6,-8,8,-1,-4,-21,2,-4,18,3,-15,-15,16,-11,14,20,-24,-31,-9,-9,-3,-8,-35,-15,25,6,2,-23,-4,3,-2,24,3,2,13,18,13,19,7,-24,3,-20,1,-31,-16,-38,14,-1,-19,-1,6,5,-3,21,49,21,31,5,3,-1,-19,-21,-8,-5,3,-6,10,-10,0,4,46,20,21,-22,5,-8,5,-4,2,-18,-14,-2,7,3,10,-3,15,25,25,30,-13,-5,27,0,-3,-25,-1,10,9,-3,7,-24,16,-2,24,21,1,0,-7,32,22,-2,-9,6,-1,-16,5,-30,2,4,34,-4,-7,1,-27,5,-3,5,4,2,0,-2,6,-4,-2,0,46,26,10,-14,-28,-4,-18,-13,-25,-11,-26,-19,-8,4,-27,-23,7,9,9,5,-2,-8,-5,1,-10,-11,-3,-1,9,-6,0,-2,5,2,-9,-9,-11,-14,1,-12,-14,-5,2,-10,2,0,-1,5,9,-8,1,-11,-6,-14,-7,-18,-7,6,4,-7,5,5,2,2,8,-4,-7,-11,-8,-7,-9,-13,5,-2,-2,1,-5,-8,-8,-4,4,-2,1,4,-8,2,2,1,2,-4,4,7,9,0,-3,0,6,-5,-1,-3,-2,-4,1,-1,5,0,5,-6,8,-6,-6,-5,3,3,-6,8,0,3,-2,12,2,7,-1,-10,2,-2,-2,-5,-4,-2,1,6,6,7,-5,-1,-10,3,-6,-12,2,-7,0,-2,1,4,5,8,13,8,11,4,5,4,4,-5,2,4,10,5,9,13,17,10,-2,5,2,-2,3,9,4,-8,1,4,4,7,2,17,4,12,4,7,9,4,6,11,0,-2,7,-4,3,0,6,7,4,-2,6,8,7,5,10,11,2,-1,8,-5,7,-2,15,7,-13,1,10,17,0,4,8,10,9,2,-2,8,5,5,4,-6,-7,-11,0,-6,-2,-2,-2,-4,7,-5,0,-3,4,3,9,-11,-12,-15,-19,-14,-19,-12,-5,-4,-1,6,0,-3,7,11,10,6,1,-13,-11,-17,-13,-14,-4,-12,4,0,3,11,18,-6,15,8,18,20,26,7,-6,-24,3,-19,-12,-25,-5,9,20,-5,6,-7,22,13,17,3,0,-12,-16,-18,-8,-12,-7,-5,10,22,3,-9,19,21,-4,1,2,-7,-14,5,27,19,-9,-19,8,-5,-8,-18,-9,-9,0,13,-12,-15,20,7,15,-23,6,-21,-23,-15,-30,-12,-23,21,10,0,1,0,-7,-13,-15,4,-4,-9,-23,-22,10,7,27,17,4,23,20,-20,7,-8,-7,-24,4,-19,3,-5,11,10,3,9,14,14,5,-1,0,8,6,-2,-25,13,7,7,-3,0,-3,-2,-10,-12,-15,-1,-3,4,24,5,2,-13,23,-16,32,21,11,17,-10,-8,-7,-23,-3,-2,-6,-13,9,3,-9,13,7,-12,-17,-15,-6,19,-26,3,-3,-6,-8,-26,0,5,10,-6,-14,-41,-21,-17,-7,4,-21,-12,15,-8,-13,-3,11,14,5,-4,16,-10,7,-7,27,-13,-9,-1,2,-1,-1,-1,-5,3,-3,6,27,-21,15,10,-7,-1,-15,-2,14,5,6,1,1,0,10,16,49,16,-5,0,-5,-10,-4,15,20,10,18,-6,-7,7,12,3,34,35,3,-16,-11,-21,-12,5,5,8,-7,-3,5,2,9,-8,18,17,3,34,-8,-18,-8,-20,-8,-6,1,-8,7,-24,1,2,31,18,9,-8,-12,1,-17,-14,-5,-5,-18,11,-3,-7,-12,18,16,-3,-18,-16,-4,-6,1,1,-6,12,-27,-6,-8,-17,9,-12,4,-5,-9,-1,9,2,-1,-1,13,-7,-15,-16,-19,-31,5,26,7,-30,2,-7,2,-11,-21,-19,-9,5,-14,-29,-2,5,-26,12,21,-9,4,1,6,2,-4,3,21,-4,-11,-21,-7,1,-13,-13,17,-1,-2,4,-4,-17,1,-5,3,-7,-1,-26,-18,-15,-21,-21,30,10,-5,-16,-9,-17,2,5,5,3,11,8,0,3,-4,-16,32,18,-9,-10,7,-7,8,10,9,8,3,-6,11,23,15,0,16,13,2,2,6,-12,-9,2,0,3,5,-12,3,0,14,-10,9,23,15,17,11,-4,6,-5,-16,-3,4,7,1,1,8,-12,17,32,34,15,6,22,9,-8,-7,-3,9,-8,7,0,-2,-3,-3,0,11,-6,0,7,1,-11,7,-5,6,-4,13,-13,-11,-8,6,-1,1,1,-6,7,7,-5,2,-7,-6,3,14,-5,17,10,3,-16,16,1,18,15,6,-6,2,6,5,0,-3,3,-2,-14,-10,-3,1,-3,10,4,9,-7,7,-12,-16,-10,-13,1,18,9,17,8,0,-12,-7,-4,5,-1,-13,-17,-18,-8,18,13,2,10,13,26,34,21,8,5,-9,-6,-7,-4,-9,-11,-6,-2,8,16,12,4,0,-6,8,7,8,-9,7,5,5,-8,-13,0,8,20,17,9,12,-2,9,2,3,7,5,-3,-4,-16,1,-3,6,7,-6,6,-6,-8,4,-4,-5,3,3,5,3,-13,-4,11,18,-4,16,5,5,-12,9,9,3,-4,7,0,-1,-3,11,9,-4,-9,4,-4,6,1,3,-7,3,-8,-12,-5,11,10,3,18,7,-14,9,4,-7,-1,-18,2,-11,-8,-10,-5,-2,-11,-1,-4,-25,-12,11,11,-10,-6,-16,-2,-7,4,1,3,9,-2,-6,-9,-7,17,6,-4,-12,-8,13,-16,-8,-9,-4,3,-3,-7,6,-5,-4,-2,2,5,1,5,7,-1,-4,-4,-1,-4,-6,-8,-7,-6,0,4,11,13,1,-7,5,7,-4,4,7,-14,-3,-5,0,-12,0,-8,12,6,0,4,4,18,20,2,1,5,-1,13,-4,-6,-6,0,8,-3,5,3,11,4,1,-4,-1,0,1,8,1,-6,-2,-6,4,5,-7,-7,1,-2,-8,2,-1,7,5,-7,-2,-8,-6,7,8,3,6,-6,2,-5,-1,2,-3,-10,-3,-10,0,-12,-2,-10,9,-2,5,-24,-22,-3,3,-2,-15,-13,-2,-6,1,-22,-22,-10,23,17,5,14,10,-14,2,-10,-15,-4,-10,-10,-14,-14,-6,-1,16,5,1,11,-3,-5,3,-16,-5,-6,3,-24,-5,-3,-11,3,7,10,12,-9,-3,12,2,-12,-10,-13,-8,-31,5,-17,4,-2,18,-3,8,4,-3,-8,6,-5,3,-10,-4,-11,14,-5,1,-4,2,10,12,-3,14,1,-11,6,-17,-9,-15,1,7,-2,20,9,-1,8,12,4,11,10,17,-1,-13,-10,1,-6,11,5,29,17,-23,3,-2,3,9,32,28,-3,11,-7,-6,-25,-11,-8,-2,-19,-16,-12,1,-10,-8,8,12,1,-7,1,-15,-10,-5,-15,8,-24,-15,-7,-4,-13,4,1,-2,15,16,12,-5,-4,4,-2,3,-12,1,12,22,24,28,12,-8,7,14,13,20,0,6,14,10,-16,20,28,18,3,-2,-8,-21,-15,-1,0,4,10,6,1,16,2,8,8,-4,-6,-13,4,-18,-9,-10,-4,6,-9,-13,-5,-6,2,35,8,1,-2,-7,5,-7,-2,-7,-8,0,-14,-6,14,6,2,5,12,-2,-3,6,7,4,5,-2,2,3,-7,-4,-1,-2,-3,1,-2,19,0,-3,12,-7,0,-2,-8,-15,-19,-1,-8,17,9,17,-4,-10,-4,-13,-1,-3,-2,-10,-10,-15,-13,-22,19,6,-3,15,0,-1,-7,6,13,15,-6,4,9,-3,-6,-5,-16,-9,2,16,12,9,-11,-12,-1,1,1,-2,9,-7,-15,-7,-1,-2,-17,23,9,-1,-6,7,10,2,-1,-12,4,-3,0,5,-7,-2,6,18,-4,3,-5,8,3,-2,-10,-9,3,5,2,9,-4,-7,3,7,1,-1,-4,18,0,-13,4,6,15,10,-14,7,2,-3,3,20,13,10,6,-5,4,4,5,-1,-5,0,-5,-8,-7,5,17,27,7,12,5,-2,-3,-2,-4,-24,-12,1,-12,-13,3,18,26,11,16,10,-8,10,-5,-5,7,-12,-7,-22,-13,3,1,3,22,-8,5,9,8,4,4,13,7,3,15,-12,9,7,-3,7,7,-12,-20,-2,7,2,13,20,19,9,1,7,-1,-3,1,4,3,5,-12,-19,-21,-8,7,10,4,-1,7,2,-1,-1,-4,2,3,-9,-19,-6,-15,1,-14,-1,-4,-11,-6,-3,-4,5,2,-4,-9,12,-3,4,-1,1,-8,-16,-4,6,15,-7,-5,15,1,10,-21,7,-1,2,-17,-3,-12,-3,-4,-12,4,-1,-3,9,0,-1,-11,8,7,4,-2,1,5,-3,-6,-10,-10,0,-14,-10,-8,5,-4,10,0,-3,5,3,-7,-12,-3,-8,-15,-17,-17,-17,-10,-8,-4,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf)
			if (cnt==m) {yright[k]=j; lf=false; k++;}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])+10) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

