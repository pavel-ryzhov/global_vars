#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;

float weights_input_0[] = {-0.00116,-0.02982,-0.03425,-0.03077,-0.11638,-0.28750,-0.36254,-0.19638,0.09494,0.00273,-0.17090,-0.20002,-0.05846,0.12591,-0.04995,0.40058,0.01523,0.00356,-0.00139,-0.01797,-0.08235,-0.19805,-0.17620,-0.24341,-0.12183,0.25518,0.01410,0.00477,0.06388,0.07121,0.12358,-0.12159,-0.10225,0.40585,0.03020,0.01329,-0.01253,-0.03807,-0.09328,-0.05958,-0.23369,-0.36884,0.00777,0.07856,0.26466,-0.01886,0.04852,-0.17600,-0.08054,-0.12949,0.16117,0.11803,0.01517,0.03402,-0.01774,-0.01182,0.01913,0.08900,-0.18664,0.27631,0.34974,0.19119,-0.03711,0.22069,-0.11761,-0.37178,-0.27936,-0.12384,0.07611,0.06137,0.01334,0.01106,-0.01175,-0.00958,-0.02870,0.09569,0.13388,0.26918,0.12092,0.18727,-0.05155,-0.32202,-0.13552,-0.51825,-0.22830,-0.07125,-0.06043,0.06768,0.01729,0.01455,-0.01037,-0.00088,0.03819,0.17137,0.30609,0.26117,0.41485,0.19709,-0.04429,-0.35549,-0.60399,-0.63953,-0.42381,-0.26690,-0.07372,-0.01065,0.04436,0.01266,-0.00228,-0.03848,0.06985,0.24527,0.61445,0.88423,0.52048,0.53183,-0.10328,-0.07552,-0.20478,-0.37423,-0.35567,-0.32170,-0.14625,0.01019,0.06061,0.02021,-0.00353,-0.03610,0.09472,0.30883,0.55408,0.45068,0.52524,0.43036,0.38840,0.17757,0.33088,-0.03237,-0.15332,-0.18716,-0.05946,0.04901,0.06134,0.02690,0.02191,-0.01343,0.01353,0.19098,0.40645,0.31627,0.05990,0.13985,-0.00654,0.04771,-0.00290,0.04056,-0.36509,-0.10991,0.18695,0.11159,0.09332,0.03146,0.01979,-0.01253,-0.00044,0.05994,0.12557,0.18751,0.37278,0.06369,-0.10566,-0.24658,-0.10465,-0.21500,0.19449,0.34398,0.26826,0.15106,0.08522,0.03011,0.02055,-0.01527,-0.04158,0.10091,0.16701,0.38428,0.56287,0.52360,0.40270,0.10790,0.22403,-0.09902,0.02955,0.37031,0.32325,0.12529,0.14771,0.05569,-0.00816,-0.05130,-0.16416,0.09220,0.00078,0.23814,0.24604,0.20550,0.00256,-0.23397,0.06124,0.07742,0.18482,0.23062,0.18252,-0.13980,0.03542,0.05670,0.00189,-0.08120,-0.22629,-0.07880,-0.16681,-0.03462,-0.16169,-0.27423,-0.59235,-0.65920,-0.09331,0.15269,0.08347,0.10650,-0.00712,-0.20098,0.09499,0.04548,-0.01921,-0.04292,-0.25794,-0.10779,-0.23783,-0.30379,-0.11854,-0.27766,-0.38699,-0.42119,-0.03257,0.15860,0.00283,0.16929,-0.02739,-0.18054,0.05079,0.01601,-0.03817,-0.04653,-0.27873,-0.01525,-0.32205,-0.35599,-0.15185,0.11110,-0.00584,-0.08767,-0.12077,-0.03205,-0.01264,0.19220,-0.21429,-0.14569,0.01381,-0.00662,-0.01706,-0.03768,-0.23890,-0.12971,-0.18985,-0.07817,-0.17848,-0.08018,-0.06164,-0.46968,0.05641,-0.32153,-0.06684,0.04650,0.04076,-0.13348,-0.04163,0.01253,-0.00066,-0.03018,-0.26429,-0.41768,-0.10202,0.17902,0.32583,0.25784,0.03866,-0.19931,-0.29676,-0.21008,-0.27949,-0.08464,-0.25089,-0.09870,-0.00104,0.02091,-0.00539,0.00413,-0.16639,-0.08972,0.04192,-0.03983,-0.01028,0.17002,0.08067,-0.16795,-0.07118,-0.31253,-0.22561,-0.20915,-0.34566,-0.16119,-0.00096,-0.00040,-0.06759,};
float weights_input_1[] = {0.01684,0.02049,0.01481,0.10351,0.30911,0.32602,0.32153,0.10341,-0.10303,0.09353,0.02800,0.07054,0.22914,0.27555,0.22575,0.14645,0.10520,0.03828,0.01612,-0.02741,0.07724,0.13045,0.22544,0.17519,0.08270,0.04589,0.08367,0.13269,0.01169,-0.05352,0.07819,0.29043,0.33657,0.19432,0.00358,0.03928,-0.05055,-0.05778,0.04364,0.04090,0.12537,0.02413,0.21707,0.08671,0.41926,0.37611,-0.00268,-0.16702,-0.06752,0.15332,0.33277,0.15493,0.02757,-0.05649,-0.06171,0.00962,-0.00956,0.03556,0.04640,-0.01411,0.05976,0.17550,0.27500,0.25397,0.02739,-0.13233,-0.04733,0.08421,0.17676,0.04663,0.03995,-0.03117,-0.04233,0.00992,-0.00349,-0.00323,0.06819,-0.00588,-0.19794,-0.16418,0.00039,-0.00803,-0.01176,-0.03684,0.03965,-0.02663,-0.03297,0.00637,0.01459,-0.05677,-0.05059,0.01227,0.00615,-0.01915,0.01143,-0.13352,-0.36529,-0.29642,-0.11321,0.20139,0.10346,0.07945,-0.05469,-0.16365,-0.09548,-0.02228,-0.00581,-0.05637,-0.04938,0.01925,0.00913,0.05839,-0.01983,-0.15910,-0.32129,-0.22430,0.06070,0.16963,0.03960,0.18486,-0.01458,-0.26090,-0.13369,-0.05164,-0.00479,-0.05731,-0.04915,0.00929,-0.00167,0.00425,-0.09161,-0.17482,-0.30873,-0.37326,0.05607,0.13186,0.25960,0.07420,-0.20094,-0.22971,-0.11708,-0.01448,0.01229,-0.04017,-0.05008,0.00914,0.00086,0.00662,-0.11469,-0.21267,-0.32362,-0.23714,-0.07928,0.06903,0.13050,-0.00129,-0.19737,-0.20348,-0.11878,-0.01581,-0.00880,-0.05846,-0.04971,0.01041,0.00110,-0.04940,-0.16737,-0.18298,-0.31889,-0.33900,0.07996,0.16853,-0.00340,-0.08438,-0.19034,-0.17643,-0.08589,-0.02972,-0.00068,-0.01168,-0.05835,0.00113,-0.03470,-0.08247,-0.15568,-0.24035,-0.24690,-0.27164,0.30360,0.06863,-0.10688,-0.06130,-0.16513,-0.14991,-0.07957,-0.02430,0.03913,-0.00840,-0.04504,-0.00556,-0.04738,-0.09789,-0.12104,-0.27469,-0.37881,-0.05434,0.15973,0.16773,0.13458,-0.00101,-0.27302,-0.16314,-0.08332,-0.03265,0.02661,-0.01591,-0.08192,-0.05164,-0.07625,-0.12071,-0.29816,-0.38619,-0.37810,-0.24356,-0.03894,0.18990,0.20007,0.04332,-0.33347,-0.30305,-0.18930,-0.04199,0.03304,-0.01457,-0.08253,-0.01293,-0.06878,-0.08389,-0.28254,-0.27190,-0.19532,-0.12670,0.09019,0.19652,0.08218,-0.12716,-0.28841,-0.33557,-0.21588,-0.09094,-0.02831,-0.01473,-0.04833,-0.02367,-0.07736,-0.18168,-0.22389,-0.26507,-0.42506,-0.00467,0.11348,0.21798,0.12246,-0.10198,-0.21540,-0.26581,-0.28951,-0.10925,-0.07443,-0.12434,-0.05102,-0.07683,-0.09514,-0.14713,-0.23638,-0.33069,-0.31438,-0.07047,-0.02481,0.07355,-0.07119,-0.14075,-0.20858,-0.24437,-0.18870,-0.07957,0.00881,-0.05481,0.00183,-0.07515,-0.13075,-0.10339,-0.10987,-0.10832,-0.09062,0.02455,-0.15133,-0.22694,-0.21094,-0.24762,0.01710,0.05990,0.02648,0.02152,0.01776,-0.05093,0.00173,-0.03210,-0.12396,-0.15893,-0.18111,-0.03280,-0.07403,-0.12640,-0.20550,-0.17623,-0.16226,-0.15113,0.03293,0.08855,0.09807,-0.01120,0.01158,-0.00000,-0.00235,};
float weights_input_2[] = {-0.00122,-0.01356,-0.01503,-0.10611,-0.26526,-0.16555,-0.14162,-0.03144,-0.21593,-0.24163,-0.44039,0.05557,0.12721,0.29341,0.21515,0.26203,-0.07003,0.00823,0.00079,-0.04119,-0.09982,-0.05146,-0.28770,-0.41639,-0.45125,0.00951,-0.27496,-0.49848,-0.57357,-0.07631,0.14181,0.02255,-0.05231,0.45368,-0.06455,-0.05091,-0.02873,-0.11047,-0.05029,0.02423,-0.23658,-0.32577,-0.23062,-0.05285,0.12142,-0.00924,-0.12837,0.14983,-0.07256,-0.27944,-0.13042,0.00509,-0.06824,-0.10460,-0.02938,-0.05648,-0.03475,-0.00742,-0.40199,0.03582,0.11216,-0.00311,0.13236,0.22054,-0.09849,-0.40008,-0.11171,-0.24324,-0.27327,-0.33042,-0.06342,-0.09133,-0.02554,-0.05846,-0.04881,0.25837,-0.00121,0.17860,0.10406,0.21264,0.08713,-0.07026,-0.32517,-0.49512,-0.35957,-0.35862,-0.64051,-0.41903,-0.20006,-0.10222,0.01663,-0.05653,0.07578,0.14766,0.11967,0.20437,-0.00491,-0.06735,0.07844,-0.03781,-0.63776,-0.65480,-0.51523,-0.97832,-0.79900,-0.55466,-0.25675,-0.12069,0.01587,-0.07387,0.04715,0.10456,0.29987,0.48456,0.09855,0.08112,0.00198,0.28709,0.06246,-0.50500,-0.71301,-0.83692,-0.70447,-0.47061,-0.16480,-0.12226,0.01613,-0.03233,0.02125,0.12932,0.30425,0.24732,-0.15319,0.16510,0.35541,0.27615,0.19836,-0.12143,0.11367,-0.03399,-0.16970,-0.23907,-0.19019,-0.19072,0.01907,-0.07506,0.03625,0.21669,0.30372,0.34633,0.13703,0.15524,-0.00468,0.04436,0.00458,0.47217,0.13018,0.42477,0.41451,0.24680,-0.12420,-0.11050,0.00673,-0.08569,0.01930,0.11445,0.14237,-0.05950,0.10783,0.06919,-0.00330,-0.11026,-0.22801,-0.15947,0.45244,0.36700,0.25434,0.28713,0.04573,-0.11232,0.11362,0.02532,0.05098,-0.06166,-0.01582,-0.17544,-0.30086,0.01694,-0.00192,-0.27571,-0.33589,-0.10024,0.23562,0.05205,0.16472,0.23836,0.19571,-0.05052,0.11645,-0.00393,-0.03807,-0.07959,-0.21641,-0.01856,0.03121,-0.16436,0.09912,-0.10455,-0.29714,-0.04233,0.41426,0.04007,0.10563,0.15282,0.14677,-0.04865,0.15428,-0.03867,-0.07632,-0.10386,-0.21817,0.00766,-0.01026,-0.17476,-0.05305,-0.04789,-0.19631,0.12419,0.35604,-0.08653,-0.03960,0.20191,0.11141,0.01568,0.14090,0.02455,0.00886,0.05649,-0.13841,0.03203,0.12117,0.06132,0.14332,0.08301,-0.19357,-0.04893,0.20641,0.08114,0.10221,0.33447,0.19195,0.08848,-0.05354,0.02867,0.00744,-0.09821,-0.38380,-0.20565,-0.08984,0.34753,0.40470,0.20970,0.03584,0.27129,0.13634,0.28937,-0.14375,0.01284,0.27492,0.01511,-0.02567,0.00164,-0.01731,-0.06534,-0.29424,-0.05370,-0.11870,0.08691,0.15485,-0.08662,0.04751,-0.13633,0.15597,0.34399,-0.07663,0.04303,0.23739,-0.02074,0.00134,-0.08080,-0.05111,-0.07014,0.08967,-0.15560,0.09184,0.08791,0.35757,0.14765,-0.23215,-0.11025,0.14822,0.02979,-0.04473,0.17495,0.01186,-0.08697,0.00178,0.06405,-0.07472,0.18301,0.44284,0.06836,0.14231,0.05563,0.12501,0.24571,-0.03671,0.11925,0.00787,0.14044,-0.14043,-0.11629,0.01244,-0.00004,-0.07045,};
float weights_input_3[] = {0.00557,0.00772,-0.00021,0.03771,0.06764,0.18037,0.07078,0.06103,-0.09368,0.10499,0.03509,-0.01306,0.06676,0.28369,0.05234,-0.05712,0.01261,0.00122,0.00634,-0.02850,0.04353,0.06286,0.21020,-0.00526,0.14427,-0.08239,0.17486,0.13304,0.00753,-0.08900,0.05620,0.26526,0.15810,-0.02619,-0.05804,-0.00183,-0.05560,-0.05030,0.05137,0.25843,0.01812,0.15786,0.00450,0.07509,0.19810,0.26852,0.23055,0.02791,0.02349,0.18488,0.11373,-0.03229,-0.02443,-0.07161,-0.04230,0.01242,-0.00470,0.11018,0.02715,-0.17206,-0.21074,0.09680,0.26940,0.26335,0.21026,0.16477,-0.00727,0.23702,0.06716,-0.09088,0.00368,-0.03780,-0.04579,0.01274,-0.08039,0.12926,-0.05411,-0.06932,0.05293,0.00741,0.09877,0.04449,0.12086,0.29152,0.14819,0.09472,-0.06263,-0.04453,0.00303,-0.03619,-0.04691,-0.00595,-0.05170,0.20410,0.06769,0.01285,0.05114,-0.16758,-0.14716,0.16665,0.06232,0.23671,0.21307,0.17836,-0.00808,-0.06021,-0.06480,-0.03985,-0.05035,0.00000,-0.05148,0.11783,-0.04030,0.00794,-0.33661,-0.23863,-0.05053,0.16374,0.00749,0.16708,0.10087,0.21512,-0.03541,-0.09972,-0.07991,-0.04252,-0.05169,-0.02226,-0.06944,0.05691,-0.11054,-0.22228,-0.45645,-0.44528,-0.14210,0.04472,-0.09103,0.02413,-0.00661,0.19542,-0.04526,-0.07697,-0.07370,-0.03806,-0.03355,-0.00686,-0.05556,0.05746,-0.33644,-0.26515,-0.37811,-0.29664,-0.25174,-0.02516,0.08597,0.05381,0.11996,0.18989,-0.06304,-0.13849,-0.08384,-0.04353,-0.03143,-0.00575,-0.06220,-0.13940,-0.17832,-0.18923,-0.50792,-0.31354,-0.17838,0.11470,-0.09169,-0.14032,-0.02474,0.05224,-0.26232,-0.16759,-0.08315,-0.02491,-0.06290,-0.03777,-0.22421,-0.19160,-0.08189,-0.12418,-0.28951,-0.13138,0.26691,0.32537,0.03259,-0.10850,-0.21507,-0.19632,-0.45020,-0.18412,-0.08539,-0.02802,-0.06201,-0.09564,-0.27990,-0.21439,0.12200,-0.02810,-0.00643,0.01497,0.31349,0.35458,0.01565,-0.29942,-0.30161,-0.31348,-0.41159,-0.24563,-0.09682,-0.02824,-0.09566,-0.15427,-0.33532,-0.27889,-0.23446,-0.18258,0.03863,0.04005,0.44053,0.30529,-0.22190,-0.47473,-0.41344,-0.43237,-0.41932,-0.20499,-0.05863,0.00679,-0.09803,-0.06918,-0.23091,-0.15690,-0.10783,-0.06460,0.22086,0.22792,0.15750,0.08706,-0.24773,-0.40143,-0.32878,-0.19985,-0.27903,-0.08549,0.07429,0.00575,-0.04954,-0.07986,-0.16677,-0.09140,-0.01707,0.11092,0.34238,0.18405,-0.00305,-0.06994,-0.03622,-0.20294,-0.05096,0.06292,0.00053,0.11307,0.01869,0.00057,-0.04658,-0.08116,-0.08876,0.04448,0.16731,0.15031,0.06629,0.05916,0.00175,0.10579,-0.12046,-0.19312,0.18344,0.23020,-0.00730,0.06486,0.00568,-0.03373,0.00167,-0.04893,0.03043,-0.00421,0.08361,-0.08979,-0.02218,0.01089,-0.17840,-0.19523,-0.03372,0.01931,0.32244,0.32679,0.17677,0.06881,0.03455,-0.03687,0.00685,0.02187,0.07684,0.07734,-0.03428,-0.12095,-0.12391,-0.28988,-0.29095,-0.06777,0.01188,0.14318,0.40027,0.41134,0.19943,0.05559,0.03333,0.00138,0.00427,};
float weights_input_4[] = {0.00383,-0.00917,-0.00926,0.03693,0.08060,-0.15892,-0.09753,-0.25105,-0.12279,-0.11489,0.11803,0.25399,0.03748,-0.08136,-0.11063,-0.08514,0.07278,0.00535,0.00421,-0.04322,0.04826,0.10539,-0.04339,-0.12079,-0.18325,-0.08256,-0.14578,-0.12380,0.00096,0.04550,-0.01139,0.01204,-0.07975,0.00738,0.03070,0.05516,-0.03478,0.00883,-0.00684,-0.01600,-0.14909,-0.20258,-0.24736,-0.20306,0.00098,-0.12790,-0.25488,-0.01434,-0.03832,0.13617,0.06456,0.14941,0.05942,0.04392,-0.03273,0.03910,-0.06963,-0.03797,-0.08177,-0.25667,-0.16077,-0.23252,-0.18508,-0.23185,-0.19847,-0.05736,-0.01613,0.22462,0.22421,0.15105,0.07546,0.00147,-0.04064,0.03860,0.00130,-0.11662,-0.07014,-0.19207,-0.18042,-0.06262,0.02737,-0.14480,-0.05836,0.04543,0.22270,0.31108,0.29230,0.11395,0.06930,-0.01533,-0.04065,0.04062,-0.00868,-0.09084,-0.01878,-0.12467,-0.07738,0.07222,0.23434,-0.01282,0.07229,0.14005,0.23967,0.21916,0.10756,0.00248,0.06814,-0.01571,-0.03589,0.03107,0.02771,-0.01419,0.02241,-0.22002,0.10614,0.04917,0.07312,-0.13897,0.07215,0.17280,0.24988,0.09726,0.00672,-0.04172,0.06816,-0.02428,-0.03798,0.04133,-0.00589,-0.04036,0.04943,0.09764,0.09471,0.07284,-0.02132,-0.23269,0.06001,0.09032,-0.06111,-0.20270,-0.07852,-0.07324,0.02012,-0.01290,-0.03898,0.07986,0.11061,0.09050,0.02792,-0.07939,-0.11877,-0.02690,0.18078,0.05550,0.11535,-0.15654,-0.29504,-0.30709,-0.09178,-0.09300,0.01769,-0.01320,-0.04417,0.06881,0.12405,0.34595,0.15204,0.05040,0.14211,0.16209,0.39542,0.23919,0.16910,-0.18679,-0.37396,-0.16067,-0.07871,0.01629,0.02794,-0.00822,-0.05355,0.06542,0.20953,0.48624,0.66643,0.47327,0.32471,0.14397,-0.09182,-0.17264,-0.23430,-0.12920,-0.08142,-0.03291,-0.03057,-0.08630,0.04723,-0.01289,-0.05895,0.07062,0.19863,0.60606,0.80345,0.93225,0.41618,-0.00652,-0.26624,-0.27025,-0.15681,-0.20017,-0.12274,-0.08833,0.02322,-0.14199,0.05331,-0.01506,-0.06375,0.08872,0.23988,0.46537,0.63928,0.69443,0.36573,0.36821,0.13689,-0.02612,0.01798,-0.14656,-0.06620,0.05580,0.11801,-0.05538,0.13215,-0.05303,-0.06579,0.05140,0.12577,0.22987,0.19208,0.31600,0.14730,0.25542,0.10649,0.01949,-0.01644,-0.05581,-0.01493,-0.00356,-0.01767,-0.06177,0.07262,0.01662,-0.04913,0.05081,0.06124,0.00677,-0.07229,0.11723,0.16105,0.11872,-0.06618,-0.12592,-0.25170,-0.05450,-0.06036,0.02064,-0.11287,0.06193,0.08815,0.00517,-0.03782,-0.01828,-0.03095,-0.17374,-0.32083,-0.05017,0.30748,0.33080,0.03964,-0.11997,-0.18951,-0.09529,-0.04810,-0.09008,0.01553,0.20701,0.04931,-0.03572,-0.00122,-0.00284,-0.07737,-0.20723,-0.46464,-0.28926,-0.10324,-0.08624,-0.08491,-0.05738,0.10912,0.18594,-0.02441,-0.02679,0.18524,0.12875,-0.00106,0.01389,-0.00028,-0.01460,-0.09342,-0.23379,-0.35973,-0.46181,-0.28582,-0.08453,0.09755,0.07537,0.20076,0.23114,0.05670,0.08761,0.11532,0.00242,-0.00108,0.00079,-0.15781,};
float weights_input_5[] = {-0.00048,-0.09233,-0.12459,-0.00505,-0.08323,-0.26792,-0.21660,-0.18579,-0.15653,-0.25849,-0.13761,0.03094,-0.07141,-0.02956,0.01109,0.17103,0.07123,0.00078,0.00110,-0.11643,-0.05136,0.00966,-0.24352,-0.33105,-0.32954,0.02168,-0.36554,-0.27467,-0.09011,0.00723,-0.09221,-0.05437,-0.09971,0.08074,0.03547,0.09241,-0.02395,-0.02492,-0.11642,-0.06056,-0.33720,-0.42691,-0.27971,-0.28531,0.04482,-0.13580,-0.24469,0.06388,0.02007,-0.05544,-0.00303,-0.02299,0.06650,0.14033,-0.02342,0.08382,-0.07022,-0.01916,-0.17769,-0.10507,-0.02904,-0.29036,0.01157,-0.10453,-0.18425,-0.30015,-0.11430,0.06030,-0.04600,0.00362,0.06854,0.04121,-0.02847,0.08132,0.04245,-0.11584,-0.00077,-0.01120,-0.03830,0.07437,0.20359,-0.10719,-0.00259,-0.21102,0.14698,0.07728,0.07139,-0.03610,-0.00357,0.00327,-0.02929,0.10146,0.03437,-0.04374,0.08841,-0.02653,0.04546,0.20884,0.43994,-0.14166,-0.09107,-0.13378,-0.02423,-0.05822,-0.00964,-0.10838,0.07411,-0.00020,-0.00898,0.00657,0.09338,0.07254,0.19171,0.02667,0.30516,0.48216,0.33849,-0.05129,0.06737,-0.12434,0.00936,-0.19929,-0.08574,-0.15406,0.08585,-0.00489,-0.00893,0.01588,-0.00623,0.06513,0.19185,0.43310,0.35791,0.43694,0.13511,-0.26465,-0.02217,0.04414,-0.15761,-0.23496,-0.10055,-0.17469,0.07104,0.01408,-0.00751,0.07553,0.07397,0.06543,0.20046,0.08097,-0.02347,-0.10770,0.13645,0.00513,0.04810,-0.20877,-0.51227,-0.36040,-0.06125,-0.14835,0.08275,0.02412,-0.03806,0.04094,0.08300,0.37573,0.11647,0.10145,0.27766,0.04701,0.18369,-0.09476,0.00046,-0.40006,-0.41338,-0.11643,0.00034,-0.04274,0.10445,0.02110,-0.03739,0.04371,0.20703,0.53587,0.62444,0.47927,0.36307,0.13798,-0.13860,-0.34471,-0.38010,-0.20563,-0.07364,-0.06728,0.06758,-0.09333,0.13456,0.02063,-0.04761,0.06202,0.19096,0.68493,0.70420,0.86214,0.29470,-0.02509,-0.49018,-0.53409,-0.23650,-0.03513,0.08997,-0.09325,0.14030,-0.15097,0.13795,0.02045,-0.03453,0.09320,0.22683,0.45406,0.70484,0.64127,0.33535,0.32725,-0.10673,-0.29701,0.08390,0.11413,0.05679,0.15540,0.21855,-0.02777,0.17794,-0.05497,-0.04513,0.05585,0.07660,0.14559,0.37146,0.29570,0.06255,0.23911,0.03426,-0.03229,0.09528,0.20958,0.03199,0.07352,0.09528,-0.00206,0.04954,0.00378,-0.05902,0.04146,-0.03857,-0.03241,0.03220,-0.06107,-0.10567,-0.01236,-0.13885,-0.02807,-0.14507,0.03572,0.04661,0.11423,-0.05263,0.03001,0.06823,0.01633,-0.02648,-0.00077,-0.16415,-0.24408,-0.18178,0.02727,0.22857,0.25638,0.08445,-0.22625,-0.03478,-0.15769,-0.00463,0.00405,0.10992,0.20730,0.00355,-0.01981,0.00043,-0.01324,-0.25410,-0.30242,-0.37232,-0.31274,0.04330,-0.11272,0.02848,0.15166,0.09697,0.25820,0.05426,0.02436,0.20436,0.00203,-0.00485,0.06349,-0.00202,0.00354,-0.16291,-0.15180,-0.12159,-0.31440,-0.32819,-0.03704,0.29137,0.28946,0.20726,0.21108,0.05869,0.07467,0.02852,-0.03814,-0.00434,-0.00198,-0.28622,};
float weights_input_6[] = {-0.00034,-0.00397,-0.00139,0.00985,-0.12908,-0.06412,-0.21120,0.04002,0.26837,0.27660,0.24634,0.06782,-0.03291,-0.18162,-0.10477,-0.38144,-0.25262,-0.03952,-0.00223,0.09370,-0.00941,-0.10556,-0.09641,-0.13964,0.06944,-0.23336,0.03736,0.14920,-0.02256,-0.06432,-0.20480,-0.29219,-0.35941,-0.35029,-0.10420,-0.04198,0.08213,0.08710,-0.00250,0.00631,-0.16015,0.08472,0.12765,0.00645,0.04122,0.03229,0.22957,-0.04798,0.18881,-0.20286,-0.30503,-0.30654,-0.15047,0.09822,0.08427,-0.01511,0.03475,-0.05058,-0.02780,0.02195,-0.15008,-0.20995,0.11553,-0.25010,-0.17576,0.00251,0.20697,-0.05201,-0.17529,0.06846,-0.07024,0.13757,0.08092,-0.01574,0.01577,0.03963,-0.09534,0.18668,0.01139,0.02765,0.00787,0.05509,0.13114,0.08218,0.12986,-0.01339,0.03722,0.15990,0.25304,0.17126,0.04628,-0.01172,-0.00990,0.16332,0.11193,0.09126,0.09833,0.17569,0.09321,-0.04406,0.21202,0.30505,0.12473,0.15772,0.25485,0.28800,0.40181,0.19022,0.05186,-0.00847,0.05158,0.12099,0.00240,0.20434,-0.05239,0.00942,-0.41380,-0.28343,-0.25116,-0.20547,-0.00182,0.43588,0.37687,0.27746,0.35162,0.19886,0.05124,-0.04466,0.09823,0.41976,0.06425,0.17958,-0.00225,-0.34015,-0.64616,-0.54667,-0.82688,-0.51164,-0.22306,0.21908,0.44208,0.38721,0.37955,0.31670,0.06860,0.00043,-0.02258,0.37826,0.29574,0.52745,0.07620,-0.35901,-0.51093,-0.70303,-0.53049,-0.37909,0.11422,0.41783,0.62093,0.35137,0.33720,0.24614,0.06988,0.00210,-0.02184,0.31174,0.01880,0.13576,-0.11303,-0.38196,-0.49193,-0.51655,-0.34830,-0.18361,0.09082,0.20174,0.44859,0.06690,0.16472,0.24419,0.08711,0.01678,-0.02379,0.04367,-0.24496,0.06600,-0.11209,-0.02535,0.08410,0.13578,-0.22540,-0.48336,-0.29508,-0.08847,-0.35449,-0.15931,-0.00839,0.20080,0.06674,-0.01528,-0.01937,-0.03401,-0.20501,-0.15323,0.19383,0.18973,0.09370,-0.09155,-0.38606,-0.43561,-0.27395,-0.25126,-0.49095,-0.16350,-0.05076,0.20405,0.02831,-0.03361,-0.04983,0.06605,-0.22438,0.07406,0.22248,0.29394,0.07401,-0.21195,-0.09421,-0.18643,-0.26126,-0.29411,-0.45809,-0.21525,-0.04373,0.14641,0.02991,-0.03508,-0.10302,-0.05952,-0.28998,0.05891,0.21316,0.23594,0.16637,-0.12855,0.19433,0.08543,0.02201,-0.14922,-0.35872,-0.19716,-0.10736,-0.05663,0.08432,-0.02973,-0.08611,-0.25969,-0.12742,0.12822,0.39250,0.27164,0.14687,0.09629,0.27379,-0.02269,-0.04148,-0.17056,-0.04856,-0.19046,-0.22986,0.03506,0.08151,0.02656,-0.06017,-0.12563,0.14080,0.36976,0.36052,0.04523,0.10688,0.10064,0.33600,0.02215,0.14103,-0.27488,-0.11600,-0.16678,-0.13425,0.09824,-0.00332,0.09646,0.00876,-0.07526,0.20545,0.20434,0.38295,0.21310,0.01820,0.27377,0.21664,0.18929,-0.10533,-0.25826,0.05195,-0.23261,-0.01119,0.09962,-0.00099,0.02826,0.17366,0.18509,0.11312,0.40803,0.05706,-0.02875,0.09371,-0.00053,-0.03057,-0.10736,-0.00819,0.01552,0.21207,0.05991,-0.01022,0.00100,0.17439,};
float weights_input_7[] = {-0.00174,0.00937,0.02465,-0.10633,-0.29289,-0.23813,-0.17743,-0.03789,0.16839,0.09480,0.22251,0.05207,0.01674,-0.30677,-0.25871,-0.37228,-0.22896,-0.02017,-0.00159,0.04002,-0.03444,-0.00638,-0.19595,-0.16930,0.02453,-0.11239,0.11794,0.22230,0.13500,0.01963,-0.15153,-0.22968,-0.20014,-0.32100,-0.11193,-0.04786,0.02737,0.02862,-0.00573,0.03253,-0.17179,-0.13114,0.16262,-0.09234,-0.16584,-0.00179,0.21014,0.07935,0.10222,0.00193,-0.23159,-0.22625,-0.11046,0.03337,0.03806,-0.02767,0.02440,-0.01768,0.04027,-0.04075,-0.04972,-0.14847,-0.16506,-0.22267,0.01058,0.15161,0.10451,0.02782,0.00873,0.03494,-0.07235,0.08427,0.02575,-0.03080,0.02727,0.00789,-0.10895,0.02787,-0.04067,-0.06766,-0.21657,0.06180,0.24516,0.16471,0.18550,0.12761,0.21444,0.10092,0.14150,0.10390,-0.00857,-0.03325,-0.01004,0.03012,-0.02317,-0.03477,0.08241,0.15447,0.11251,0.11990,0.47274,0.27560,0.22317,0.23478,0.26996,0.20371,0.29648,0.11066,-0.00607,-0.01864,0.03411,0.04964,-0.08516,-0.02601,0.01303,-0.01945,-0.32865,-0.29221,0.04427,-0.08635,0.19718,0.37907,0.28170,0.21230,0.25120,0.11188,-0.00359,-0.04193,0.08998,0.27401,0.02585,0.08401,0.01832,-0.14996,-0.62806,-0.45086,-0.53282,-0.41088,-0.21571,0.11177,0.30666,0.28171,0.27418,0.19914,-0.00407,-0.00152,0.07375,0.24097,0.33278,0.44027,0.21615,-0.28593,-0.36774,-0.55029,-0.42088,-0.25253,-0.00260,0.28432,0.30053,0.19787,0.19953,0.14427,-0.00751,-0.00252,0.08202,0.45887,0.17535,0.12099,-0.01431,-0.30331,-0.30129,-0.19016,0.01433,-0.03608,-0.00731,-0.01183,0.29449,0.04120,0.08698,0.14002,-0.02914,-0.02645,0.10736,0.19338,-0.08109,0.09866,-0.14502,-0.18658,-0.36709,-0.11633,0.05831,-0.19913,-0.27438,-0.17174,-0.22738,-0.13735,-0.06636,0.06390,-0.03591,-0.02420,0.14727,0.12848,-0.04548,0.00384,0.03730,0.08142,-0.16285,-0.11531,0.10751,-0.14137,-0.25981,-0.31644,-0.34369,-0.14689,-0.08129,0.06665,-0.04915,0.01691,0.17418,0.29651,0.12126,0.23466,0.24150,0.36094,0.12184,0.13064,0.39578,0.05772,-0.12796,-0.06714,-0.08005,-0.13745,-0.11626,0.00438,-0.04501,-0.01887,0.11838,0.19936,-0.01874,0.15741,0.10668,0.15876,0.06123,0.06852,0.48454,0.32488,0.09259,-0.03652,-0.08826,-0.08009,-0.12979,-0.06697,0.03668,-0.01895,0.02268,-0.12865,-0.15820,-0.01559,0.03001,-0.07738,-0.20014,-0.06642,0.48104,0.18477,-0.12055,-0.28167,0.02241,-0.12116,-0.21161,0.06621,0.02682,-0.00574,0.02468,-0.03583,-0.02150,0.02089,-0.08529,-0.32400,-0.19219,0.01259,0.46170,0.16716,-0.04741,-0.32938,-0.12230,-0.15532,-0.15997,0.03667,-0.00177,0.02492,0.07914,0.01822,0.04979,-0.02893,-0.12027,-0.29460,-0.19282,0.13375,0.35969,0.20642,-0.03178,-0.19038,0.07814,-0.24524,-0.01718,0.00309,0.00103,0.01936,0.10227,0.09326,0.04390,0.15939,-0.11031,-0.17365,-0.12618,-0.07797,0.21591,0.20327,0.00569,0.02496,0.28033,0.01227,-0.01697,0.00217,-0.21103,};
float weights_input_8[] = {-0.00288,0.07664,0.07349,-0.17995,-0.31745,-0.14036,-0.10493,0.02567,-0.16334,-0.25342,-0.19570,-0.09228,0.22082,0.05727,-0.20970,-0.23567,-0.06239,0.00050,-0.00303,0.01461,0.01173,-0.07435,-0.31332,-0.03506,0.01040,-0.06732,-0.06258,-0.08501,-0.07841,-0.07452,-0.17746,-0.05854,-0.23022,-0.32588,-0.18602,-0.00805,-0.02464,0.03772,0.01903,-0.04654,-0.15013,-0.12783,0.13135,-0.05856,-0.29791,-0.08303,0.06545,0.11786,0.02390,-0.05728,-0.35338,-0.24722,-0.07731,-0.10619,-0.02525,0.02641,-0.05489,-0.10849,-0.19539,0.08831,0.15046,0.06927,-0.23097,0.03866,0.15664,0.00711,0.00597,-0.22795,-0.19279,-0.19760,-0.10845,-0.09774,-0.02284,0.02556,0.01955,-0.17570,-0.19970,0.00717,0.11400,-0.21729,-0.20789,0.06778,0.28778,0.02724,-0.18512,-0.07090,-0.24802,-0.16496,-0.17298,-0.09871,-0.02627,0.02333,-0.02954,-0.27858,-0.23127,0.10857,-0.08525,-0.01089,0.04830,0.48842,0.25171,-0.06770,0.04686,0.09968,-0.10554,-0.02067,-0.13024,-0.10100,-0.02978,0.09587,-0.10652,-0.19949,-0.15371,-0.00518,-0.09261,0.06739,0.32334,0.54987,0.27443,0.08679,0.30910,0.05617,-0.16258,-0.01947,-0.14586,-0.10444,-0.02747,0.09311,-0.09007,-0.24177,-0.45304,-0.17986,-0.11450,0.07014,0.28813,0.33344,0.12967,0.01606,-0.02371,0.16296,-0.34398,-0.09815,-0.10712,-0.11203,-0.06711,0.02676,-0.00563,-0.19130,-0.37604,-0.29863,0.00739,0.10293,0.55224,0.56967,0.14945,0.04916,-0.03398,-0.17458,-0.42845,-0.21018,-0.10744,-0.11218,-0.06608,0.02656,-0.00363,-0.10582,-0.14329,0.00923,-0.22328,-0.04342,0.31901,0.47820,0.21755,0.21834,0.11940,-0.07302,-0.14576,-0.18981,-0.11056,-0.11551,-0.08118,0.01315,0.00560,-0.04419,-0.07501,-0.24566,-0.39714,-0.39444,-0.52797,-0.32809,-0.02210,0.08941,0.24428,0.22609,0.14723,0.12509,-0.14186,-0.11972,-0.03757,0.07144,0.11800,0.17330,-0.14574,-0.47126,-0.68728,-0.30286,-0.38230,-0.16426,0.09713,0.09769,0.16483,0.36490,0.22367,0.41671,-0.05534,-0.12071,-0.03243,0.10001,0.15874,0.28991,0.19312,-0.24204,-0.44475,-0.13218,-0.19727,0.03208,0.29171,0.28907,0.25461,0.35317,0.21678,0.40695,-0.13786,-0.08821,-0.02730,0.11017,0.21666,0.49139,0.41289,-0.21471,-0.30414,-0.11303,-0.16060,0.08215,0.21145,0.22002,0.19726,0.15814,0.21384,0.31024,-0.18144,-0.05909,-0.01346,0.10232,0.14432,0.35626,0.20156,-0.22578,-0.55536,-0.21374,-0.13260,-0.01283,0.24493,0.07973,0.14225,-0.00822,0.10877,-0.02458,-0.16428,-0.12122,-0.01925,0.07785,0.16615,0.35158,-0.08640,-0.34664,-0.46734,-0.27363,-0.35035,-0.08470,0.01264,0.10658,0.03673,0.17461,-0.01227,-0.04068,-0.07256,-0.05912,-0.00070,0.01828,0.12995,0.17622,0.01274,-0.13847,-0.27857,-0.18734,0.00539,0.07192,0.14492,-0.09275,0.33895,0.28261,0.08032,0.01555,0.00555,-0.07284,0.00162,-0.01445,-0.08878,-0.04802,0.03811,0.18700,0.07940,-0.10625,-0.37727,0.09712,0.19600,0.15791,0.36743,0.21703,0.07220,0.08129,0.00591,-0.00023,0.01537,};
float weights_input_9[] = {-0.00062,0.00085,-0.00287,-0.16305,-0.34333,-0.60744,-0.58851,-0.61580,-0.28392,-0.04999,-0.04642,0.25576,0.11532,-0.12613,-0.15984,-0.11961,-0.09575,0.00176,0.00127,-0.03784,-0.10419,-0.01572,-0.25528,-0.59640,-0.74588,-0.21904,-0.28332,-0.34324,-0.35882,-0.06887,-0.02808,0.06080,-0.15214,0.13550,-0.10899,-0.08179,-0.03862,-0.12164,-0.01649,-0.02133,-0.27931,-0.32559,-0.19256,-0.25443,-0.13435,0.05853,-0.15152,0.14023,-0.23181,-0.19409,-0.08567,0.07278,-0.10465,-0.18886,-0.03901,-0.08142,-0.02852,-0.02765,-0.18349,-0.01519,-0.19509,-0.02609,-0.09206,0.21295,0.31011,-0.10961,-0.12480,-0.17202,-0.18526,-0.06609,-0.02901,-0.10201,-0.03532,-0.08116,-0.03511,0.10010,0.18938,0.09652,-0.24643,-0.08380,0.07940,0.32769,0.17065,-0.16496,0.00749,-0.14845,-0.29479,-0.22055,-0.07385,-0.10467,0.00538,-0.08300,0.08123,0.05688,0.09640,0.03913,-0.25699,-0.17956,0.00781,0.46507,-0.04755,-0.43839,-0.24757,-0.56473,-0.58450,-0.42157,-0.13797,-0.12686,0.00277,-0.08113,0.09327,0.20012,0.15012,0.05123,-0.16614,-0.19595,0.00700,0.50027,0.23660,-0.39979,-0.55106,-0.63558,-0.62738,-0.38016,-0.06614,-0.12825,0.00502,-0.03996,0.07887,0.21142,0.47288,0.23472,-0.06250,0.01221,0.44073,0.52282,0.16359,0.00418,0.04747,-0.30929,-0.15100,-0.22019,-0.13506,-0.13378,0.00372,-0.04856,0.11739,0.32651,0.52963,0.37069,0.17755,0.15637,0.13062,0.15591,0.10892,0.46215,0.31089,0.27848,0.21286,0.15509,-0.13164,-0.06609,0.00325,-0.04919,0.11596,0.45702,0.41452,0.17287,0.28802,-0.01671,-0.14186,-0.23358,0.08987,0.17542,0.30635,0.25188,0.07822,0.33492,0.04624,-0.06280,-0.01965,-0.07058,0.06635,0.27341,0.27826,0.22207,0.11227,0.12137,-0.06169,-0.06612,0.06696,-0.00070,0.08169,0.10903,0.05624,0.09630,0.12461,-0.06221,-0.01543,-0.07782,0.02918,0.02926,0.10147,0.35083,0.23788,-0.20935,-0.00645,0.19698,0.21936,-0.03186,0.10245,-0.01095,0.02913,-0.03120,0.10030,-0.06427,-0.01823,-0.11474,0.02793,-0.05396,-0.08446,0.18450,0.05253,-0.15096,0.01737,0.37108,0.40749,0.02536,0.07613,0.06090,0.05952,0.05058,0.09507,0.00248,-0.01961,-0.09874,-0.02891,-0.13741,-0.32457,0.01505,-0.03624,-0.02435,0.08486,0.37663,0.17030,-0.06079,0.06414,0.03291,-0.06255,0.13697,0.16864,0.07183,-0.03541,-0.10387,-0.05621,-0.27624,-0.51939,-0.26492,-0.19017,-0.03370,0.07906,0.18830,0.18201,0.14132,-0.12124,-0.10568,-0.47115,0.06140,0.18626,0.00429,-0.03620,-0.12475,-0.16973,-0.27939,-0.38853,-0.22816,-0.00790,-0.03374,-0.01955,0.04277,0.07328,-0.06846,-0.04987,-0.00362,-0.17205,0.12149,0.21257,-0.03458,0.00119,-0.14598,-0.07066,-0.22246,-0.22601,-0.16095,-0.02225,-0.03558,0.08581,0.00476,-0.06572,-0.26129,0.24200,0.14936,0.20714,0.21827,0.01116,-0.12074,-0.00036,-0.00978,-0.08571,0.07128,0.24761,-0.13944,0.05048,0.02221,-0.10146,0.15921,0.42681,0.52235,0.36702,0.47227,0.27047,-0.05948,0.01143,0.00115,-0.06051,};
float weights_input_10[] = {0.00059,-0.00583,-0.01240,-0.14391,-0.34735,-0.31901,-0.32023,-0.10048,-0.21655,-0.14550,-0.03689,-0.17329,-0.20720,-0.19688,-0.27077,-0.18170,-0.09031,-0.02675,0.00254,-0.04814,-0.04089,0.00957,-0.15371,-0.31534,-0.13327,-0.33665,-0.02658,-0.04752,-0.03236,-0.21303,-0.25211,-0.14336,-0.13409,-0.19646,-0.12307,-0.04300,-0.04810,-0.05721,0.00030,0.14994,-0.10488,-0.13920,-0.35590,-0.26585,-0.27250,-0.02062,-0.04302,0.13751,-0.20676,-0.06312,-0.14951,-0.11836,-0.05470,-0.09515,-0.03125,-0.00817,-0.03798,0.05268,-0.01704,-0.31769,-0.33274,-0.14588,0.00785,-0.04294,0.19789,0.13357,-0.11911,0.14917,-0.11508,-0.12565,-0.01960,-0.05599,-0.04867,-0.01017,-0.03551,0.09345,0.01933,-0.00996,0.05655,0.09068,0.00741,0.21708,0.18162,0.23608,0.18319,0.07352,0.00864,-0.05157,-0.03971,-0.03667,-0.05017,-0.02771,-0.02882,0.10671,0.03634,0.03441,0.37553,0.09216,0.07562,0.31022,0.28655,0.14390,0.19242,0.19059,0.13758,-0.02839,-0.05492,-0.04553,-0.05087,-0.03129,-0.04245,0.03945,-0.08242,-0.08142,-0.09132,-0.08602,0.04164,0.18652,0.25397,0.08841,0.13882,0.32503,0.04532,0.00040,-0.07689,-0.04743,-0.05160,-0.03638,-0.08070,0.03046,-0.05321,0.01805,-0.31905,-0.22330,-0.33549,-0.13689,-0.20509,0.08215,0.13625,0.15175,0.01369,-0.05511,-0.07796,-0.07932,-0.04777,-0.03165,0.06026,0.04327,-0.08675,-0.09344,-0.18492,-0.36627,-0.32566,-0.12363,-0.07582,0.13990,0.11664,0.19512,-0.07797,-0.15601,-0.11189,-0.08599,-0.04714,-0.03075,0.06409,0.19886,0.08496,-0.02514,-0.11463,-0.04894,-0.12939,-0.00034,0.08361,0.08069,0.04886,0.02920,-0.17037,-0.08968,-0.10181,-0.08609,-0.08813,-0.07151,0.05502,0.10675,0.07690,-0.00334,-0.20800,0.03598,0.01154,0.37295,0.26601,-0.00779,-0.17649,-0.18410,-0.31572,-0.10299,-0.15920,-0.11950,-0.08937,-0.08311,0.01523,0.11089,0.15624,0.02762,0.02815,0.06116,0.16617,0.46184,0.31151,-0.14682,-0.26070,-0.46905,-0.38110,-0.20015,-0.14702,-0.11846,-0.10433,-0.07747,0.03204,0.05434,0.08920,0.11073,0.27161,0.36275,0.61442,0.62098,0.18008,-0.34147,-0.28280,-0.22695,-0.01672,-0.13973,-0.14991,-0.10619,-0.09720,-0.07263,-0.01254,-0.06142,0.06586,0.18933,0.07777,0.22392,0.10732,0.32210,0.08752,-0.14596,-0.27041,-0.09602,-0.01710,-0.00602,0.03663,0.02994,-0.04249,-0.07694,-0.06387,-0.09423,-0.04461,0.04572,0.00788,-0.27350,-0.22113,-0.05260,0.15411,-0.04478,-0.20424,-0.06076,0.24060,0.18531,0.07051,0.17919,-0.04491,-0.08959,-0.05446,0.00955,0.22441,0.11739,-0.01885,-0.25921,-0.05047,0.17544,0.22465,-0.02530,0.17825,0.18524,0.16549,0.20070,-0.03408,-0.03794,-0.00131,-0.06546,0.11817,0.02197,0.00286,-0.11063,-0.23263,-0.43035,-0.32933,-0.06311,0.19294,0.21358,0.36993,0.27055,0.36445,-0.00607,0.00828,-0.06251,0.00329,0.05921,0.11725,0.16514,0.16536,-0.13411,-0.11590,-0.36485,-0.41225,0.03802,0.36490,0.60309,0.45729,0.47121,0.39769,0.01854,0.01051,0.00001,-0.12507,};
float weights_input_11[] = {0.00538,0.00469,0.00072,0.02126,0.20479,0.17303,0.22811,0.04003,-0.19127,-0.06586,-0.00795,0.13373,0.29187,0.25289,0.15898,0.17848,0.07594,0.04752,0.00609,-0.02615,-0.01194,0.13370,0.13144,0.03541,-0.03012,-0.04588,-0.01265,0.04695,0.00872,0.08818,0.13605,0.35226,0.35250,0.17324,0.04561,0.00869,-0.02829,-0.07705,0.00257,0.04109,0.06857,-0.18575,0.11588,-0.04977,0.26220,0.35223,-0.00208,-0.01743,0.00311,0.26566,0.33414,0.15104,0.03097,-0.05837,-0.04328,-0.04402,-0.02131,0.03392,-0.00132,-0.18828,-0.06484,0.06645,0.22580,0.24775,0.07473,-0.01953,0.05243,0.23538,0.24556,0.03940,0.03463,0.00409,-0.02700,-0.04387,-0.01245,-0.00911,0.00846,-0.12335,-0.31566,-0.16089,-0.11638,0.07282,0.05095,0.09444,0.24185,0.16688,0.04482,-0.02106,-0.00649,-0.01659,-0.02928,-0.03513,0.01330,-0.02557,0.03391,-0.22156,-0.31719,-0.07702,0.02231,0.22827,0.20482,0.13883,0.17916,-0.00368,-0.02497,-0.03397,-0.02108,-0.02515,-0.02924,-0.03364,0.01983,0.14358,0.05957,-0.09775,-0.12306,-0.17743,-0.01894,0.02092,0.09670,0.20205,0.17674,-0.11455,-0.13400,-0.03265,-0.01739,-0.02379,-0.03063,-0.03464,0.00454,0.10761,0.05804,0.12301,-0.15488,-0.17549,-0.25429,-0.12234,0.16905,0.06846,-0.14836,-0.19923,-0.18593,-0.07659,-0.01288,-0.03635,-0.02909,-0.03355,0.05371,0.04320,0.17737,0.11452,0.07236,-0.17764,-0.26444,-0.07910,0.11932,-0.00844,-0.12730,-0.08242,-0.21199,-0.12123,-0.08628,-0.04211,-0.02988,-0.03292,0.06119,0.14503,0.25317,0.27182,0.15351,-0.15980,0.00296,0.14386,0.10306,0.06577,-0.04943,-0.03347,-0.04473,-0.09787,-0.08048,0.00405,-0.07070,-0.07461,0.04038,0.13041,0.09322,0.20160,0.05706,-0.14689,0.10537,0.11575,-0.01567,-0.00702,-0.02160,0.00881,-0.06304,-0.03996,-0.05703,-0.06700,-0.07060,-0.07188,0.11439,0.10361,0.13156,0.08076,-0.18740,0.00646,0.10527,0.24323,0.21094,0.09051,-0.17433,-0.01651,-0.05527,-0.01095,-0.01927,-0.06958,-0.09306,-0.06480,0.13246,0.15659,0.05940,-0.06871,-0.16816,-0.03858,0.10280,0.41234,0.44173,0.19898,-0.07543,-0.00723,0.00063,0.06455,-0.02874,-0.05223,-0.07799,-0.07555,0.05609,0.10977,-0.07003,-0.14136,-0.08502,0.01992,0.19333,0.44011,0.28636,0.13154,0.00602,-0.11102,-0.07736,-0.05939,-0.09426,0.02168,-0.00800,-0.08159,-0.06664,-0.14872,-0.30760,-0.36456,-0.50933,-0.13467,0.01965,0.23084,0.22949,0.08351,-0.15319,-0.26898,-0.28165,-0.12621,-0.14326,-0.10715,-0.02881,-0.08270,-0.13012,-0.21207,-0.33850,-0.48108,-0.47018,-0.31925,-0.18184,-0.02352,-0.04497,-0.07641,-0.22260,-0.32299,-0.27795,-0.15006,-0.03842,-0.01973,0.00450,-0.09264,-0.13791,-0.19627,-0.24233,-0.26473,-0.33312,-0.26367,-0.30338,-0.25204,-0.29263,-0.26226,0.03050,0.05377,-0.03085,-0.04900,0.02477,-0.06490,0.00433,-0.03235,-0.11034,-0.21244,-0.30974,-0.20775,-0.21322,-0.26262,-0.42497,-0.28002,-0.15095,-0.00716,-0.00260,0.06711,0.14750,-0.02310,0.01867,-0.00150,-0.22547,};
float weights_input_12[] = {-0.00877,0.01592,0.02268,-0.06162,-0.01688,-0.26737,-0.36213,-0.44110,-0.03136,-0.12124,0.05231,-0.12326,-0.43978,-0.71035,-0.35265,-0.12134,0.02760,-0.01704,-0.00916,0.04084,-0.02976,-0.07861,-0.06467,0.16880,-0.02094,-0.23330,-0.33526,-0.17784,-0.01167,-0.12390,-0.30285,-0.25781,-0.14800,-0.11840,0.03356,0.00140,0.05458,0.10115,-0.03662,-0.24047,0.19033,0.23616,-0.19331,-0.36782,-0.37084,-0.38593,-0.30936,-0.03898,0.13359,0.07565,0.15686,0.12282,0.04902,0.03029,0.04828,0.02855,0.02774,0.03080,0.25841,0.09501,-0.19986,-0.24663,-0.16302,-0.00355,0.18881,0.26416,0.23794,-0.07607,0.15231,0.26545,0.04659,0.01720,0.04732,0.02942,0.06780,-0.21313,0.17747,-0.28837,-0.36325,-0.38356,0.21960,0.32484,0.29779,0.23630,0.18183,0.23018,0.47609,0.26974,0.05835,0.03537,0.06348,0.03315,0.04939,-0.20846,-0.13251,-0.24893,-0.30263,0.06228,0.32724,0.03167,0.21288,0.00543,0.09302,0.57054,0.46037,0.27309,-0.00659,0.04018,0.05822,0.05770,0.02350,-0.03138,-0.17108,-0.47284,-0.07940,0.08329,0.37050,-0.07721,-0.15209,0.07460,0.16020,0.26921,0.28709,0.22037,-0.01086,0.04034,0.05668,0.08343,0.05386,-0.09226,-0.12128,-0.14519,0.37017,0.39950,0.17529,-0.14670,-0.18755,0.07380,0.18191,-0.12545,-0.09714,-0.02159,-0.04076,-0.00698,0.02738,0.04900,0.06385,-0.22176,-0.07877,-0.42917,0.38523,0.42077,0.45518,0.39333,0.06960,-0.13366,-0.22075,-0.64501,-0.67812,-0.28342,-0.03339,0.01267,0.04189,0.06426,0.05942,-0.14590,-0.07108,0.11879,0.52809,0.71225,0.55137,0.29813,0.39731,0.41796,-0.05980,-0.36175,-0.41370,-0.19636,-0.05729,-0.01857,-0.08943,-0.06698,0.05661,0.12115,0.01778,0.21258,0.56650,0.61973,0.03940,-0.04134,0.52336,0.37304,0.30363,0.04827,0.08962,-0.16488,-0.03618,-0.02064,-0.06588,0.02048,0.18671,0.03712,-0.06804,-0.07890,0.08256,0.26734,-0.10308,-0.00583,0.32006,0.25073,0.14707,0.24983,0.21338,0.07784,-0.00048,-0.01705,-0.06343,0.07514,0.27263,0.01676,0.04635,-0.11409,-0.27637,-0.00038,-0.32305,-0.30195,0.07609,0.09807,0.28923,0.33705,0.32493,0.15946,0.01833,-0.02138,-0.05500,-0.04349,0.14877,-0.04248,-0.00261,-0.10224,-0.43018,-0.27903,-0.40400,-0.23986,-0.10501,-0.01942,0.11301,0.12097,0.17102,-0.06870,-0.04621,0.02482,0.07183,-0.04203,0.10203,0.30656,0.13798,-0.01460,-0.35050,-0.42470,-0.41096,-0.35689,-0.21122,-0.13349,-0.01059,-0.19055,0.07572,0.10145,0.03380,0.02012,0.05251,0.04311,0.01693,0.02408,0.03161,-0.34020,-0.11434,-0.05923,-0.26720,-0.27095,-0.11762,0.16643,-0.12119,-0.18494,0.11797,0.10766,-0.01236,0.01766,-0.00076,0.05151,0.01624,0.01498,-0.13067,0.26169,-0.12309,0.04866,-0.04890,-0.09560,-0.06934,0.00796,-0.17579,-0.11672,0.02780,0.10774,-0.02252,0.04266,-0.00185,-0.07662,-0.02965,-0.04112,-0.05366,0.00119,-0.03209,0.25134,0.02778,-0.10657,0.08935,0.11746,-0.08965,-0.18596,-0.00527,0.07479,-0.02144,-0.00135,0.24796,};
float weights_input_13[] = {-0.00115,0.05402,0.05753,-0.03511,0.01834,0.45367,0.46048,0.34060,0.08355,0.12062,-0.16044,0.00595,0.18051,0.36639,0.30561,0.03712,-0.06843,0.00316,-0.00016,0.00870,0.02594,0.05277,0.22873,0.30939,0.32088,0.01308,0.35632,0.15055,0.00635,0.04992,0.13089,0.50035,0.43774,0.09627,-0.02701,-0.06695,-0.04210,-0.07472,0.08021,0.24438,0.01676,0.35783,0.20790,0.31405,0.05736,0.24388,0.53329,0.25561,0.28811,0.29901,-0.02309,-0.09311,0.00878,-0.08620,-0.04003,-0.05152,0.00224,0.04383,-0.05325,-0.06381,0.06409,0.32357,0.34447,0.31394,0.38682,0.29523,0.19256,0.04764,-0.15992,-0.24919,-0.05182,-0.04078,-0.04105,-0.05275,-0.00876,0.04451,-0.25369,-0.09706,0.13375,0.04544,-0.03462,0.11132,0.27646,0.35931,-0.02862,-0.16324,-0.39495,-0.27086,-0.08953,-0.04041,-0.04403,-0.06226,-0.07039,-0.00463,-0.11491,-0.13522,-0.18377,-0.03385,-0.29396,0.12979,-0.01828,-0.01692,-0.07877,-0.17728,-0.27741,-0.14979,-0.06915,-0.04114,-0.05192,-0.01946,-0.08456,-0.07781,-0.21101,-0.21079,-0.49921,-0.28514,-0.05626,0.25606,0.08310,-0.14409,-0.15289,-0.05946,-0.21160,-0.15174,-0.07726,-0.04856,-0.05188,-0.03915,-0.05633,-0.12837,-0.36773,-0.42193,-0.73098,-0.55968,-0.28743,0.17688,-0.03013,-0.13013,-0.02298,0.32932,-0.18264,-0.07248,-0.03122,-0.05021,-0.05307,-0.04418,0.00888,-0.07360,-0.51135,-0.32137,-0.42484,-0.25428,-0.14122,0.07563,0.06581,0.00316,0.27521,0.43224,-0.24182,-0.11507,-0.03361,-0.05056,-0.05352,-0.04591,-0.00238,-0.17687,-0.36429,-0.29399,-0.93554,-0.35773,-0.18146,0.08564,-0.18959,-0.25902,0.19784,0.06984,-0.09250,-0.18364,-0.05182,-0.04860,-0.05634,-0.04740,-0.12022,-0.26915,-0.39015,-0.73732,-0.92792,-0.71258,-0.45171,-0.21833,-0.42733,-0.30889,0.12344,-0.13058,-0.19448,0.00585,-0.09021,-0.04848,-0.04039,-0.07964,-0.19665,-0.31012,-0.32918,-0.62191,-0.50003,-0.31852,-0.01302,0.00931,-0.23379,-0.24775,0.06011,-0.15044,-0.18439,0.11772,-0.04795,-0.05006,-0.02745,-0.09481,-0.24357,-0.15361,-0.23652,-0.27019,-0.11095,-0.18892,0.10356,0.18864,-0.27644,-0.26537,-0.07814,-0.26840,-0.30127,0.04857,-0.10780,-0.04389,-0.02410,-0.01276,-0.00356,0.17752,0.27270,0.05278,0.17712,0.06774,-0.03251,0.00708,-0.21386,-0.29062,-0.05844,-0.14207,-0.06685,0.13859,-0.09334,-0.03524,-0.04176,0.00250,0.13906,0.29203,0.26865,0.29799,0.21383,0.15757,0.04328,-0.07823,0.20331,-0.02302,0.13722,0.20645,0.17786,0.01730,-0.09080,-0.04549,-0.03957,-0.00859,0.19241,0.52941,0.38812,0.22634,0.11994,0.11974,0.01948,0.27425,0.20461,-0.09279,0.28790,0.43652,-0.02645,-0.03871,-0.02270,-0.04196,-0.00065,-0.04342,0.23146,0.39083,0.48091,0.09805,0.05641,0.05360,0.11311,0.20569,0.16222,-0.15843,0.42600,0.28852,-0.03163,-0.02109,-0.00129,-0.11346,0.00181,0.01996,0.10294,0.22602,0.14940,0.25089,0.21840,-0.04530,-0.14840,0.12571,-0.22589,-0.26073,0.26453,0.28589,-0.05263,0.00643,-0.00040,0.00079,-0.05816,};
float weights_input_14[] = {0.00050,0.00199,0.01817,0.09013,0.15031,0.10009,0.28323,0.33744,0.28633,0.11043,-0.00020,-0.13359,-0.17307,-0.15967,-0.14030,-0.20625,-0.06088,-0.00747,-0.00139,0.09125,0.00380,0.03973,0.18140,0.30187,0.32777,0.22184,0.23695,0.14667,0.01676,0.02714,0.08789,-0.09975,-0.01269,-0.24952,0.02821,-0.04466,0.09326,0.06181,0.03159,0.15533,0.30630,0.30972,0.30898,0.11979,-0.08464,-0.05521,0.02474,-0.05544,-0.01049,0.13606,0.08629,0.02923,-0.06600,0.00012,0.09542,-0.04311,0.06345,0.19042,0.25944,0.21873,0.00294,-0.04867,-0.39850,-0.16933,-0.13867,0.34193,0.07550,0.13941,0.17374,0.10772,-0.03646,0.07488,0.09138,-0.04393,0.03555,0.21296,0.02470,0.07655,-0.04066,-0.19802,-0.44234,-0.26830,-0.20816,0.36976,0.00715,0.23883,0.27120,0.16387,0.05185,0.11539,0.09149,-0.05773,0.00460,0.11697,-0.03735,-0.00572,0.02931,-0.19458,-0.36955,-0.35085,0.07590,0.45433,0.09707,0.37396,0.33545,0.21381,0.03866,0.12577,0.07492,-0.05401,-0.00740,0.11093,-0.13443,-0.05547,-0.16306,-0.36808,-0.55071,-0.63916,-0.15352,0.37725,0.03973,0.39407,0.26768,0.22698,0.03019,0.12881,0.07413,-0.05118,-0.00312,0.10493,-0.11898,-0.38754,-0.12425,-0.29728,-0.36880,-0.35656,-0.26007,-0.10914,-0.05684,0.13269,0.24773,0.20650,0.04031,0.11189,0.07452,-0.06521,-0.08860,-0.04016,-0.03879,-0.01299,0.34506,0.42656,-0.14217,-0.25805,-0.10994,0.06058,0.09413,0.11688,0.08876,0.11065,0.02984,0.10526,0.11412,-0.02316,-0.09536,-0.13799,-0.03508,-0.08135,0.05869,0.22532,0.04220,0.12157,0.18913,0.54309,0.25592,0.05359,-0.03112,0.01539,-0.00678,0.11822,0.06554,-0.07054,-0.17952,-0.37684,-0.55636,-0.25178,-0.03282,0.35594,0.34834,0.41883,0.52244,0.53554,0.08099,0.05415,-0.07738,-0.01200,-0.01078,0.11882,0.06396,-0.06694,-0.13784,-0.44066,-0.61031,-0.61854,-0.05904,0.36398,0.54195,0.41017,0.23240,0.24707,-0.14401,-0.02028,-0.16503,0.01917,-0.02004,0.11765,0.02692,-0.10764,-0.10909,-0.19785,-0.44991,-0.45035,-0.21618,0.00513,0.11679,0.06714,-0.06629,0.08049,-0.12588,-0.13926,-0.16713,-0.03103,-0.05290,0.13649,0.03869,-0.13932,-0.10251,-0.06072,-0.28584,-0.29010,-0.18219,-0.17663,-0.03934,-0.16425,-0.07674,-0.01262,-0.03759,-0.02469,-0.09862,-0.07850,-0.03874,0.06816,0.12867,-0.12484,-0.01311,0.06151,0.00821,-0.03357,-0.02334,-0.06374,-0.06843,-0.10498,-0.02621,-0.00852,-0.10173,-0.22939,0.01102,-0.07300,-0.02581,0.06435,0.08958,-0.01139,0.01820,0.15766,0.13177,-0.03879,-0.30103,-0.30544,-0.12755,-0.00946,-0.11190,0.14257,-0.17034,-0.15514,-0.17654,-0.19100,-0.00381,0.08458,-0.00064,0.05675,0.12572,0.22910,0.14822,0.24386,-0.37756,-0.23828,-0.31850,-0.38850,-0.20726,-0.11927,-0.30730,-0.33685,-0.39396,-0.04814,-0.00352,0.05887,0.00154,-0.01147,0.21064,0.01304,-0.07165,0.14068,-0.07791,-0.20655,-0.50489,-0.65684,-0.43192,-0.32732,-0.37058,-0.31517,-0.16600,0.01138,-0.00756,0.00051,0.29066,};
float weights_input_15[] = {-0.00214,0.00349,0.00592,0.12683,0.25263,0.53854,0.45677,0.63581,0.29459,-0.01867,-0.13539,-0.37463,-0.12532,0.15162,0.26842,0.20245,0.04980,-0.00022,-0.00112,0.04879,0.05805,-0.04670,0.17040,0.50237,0.62420,0.29106,0.17511,0.21030,0.24214,0.04557,0.05125,-0.07038,0.07349,-0.05235,0.09400,0.04563,0.04502,0.09355,0.01209,-0.00984,0.26408,0.36597,0.24423,0.26461,0.16246,-0.00190,0.17027,0.03280,0.24730,0.14630,0.11582,-0.07851,0.08731,0.15705,0.04531,0.04623,0.04074,-0.00537,0.16387,0.17305,0.19797,0.02493,-0.00330,-0.09037,-0.26075,0.01262,0.17259,0.18251,0.12588,-0.01678,-0.00964,0.06877,0.04272,0.04529,0.01604,-0.01821,-0.09763,-0.01151,0.20814,0.08694,-0.08120,-0.27621,-0.20734,-0.04004,-0.09482,0.12518,0.05432,0.08923,-0.00844,0.07018,0.02243,0.04757,-0.07061,0.00915,-0.05856,-0.01380,0.04571,0.07870,-0.05466,-0.50569,-0.15447,0.16754,0.02768,0.26936,0.33065,0.24576,0.02359,0.08084,0.02145,0.04650,-0.08055,-0.15536,-0.04269,0.00022,0.07460,0.13170,0.03012,-0.38285,-0.18870,0.24410,0.29566,0.30406,0.40415,0.22155,-0.00222,0.08370,0.02283,0.02657,-0.03958,-0.17779,-0.38654,-0.28726,0.02355,0.11698,-0.20964,-0.33829,-0.00705,0.02272,0.03556,0.21863,0.06966,0.10149,0.05774,0.08492,0.02165,0.02519,-0.12480,-0.32395,-0.45859,-0.33305,-0.13421,0.06423,0.02627,0.00805,-0.01610,-0.20258,-0.18525,-0.19722,-0.07305,-0.09925,0.06008,0.05517,0.02305,0.02499,-0.13062,-0.48700,-0.38395,-0.22529,-0.23185,0.06245,0.16497,0.25193,0.01768,0.00669,-0.02495,-0.13908,-0.01060,-0.18516,-0.04392,0.05324,0.09983,0.10202,-0.04323,-0.31365,-0.36693,-0.40980,-0.27001,-0.03531,0.10503,0.02928,0.09199,0.14985,0.12397,-0.00776,0.09072,0.12428,-0.07120,0.05822,0.09879,0.11761,-0.02169,-0.14609,-0.34812,-0.62479,-0.35914,0.10912,0.00638,-0.18492,-0.22018,0.21710,0.13619,0.11305,0.14662,0.23358,-0.05675,0.05648,0.13981,0.16853,-0.02838,0.01002,-0.08472,-0.40751,-0.21595,-0.03834,-0.17710,-0.38719,-0.36655,0.17559,0.09653,0.02540,0.04967,0.13429,-0.09234,0.02185,0.13803,0.15613,0.06062,0.16294,0.23209,-0.14449,-0.15477,-0.12876,-0.18766,-0.39688,-0.18772,0.14344,-0.00030,0.03579,0.18082,0.10908,-0.12273,-0.04436,0.04262,0.15897,0.10423,0.27867,0.41697,0.06491,-0.04307,-0.04575,-0.03935,-0.21113,-0.07820,0.00744,0.09909,0.15035,0.43794,-0.06191,-0.12338,-0.01341,0.04104,0.14352,0.20617,0.35658,0.30449,0.05812,-0.07981,0.04313,-0.05763,-0.14443,0.02544,-0.01506,-0.02950,0.07981,0.14481,-0.10890,-0.15133,0.04216,-0.00149,0.10535,0.08065,0.30274,0.30486,0.16578,0.05250,0.08263,0.11794,0.10159,-0.02497,-0.01315,-0.30880,-0.20960,-0.32931,-0.19467,-0.01507,0.08917,-0.00062,0.00035,0.06520,0.04414,0.02172,0.22334,0.10204,0.13232,0.10741,-0.15124,-0.60363,-0.68157,-0.40588,-0.58897,-0.43772,0.00392,-0.01525,0.00044,0.10004,};
float weights_hidden_0[] = {0.68751,-0.41224,-0.62955,-0.66779,1.23848,2.77291,3.82392,2.61027,-1.84952,-1.12825,-0.78716,-0.75837,-1.60913,-0.67678,-2.26714,0.18462,0.55066,};
float weights_hidden_1[] = {-0.30023,1.87118,0.75653,2.21116,-0.83563,-1.56940,-0.33738,-0.02550,1.86136,2.54960,1.88928,1.31462,-1.77249,1.87721,-1.33771,-2.68067,0.39725,};
float weights_hidden_2[] = {-1.91429,-1.64275,-0.64226,2.68506,-0.07172,-0.90522,2.27529,1.05533,-1.39593,-0.68257,2.70592,-1.66631,-0.93471,1.86728,1.32137,0.09233,-0.12544,};
float weights_hidden_3[] = {-2.98514,-1.06871,-1.42891,-1.10580,-0.41894,-1.80270,-1.56838,-0.28684,2.92960,-1.13506,-1.84013,-1.21222,2.53024,2.71419,0.98118,1.32934,-0.68063,};
float weights_hidden_4[] = {-1.92709,-0.55777,-0.43181,-1.50835,1.42354,1.14221,-0.78346,1.65954,1.05063,1.38903,2.32424,2.12485,1.07392,-2.29171,0.00025,-2.28729,0.39666,};
float weights_hidden_5[] = {2.11409,-0.44278,3.38890,-0.82865,-2.45111,-0.21094,-1.13152,-1.11337,1.64333,-0.00624,-0.77104,-0.59642,-2.11071,1.76216,-1.24490,1.94231,-0.28695,};
float weights_hidden_6[] = {1.56840,-0.47518,3.37139,-0.82476,1.56716,1.94024,-1.27689,-1.51236,-1.84451,3.34517,-1.19305,-1.45283,-0.12841,-2.15251,-1.30188,-2.20065,0.08853,};
float weights_hidden_7[] = {-0.93285,3.21448,-0.97713,1.78521,0.03741,-1.03968,-0.97806,-1.39199,-1.78716,-1.71844,-0.69168,2.69122,-1.37531,1.26095,1.84922,1.09726,0.26902,};
float weights_hidden_8[] = {1.51194,-0.21418,-2.55559,-0.44561,1.40009,1.89346,-2.33531,-1.91502,0.20492,-2.15011,-0.41129,-0.50587,3.08577,-2.14051,-1.75071,1.56713,-0.58288,};
float weights_hidden_9[] = {2.32098,-0.23458,-0.96084,-1.32276,-1.85432,-2.15252,2.35564,0.87242,-0.85853,-0.47575,-1.24233,0.13317,1.32540,-2.24564,3.78475,0.89551,-0.06370,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};

/*
 * Scanner class
 * */


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


