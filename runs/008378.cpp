#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 0.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{1,9,0,8,0,14,1,27,1,1},
{1,9,6,12,0,15,1,38,1,1},
{1,11,14,19,2,26,1,34,1,1},
{7,11,17,20,2,36,7,37,15,7},
{18,11,21,31,3,33,16,37,23,23},
{28,12,31,34,18,29,24,30,29,28},
{31,20,28,39,16,31,30,30,28,32},
{29,23,31,39,22,40,27,30,35,34},
{32,28,28,38,19,41,28,34,36,37},
{34,30,31,42,18,36,30,33,37,39},
{34,26,33,32,21,36,31,34,30,36},
{21,29,17,32,23,34,31,34,25,24},
{5,33,14,20,29,32,17,34,21,4},
{2,31,9,13,17,33,9,34,6,5},
{1,31,6,13,6,33,5,40,6,2},
{0,26,0,8,6,11,2,32,5,0},
{4,12,6,10,0,14,4,29,3,1},
{10,12,15,23,0,16,7,33,15,13},
{22,22,21,32,2,32,16,34,22,27},
{28,24,33,34,2,30,22,34,28,32},
{29,25,32,35,12,30,30,34,29,29},
{34,29,31,34,18,28,29,34,31,25},
{30,30,30,32,23,38,27,34,29,27},
{27,32,30,34,22,37,23,34,30,31},
{26,34,30,35,23,36,25,34,30,34},
{25,36,35,37,23,36,26,42,31,32},
{28,40,33,37,27,37,28,42,31,35},
{35,38,36,41,38,40,32,42,31,39},
{33,36,38,43,34,40,32,42,31,33},
{16,34,28,34,23,39,30,43,29,29},
{10,32,12,21,6,32,15,44,20,20},
{1,23,3,1,5,7,2,34,4,10},
{8,16,12,11,0,14,7,20,10,15},
{22,18,28,20,0,21,16,23,23,28},
{29,19,21,25,2,34,26,24,29,34},
{29,23,23,22,9,36,30,22,32,20},
{33,26,22,23,25,29,27,21,33,25},
{31,28,20,26,23,29,25,21,31,25},
{30,36,26,22,24,37,27,21,30,23},
{17,34,21,14,24,26,20,22,15,14},
{12,36,30,22,22,25,17,30,13,20},
{21,39,31,28,27,24,25,30,16,28},
{24,35,35,29,31,19,22,31,20,30},
{26,39,32,35,38,20,22,36,24,35},
{33,39,39,43,34,15,26,41,30,37},
{36,33,36,35,23,14,27,42,33,42},
{20,29,26,28,11,8,23,38,31,29},
{6,23,8,5,5,0,12,12,9,11},
{14,15,13,11,0,15,10,17,18,25},
{29,21,21,23,0,27,26,19,26,33},
{30,26,24,24,8,36,31,17,30,27},
{33,27,18,15,21,35,29,15,36,25},
{31,28,19,13,23,29,26,12,33,25},
{31,26,16,15,19,27,27,12,32,18},
{23,27,16,13,21,34,26,14,20,14},
{11,27,18,11,25,25,19,21,10,8},
{9,29,23,20,26,22,13,24,10,17},
{16,34,26,26,31,16,21,29,15,27},
{21,39,27,31,34,14,19,31,19,29},
{24,39,31,31,32,13,17,37,26,32},
{26,34,38,36,34,12,18,41,30,37},
{32,31,38,28,23,8,21,39,31,42},
{27,24,34,29,6,7,22,34,28,30},
{15,21,22,10,5,0,16,7,16,21},
{24,13,11,8,0,10,20,10,20,33},
{30,16,17,16,8,24,31,10,25,34},
{31,18,17,18,20,30,32,10,30,31},
{34,15,16,15,22,23,30,9,36,27},
{31,19,15,13,24,20,27,2,33,18},
{26,17,17,10,27,32,25,0,29,14},
{21,19,15,19,25,20,28,2,19,12},
{9,23,14,18,20,17,11,12,9,6},
{8,30,16,23,31,22,4,19,7,8},
{15,33,22,31,28,21,11,29,16,26},
{21,38,28,31,33,19,5,33,21,29},
{22,35,34,35,33,17,7,39,27,30},
{26,32,36,35,34,12,7,34,29,37},
{27,31,41,32,18,8,5,35,28,36},
{36,23,39,24,6,0,6,18,25,37},
{23,21,23,9,1,0,3,0,18,20},
{29,13,4,0,5,12,24,3,13,33},
{31,13,15,0,15,23,32,10,23,32},
{35,13,11,7,21,27,34,9,27,34},
{33,12,10,7,24,25,30,2,33,21},
{31,15,10,7,27,22,27,4,35,15},
{25,15,8,9,27,30,30,2,33,14},
{19,18,15,12,18,17,25,12,20,14},
{8,25,13,21,17,22,15,18,11,12},
{7,30,20,27,27,24,15,25,16,14},
{13,38,23,34,35,27,12,26,27,25},
{20,36,28,32,35,27,19,36,25,30},
{21,36,34,35,39,26,19,33,23,31},
{24,32,40,34,34,16,10,33,29,34},
{27,24,41,31,19,15,10,28,22,36},
{36,20,28,22,6,8,6,3,24,36},
{31,18,8,2,0,5,0,0,11,26},
{30,9,3,0,13,12,31,0,1,36},
{35,9,5,0,20,20,34,0,13,31},
{35,9,2,0,27,24,36,0,22,34},
{33,10,2,2,35,24,29,0,30,30},
{27,15,2,11,27,23,31,2,35,22},
{24,13,2,24,26,35,34,6,36,21},
{19,21,5,32,16,31,25,18,35,18},
{8,25,16,31,21,27,23,24,29,6},
{7,30,22,32,27,30,19,27,31,14},
{13,37,32,33,33,37,19,30,28,30},
{20,34,33,33,34,44,22,33,26,33},
{21,36,37,39,39,41,21,32,26,26},
{24,25,39,36,30,35,20,30,24,33},
{28,24,30,22,18,22,13,18,21,36},
{36,20,21,8,5,16,8,0,9,34},
{31,18,2,0,0,7,3,0,1,34},
{31,10,3,6,24,10,33,0,0,29},
{36,9,4,6,27,23,34,0,13,30},
{35,9,3,9,35,23,37,0,19,34},
{31,8,0,12,34,24,32,0,29,28},
{25,13,1,17,21,24,32,6,35,21},
{24,16,1,24,20,21,34,13,36,22},
{19,21,10,27,14,17,30,23,35,20},
{8,25,30,32,27,18,23,28,35,20},
{7,33,30,34,35,23,19,25,32,29},
{13,36,32,33,40,33,23,31,29,30},
{20,32,36,36,42,37,28,31,30,27},
{21,35,37,27,43,42,33,32,31,32},
{25,25,34,26,34,41,32,24,26,35},
{28,24,22,24,22,39,28,5,18,37},
{33,20,9,10,12,30,21,0,13,33},
{34,18,0,2,8,11,9,0,0,34},
{36,9,0,6,16,8,33,0,14,3},
{36,8,3,6,31,11,37,0,25,17},
{34,8,3,9,36,7,36,0,29,22},
{28,8,3,10,36,5,27,6,29,22},
{26,16,5,12,32,3,27,8,32,25},
{24,17,14,11,25,5,29,22,33,26},
{20,21,27,14,22,2,22,28,27,23},
{8,27,32,11,28,4,5,24,19,33},
{7,33,33,19,32,23,1,29,20,31},
{12,37,33,26,36,31,17,31,25,28},
{20,31,37,30,44,32,19,32,29,32},
{21,26,30,41,41,29,23,30,32,33},
{25,25,22,38,38,40,32,22,32,34},
{28,24,15,29,26,40,31,0,30,34},
{33,19,0,21,21,38,31,0,18,34},
{30,18,0,9,15,22,19,0,12,32},
{36,8,0,2,16,13,36,0,25,7},
{36,8,0,4,24,9,37,0,29,15},
{35,9,2,4,26,8,36,4,32,18},
{27,10,5,4,30,8,30,8,33,15},
{25,16,11,4,22,10,29,18,28,15},
{24,17,30,10,20,5,21,27,20,16},
{20,21,32,8,19,5,14,23,19,28},
{8,32,31,9,24,12,4,22,10,20},
{7,33,28,12,31,17,1,29,13,15},
{12,36,29,23,38,16,11,32,16,26},
{20,31,24,28,41,25,20,32,23,31},
{23,26,21,31,41,29,22,24,25,29},
{25,25,15,36,36,37,31,11,29,31},
{28,24,0,39,26,37,32,0,31,33},
{34,19,0,38,11,38,32,0,31,34},
{26,18,0,22,10,30,30,0,20,30},
{36,8,0,10,15,13,34,0,30,7},
{36,8,2,18,16,11,37,4,32,9},
{32,9,5,16,17,13,40,8,36,9},
{27,11,12,13,14,13,30,10,31,9},
{25,17,19,13,14,10,23,25,21,11},
{24,17,33,12,12,10,21,24,16,11},
{20,25,32,19,13,15,14,21,16,13},
{8,32,24,12,29,12,8,32,7,7},
{7,32,29,18,35,9,5,32,12,9},
{12,36,26,17,38,23,13,32,16,23},
{22,25,19,20,42,30,24,31,19,27},
{23,26,10,27,35,30,24,21,22,25},
{25,25,10,34,31,34,34,4,28,30},
{27,21,7,39,20,37,36,0,31,34},
{29,18,7,40,7,33,37,0,32,32},
{22,17,5,33,7,30,35,0,31,18},
{30,8,0,23,14,19,30,0,32,10},
{36,9,6,22,15,19,41,6,35,10},
{34,11,13,21,11,17,40,10,35,15},
{28,11,19,14,11,15,29,21,27,14},
{26,17,29,17,11,20,27,23,20,12},
{26,17,30,16,13,18,26,25,14,16},
{20,28,29,25,14,15,20,31,14,15},
{9,31,27,8,29,10,9,32,9,9},
{8,32,23,14,37,17,8,31,13,14},
{16,36,22,19,43,24,16,33,21,24},
{22,22,15,22,41,28,20,28,19,27},
{24,26,15,30,33,26,23,19,24,25},
{23,25,7,33,31,33,28,0,28,30},
{23,20,7,38,24,32,36,0,32,32},
{29,18,8,38,18,33,36,0,32,31},
{17,17,11,33,13,28,31,0,30,16},
{18,8,6,21,8,28,27,4,30,13},
{35,10,14,23,8,25,39,10,36,20},
{31,11,20,30,8,25,41,11,32,20},
{29,12,31,23,8,23,28,24,27,18},
{26,17,32,17,8,17,20,24,20,22},
{25,17,33,11,15,11,20,24,17,20},
{24,27,27,16,16,16,21,32,15,24},
{10,29,26,11,24,17,13,32,8,12},
{16,32,29,15,32,24,10,30,12,16},
{21,30,24,26,36,28,18,30,21,22},
{23,22,25,29,40,27,22,21,27,25},
{19,26,16,31,34,23,23,2,28,29},
{23,25,19,35,28,32,32,0,30,32},
{30,20,16,38,24,33,34,0,31,32},
{24,17,19,33,15,32,36,0,30,18},
{13,17,10,23,16,8,19,0,20,16},
{11,13,13,23,3,23,13,7,18,12},
{27,18,27,34,3,40,31,11,35,22},
{35,18,36,33,3,36,39,21,29,28},
{29,19,37,28,3,27,32,27,27,18},
{29,20,35,31,3,24,28,24,26,24},
{27,29,34,25,12,23,25,31,23,24},
{27,30,28,25,13,21,24,32,23,25},
{24,29,28,25,22,19,18,31,20,27},
{21,25,26,26,31,28,18,31,18,21},
{23,27,26,28,37,27,21,28,21,23},
{20,25,22,30,33,25,26,21,24,27},
{22,29,15,31,33,30,30,2,27,30},
{30,29,20,37,28,32,28,0,27,30},
{23,26,22,31,20,32,32,0,30,25},
{13,24,25,17,11,17,24,0,27,16},
{4,21,15,2,10,3,7,0,11,9},
{2,16,21,19,0,17,6,8,6,2},
{10,19,39,31,0,25,13,16,18,15},
{21,19,40,38,0,39,29,20,33,24},
{35,20,38,37,0,43,38,23,33,35},
{35,30,38,31,0,30,36,32,34,28},
{34,30,38,29,9,29,36,32,33,26},
{31,30,38,28,10,24,32,30,28,26},
{31,28,38,28,24,26,28,31,25,28},
{21,25,41,24,32,27,24,31,23,24},
{21,30,40,27,37,28,22,23,22,26},
{25,29,39,32,33,29,25,7,27,28},
{29,33,35,33,33,31,30,0,30,26},
{22,33,35,26,29,28,32,0,29,17},
{13,27,35,16,17,8,22,0,22,15},
{4,25,34,5,8,2,7,0,11,9},
{1,25,19,0,7,1,1,0,1,2},
{0,17,29,12,0,9,0,6,1,0},
{0,21,26,14,0,17,0,16,4,0},
{2,18,26,12,0,14,5,19,5,7},
{2,23,26,16,0,9,6,17,14,7},
{14,27,26,17,0,16,11,17,15,24},
{22,28,23,21,7,18,20,18,21,20},
{23,26,23,27,14,23,24,29,28,22},
{29,26,25,27,20,31,33,30,31,28},
{31,28,25,27,33,31,34,29,29,28},
{21,31,26,20,30,22,19,22,22,14},
{14,32,26,8,32,9,16,2,17,4},
{3,31,24,6,33,2,3,0,9,2},
{1,29,29,1,32,1,2,0,1,1},
{0,25,24,0,17,0,0,0,0,0},
{0,23,25,0,9,0,0,0,0,0},
{0,20,17,0,8,0,0,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
