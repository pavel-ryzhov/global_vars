#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;

float weights_input_0[] = {0.00217,0.00420,0.00323,0.01355,0.16527,0.03864,0.11202,0.07299,-0.26870,-0.36538,-0.36604,-0.13091,0.03760,0.23485,0.08747,0.25816,0.19563,0.00953,-0.00001,-0.05489,0.02570,0.08500,0.07473,0.12249,-0.06470,0.15114,-0.22343,-0.16511,-0.12685,0.04348,0.22486,0.24227,0.26369,0.22576,0.10028,0.02433,-0.05768,-0.03759,0.00192,-0.09985,0.14258,0.02400,-0.16790,0.09021,-0.13215,-0.13173,-0.23101,-0.17191,-0.01600,0.15858,0.19710,0.20669,0.11534,-0.06887,-0.05636,0.02526,-0.03765,-0.05819,-0.15902,0.04167,0.17275,0.19561,-0.01190,0.00965,-0.02070,-0.26887,-0.14201,-0.03320,0.12985,-0.14971,0.02807,-0.11367,-0.05747,0.02562,-0.03833,-0.09529,0.15238,-0.19350,0.12088,0.08116,0.09211,-0.10273,-0.34969,-0.20089,-0.21241,-0.12878,-0.03493,-0.21031,-0.27464,-0.12021,0.02854,0.01270,-0.04315,-0.20531,-0.11360,-0.09869,-0.07822,-0.12659,-0.04178,-0.08764,-0.46740,-0.36170,-0.17680,-0.18987,-0.33640,-0.34909,-0.41431,-0.15431,0.02134,0.01336,-0.08347,-0.17194,-0.05863,-0.13891,-0.05091,0.01684,0.40730,0.38317,0.11484,0.03293,-0.04607,-0.38613,-0.44679,-0.25422,-0.32808,-0.16641,0.02187,0.10386,-0.12827,-0.44060,-0.10970,-0.06889,-0.06001,0.40573,0.66976,0.49985,0.59686,0.51173,0.32610,-0.18449,-0.50393,-0.32593,-0.34492,-0.25374,0.02132,0.07355,0.00667,-0.37601,-0.39709,-0.43033,0.00297,0.51566,0.61034,0.66490,0.44840,0.38011,0.00603,-0.45583,-0.49732,-0.29616,-0.25615,-0.14053,0.02412,0.07351,0.00025,-0.49640,-0.28660,-0.15376,0.09157,0.48429,0.55941,0.39723,0.16505,-0.01665,-0.11879,-0.15681,-0.44725,-0.03894,-0.09231,-0.14031,0.03284,0.08571,0.01023,-0.21205,0.10499,-0.19231,0.03465,0.02480,-0.01329,-0.10401,-0.09323,0.29965,0.21359,0.11082,0.29126,0.17060,0.13835,-0.04742,0.03210,0.09846,-0.03285,-0.13186,-0.00499,0.04555,-0.12384,-0.11976,-0.18725,-0.13343,-0.01931,0.25455,0.32251,0.33177,0.45187,0.23085,0.15101,-0.05177,0.04767,0.00060,-0.00916,-0.18216,0.05148,-0.01258,-0.22693,-0.35823,-0.30394,-0.23557,-0.30334,0.00717,0.24007,0.14680,0.18186,0.18176,0.16834,-0.00581,0.03578,0.00052,0.00990,0.01629,0.17514,-0.11447,-0.12434,-0.07446,-0.18147,-0.05944,-0.46768,-0.25004,0.06613,-0.00393,0.14485,0.08435,0.11470,0.11131,-0.08236,0.01431,0.08089,0.34430,0.21319,-0.05155,-0.05699,0.13581,-0.02677,-0.09730,-0.53902,-0.09084,0.22634,0.25700,0.21628,0.09812,0.24722,-0.12593,-0.05649,-0.02125,0.08435,0.18927,-0.04892,-0.13260,-0.03439,0.41382,0.30312,0.16285,-0.47116,-0.02167,-0.07887,0.35702,0.40024,0.28830,0.19033,-0.07102,0.00101,-0.01653,-0.01164,0.21147,-0.09509,-0.03393,-0.01598,0.14614,0.20686,-0.02366,-0.22716,-0.21681,0.01467,0.30389,0.11683,0.31610,0.00790,-0.04264,-0.00300,-0.02650,-0.10599,-0.01063,0.01492,-0.12773,0.24907,0.21156,0.17605,0.08822,-0.19161,-0.12162,-0.10614,-0.02878,-0.16358,-0.05958,0.00550,-0.00191,0.33904,};
float weights_input_1[] = {-0.00137,-0.00193,-0.00265,-0.14874,-0.31770,-0.45385,-0.42625,-0.30137,-0.16623,0.03833,-0.03857,-0.08380,-0.01717,-0.17014,-0.27058,-0.22074,-0.06598,0.00019,-0.00131,-0.04381,-0.06148,-0.06783,-0.18768,-0.34633,-0.16530,-0.29341,-0.10013,-0.09129,-0.11044,-0.14249,-0.22052,-0.03389,-0.22004,-0.28285,-0.07773,-0.03187,-0.04181,-0.07176,-0.02398,-0.05717,-0.16631,-0.25098,-0.08902,-0.28510,-0.20578,-0.00970,-0.03854,-0.02955,-0.09164,-0.06491,-0.18968,-0.19608,-0.02149,-0.07226,-0.03898,-0.03038,-0.01596,-0.05155,-0.04829,-0.14306,-0.23642,-0.07633,0.11729,0.22079,0.20340,0.03278,-0.02279,-0.00386,-0.10512,-0.04173,-0.01160,-0.03564,-0.04373,-0.03232,-0.00534,-0.05608,0.02568,0.05751,0.02099,-0.03308,0.07640,0.32514,0.19249,0.06432,0.13210,-0.01392,0.00806,-0.01044,-0.01013,-0.03292,-0.04261,-0.03347,0.01778,-0.01897,0.04142,0.06630,0.13631,0.06030,0.06757,0.55641,0.27225,-0.06045,0.10115,0.08217,0.09163,0.01040,-0.00423,-0.04054,-0.04201,-0.03331,0.01595,-0.01227,-0.00950,-0.06423,-0.11696,-0.11180,0.01120,0.38730,0.13310,0.04313,0.11855,0.14197,0.06580,0.02512,-0.00830,-0.03962,-0.04432,-0.03537,-0.00529,-0.00415,-0.02604,-0.00593,-0.15008,-0.32815,-0.17291,0.02075,-0.13917,0.10648,0.03161,0.03757,-0.00659,-0.07111,-0.01274,-0.04352,-0.04300,-0.03555,0.01167,-0.06025,-0.02703,-0.07201,-0.14487,-0.35065,-0.17886,-0.13896,-0.13772,0.06531,0.08132,0.12262,-0.09490,-0.14766,-0.09283,-0.04709,-0.04157,-0.03601,0.01843,0.05163,0.08690,0.04076,-0.04137,-0.21916,-0.20446,-0.14363,0.02229,0.03594,0.02682,0.07806,-0.05926,-0.16251,-0.08917,-0.04680,-0.08589,-0.08014,-0.03944,-0.00355,0.02282,0.11279,-0.02871,-0.12717,-0.17986,0.12707,0.25316,-0.10049,-0.15467,-0.03656,-0.16462,-0.12219,-0.10364,-0.12608,-0.08531,-0.08461,0.01833,0.04621,0.06346,0.01346,-0.09410,0.04146,0.07660,0.33565,0.42537,-0.13023,-0.21377,-0.17218,-0.20912,-0.09502,-0.10481,-0.12650,-0.07888,-0.06289,0.02690,0.05762,-0.03472,-0.12290,-0.00016,0.22768,0.37047,0.49321,0.34717,-0.14458,-0.27044,-0.13073,-0.05563,-0.01472,-0.08363,-0.09732,-0.06794,-0.05736,0.01747,0.01400,-0.06470,-0.10059,-0.02136,0.22511,0.10090,0.26988,0.16887,-0.11843,-0.16846,-0.09196,-0.03089,-0.00262,-0.06216,-0.08588,-0.02254,-0.06186,-0.02986,-0.05145,-0.10852,-0.11605,-0.15403,-0.06925,-0.08503,0.03979,0.16707,-0.10124,-0.13022,-0.08602,0.00477,0.06958,-0.07499,-0.08640,-0.04121,-0.06131,-0.05581,-0.01097,0.09748,-0.03559,-0.10576,-0.23258,-0.09463,0.11676,0.09771,-0.02923,0.09805,0.07339,0.08363,0.03621,-0.05888,-0.03006,0.00037,-0.09747,0.02046,0.02261,0.06127,0.00438,-0.00867,-0.15772,-0.26326,-0.03976,0.12135,0.08273,0.46285,0.40343,0.26454,-0.05006,0.01071,-0.07286,0.00307,0.00788,-0.00536,0.12264,0.15717,0.14478,0.11195,-0.11301,-0.27814,0.07730,0.40740,0.57295,0.51439,0.47791,0.33558,-0.00451,0.01260,0.00194,-0.02653,};
float weights_input_2[] = {0.00012,-0.00693,-0.01254,-0.11131,-0.25487,-0.07841,0.06040,0.14316,-0.12820,-0.44476,-0.39515,0.02494,0.13489,0.28734,0.41965,0.34464,-0.13706,0.01082,-0.00011,-0.07180,-0.09356,0.05470,-0.35369,-0.36606,-0.32610,0.06170,-0.33678,-0.35389,-0.31956,0.01612,0.09649,-0.06496,0.09953,0.54502,-0.05750,-0.05215,-0.06218,-0.14339,-0.03618,0.05417,-0.12012,-0.56860,-0.27612,-0.25366,0.06469,-0.04009,0.08670,0.30771,-0.04702,-0.20217,-0.02286,-0.07204,-0.02308,-0.04153,-0.06221,-0.06763,-0.05393,-0.00371,-0.28884,-0.36150,-0.05507,-0.19538,0.05631,-0.08381,-0.10372,-0.36984,-0.22346,0.01031,-0.21374,-0.46949,-0.11414,-0.07512,-0.06358,-0.06703,-0.08042,0.14703,-0.01125,-0.14299,-0.04258,0.14658,0.03052,-0.13652,-0.42240,-0.51240,-0.26197,-0.33102,-0.50979,-0.50016,-0.26120,-0.07566,-0.03303,-0.06345,-0.01639,0.03418,0.06382,-0.04880,0.15515,0.11511,0.15424,-0.15563,-0.61929,-0.64687,-0.47133,-0.89262,-0.65232,-0.53044,-0.22625,-0.11649,-0.03114,-0.07740,-0.00105,-0.01450,0.17222,0.38156,0.36634,0.26112,0.03469,0.02670,0.13430,-0.34149,-0.51565,-0.69241,-0.51476,-0.40540,-0.15526,-0.12967,-0.03186,-0.04766,-0.02849,0.08031,0.35833,0.67593,-0.01621,0.47506,0.18192,-0.09208,0.17140,-0.05885,0.03825,-0.08388,-0.04148,-0.16689,-0.11974,-0.19422,-0.03183,-0.06315,0.03690,0.20246,0.52146,0.80329,0.09342,-0.19247,-0.32585,-0.37436,0.04169,0.41374,0.01176,0.27990,0.42527,0.30529,-0.07973,-0.15604,-0.03051,-0.06604,0.04773,0.37252,0.27594,0.19999,0.13873,-0.10742,-0.24372,-0.39309,0.08012,-0.14458,0.38166,0.28823,0.31604,0.28839,0.02463,-0.15505,0.08531,0.05101,0.21338,0.18876,0.13391,-0.01055,-0.19697,-0.22107,-0.28758,-0.42131,-0.21378,-0.07410,0.15585,-0.01914,0.04513,0.13135,0.15249,-0.12192,0.08187,0.07067,0.20178,0.13500,-0.07623,0.18059,0.04896,-0.35380,-0.19727,-0.23134,-0.14904,-0.04767,0.21694,-0.09002,0.01173,0.02407,0.14900,-0.12274,0.19296,0.15840,0.18020,0.08440,0.13541,0.45503,0.32272,-0.04604,-0.12509,0.02166,0.20899,0.18175,0.29710,0.09282,0.12011,0.16018,0.09750,-0.12895,0.19115,0.17196,0.20737,0.07669,-0.01590,0.17527,0.33358,0.05436,0.09756,0.23780,0.26527,0.25905,0.17807,0.22570,0.26721,0.12685,0.09625,-0.01966,-0.05339,0.16632,0.00870,-0.21950,-0.40046,-0.30204,-0.14864,0.08658,0.20533,0.14393,0.30355,0.36211,-0.00891,0.35396,-0.02324,-0.01125,0.23281,-0.02165,-0.06453,0.05296,0.00509,-0.20839,-0.33798,-0.31769,-0.33711,-0.20441,-0.03000,-0.12502,0.30078,-0.11247,0.07839,0.28631,0.15098,-0.01309,0.12206,-0.05377,-0.00041,-0.10427,-0.04198,-0.17645,0.12611,-0.33541,0.19894,-0.17308,0.15936,0.32358,-0.00476,0.21876,0.03640,0.02124,-0.01184,0.08785,-0.00180,-0.12871,-0.00266,0.06851,-0.16700,0.06532,0.26362,-0.17262,-0.10995,0.05202,0.39834,0.17167,0.01269,0.23520,-0.00145,0.03905,-0.12501,-0.16906,0.00056,0.00061,-0.27080,};
float weights_input_3[] = {-0.00154,-0.02902,-0.02913,0.00105,-0.09174,-0.14183,-0.20226,-0.13156,0.03769,-0.03494,-0.07198,0.01401,-0.01905,-0.03920,-0.05798,0.19883,-0.06685,-0.01208,-0.00152,0.00218,-0.06023,-0.15331,-0.13023,-0.06060,0.02372,0.28848,-0.00524,0.05827,0.10043,0.12221,0.07985,-0.22541,-0.15009,0.16831,-0.03373,-0.00290,0.02772,-0.00099,-0.06914,-0.09692,-0.07054,-0.16397,0.11124,0.14649,0.34182,0.05227,0.01958,-0.10192,-0.01433,-0.18642,0.08419,0.01713,-0.04639,0.03901,0.01881,0.00498,0.05756,0.09020,-0.03198,0.27371,0.31988,0.20952,-0.00991,0.16930,-0.18235,-0.22876,-0.14819,-0.19148,0.00775,0.07719,-0.04064,0.02915,0.03336,0.00511,0.04931,0.08564,0.04553,0.29622,0.10859,0.22770,-0.11594,-0.36850,-0.15180,-0.35667,-0.15055,-0.05077,-0.05616,0.10831,0.03150,0.03554,0.02735,0.01903,0.08153,0.09459,0.23173,0.25281,0.22166,0.18190,-0.09370,-0.41765,-0.43405,-0.27310,-0.28332,-0.17464,-0.03561,0.09856,0.15136,0.06018,0.03462,-0.00893,0.09950,0.17219,0.44016,0.70744,0.41798,0.29778,-0.11620,-0.15014,-0.24222,-0.20443,-0.28818,-0.19514,-0.08609,0.04694,0.15644,0.06487,0.03481,-0.01525,0.16379,0.27381,0.37810,0.27538,0.45537,0.38869,0.28461,0.11681,0.02939,-0.11320,-0.12785,-0.09613,-0.00066,0.11486,0.15846,0.10916,0.03514,-0.01128,0.05043,0.16744,0.35906,0.31075,0.14654,0.14361,0.02445,-0.12662,-0.20653,-0.05753,-0.21670,-0.07096,0.25314,0.16228,0.18854,0.10085,0.02703,-0.01265,0.03784,0.04621,0.04264,0.07700,0.27768,0.00099,-0.15279,-0.19144,-0.31398,-0.15417,0.09369,0.07543,0.33495,0.16275,0.17302,0.10198,0.03013,-0.01667,0.02282,0.08443,0.05911,0.12554,0.40671,0.37035,0.32284,0.07414,0.03229,-0.11065,-0.08838,0.16374,0.33391,0.09425,0.21355,0.12802,0.02844,-0.02201,-0.06905,0.00551,-0.04323,-0.01553,0.15375,0.21264,-0.02588,-0.26777,-0.14224,0.01765,0.01262,0.15280,0.20598,-0.03180,0.14252,0.13013,0.02355,-0.04596,-0.11232,-0.02852,-0.05842,-0.06434,-0.12705,-0.25195,-0.65927,-0.66233,-0.09735,0.18232,-0.02209,0.03854,0.02910,-0.11898,0.14266,0.11091,0.00331,-0.01569,-0.14696,-0.12107,-0.16163,-0.13549,-0.10748,-0.33727,-0.35610,-0.33726,0.02128,0.20900,-0.08400,0.05320,-0.00115,-0.05982,0.05710,0.02344,0.00833,-0.03335,-0.15150,-0.04521,-0.09823,-0.14697,-0.12716,0.02690,-0.07013,0.02186,-0.13406,0.01906,-0.06135,0.01523,-0.15480,-0.10014,-0.00883,0.03573,0.02709,-0.00157,-0.16826,-0.08300,-0.06332,0.00448,0.04094,-0.01033,-0.09870,-0.44184,0.05908,-0.07265,-0.09949,-0.13841,-0.03488,-0.14278,-0.04563,0.02410,-0.00127,0.00098,-0.20047,-0.32069,-0.05272,0.12182,0.35623,0.27557,0.08437,-0.07258,-0.27403,-0.02733,-0.31454,-0.25201,-0.16148,-0.10862,-0.00078,0.03901,-0.00508,0.01044,-0.11847,-0.12769,-0.03123,0.03720,-0.05715,0.19503,0.11080,-0.10972,-0.11754,-0.32510,-0.34573,-0.36980,-0.31300,-0.11404,-0.00055,0.00161,0.00015,};
float weights_input_4[] = {0.00560,-0.02344,-0.02603,0.00710,0.05425,0.26799,0.18615,0.14718,-0.01250,0.08013,0.01931,-0.04955,0.02279,0.26665,0.15753,-0.04717,0.00751,0.00253,0.00339,-0.06267,0.00228,0.04716,0.18577,0.06451,0.12701,0.00853,0.16813,0.08285,0.07227,-0.15567,0.05048,0.18615,0.21085,-0.03694,-0.07073,0.01519,-0.03907,-0.02004,0.02481,0.07780,-0.00647,0.18652,-0.02838,0.11527,0.25480,0.26373,0.10632,-0.08687,-0.05482,0.09587,0.15345,-0.02885,-0.03852,-0.05111,-0.00341,0.04188,0.02291,-0.05050,0.02403,-0.11308,-0.13086,0.12250,0.30261,0.12759,0.04998,0.00865,-0.15398,0.15188,0.00918,-0.07962,-0.01666,-0.03712,-0.04043,0.04462,-0.04050,-0.01808,0.01750,0.08307,0.19253,0.09936,0.05962,-0.00136,-0.09850,0.06521,-0.05277,-0.03796,-0.08473,-0.05171,-0.00836,-0.03888,-0.03817,0.00819,-0.00921,0.11882,-0.01695,0.17742,0.28246,-0.15159,-0.21632,0.05504,0.08588,0.18857,0.06079,0.01237,0.00231,-0.07060,-0.05128,-0.03629,-0.03923,-0.01900,-0.04995,-0.01002,-0.14184,0.04018,-0.08275,-0.17495,-0.02756,0.13695,0.07513,0.16843,-0.06011,0.07971,0.02488,-0.08251,-0.05997,-0.03609,-0.04047,-0.01944,-0.08438,-0.07242,-0.15112,-0.26309,-0.29330,-0.38965,-0.13054,-0.01895,-0.07569,0.09130,-0.05588,0.13452,0.08561,-0.06950,-0.05618,-0.02564,-0.04032,-0.02145,-0.08200,-0.09191,-0.31845,-0.19432,-0.20698,-0.36276,-0.35465,-0.13906,0.10949,0.18564,0.05123,0.16671,0.05476,-0.10305,-0.04961,-0.03178,-0.03837,-0.02206,-0.07983,-0.21549,-0.12225,-0.23937,-0.34887,-0.40286,-0.27274,0.01795,-0.09093,-0.14106,-0.11105,-0.02150,-0.18032,-0.11211,-0.05269,-0.03247,-0.04181,-0.02443,-0.13959,-0.23637,-0.15732,-0.19861,-0.20707,-0.08051,0.32544,0.35161,0.06392,-0.17464,-0.37969,-0.35356,-0.41709,-0.15163,-0.05980,-0.02128,-0.03593,-0.04611,-0.18209,-0.25782,0.01990,-0.14934,0.03569,0.08023,0.37691,0.38718,0.02172,-0.34862,-0.47453,-0.53720,-0.40691,-0.21858,-0.07692,-0.01943,-0.05985,-0.08246,-0.21694,-0.35420,-0.21549,-0.19156,0.26500,0.21910,0.65113,0.39751,-0.24839,-0.52242,-0.50650,-0.53390,-0.33994,-0.13732,-0.04087,0.00418,-0.05681,-0.04853,-0.21570,-0.37739,-0.16068,-0.03421,0.32083,0.34577,0.26132,0.13863,-0.31008,-0.42523,-0.54414,-0.32265,-0.24466,-0.01366,0.09603,-0.00476,-0.03841,-0.05358,-0.16616,-0.25360,0.06540,0.13425,0.48641,0.25721,0.05449,-0.04730,-0.11131,-0.25686,-0.19558,0.00174,0.12343,0.19518,0.06416,0.04069,-0.03943,-0.08851,-0.10655,-0.11844,0.33568,0.27424,0.19461,0.13282,0.14448,0.17759,-0.12187,-0.21867,0.10090,0.18886,0.13703,0.20572,0.00609,-0.03852,-0.00049,-0.06696,0.00600,-0.00821,0.16246,-0.01658,0.01605,0.04103,-0.11125,-0.15145,-0.05120,0.12086,0.26177,0.20566,0.25274,0.05683,0.00108,-0.02284,0.00843,0.02565,0.08992,0.08737,0.13428,0.04828,-0.10364,-0.34191,-0.27779,-0.10682,0.01934,0.18389,0.28252,0.30829,0.17630,0.02572,0.00421,0.00130,0.04501,};
float weights_input_5[] = {0.00037,-0.04486,-0.04204,0.07755,0.30761,0.33376,0.36369,0.22003,0.11422,-0.09900,0.05249,-0.16767,-0.30425,-0.22727,-0.16594,-0.19295,0.27019,0.00807,-0.00011,-0.09337,0.05205,0.18396,0.19238,0.48974,0.22354,-0.00720,-0.00113,0.09654,0.01245,-0.05609,0.02491,0.00268,0.11388,-0.38907,0.16634,0.06247,-0.04632,-0.02117,0.00681,0.10290,0.12571,0.47474,-0.16661,-0.13378,-0.37039,-0.13836,-0.23970,-0.19692,-0.02162,0.20098,0.17167,0.10646,0.23411,0.01205,-0.03660,0.06098,-0.02445,0.03098,0.25975,0.02582,-0.16932,-0.30146,-0.27858,-0.16255,-0.08015,0.24900,-0.11583,0.15243,0.22648,0.31823,0.19287,-0.04144,-0.05169,0.06294,-0.00214,-0.11601,0.05719,-0.30059,-0.08637,0.02265,-0.01130,-0.10365,-0.12709,0.27538,0.14801,0.21019,0.50889,0.36083,0.18724,-0.04982,-0.06284,0.04361,-0.10693,0.01927,-0.11361,-0.25252,0.02849,0.13073,0.15008,-0.42260,0.02075,0.24886,0.44499,0.74845,0.52064,0.34651,-0.02676,-0.04953,-0.07146,0.00183,-0.14796,-0.13920,-0.37304,-0.51187,0.07399,0.10371,0.45122,-0.31360,0.01726,0.17918,0.43961,0.51596,0.43277,0.24732,-0.08519,-0.06005,-0.07186,-0.00960,-0.22971,-0.33796,-0.48801,-0.10604,0.05202,0.25112,0.01925,-0.24363,0.04793,0.19579,0.04871,-0.15142,-0.12973,-0.14327,-0.13068,-0.05500,-0.07193,-0.00899,-0.17229,-0.43860,-0.49024,-0.57880,0.11780,0.27469,0.20862,0.33896,0.44386,-0.02929,-0.10202,-0.60631,-0.74505,-0.55715,-0.15632,-0.06534,-0.06594,-0.01078,-0.15588,-0.30319,-0.23530,-0.17819,0.01126,0.30405,0.19118,0.07097,0.46326,0.24835,-0.25024,-0.29766,-0.74888,-0.43299,-0.21457,-0.06503,-0.10875,-0.04556,-0.07431,0.16130,0.09163,0.11396,0.03637,0.11568,-0.28142,0.00587,0.36854,0.44415,0.03635,-0.21030,-0.36707,-0.24533,-0.24752,-0.08820,-0.10898,-0.01040,0.09526,0.37091,0.41467,0.53962,-0.09550,0.19474,0.00741,0.27540,0.29817,0.22127,-0.05846,-0.22151,-0.09255,-0.09952,-0.17566,-0.09113,-0.10685,0.06081,0.18040,0.25525,0.25913,0.35856,0.03744,0.45079,0.55118,0.38498,-0.09220,-0.23078,-0.04814,-0.12652,0.10444,-0.06374,-0.10764,-0.09318,-0.08297,-0.01324,0.11698,0.17721,0.27043,0.14832,-0.10676,0.31960,0.07984,-0.10047,-0.36925,-0.18693,0.11727,-0.07274,0.06762,-0.18154,-0.03809,-0.07363,-0.03205,-0.01739,0.07901,0.28517,0.10809,0.18495,0.06526,-0.30527,-0.39236,-0.62717,-0.45114,-0.28462,-0.01333,-0.21239,0.28792,0.07494,-0.03588,-0.05699,-0.04515,-0.05124,0.08716,0.25154,0.21338,0.02810,0.04614,0.01823,-0.01141,0.04430,-0.24115,-0.08024,-0.01225,-0.13594,0.23888,0.18776,-0.07676,-0.04480,0.00145,-0.00626,0.14521,0.32138,-0.29289,0.15422,-0.53804,-0.35835,-0.33542,-0.21988,0.07074,0.00989,0.03508,0.14258,0.09874,-0.01598,-0.00762,0.01007,0.00329,-0.01136,0.17184,-0.08598,-0.31144,-0.30032,-0.23703,-0.31593,-0.05717,-0.24896,-0.13597,-0.00366,0.03421,-0.11627,0.01615,0.01555,-0.00524,0.00193,0.23968,};
float weights_input_6[] = {-0.00056,-0.00074,-0.00112,-0.12965,-0.23228,-0.35491,-0.35614,-0.33027,-0.22235,-0.06319,-0.05408,-0.07368,0.08024,-0.08109,-0.23461,-0.17871,-0.05304,0.01212,-0.00060,-0.04020,-0.06493,0.00119,-0.13976,-0.27937,-0.18547,-0.23242,-0.12651,-0.08525,-0.05518,-0.04675,-0.15835,0.05032,-0.15313,-0.20774,-0.05565,-0.03102,-0.04056,-0.08335,-0.02135,-0.01489,-0.14816,-0.34261,-0.05273,-0.26254,-0.21421,-0.01448,-0.04616,0.03632,-0.10676,-0.05489,-0.18334,-0.14550,-0.01073,-0.07342,-0.03981,-0.04372,-0.01990,-0.01120,-0.07574,-0.18837,-0.15639,-0.01403,0.09135,0.21757,0.25569,0.12250,-0.02881,-0.06044,-0.13118,-0.06379,-0.00873,-0.02975,-0.04086,-0.04517,-0.00123,-0.05900,-0.01977,-0.09326,-0.10584,-0.08450,0.04372,0.26991,0.22481,0.13543,0.07203,-0.06055,-0.06392,-0.06335,-0.01668,-0.02800,-0.04233,-0.04399,0.01450,-0.05043,-0.02452,-0.09438,-0.04528,0.03871,0.08507,0.54241,0.26939,-0.01726,0.04330,-0.00281,-0.04445,-0.04875,-0.01655,-0.04552,-0.04174,-0.04341,0.01235,0.02129,0.00444,-0.08501,-0.12326,-0.14527,0.00561,0.34096,0.17691,0.08221,0.06981,-0.03550,-0.08610,-0.03223,-0.01651,-0.04353,-0.04178,-0.04348,-0.00439,0.03392,0.01353,0.07081,-0.05971,-0.25877,-0.09730,0.11971,0.04016,0.09887,-0.03527,-0.12482,-0.13773,-0.09599,-0.01857,-0.05209,-0.03981,-0.04329,0.01544,-0.01196,0.09436,0.04599,0.02729,-0.15203,0.01947,0.04436,-0.06803,0.02394,0.00146,-0.02734,-0.18350,-0.14968,-0.08327,-0.05124,-0.04176,-0.04440,0.02190,0.10585,0.18438,0.15485,0.05390,-0.10798,-0.03690,0.00146,0.04109,0.03923,-0.04911,0.00314,-0.07148,-0.14902,-0.08012,-0.05036,-0.09452,-0.09821,-0.03451,0.05569,0.07400,0.11410,-0.04254,-0.13715,-0.17827,0.05114,0.14981,-0.05102,-0.10246,0.01239,-0.11602,-0.11141,-0.08626,-0.11695,-0.09245,-0.09838,0.05622,0.09312,0.06324,0.03355,-0.14636,-0.10062,-0.09083,0.14998,0.36765,0.03009,-0.10606,-0.02290,-0.12635,-0.05285,-0.06889,-0.11638,-0.07770,-0.06008,0.07572,0.12335,0.00749,-0.12955,-0.13404,-0.00009,0.13262,0.34382,0.43888,0.08306,-0.10172,0.02476,-0.00497,0.02852,-0.05620,-0.08466,-0.06466,-0.06132,0.07137,0.11947,-0.01671,-0.17062,-0.13763,0.02438,0.04071,0.28984,0.30326,0.11157,-0.00351,-0.06380,-0.06216,-0.00113,-0.05461,-0.05803,-0.00959,-0.06448,-0.01087,-0.01418,-0.18355,-0.34402,-0.39684,-0.18945,-0.03365,0.14126,0.27423,0.05638,-0.10559,-0.20549,-0.15445,-0.00421,-0.06198,-0.07886,-0.03852,-0.05528,-0.05403,-0.03763,-0.08150,-0.28082,-0.29588,-0.31284,-0.12006,0.12123,0.10569,0.04782,-0.04370,-0.10209,-0.08020,-0.02551,-0.01866,-0.02712,0.00055,-0.10433,-0.02757,-0.04937,-0.08016,-0.14199,-0.16950,-0.24248,-0.22469,-0.05650,-0.00595,-0.05330,0.22446,0.21032,0.11820,-0.04207,0.01703,-0.08294,-0.00080,-0.01384,-0.07682,-0.01234,-0.02457,-0.04221,-0.00091,-0.10823,-0.27233,-0.00281,0.23140,0.37450,0.26819,0.28171,0.20867,-0.02840,0.01527,-0.00151,-0.02811,};
float weights_input_7[] = {-0.00013,-0.00412,0.00039,-0.11923,-0.24772,-0.70638,-0.65542,-0.87929,-0.43045,-0.09659,0.05923,0.26602,0.05841,-0.15964,-0.27791,-0.23675,-0.03541,-0.00931,-0.00198,-0.04650,-0.05754,0.02531,-0.17040,-0.56430,-0.59148,-0.28477,-0.37363,-0.29378,-0.27650,-0.06273,-0.15142,0.16068,-0.15100,0.09214,-0.05305,-0.05989,-0.04342,-0.09657,-0.00655,-0.06087,-0.33100,-0.49089,-0.35052,-0.33847,-0.22802,-0.01413,-0.17755,-0.04061,-0.26413,-0.13756,0.05400,0.09972,-0.05541,-0.15601,-0.04457,-0.05466,-0.02663,-0.03005,-0.28699,-0.27945,-0.29191,-0.05685,-0.12171,0.11416,0.29290,-0.13501,-0.26790,-0.18144,-0.02090,0.02968,0.01839,-0.08632,-0.04467,-0.05638,-0.02506,0.02181,0.18455,-0.13254,-0.28011,-0.05273,0.01635,0.33624,0.19528,-0.05106,-0.08552,-0.20993,0.06436,-0.18427,-0.13049,-0.09068,0.02474,-0.05292,0.08179,0.01760,0.15552,-0.21709,-0.11327,-0.14257,-0.01528,0.65131,0.12756,-0.30055,-0.29051,-0.48194,-0.53589,-0.44749,-0.21507,-0.16097,0.02520,-0.04874,0.10131,0.22537,0.10142,-0.10209,-0.12299,-0.28857,-0.10423,0.64387,0.36408,-0.19137,-0.48313,-0.60688,-0.61861,-0.39664,-0.14058,-0.16153,0.02234,0.02011,0.08443,0.22662,0.47566,0.30178,-0.01551,-0.09410,0.44302,0.68793,0.26247,0.27732,0.08535,-0.44591,-0.14276,-0.26302,-0.13399,-0.16174,0.02449,0.01827,0.11955,0.29338,0.54590,0.34449,0.09549,0.04853,0.22397,0.15672,0.03659,0.26040,0.23503,0.04174,0.13686,0.12702,-0.12649,-0.08465,0.02460,0.01687,0.12037,0.46036,0.36351,0.31174,0.27283,0.08585,-0.07187,-0.11759,0.02632,0.02525,-0.01423,0.16001,-0.03945,0.27553,0.03311,-0.08147,-0.01716,-0.02499,0.04273,0.35155,0.34320,0.33748,0.45931,0.27710,-0.07954,0.01347,-0.08867,-0.14159,-0.18078,0.01137,-0.02930,-0.03916,0.15308,-0.08268,-0.01501,-0.02428,0.06690,0.16606,0.43031,0.77688,0.67118,-0.06660,-0.08968,0.14810,0.20806,-0.22507,-0.20319,-0.02308,-0.07033,-0.13769,0.12557,-0.08165,-0.03149,-0.10364,0.06561,-0.02664,0.01359,0.31105,0.31130,-0.04414,0.04640,0.30202,0.31535,-0.23326,-0.19251,0.04928,-0.05089,-0.11541,0.06407,-0.01076,-0.03209,-0.10862,-0.03642,-0.17121,-0.30329,-0.02760,0.18932,0.04994,0.09219,0.39678,0.16772,-0.21844,-0.09170,0.02669,-0.20520,-0.11658,0.11792,0.04969,-0.04138,-0.11519,-0.08015,-0.26392,-0.45100,-0.29948,0.00248,-0.01831,-0.02449,0.15637,0.01860,-0.09822,-0.20689,-0.06329,-0.31217,0.16518,0.16950,-0.04045,-0.04260,-0.12426,-0.19347,-0.40874,-0.37367,-0.27124,0.09455,0.13553,0.10899,0.31049,-0.03133,-0.00682,-0.15149,-0.05568,0.00231,0.27873,0.16153,-0.04352,0.00073,-0.12329,-0.09101,-0.27225,-0.35542,-0.18085,0.15936,-0.05785,0.00335,0.10937,0.02411,-0.00150,0.22062,0.26980,0.44072,0.32594,0.01295,-0.09696,-0.00235,-0.01004,-0.08593,-0.00355,0.06720,-0.34266,-0.03758,-0.01622,-0.02619,0.15249,0.56103,0.80226,0.47177,0.72922,0.51789,-0.03815,0.01300,0.00002,0.11439,};
float weights_input_8[] = {0.00501,0.00179,-0.00147,0.02073,0.13227,0.11358,0.12489,-0.02834,-0.06593,-0.00946,-0.01854,0.04731,0.23348,0.26077,0.17822,0.19665,0.10103,0.04431,0.00310,-0.03396,0.00559,0.08822,0.02112,0.02897,-0.02578,0.08884,-0.05445,-0.03275,-0.05154,0.08907,0.03819,0.24981,0.27912,0.20607,0.05627,0.03394,-0.03551,-0.05692,-0.00514,0.01664,-0.00159,-0.22064,0.16475,-0.11121,0.09270,0.15358,-0.04469,0.01679,-0.04070,0.17031,0.26002,0.15614,0.05855,-0.02979,-0.04673,-0.01503,-0.01969,0.01191,0.00516,-0.09069,0.06472,0.03098,0.08839,0.18706,0.05885,-0.03369,-0.05765,0.13332,0.19789,0.01085,0.02833,-0.01739,-0.03364,-0.01491,-0.00529,-0.01246,0.07322,-0.10839,-0.15876,-0.15280,-0.03114,0.03637,-0.05634,0.00001,0.03971,0.10930,0.03613,-0.06136,-0.04561,-0.03400,-0.03604,-0.00750,0.00432,-0.05201,0.06060,-0.14867,-0.16770,-0.05477,0.03089,0.11869,0.04451,0.04353,0.04002,-0.06956,-0.05766,-0.09603,-0.07138,-0.05481,-0.03566,-0.01181,0.00390,0.03038,0.07149,-0.03821,-0.01201,-0.10427,-0.04993,0.01252,0.07181,0.18085,0.11084,-0.16318,-0.11321,-0.06739,-0.06536,-0.05244,-0.03518,-0.00930,-0.00935,0.01613,0.05129,0.12750,-0.03885,-0.11322,-0.07334,-0.00231,0.24621,0.20122,0.00201,-0.17289,-0.11606,-0.07093,-0.06236,-0.09080,-0.03520,-0.01047,-0.00276,-0.02965,0.16450,0.14101,0.11096,-0.08754,-0.02283,0.06587,0.16191,0.08314,-0.10150,-0.10915,-0.13621,-0.05513,-0.09105,-0.09436,-0.03450,-0.01099,0.00311,0.05060,0.17022,0.19724,0.16045,-0.03458,0.09633,0.16109,0.12701,0.12062,-0.04470,-0.02052,-0.04313,-0.04035,-0.08116,-0.09117,-0.03586,-0.01108,0.01980,0.04709,0.04327,0.14992,0.05554,0.03235,0.15592,0.11863,0.09636,0.05593,0.01654,0.02141,0.00793,-0.01679,-0.06570,-0.11133,-0.03415,-0.00654,0.10746,0.09437,0.06458,0.07099,-0.13067,0.03186,0.11515,0.13962,0.18799,0.15615,-0.05333,0.04462,0.04215,0.01996,-0.04660,-0.11602,-0.02742,0.02200,0.13143,0.08292,0.00194,-0.12400,-0.18784,-0.05319,0.09949,0.21013,0.25243,0.23444,0.02177,0.07024,0.07330,0.08155,-0.05529,-0.09491,-0.01044,0.01195,0.08983,0.07508,-0.06895,-0.25615,-0.10895,-0.01652,0.19189,0.30172,0.22201,0.21106,0.03660,-0.03335,-0.02715,-0.05240,-0.11088,-0.02690,-0.01018,0.00451,-0.01138,-0.11961,-0.30090,-0.46566,-0.47599,-0.10350,0.11388,0.22681,0.21813,0.14272,-0.13731,-0.21381,-0.22597,-0.14265,-0.06613,-0.10100,-0.03824,-0.03700,-0.05285,-0.11882,-0.34398,-0.49119,-0.40519,-0.23505,-0.03492,0.00660,-0.03522,-0.02597,-0.23585,-0.24563,-0.20424,-0.10704,0.02744,-0.02957,0.00010,-0.08242,-0.09462,-0.11052,-0.18548,-0.26182,-0.23793,-0.17555,-0.16051,-0.18346,-0.30479,-0.22501,-0.02821,-0.00541,-0.05725,-0.01308,0.02214,-0.04863,-0.00142,-0.02884,-0.11570,-0.10369,-0.13082,-0.12809,-0.06853,-0.13572,-0.23592,-0.21043,-0.14719,0.01780,-0.05421,0.03792,0.05770,-0.04341,0.01751,-0.00347,-0.14119,};
float weights_input_9[] = {0.00716,0.08260,0.07426,-0.06558,0.04279,0.41792,0.48260,0.47550,0.06920,0.01926,-0.16419,-0.19017,0.17322,0.35539,0.33960,0.13031,-0.07430,0.01276,0.00439,0.05329,0.02583,0.06704,0.25761,0.28192,0.37164,0.12461,0.33317,0.14571,-0.00910,-0.11758,0.11073,0.37561,0.31548,0.20458,0.00169,-0.06675,-0.02860,-0.03911,0.09847,0.05420,0.18972,0.28749,0.26564,0.29162,0.14800,0.25098,0.32346,0.16401,0.16621,0.21685,-0.03414,-0.02997,0.02706,-0.06695,-0.02962,-0.07639,-0.00123,-0.07345,0.05607,0.07168,0.15667,0.18827,0.40220,0.06921,0.20255,0.07813,0.28999,0.01598,-0.11557,-0.21213,-0.06440,-0.04158,-0.03285,-0.07704,-0.02365,-0.07260,-0.10124,0.01611,0.15041,-0.05435,0.02083,0.17781,0.00677,0.09003,-0.04300,-0.21941,-0.49204,-0.24979,-0.06747,-0.04410,-0.03731,-0.09032,-0.04948,-0.16700,-0.16821,-0.00408,-0.14434,-0.05306,-0.20636,0.24771,0.12459,-0.06923,-0.21589,-0.41385,-0.40899,-0.15394,-0.06703,-0.03857,-0.04325,-0.02179,-0.05752,-0.22459,-0.14257,-0.31170,-0.31590,-0.20863,-0.12904,0.34945,0.17252,-0.07898,-0.08811,-0.29897,-0.30191,-0.11924,-0.06561,-0.04521,-0.04428,-0.02262,-0.02250,-0.24634,-0.33089,-0.47409,-0.61675,-0.53558,-0.37142,0.11890,0.16766,-0.05997,0.00358,0.16887,-0.27834,-0.06401,-0.05501,-0.04249,-0.04448,-0.02376,0.01843,-0.15398,-0.39890,-0.26227,-0.32930,-0.19479,-0.16505,-0.02849,-0.00264,0.06938,0.22786,0.28516,-0.25372,-0.06862,-0.06056,-0.04808,-0.04050,-0.02289,0.01556,-0.20331,-0.19940,-0.28108,-0.54328,-0.07601,-0.04343,0.18547,-0.20469,-0.04093,0.06659,-0.02877,-0.00157,-0.11496,-0.06412,-0.04828,-0.03952,-0.01618,-0.04811,-0.36021,-0.37394,-0.68345,-0.72426,-0.69762,-0.42725,-0.21958,-0.39380,-0.16828,0.12417,-0.10490,0.02420,0.16843,-0.08104,-0.04603,-0.03442,-0.04344,-0.10779,-0.34369,-0.56576,-0.82847,-0.53864,-0.28587,-0.06783,-0.02174,-0.21979,-0.06381,0.09148,-0.04034,-0.00345,0.26465,-0.05513,-0.04969,0.01471,-0.00536,-0.11288,-0.15007,-0.25653,-0.40026,-0.14103,-0.19969,-0.02391,0.16474,-0.15128,-0.01849,0.01747,-0.05749,-0.03298,0.24609,-0.05267,-0.02926,0.02089,0.02495,0.08935,0.15658,0.15208,0.04419,0.09859,-0.00299,-0.10054,0.10143,-0.06370,-0.08199,-0.07458,-0.06130,0.11901,0.26179,-0.03642,-0.02057,-0.03186,0.04388,0.19172,0.12256,0.34016,0.25301,0.14193,0.19412,0.13668,0.05982,0.18491,0.14033,0.13731,0.18694,0.28640,0.00368,-0.05110,-0.05192,-0.03124,0.02426,0.21216,0.24453,0.22611,0.12356,-0.17058,0.03086,-0.02895,0.28720,0.06550,-0.01748,0.14784,0.36761,0.00681,-0.08987,0.01056,-0.03361,0.00079,-0.03086,0.19055,0.28628,0.46641,0.05787,0.01773,0.11657,0.20476,0.28919,0.11033,-0.18463,0.32902,0.20560,-0.05401,-0.05467,-0.00228,-0.11554,0.00055,-0.01374,-0.01484,0.16719,0.14219,0.22342,0.22774,-0.01691,-0.13334,0.21236,-0.32210,-0.33647,-0.03014,-0.00164,-0.16189,-0.03993,-0.00120,-0.00216,0.08933,};
float weights_input_10[] = {0.03010,0.03129,0.02801,0.07593,0.30459,0.30342,0.32987,0.05658,0.03956,0.13981,0.03513,-0.00217,0.19488,0.28864,0.23280,0.18288,0.13290,0.05247,0.02859,-0.03087,0.07648,0.12245,0.19637,0.19722,0.16103,0.15513,0.08593,0.05618,0.02668,-0.04768,-0.00595,0.34737,0.33726,0.24522,0.01595,0.03415,-0.05825,-0.08539,0.03707,0.02113,0.05664,-0.04818,0.31587,0.09363,0.42734,0.30474,0.00803,-0.15518,-0.11427,0.18139,0.31947,0.16764,0.04513,-0.09149,-0.07240,-0.01211,-0.01303,0.04343,0.03542,-0.02678,0.14647,0.24625,0.38100,0.29225,0.11221,-0.15981,-0.09978,0.10680,0.22042,0.06960,0.05418,-0.04286,-0.05905,-0.01013,0.00128,-0.00907,0.08595,-0.08161,-0.16919,-0.09860,0.02237,0.00129,-0.07502,-0.07258,-0.02365,0.02818,-0.02077,-0.00233,0.02111,-0.07383,-0.07356,-0.01092,0.01049,-0.03714,0.02264,-0.19098,-0.34171,-0.25461,-0.11101,0.20175,0.07429,0.02838,-0.06809,-0.15518,-0.09170,-0.04170,-0.01008,-0.07491,-0.07366,-0.01158,0.00894,0.06370,-0.02630,-0.20262,-0.31563,-0.29215,-0.04870,0.15172,0.07937,0.16949,0.00798,-0.29185,-0.16070,-0.07914,-0.00592,-0.07442,-0.07400,-0.01112,0.00126,0.01144,-0.08310,-0.12943,-0.25871,-0.49458,-0.07942,0.14583,0.40531,0.12789,-0.10363,-0.25108,-0.14348,-0.01143,0.02211,-0.05095,-0.07427,-0.01390,0.00660,0.01236,-0.08440,-0.16499,-0.28506,-0.33080,-0.08688,0.10540,0.21462,-0.03850,-0.14857,-0.20339,-0.14191,-0.00066,-0.01263,-0.08093,-0.07387,-0.01464,0.00932,-0.04956,-0.13627,-0.15820,-0.28363,-0.24662,0.13561,0.21595,-0.12164,-0.13418,-0.17647,-0.14271,-0.06324,-0.00687,0.00167,-0.08160,-0.07688,-0.01618,-0.02576,-0.06820,-0.13750,-0.22025,-0.25319,-0.19549,0.27045,0.06424,-0.23820,-0.23547,-0.14540,-0.10602,-0.04042,0.00039,0.00374,-0.07211,-0.07031,-0.03149,-0.03892,-0.07378,-0.09678,-0.24929,-0.31274,-0.05122,0.16360,0.01059,0.07182,-0.11681,-0.28781,-0.10798,-0.05184,-0.01030,-0.01115,-0.08663,-0.11367,-0.07902,-0.05143,-0.08760,-0.22357,-0.41934,-0.29351,-0.23980,0.00631,0.11083,0.13217,-0.02738,-0.31453,-0.21170,-0.15342,-0.01171,-0.00607,-0.07214,-0.11377,-0.05774,-0.06837,-0.07818,-0.26932,-0.37684,-0.12623,-0.13044,0.12481,0.25568,0.13477,-0.07321,-0.30637,-0.32438,-0.23181,-0.08403,-0.08173,-0.06559,-0.07340,-0.06113,-0.07634,-0.19574,-0.21679,-0.38375,-0.40051,0.05213,0.23138,0.30044,0.18595,-0.02554,-0.22503,-0.31161,-0.33912,-0.11261,-0.08364,-0.15325,-0.07399,-0.13011,-0.10427,-0.14303,-0.24544,-0.41410,-0.26143,-0.03960,0.07166,0.14032,-0.06147,-0.13627,-0.27544,-0.28810,-0.18328,-0.06685,0.02302,-0.07242,0.00047,-0.12913,-0.15212,-0.11130,-0.08027,-0.15504,-0.04651,0.02913,-0.11321,-0.19888,-0.24113,-0.30017,-0.06777,0.02505,0.01458,0.02367,0.02565,-0.08656,-0.00182,-0.04791,-0.17472,-0.19957,-0.19663,-0.10217,-0.03328,-0.12371,-0.21146,-0.15000,-0.15204,-0.14607,-0.06790,0.03797,0.02575,-0.05844,0.02056,-0.00593,0.01295,};
float weights_input_11[] = {-0.00136,-0.09535,-0.09372,0.03527,-0.03773,-0.27869,-0.33081,-0.26107,-0.20458,-0.16511,-0.04596,0.06493,-0.13448,-0.14691,-0.12779,-0.01310,0.10068,-0.00799,-0.00101,-0.12724,-0.01482,0.00181,-0.21416,-0.26531,-0.28831,-0.09840,-0.35243,-0.17945,-0.08543,-0.00920,-0.16388,-0.14014,-0.23286,-0.06537,0.06450,0.08202,-0.03236,-0.03153,-0.11836,-0.11324,-0.32780,-0.39386,-0.26156,-0.29868,0.07620,-0.08474,-0.25802,-0.01209,-0.01729,-0.11215,0.02375,0.00603,0.11391,0.13524,-0.03194,0.08302,-0.11305,-0.05061,-0.17209,-0.11921,-0.05621,-0.22445,0.01416,-0.04690,-0.14768,-0.13116,-0.15549,0.04430,0.06712,0.13919,0.13917,0.04384,-0.03866,0.08370,-0.01421,-0.13982,-0.02284,-0.01783,-0.00970,0.09914,0.33449,-0.04811,0.10453,-0.07266,0.13083,0.17394,0.20614,0.11434,0.10005,0.03436,-0.03909,0.10051,-0.00713,-0.01456,0.08766,0.03247,-0.00343,0.27067,0.57713,-0.04051,-0.00827,-0.01056,0.10968,0.17351,0.14044,0.03817,0.09789,0.03687,-0.02333,0.00707,0.05574,0.04619,0.18778,-0.04292,0.18441,0.37566,0.40959,-0.04696,0.00219,-0.06293,0.11330,-0.01735,0.08315,-0.04958,0.09593,-0.00363,-0.02315,0.00487,0.00172,0.04034,0.15170,0.32724,0.22598,0.21654,0.11367,-0.33550,-0.14812,-0.10953,-0.24105,-0.24932,-0.07042,-0.16110,0.08199,0.04918,-0.02495,0.07908,0.02892,0.01640,0.09321,-0.07680,-0.07612,-0.10578,0.30330,0.05516,0.06557,-0.34562,-0.58937,-0.41290,-0.05007,-0.16430,0.09330,0.05444,-0.01435,0.07765,0.05482,0.26009,0.11471,0.08582,0.08881,0.03030,0.37610,-0.01782,-0.04105,-0.52090,-0.48415,-0.12411,-0.05922,-0.11160,0.10187,0.05332,-0.01564,0.08577,0.15385,0.63446,0.83230,0.61739,0.43574,0.18599,-0.14021,-0.35978,-0.40249,-0.22999,-0.07422,-0.01572,0.02226,-0.14286,0.11265,0.05257,-0.01703,0.10472,0.16840,0.80458,1.06051,1.17893,0.40514,0.02432,-0.49212,-0.52100,-0.27156,-0.10927,0.10377,-0.04102,0.13611,-0.10691,0.15915,0.05260,-0.01388,0.11625,0.19937,0.51252,0.73700,0.76397,0.32113,0.40257,-0.03458,-0.27254,0.07473,0.01664,-0.01969,0.04943,0.09865,-0.03253,0.21375,-0.03222,-0.02991,0.09695,0.07127,0.15094,0.28739,0.21215,0.03381,0.30122,0.02323,-0.13336,0.04461,0.09206,0.05925,-0.01326,0.02491,0.01987,0.07901,-0.03828,-0.03050,0.07555,-0.05789,0.01428,-0.08062,-0.09910,-0.00903,0.03870,-0.16562,-0.13207,-0.24272,-0.03784,0.07644,0.02244,-0.09195,0.10547,0.06880,-0.03308,-0.03233,-0.02976,-0.16482,-0.19927,-0.32514,-0.09442,0.35389,0.31186,0.05833,-0.24829,-0.08912,-0.14415,-0.05580,-0.10489,0.17240,0.28409,0.00700,-0.03298,-0.00064,-0.03235,-0.23939,-0.27959,-0.52668,-0.36624,0.06703,0.05960,0.07445,0.05604,0.17399,0.29538,0.04118,0.09222,0.34786,0.07888,-0.00183,0.05833,-0.00218,-0.00141,-0.14139,-0.19942,-0.22510,-0.40407,-0.31273,-0.02952,0.33056,0.23574,0.20643,0.29880,0.16382,0.14494,0.08106,-0.02183,0.00004,-0.00147,-0.18913,};
float weights_input_12[] = {0.00173,0.04321,0.04362,-0.06713,0.05633,0.08344,0.11963,0.05699,-0.00296,0.06914,0.13635,0.11363,0.04345,-0.12856,-0.10124,-0.33651,-0.05767,0.01451,0.00064,0.01642,0.01696,0.09803,0.17424,0.08767,0.18238,-0.06830,0.13606,0.10671,0.09556,0.09388,0.11716,0.26790,0.07350,-0.25928,-0.03226,-0.04584,-0.02680,-0.03968,0.07564,0.08446,-0.01846,0.24987,0.14769,0.07276,-0.15234,0.03982,0.19848,0.29901,0.24453,0.26823,-0.08742,-0.08895,-0.01193,-0.07930,-0.02375,-0.06006,-0.01436,-0.05806,0.03386,-0.11283,-0.10455,-0.06001,-0.04142,-0.06605,0.30504,0.48518,0.42060,0.19838,0.02570,-0.03169,-0.01713,-0.01186,-0.03021,-0.06149,-0.01690,-0.12681,-0.14469,-0.17039,-0.10892,-0.22826,-0.04110,0.18950,0.26288,0.60134,0.26146,0.14038,0.11558,-0.05504,-0.00047,-0.01547,-0.03446,-0.06595,-0.04850,-0.13460,-0.26245,-0.22293,-0.29175,-0.28647,-0.06002,0.36173,0.48782,0.36573,0.32880,0.27919,0.17963,0.00406,-0.01322,-0.01540,-0.03642,-0.02119,-0.04863,-0.11073,-0.38869,-0.60826,-0.47898,-0.45219,-0.04320,0.06981,0.09903,0.10490,0.21837,0.28917,0.17922,0.02348,-0.01578,-0.01864,-0.03574,-0.02646,-0.04094,-0.15109,-0.32196,-0.42085,-0.38573,-0.55427,-0.46096,-0.19288,-0.27049,-0.15621,-0.06497,0.18882,0.12804,0.02643,-0.01243,-0.01024,-0.03779,-0.02099,0.00677,-0.05632,-0.21179,-0.21394,-0.10371,-0.17508,-0.14364,-0.14036,-0.10896,-0.23428,0.16336,0.15933,-0.09690,-0.07253,-0.04818,-0.01625,-0.03127,-0.01997,0.01625,0.03890,-0.01211,-0.22889,-0.42016,-0.23517,-0.16714,0.02113,-0.04657,-0.10374,-0.26328,-0.22329,-0.18000,-0.11871,-0.05182,-0.01680,-0.09102,-0.07332,-0.02819,0.01170,-0.00460,-0.23277,-0.54266,-0.62806,-0.49093,-0.26602,-0.30602,-0.12572,-0.15487,-0.30941,-0.33292,-0.12732,-0.09985,-0.04969,-0.08816,-0.07304,0.03522,0.01498,0.07551,-0.10269,-0.18894,-0.24461,-0.08538,0.01166,-0.08087,-0.13129,-0.15852,-0.19465,-0.27969,-0.01699,-0.06168,-0.05017,-0.08850,-0.04802,0.07757,0.15883,0.19842,0.08676,0.16926,0.14710,0.40917,0.38338,0.04713,-0.16217,-0.11073,-0.07059,-0.12152,0.02840,-0.08040,-0.04251,-0.07737,-0.07898,0.11286,0.17777,0.25127,0.25634,0.19149,0.27565,0.25669,0.26554,-0.02080,-0.12331,0.00106,-0.11246,-0.08656,0.03043,-0.05051,-0.03977,-0.00637,-0.06745,0.15148,0.06841,0.18439,0.26691,0.28611,0.07484,0.03509,-0.09893,0.14933,-0.00341,0.06795,-0.06628,0.05049,0.07433,-0.06394,-0.04010,-0.02406,-0.03834,0.14168,0.06785,0.08391,0.12887,0.18672,0.10669,0.04600,0.35995,-0.01638,0.11098,0.08704,0.01050,-0.12763,0.07770,0.01000,-0.01961,0.00065,-0.02978,0.21857,0.27441,0.02127,-0.06714,-0.10977,-0.02848,0.05210,0.16962,0.29381,0.04015,0.20268,0.10369,0.11744,0.03624,-0.00336,-0.08797,0.00465,-0.01419,0.12973,0.05543,-0.08706,-0.05135,0.01595,-0.07616,-0.06020,0.09010,-0.03997,0.04336,0.20228,0.17834,0.15882,0.03854,-0.00131,-0.00134,-0.01418,};
float weights_input_13[] = {-0.00098,0.01376,0.01401,0.00718,0.06999,0.03231,0.13452,0.12036,0.07304,0.02862,0.02079,0.01451,-0.03607,-0.25653,-0.27385,-0.18554,-0.02161,0.01510,0.00077,0.02451,0.01288,0.01925,0.08568,0.19960,0.20781,0.05772,0.00869,-0.00520,-0.02277,0.00310,-0.06776,-0.09423,-0.15370,-0.21681,-0.07228,0.00223,0.00904,0.01229,0.02834,0.09449,0.22411,0.21931,0.06073,-0.18100,-0.31006,-0.04119,0.02035,0.11235,-0.01716,0.11425,-0.01402,-0.01984,-0.08110,-0.06057,0.00985,-0.01438,0.06179,0.10788,0.26587,-0.04936,-0.15883,-0.23300,-0.35654,0.07225,0.18099,0.35848,0.13736,0.02350,0.15047,0.02532,-0.03204,0.01188,0.01150,-0.01406,0.00484,0.13026,0.06529,-0.16322,-0.24536,-0.34050,-0.18400,0.23246,0.22700,0.41500,0.11208,0.14257,0.22590,0.08349,0.02208,0.01455,0.00991,-0.02380,-0.02047,0.06619,-0.04649,-0.26422,-0.24278,-0.20526,-0.05760,0.23434,0.39932,0.30839,0.14395,0.22794,0.28877,0.14464,-0.01314,0.00287,0.00067,-0.00407,-0.02614,0.04621,-0.12804,-0.22673,-0.21721,-0.28132,-0.26301,-0.14722,-0.03596,0.21337,0.13836,0.30290,0.27962,0.15886,-0.02233,0.03475,0.00063,-0.00736,-0.03584,0.03830,-0.06713,-0.22645,-0.01551,-0.19072,-0.36373,-0.18472,-0.22327,0.00117,-0.04077,0.07559,0.25259,0.14751,-0.01467,-0.00647,-0.00025,-0.01006,-0.06078,-0.07476,0.03737,0.07860,0.36173,0.09599,-0.12262,-0.06179,-0.11244,0.14125,0.09999,0.06901,-0.03593,0.08790,-0.05150,-0.01040,0.00002,-0.01131,-0.07557,-0.05736,0.08997,0.10438,0.20896,0.11525,-0.06680,0.18152,0.25224,0.62463,0.10773,-0.07884,-0.07578,0.03979,-0.08119,-0.00977,-0.00098,-0.01182,-0.05450,-0.24083,-0.42991,-0.11006,-0.08517,0.24382,0.28617,0.47617,0.70244,0.56257,0.06717,-0.00097,0.01237,0.04029,-0.10153,-0.04210,0.00201,-0.00285,0.04645,-0.22120,-0.48382,-0.54844,-0.21289,0.24415,0.50045,0.60674,0.44970,0.29975,-0.08115,-0.00741,-0.03016,0.04205,-0.11669,-0.04182,-0.04823,-0.02033,0.09007,-0.03505,-0.33842,-0.46910,-0.33652,-0.03870,0.33519,0.44248,0.08788,0.22023,0.07927,0.10916,0.12222,0.06811,-0.13537,-0.02765,-0.02526,-0.04940,0.02815,0.06900,-0.10823,-0.21224,-0.24210,-0.17264,0.20513,0.24361,0.08492,0.21142,0.04573,0.12107,0.06061,-0.03003,-0.05545,-0.00160,0.03652,-0.04702,0.03947,-0.01651,-0.00775,-0.14706,-0.28634,-0.30623,-0.09110,0.01483,0.21910,0.16312,-0.10028,-0.24454,0.03346,-0.10394,-0.04254,0.00263,0.00934,-0.05228,0.05689,0.10195,0.00438,-0.20055,-0.33226,-0.45902,-0.24540,0.06053,-0.02803,0.20939,-0.05382,-0.13448,-0.16213,-0.13656,-0.00755,0.02116,-0.00123,-0.00836,0.04512,0.17085,0.02349,0.14589,-0.47580,-0.33500,-0.31209,-0.19836,-0.11434,-0.03149,-0.00951,-0.12394,-0.20591,-0.05846,-0.00124,-0.00259,0.00149,-0.01956,0.08143,0.05133,-0.05306,0.12279,0.03581,-0.13380,-0.35248,-0.29229,-0.12551,0.08943,0.01053,-0.03756,0.08963,0.01849,-0.00168,0.00074,0.05046,};
float weights_input_14[] = {0.00010,0.07494,0.07341,-0.14431,-0.28709,-0.07485,-0.23225,-0.01955,-0.19711,-0.16360,-0.24457,-0.25530,0.27302,0.17032,-0.08143,-0.09723,-0.09156,-0.00702,-0.00166,0.04446,0.00930,-0.09282,-0.06795,-0.10942,0.05831,-0.07098,0.05655,-0.02489,-0.02407,-0.20573,-0.11502,0.00061,-0.20124,-0.17041,-0.15149,-0.02186,-0.03283,0.01637,0.02503,-0.11691,-0.01880,0.03377,0.09901,0.14573,-0.07285,0.01050,0.11743,-0.08475,-0.04838,-0.11268,-0.32659,-0.21563,-0.05920,-0.08782,-0.03383,-0.01967,-0.01178,-0.15241,-0.04341,0.20073,0.08820,0.15375,0.07201,0.01759,0.13080,-0.12072,-0.09531,-0.25590,-0.12929,-0.18930,-0.07129,-0.09145,-0.03388,-0.01974,-0.03333,-0.16820,-0.05604,0.16079,0.22416,-0.08198,-0.08675,0.15451,0.20287,-0.16252,-0.27001,-0.19903,-0.30496,-0.13604,-0.10840,-0.08733,-0.03226,-0.02256,-0.02730,-0.22142,-0.15361,0.28938,-0.02466,-0.06698,-0.03935,0.49349,0.07379,-0.18780,-0.21804,-0.11473,-0.22876,-0.09597,-0.12657,-0.09521,-0.03746,0.04283,-0.07129,-0.21913,0.02177,0.11015,-0.20136,0.02229,0.18049,0.73054,0.13689,0.06833,0.06930,-0.11763,-0.22862,-0.10000,-0.13576,-0.10020,-0.03663,0.04674,-0.02429,-0.25138,-0.33870,-0.39361,-0.29367,-0.13022,0.35776,0.55328,0.30877,0.11144,-0.00065,0.16863,-0.35625,-0.13112,-0.15004,-0.10149,-0.03586,0.00537,-0.00630,-0.22468,-0.51733,-0.51286,-0.27189,0.12337,0.64124,0.50053,0.11747,0.13535,0.11292,-0.05119,-0.32483,-0.15939,-0.14726,-0.09715,-0.03421,0.00367,-0.00665,-0.37108,-0.21789,-0.17404,-0.51226,-0.05591,0.41084,0.53080,0.01567,0.05812,0.06139,0.04065,-0.13816,-0.17358,-0.12611,-0.10259,-0.03695,0.00853,-0.10913,-0.33859,-0.05609,-0.49480,-0.50842,-0.41408,-0.33538,-0.23694,-0.13215,0.03012,0.21898,0.22687,0.11318,0.18306,-0.10276,-0.09845,-0.03419,-0.01282,-0.14034,-0.17728,-0.25779,-0.64877,-0.50846,-0.31767,-0.38048,-0.31667,-0.06516,0.08774,0.25952,0.30302,0.16451,0.29139,-0.08115,-0.09716,-0.01416,-0.01391,-0.13832,-0.08528,-0.19071,-0.54409,-0.39260,-0.32641,-0.36139,-0.27821,-0.01512,0.18715,0.14651,0.13622,0.04403,0.27480,-0.03827,-0.02266,-0.01459,0.03369,0.05988,0.20097,0.08067,-0.12855,-0.16814,-0.14034,-0.39083,-0.12229,-0.06015,0.07730,0.00528,0.02442,0.14366,0.31636,0.01301,-0.00579,-0.03481,0.05370,0.15010,0.26482,0.35595,-0.00354,-0.14674,0.08389,0.01068,0.04523,0.05044,0.16273,0.19498,0.08363,0.15389,-0.00128,-0.00273,-0.05729,-0.03091,0.07678,0.17430,0.25779,0.14534,-0.03303,-0.32636,-0.15449,-0.23163,-0.00138,-0.07337,0.05112,0.07063,0.26965,-0.03148,-0.14727,0.00395,-0.03735,-0.00052,0.04718,0.12023,0.19937,0.38460,0.07111,-0.02033,0.08882,0.16228,0.21922,0.05458,-0.16933,0.29082,0.23748,0.00029,0.02175,0.00335,-0.05306,0.00065,-0.01414,-0.07193,0.10008,0.27055,0.32005,0.30928,0.14585,-0.26087,0.31971,0.08181,-0.06799,0.15888,0.10521,-0.04101,0.03431,0.00401,-0.00118,0.33660,};
float weights_input_15[] = {-0.00859,0.00651,0.00800,-0.00676,-0.18385,-0.14239,-0.18686,0.00150,0.29129,0.27296,0.20381,-0.01038,-0.20732,-0.37182,-0.29308,-0.30550,-0.16298,-0.05275,-0.00971,0.09534,-0.00282,-0.13917,-0.09706,-0.01476,0.09725,-0.02020,0.16643,0.17394,0.15167,0.05536,-0.17996,-0.46729,-0.46365,-0.40383,-0.05374,-0.01049,0.08751,0.14564,-0.02312,-0.00795,-0.01383,0.10728,0.01117,0.09202,-0.15685,-0.23110,0.03945,0.05099,0.08699,-0.27957,-0.38609,-0.19328,-0.08965,0.13848,0.08827,0.03384,0.07229,0.02655,0.06466,0.03758,-0.03224,0.00063,-0.25842,-0.20681,-0.12061,0.31812,0.14473,-0.12208,-0.16412,0.08547,-0.07085,0.10559,0.08792,0.03526,0.03085,0.03670,-0.23867,0.11002,0.14906,0.15311,-0.10214,-0.22305,0.21702,0.21446,0.11652,0.01136,0.13785,0.21290,0.10923,0.13676,0.03350,0.03884,-0.03535,0.00271,-0.08935,0.15204,0.09893,0.05302,-0.01339,-0.24907,0.17322,0.32417,0.21273,0.34818,0.34786,0.34699,0.24690,0.19411,0.03608,0.05440,-0.01803,-0.06121,-0.05967,0.13378,0.04699,0.06046,-0.08781,-0.34837,-0.27788,-0.02948,0.13110,0.47673,0.46345,0.29933,0.18920,0.19527,0.03484,-0.00355,0.06251,0.09895,-0.03972,-0.18207,0.18962,0.10350,-0.06163,-0.25734,-0.62984,-0.35855,-0.20673,0.24449,0.36369,0.30310,0.18201,0.20873,0.03461,0.00430,-0.02567,0.07993,-0.05116,-0.09033,-0.02591,0.12246,0.09985,-0.21395,-0.43513,-0.29804,-0.15068,0.06351,0.26608,0.18931,0.18618,0.14664,0.03350,0.00376,-0.02871,0.03978,-0.14437,-0.28679,-0.28264,-0.07815,-0.00457,-0.04097,-0.04856,0.03890,-0.14076,-0.17677,0.13681,0.05190,0.05884,0.14247,0.04692,0.01568,-0.01084,0.02217,-0.20785,-0.20641,-0.20074,-0.02963,-0.09890,-0.08085,0.10227,0.12781,-0.09495,-0.15537,-0.08175,0.01620,-0.02089,0.13431,0.04467,0.01666,-0.05734,-0.07945,-0.16757,-0.29828,-0.13489,0.04449,-0.23235,-0.33946,-0.07788,0.17087,-0.02099,-0.12963,-0.19853,-0.02953,-0.02013,0.13981,0.03491,0.06035,-0.07392,0.01391,-0.06354,-0.13518,-0.10439,0.02319,-0.26244,-0.43479,0.01051,0.16424,-0.00406,-0.15962,-0.17899,-0.10228,-0.02432,0.07378,0.03167,0.06342,-0.00239,-0.00080,-0.02071,0.07184,-0.13218,-0.13119,-0.18550,-0.46013,0.03278,0.20827,0.06264,-0.14163,-0.13072,-0.00728,-0.00703,0.00091,0.08619,0.07123,0.06850,0.15477,0.18479,0.32516,0.17304,-0.11309,-0.14426,-0.19985,-0.02578,0.09277,0.06495,-0.08942,0.06261,0.06278,-0.06314,0.16643,0.09215,0.14107,0.12813,0.28441,0.22813,0.41300,0.22419,-0.01746,-0.08757,-0.17565,0.15812,0.18387,0.09189,-0.06841,0.01380,-0.06535,-0.13458,0.08864,-0.00058,0.18546,0.12752,0.22014,0.26161,0.23322,0.19490,0.06789,0.06119,-0.00198,0.15745,0.20142,-0.15402,-0.20776,-0.01961,-0.13923,-0.03319,0.13508,0.00001,0.02857,0.17923,0.19291,0.21518,0.35454,0.18444,0.19504,0.19511,0.04768,0.01999,-0.21389,-0.05904,-0.15860,-0.00284,0.11512,-0.02891,0.00512,0.06009,};
float weights_hidden_0[] = {-4.16622,-0.39305,0.84268,2.01475,-0.23869,-1.11095,-0.50575,-0.81404,-0.72096,-0.69869,-0.42429,3.86751,0.05404,-2.71987,-1.70386,2.51997,-1.14316,};
float weights_hidden_1[] = {-0.46136,2.48075,-1.22187,-1.36425,1.40514,-1.92190,1.81013,2.27442,0.49162,1.26960,1.83733,-1.23816,0.69377,-0.09565,2.19312,-1.50926,0.98028,};
float weights_hidden_2[] = {-2.22592,0.94287,-0.82549,-1.47558,4.52220,1.44583,-0.58583,-0.58403,-1.96808,0.62223,-2.68974,-0.73909,1.73687,0.69313,-0.68046,1.03932,-0.52616,};
float weights_hidden_3[] = {2.13853,-1.12418,-2.45552,-1.80261,-2.86350,0.91938,-0.37645,-1.02166,-0.88856,2.30554,-1.02574,-1.64627,2.04402,0.98859,2.36157,1.19997,0.78055,};
float weights_hidden_4[] = {-0.70462,1.62840,1.92486,-1.68979,-1.80089,0.98074,2.04622,1.87245,1.82627,-1.83971,-0.25663,1.20141,0.41150,0.90121,-1.30371,-1.39803,0.33144,};
float weights_hidden_5[] = {1.62253,-0.39821,3.55806,0.94265,-0.31156,-2.49040,-0.32964,-1.93890,0.10767,2.46097,-0.14573,-1.49060,-1.41361,-1.06707,2.46110,-0.42514,0.13447,};
float weights_hidden_6[] = {2.30191,-0.87508,2.82463,0.64698,-0.64369,-1.67687,-0.80304,4.48553,-0.44178,-2.13230,-0.39381,1.73191,-1.49138,-2.02949,-0.75175,-1.14544,0.77244,};
float weights_hidden_7[] = {-0.04301,-1.46900,-0.86243,-1.30395,1.69064,1.29192,-0.97516,-2.04134,1.28583,1.54320,3.59511,-1.03920,1.29873,0.84805,-1.85925,-2.72496,-0.06918,};
float weights_hidden_8[] = {2.94684,-0.33208,-2.19562,0.80806,-0.79809,3.88280,-0.35503,-1.56002,-0.06738,-2.27777,-0.26096,2.54256,-1.81400,-1.06231,0.21761,0.42971,0.27151,};
float weights_hidden_9[] = {-1.40304,-0.45040,-1.66903,3.16030,-1.03808,-1.33702,0.01238,-0.65195,0.36783,-1.32062,-0.27278,-3.08290,-1.44133,3.57934,-0.86429,2.06358,-1.58095,};

class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = cc_segmenter_.GetNumOfSegments(im);

		if (num_of_segments > kMaxNumOfDigits) {
			num_of_segments = nn_segmenter_.GetNumOfSegments(im);
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


