#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.139007,-0.156597,0.113647,0.266073,-0.352972,0.0167169,0.0220567,0.214609,0.0202359,-0.0362737,0.790866,-0.466206,0.466526,-0.208114,-1.22456,-0.15736,0.126994,0.286255,0.264627,-0.11213,-0.184906,0.277384,-0.54496,0.471691,-0.109333,-0.380107,0.368377,-0.409487,0.607971,0.0974308,0.0162896,-0.294435,-0.265468,-0.402945,-0.455222,0.039912,0.593708,0.763135,0.168187,-0.4675,0.35527,-0.777818,0.276525,-0.926105,-0.928876,-0.328592,1.03777,0.581251,0.403111,0.316308,0.322527,0.106034,-0.909352,0.340959,-0.0103507,-0.230467,0.744277,-0.768117,1.05763,-0.0210625,0.538245,-0.293803,-0.187946,0.313692,-0.0778651,-0.403445,1.03011,0.15404,-0.445437,-0.477169,-1.11014,-0.272789,-0.325083,-0.358339,0.399288,-0.3266,0.551689,-0.302033,0.0184293,0.682782,1.15493,-0.43858,-0.206496,-0.370488,0.0360601,0.374051,-0.313846,-0.234669,0.223048,0.15612,-0.122134,0.227145,-0.00388113,0.00898725,0.328836,0.23985,-0.960151,0.096122,0.426264,0.0774657,0.504627,0.0499087,-0.0631979,-0.27625,-0.913734,0.100373,-0.0748498,0.204153,-0.165008,-0.364419,-0.755863,0.538332,0.410414,0.0423702,-0.126247,-0.489606,0.635061,0.384971,0.267257,0.142245,-0.198407,0.764093,-0.146383,-0.147831,0.557289,0.865197,-1.86156,0.588871,-0.0482546,-0.25016,1.36661,-0.399101,0.15593,-0.76237,-2.03339,-0.0769922,-0.211306,0.509533,0.218188,-0.149313,-0.793381,0.738193,0.446252,1.03918,0.848529,-0.762503,0.90817,-0.0117577,0.45065,-0.0404525,0.539072,0.0610271,0.233901,-0.0933085,-0.693118,-0.376318,0.716588,0.194917,0.177155,-0.579548,0.375279,-0.665918,0.329334,0.111416,-0.973925,-0.477362,0.488213,0.606124,0.0826859,-0.173643,0.423582,0.223853,-0.80871,0.524161,-0.337461,-0.426276,0.175115,-0.207512,0.465567,0.186091,0.751125,0.132126,0.178679,0.442351,-0.325583,-0.833285,0.660696,0.250565,0.0131135,-1.04376,-0.202848,-0.406523,0.120203,-0.481336,-0.91738,-0.770772,1.29791,-0.403515,-0.157883,0.232847,0.534974,-0.173251,-0.786413,-0.12973,-1.09078,0.0708793,-0.200033,-0.628881,0.802159,-0.277783,0.468412,-0.267636,0.133973,0.145129,-0.0215544,0.0453943,0.214709,0.215444,-0.28774,0.419365,0.152679,-0.663086,-0.188523,0.209984,-0.0907988,-0.402615,-0.057155,0.476079,0.348837,0.315222,0.120529,-0.266607,-0.0488446,0.206925,0.64424,-0.401507,-0.328629,-0.122574,0.579272,0.10521,0.19856,-0.279593,0.30581,-0.047176,-0.268237,0.246044,-0.201668,0.0749351,-0.464533,-0.0291723,-0.529253,-0.16717,0.111482,0.253834,-0.064761,-0.0492884,-0.127894,0.111609,0.140078,0.13837,-0.377957,-0.333081,0.262688,0.172289,0.437692,0.122214,-0.159146,-0.0119631,0.564109,0.203764,-0.189288,0.350453,-0.0339286,-0.0705767,-0.31657,0.181164,-1.50817,-0.439499,0.447609,-0.785196,1.89432,-0.472686,0.697131,-0.0394944,-1.63667,-0.638086,-0.57831,0.3542,-0.262476,-0.832909,-0.252158,0.917637,0.0245484,0.802713,-0.311063,-1.03324,1.10149,0.159963,-0.167943,-0.133259,0.48966,0.013546,0.217436,0.083804,-0.0994069,-0.658449,0.818618,0.0321077,-0.317388,0.0889351,-0.850552,-0.39828,-0.0625926,0.109049,0.24556,-0.0978999,0.425223,0.0720772,-0.0366932,0.371835,0.842634,-0.416887,-0.113518,-0.19849,-0.481587,-0.423393,-0.993657,0.0203334,0.469117,0.173737,-0.12618,0.614448,-0.572699,-0.162993,0.168094,0.162362,-0.287037,0.134169,-0.437249,-0.635182,-0.369991,-0.0650926,-0.552697,-0.368104,-0.915676,-0.243303,0.111938,-0.126472,-0.018455,0.73516,0.387385,-0.418947,0.42566,-0.0869589,0.760936,-0.197248,-0.407617,-0.421021,-0.107419,-0.441941,-0.253089,0.239844,0.246033,-0.337374,0.0744055,0.739473,-0.881201,-0.742693,-0.0936498,0.635663,0.188263,0.973072,0.764445,0.358818,-0.465552,0.649393,-0.113545,0.211578,0.27759,0.619461,-0.870955,-0.465273,0.716129,0.088547,1.16471,-0.222333,0.0764827,-1.08947,-0.310911,-0.570566,-0.0907258,-1.58168,1.19814,0.288869,-1.42398,-0.765104,0.931149,-1.29375,-0.0307008,0.654473,0.129783,0.580517,1.4613,1.13023,0.545378,0.0605874,-0.251252,-0.190365,0.709591,0.202781,0.334833,-0.304313,-0.798828,0.536177,-0.797167,0.536958,-0.425223,-0.697862,-0.0754442,-0.542138,0.436587,-0.52516,0.367268,0.201383,-1.10818,-0.757446,1.05337,-0.892594,-0.301421,-0.114241,-0.419268,-0.0872882,0.698742,0.436713,0.944215,-0.289459,-0.504904,-0.497921,0.310332,-0.001408,1.18068,-0.298616,-0.511665,0.155352,-0.343326,0.233748,-0.797698,-0.261576,-0.624966,-0.448927,-0.203956,0.0978875,-0.698195,-0.50335,-0.35273,0.29705,0.538606,0.310965,-0.301881,0.290529,-0.0710038,-0.758239,-0.589553,0.12661,0.61792,-0.694853,-0.0641899,0.593873,0.115513,0.293925,1.15282,-0.395225,-0.45998,0.0972444,0.315295,-0.417996,-0.22457,-0.137755,-0.216423,0.743858,-0.124177,0.960961,-1.13252,-0.275466,1.3298,0.591921,-0.375061,1.36436,-0.0868439,-0.364166,-0.583511,-0.201709,-1.46635,-0.260946,-0.675454,-0.560215,0.281871,0.0743299,-0.838434,-0.237961,-0.192964,-0.0773863,0.0860088,-0.718186,0.203047,-0.57748,-0.147612,1.146,0.501815,1.32901,-0.298362,0.2612,0.567553,0.411497,0.881147,-0.378899,-0.488706,0.168329,-0.347925,0.404862,-0.527255,0.574222,-0.112016,0.374551,-0.254443,0.74478,0.356703,-0.584496,-0.34056,0.106929,-1.25901,-0.339233,0.393274,-0.687417,-0.210028,0.0974243,-0.947246,0.0619454,0.226114,-0.0936915,0.0445154,-0.522167,0.453684,0.473244,-0.142045,-0.892483,0.201175,0.123487,-0.33844,-0.278628,0.026118,0.349961,0.322083,0.275526,-0.192194,-0.0566489,-0.0665962,-0.759523,-0.163416,-0.609464,0.656055,-0.0516547,-1.20321,0.182733,-1.10855,0.764341,-0.154332,0.279568,0.344345,-0.146891,0.448936,-0.954788,0.180401,0.0245304,-1.30794,-1.08074,2.11246,-0.533673,-0.931944,-0.133878,-1.87103,-0.0341256,0.509056,0.0887382,1.72563,-0.531737,0.31627,-0.979032,0.575682,1.3232,2.3958,-1.65328,-1.17474,-0.0352269,0.121511,1.27851,-1.39674,-1.00501,-0.202042,-0.281936,-1.57169,0.701408,-1.65808,-1.79368,0.0534151,2.74312,-1.84505,0.0956587,-0.231657,0.657264,0.997756,0.0199967,-1.34822,-0.138649,0.558147,-0.386027,-1.35056,1.41866,0.494685,0.742986,-0.253515,-0.438711,0.349857,0.680051,2.6285,0.424684,2.42148,-1.06919,-1.53193,0.829089,-0.509318,0.22414,-0.790855,0.262696,1.34232,0.576414,-0.989291,2.28447,-1.16603,0.719067,-0.64645,-0.908426,-1.89164,-0.333418,0.0825109,0.176102,-0.549325,0.296043,-0.313955,-0.481278,-0.658131,0.249577,0.0242825,-0.480474,0.491606,-0.51374,-0.686497,1.52564,0.304709,1.30685,0.71499,0.222625,0.960691,0.545257,0.684364,-0.537494,-0.0131531,-0.71142,0.587896,0.184167,0.341584,0.6432,0.608599,1.40955,-0.149967,1.01492,0.250918,0.585951,-0.387893,-0.707044,-0.689621,0.5222,0.89609,-0.637858,-0.738858,-1.5022,-0.887242,0.856884,0.229421,0.297696,0.329481,0.0161775,-0.147105,0.180097,0.18607,0.181452,-0.133153,0.44622,-0.0963463,-0.714985,0.629762,-0.322465,-0.305694,-0.649113,0.450615,0.0335829,-0.229318,0.380175,0.106302,-0.351957,-0.198713,1.05593,1.04773,0.692069,0.41393,-0.481146,0.59434,0.0752499,0.0273092,-0.246745,-0.628575,-0.755494,-0.476053,-0.652272,-0.816734,0.543578,0.502379,0.623433,-1.59513,1.10405,-0.964547,-0.0965735,-0.374274,-0.287416,0.329471,-0.0990489,-0.0630482,-0.0996949,1.11016,1.68324,1.02803,-1.54404,-0.869249,0.619995,1.67071,1.14858,-0.534339,-1.43664,-0.0126227,-0.0222985,-1.44316,0.668084,-0.679022,-0.134162,1.00334,0.522808,-1.5032,-0.405847,0.401305,-0.789062,1.43396,1.23825,-1.16825,1.86619,1.64647,-0.62187,-1.98985,-0.106862,-0.743929,-1.76643,0.0967975,0.563535,-0.776098,-0.255842,-0.377499,1.54779,2.10558,1.7375,-1.94492,1.49451,0.0222818,-0.871291,0.208926,1.42485,0.700316,-0.761713,-0.0208952,1.41773,-0.607398,1.56332,0.418005,-0.892727,-1.09442,0.264353,1.63889,-0.0234649,-1.62366,0.0279036,0.0203886,-1.5438,0.40542,1.01735,-0.560472,0.261645,-1.57423,-0.557587,-1.31741,2.28237,0.264155,0.971218,-0.0132587,-0.744911,0.152593,0.402515,0.755486,-0.181312,-0.0474514,1.03963,-0.587604,1.41999,-0.197492,-0.365884,-0.447104,0.248014,0.152502,0.453195,-0.40139,0.966982,0.00977721,-0.902251,0.14844,0.173983,-0.491628,0.132626,-0.723902,-0.698422,-1.46126,1.05762,0.853513,0.999261,0.362282,-0.0154411,-0.00154454,-0.262976,0.143529,0.30346,0.619592,0.355102,0.825769,-0.411599,-0.194779,-0.229952,0.195434,-1.00745,0.521203,0.199089,0.888704,0.399798,-0.528836,-0.0545705,-0.19478,0.253593,0.83389,-0.338527,-0.311149,-0.694342,0.203512,-0.23236,0.647779,-0.274912,-0.465304,-0.305663,-0.476395,-1.0668,-0.030076,0.621035,-0.451505,0.315635,0.485206,0.898222,-0.0626116,0.262124,0.156935,0.102616,-0.487211,0.508854,0.728649,0.628008,-0.270763,0.189841,-1.30174,-0.21703,-0.270854,-0.478985,0.0922289,-0.777964,-0.330294,-0.374066,0.718258,0.681973,-0.567935,0.91775,-0.298546,0.556236,1.05603,-1.01089,-0.693542,-0.00538794,0.703233,-1.43945,0.781276,1.26942,-0.537491,1.92901,1.62879,-0.673921,-0.926116,-0.570765,-1.26581,-1.96144,0.714304,0.713087,-0.819492,-0.589095,-1.66969,1.09701,0.814679,2.47534,-1.11305,1.3607,-0.250847,-0.227942,0.471516,0.282779,0.0103518,-0.587737,-0.340096,-0.208738,0.507165,0.0338806,0.242996,0.516972,0.711488,0.465153,-0.12998,-0.134559,-0.509367,-1.03659,0.267173,-0.292059,-0.10715,0.00335325,-1.04351,0.0251407,-0.778379,0.954885,0.46724,0.504096,-0.533242,-0.134969,-0.675879,-1.14103,0.600485,0.976153,0.334995,0.556648,-0.652193,1.04344,-0.952438,1.50156,0.385962,-0.103291,0.053326,-0.212559,0.200496,0.335164,-0.660083,-0.163862,0.787148,0.543964,-0.206399,-0.132854,-0.772474,1.05375,0.479583,1.72788,0.231108,-0.0946327,0.334997,-0.197032,-0.42304,0.214757,-0.127737,-0.505845,0.64866,0.368195,-1.03873,0.368873,0.0717755,0.295203,-0.282296,0.34058,0.176287,-0.439487,-1.1074,0.426551,0.326625,-0.183339,-0.760898,-0.480759,-1.2287,-0.228928,0.124032,-0.69002,0.0639496,-0.283349,0.197171,0.560621,0.613939,0.534305,-0.126642,-0.395776,-0.23328,-1.1399,-0.0121161,0.20484,-0.0840695,0.143136,2.14323,0.39399,-0.181908,0.81031,0.991661,0.277365,-0.42839,0.880599,1.53297,0.889004,-0.679134,0.234149,-1.55567,0.0139162,-0.399342,-1.43604,-1.13347,-1.20537,0.194081,-0.0822895,1.43474,1.01814,0.208762,0.944639,-0.641485,-0.31738,0.125357,-0.440009,0.451846,0.548407,0.300947,-1.278,-0.468419,-0.125899,-0.197339,-0.125729,-0.576827,-0.383425,0.945214,-0.12398,-0.525611,0.220066,0.329817,-0.240742,0.056251,-0.676164,-0.111873,-0.144829,0.12959,-0.197833,0.299624,0.477619,0.0734394,0.93465,-0.734472,-0.493874,-0.913334,0.093374,0.885849,-1.08069,0.0761953,-1.92976,-0.213089,-0.0213715,-0.509662,-0.149909,0.804772,-1.2495,-0.470224,-0.489628,0.296259,0.457038,1.4933,-0.170335,0.767602,0.417283,1.26504,0.617591,0.587572,-0.849976,-1.83918,-0.745204,-0.270928,-0.324942,0.135385,0.517376,-0.480345,0.587061,-0.16086,-0.079195,-0.334426,0.488119,0.820822,-0.0997577,0.832144,-0.474133,-0.418534,-0.138684,-0.281871,-0.0582017,0.583061,1.02356,0.127483,-0.298992,-0.579347,0.965117,0.975968,0.875406,0.802532,-1.49638,-0.199114,-0.983792,-0.551043,-0.483943,0.148063,-0.446835,-0.189595,0.104677,0.312024,-0.224315,0.0525094,0.133388,-0.433335,0.684481,0.164911,0.264581,-0.247858,0.548259,0.323506,-0.190669,-0.148938,0.0829924,-0.401474,-0.537257,-0.148098,-0.361358,0.0305869,0.554269,0.0497694,0.038808,0.251162,0.152688,0.344322,0.188766,-0.420389,-0.454999,-0.15172,-0.385396,0.691821,-0.237193,0.963398,-1.04888,-0.485088,0.0845844,-0.102978,-0.393428,0.58477,0.00259473,0.649961,0.172929,-0.752961,-0.313581,0.0661492,0.302536,0.591682,-0.842385,-0.727967,-0.402723,0.17945,0.241015,0.360054,0.201292,0.586051,0.223019,-0.0348373,-0.0714477,-0.321627,-0.374111,1.31555,-0.184186,0.267213,-0.871959,-1.16664,-0.0653218,-0.389535,-0.241885,0.728539,-0.0955278,1.07165,-0.15203,0.131246,0.67735,0.495826,-0.198025,0.460393,-0.491203,0.141968,0.217115,-0.0138517,-0.853118,0.0115086,-0.546019,0.85399,1.7057,-0.555382,-0.0714523,0.195576,0.107915,0.108682,-0.647223,0.207239,-1.32291,-0.63172,0.31357,-0.473866,-0.145333,0.017586,-0.398682,0.573704,0.0835827,-0.23489,0.445805,0.466165,-0.0299809,1.59522,-0.330354,0.654861,-1.04056,-0.293826,-0.752083,-0.88793,-0.46906,0.303663,0.661001,-0.232448,0.0235127,-0.110082,0.384412,0.204418,-0.873227,0.78304,-0.711362,0.326129,0.554784,0.204613,-0.286948,-0.202068,-0.236576,0.3552,-0.124128,-0.0846141,0.510689,-0.0410992,0.0718536,0.778563,0.10191,0.328551,-0.193022,1.00413,-0.824257,-0.43107,-0.593171,-0.881958,-0.150924,0.113472,-0.400118,0.148214,0.697821,-0.98068,-0.243852,-0.707214,0.588808,-0.188113,0.796123,-0.276938,0.171081,0.305655,0.608089,-1.0881,-0.0575832,0.387591,0.270069,-0.808441,-0.319813,0.449512,-0.0956457,1.03448,0.929416,0.316865,-0.403009,-0.695705,-0.172189,0.400392,0.424671,0.231001,0.27105,0.25888,0.251071,-0.504829,-0.506836,-0.670368,-0.0264615,-0.0425524,0.201933,-0.215763,-0.44731,0.77446,0.155748,-0.886631,-0.346099,0.132855,-0.175263,0.335122,0.286559,1.4021,0.163939,0.612164,0.122396,-0.816237,0.112049,-0.5173,-0.858355,0.320157,0.100751,0.542517,0.340432,-0.622857,0.532301,0.540725,-1.21468,-0.474381,0.367775,-0.795509,0.140091,0.147369,-0.735484,0.568889,0.548787,-0.467117,-0.563275,0.835304,1.2029,0.0376669,-0.462887,1.35409,0.380414,1.3693,0.587564,-0.393904,-1.54006,-1.23926,-1.53629,0.930542,0.539578,0.32823,0.106979,-0.257039,0.170157,0.425853,-0.849086,0.341459,0.0546419,-0.56929,0.170463,0.272165,-0.0194117,-0.0962377,0.343133,0.557767,-0.00348916,0.0579018,0.470314,-0.273519,-0.056885,1.01917,-0.396014,0.25315,-1.08355,-0.758131,-0.829835,-0.199854,-0.519381,0.514219,0.453479,0.0986152,0.16107,0.383675,-0.259599,0.779942,-0.360974,0.654894,-0.869525,0.216002,0.5914,-0.025068,0.747638,0.450059,-0.260996,0.505733,-0.00674524,-0.452266,-0.0890396,0.327605,0.101599,0.158006,-0.423862,-0.424631,0.283956,0.76475,-0.0931476,-0.385393,0.332748,-0.284876,-0.171376,0.666557,0.724895,0.690484,0.920671,-1.52654,-0.454625,-0.431725,0.784527,0.82108,0.582031,0.210101,0.0455831,0.36774,0.814141,-1.2145,0.00495242,0.413335,-0.196849,-0.871287,0.707323,1.02298,0.551286,0.534661,0.490643,0.138983,0.0851148,-0.495223,-0.778907,-0.167271,-0.105124,0.715534,0.389074,0.0298391,1.09411,-1.1799,-0.68788,-0.978655,1.33478,0.133429,0.402098,0.0570024,-0.0294708,0.438513,0.624993,-1.56571,-0.136546,0.632539,0.474662,-0.290793,-0.0344411,1.33438,0.585751,1.3526,0.560324,-0.476083,-0.439189,-0.937259,-1.01721,-0.330039,0.550826,-0.695695,-0.598058,0.437341,0.449835,0.448656,0.322686,-0.119026,-0.167848,-0.57751,0.438179,-0.395999,0.689429,0.720018,-0.16314,0.640052,0.290667,-0.341247,-0.130786,0.520382,-0.529597,0.42037,-0.270633,0.556894,0.689979,-0.109572,0.26605,-0.53432,0.472292,-2.32057,-0.708234,0.352597,0.739029,-2.73832,-0.726836,-1.17751,0.134843,1.43682,-0.796117,0.270771,0.083337,-0.677563,-0.763408,-3.02727,1.81111,1.33898,-0.735852,0.922125,-2.5947,-1.47592,0.959295,0.249073,0.458753,1.08859,-2.36433,-1.7287,-0.144647,-0.0137772,-1.62881,-1.37187,-0.586647,0.918013,-1.52157,0.750127,-2.05876,-1.75928,0.573256,1.61942,-1.57299,-0.317616,-0.0356662,-1.8853,-1.83067,0.861404,1.12678,0.712884,-2.27151,2.07064,-1.3125,-0.293071,1.19669,-0.769519,-1.96807,-0.820344,1.69537,0.658059,-1.66326,-3.49109,-0.0747607,-0.821204,-4.12944,1.91601,2.35773,-2.11073,-2.59765,-2.93782,-0.104133,0.234364,1.37954,-0.689388,-1.12358,-2.08208,-3.12857,1.25475,1.42729,-1.71963,-0.128492,1.38899,2.16453,-2.04241,-2.2948,-1.58185,3.11545,-0.836659,-0.0417767,0.664627,0.284822,-1.38836,-1.86152,-2.05147,3.2377,-1.52398,-0.648453,2.01902,-1.56411,-1.91428,-1.62928,-2.13236,1.47789,-1.36895,0.399989,-2.0732,-1.89985,1.04721,-0.973235,1.22727,3.1142,-2.47828,-1.81261,1.65115,-0.00760756,-0.941531,0.965733,-0.167322,-1.28345,0.487266,-2.28822,-1.01023,-2.56276,-1.11352,0.628581,-0.668281,2.38921,-0.480069,-1.62272,-2.07861,1.73746,-2.36268,-1.59756,2.62887,-0.913521,-1.77779,0.120003,0.295329,-3.47191,0.404738,-0.582391,0.041924,-0.965997,0.490624,-3.2752,1.36811,-0.677147,-0.00638686,-4.12209,0.571861,-3.17674,0.627454,0.597786,-1.64455,1.93164,-0.509365,0.658873,0.998687,-0.439372,-1.33479,-1.77925,-0.837577,-0.887993,-1.4161,-2.46984,-1.51345,3.12238,-1.98009,2.87758,-2.57769,-0.39628,0.441353,0.0276545,-1.16795,-0.327467,-2.68208,-0.862063,-0.720432,-0.19072,0.892334,-0.46407,-1.57264,1.56912,-0.745267,1.07753,1.07867,-1.40666,-0.418012,-1.17385,-1.73513,0.319081,-1.93822,0.434217,0.582157,1.34243,1.02409,1.04885,-2.2134,1.3426,-3.24077,-0.76808,-2.39625,0.904308,1.84353,-3.33627,1.93542,-1.47332,-2.29285,-2.42101,-1.48628,0.836328,0.742633,0.85306,-2.84421,-0.236811,-0.774375,-1.08032,0.891011,-0.872537,1.17682,0.98888,-0.0343883,-1.51234,-2.69917,1.22414,1.48357,-0.902358,-2.72076,0.910859,1.57309,-3.0999,-0.403486,-1.77811,-1.11518,0.715855,0.348263,-3.17248,-0.240896,-0.886898,-0.514193,2.11557,-1.32677,-0.299471,1.14179,1.88974,1.48785,-3.22959,-3.25473,1.7239,-0.587911,-1.31699,-3.02776,0.285379,2.86551,-1.66329,1.81319,-1.50971,1.71193,-0.555187,-2.10749,-1.24694,-1.4367,-1.56933,1.19666,-2.20021,-0.587032,-1.09893,0.107919,0.989067,1.99461,1.84974,-3.85856,-2.69965,-1.31445,-2.94902,-1.34904,-2.61189,1.64043,-2.64331,1.09006,-0.557257,3.26319,-1.12534,-2.35655,-0.74165,-2.87129,0.452873,0.880138,1.56949,-3.13227,0.802555,0.842277,1.57624,1.24526,-2.87332,-3.76381,-0.992506,0.473,-0.164621,0.561668,-1.293,1.37688,1.64021,0.845429,0.633624,1.21426,0.610171,0.830896,1.09105,1.22222,0.37809,0.843476,0.703319};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] == B : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0] - 1, points.back() + 1, &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }

    // Delete strange pieces
    for (int i = numbers.size() - 1; i >= 0; --i) {
      size_t height = numbers[i].size();
      if (height < 5) {
        numbers.erase(numbers.begin() + i);
      }
    }

  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
