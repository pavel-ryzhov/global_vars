#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 0.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{0,0,0,1,0,3,0,11,0,0},
{0,0,3,2,0,4,0,18,0,0},
{0,0,3,4,0,12,0,15,1,0},
{1,0,4,7,0,17,0,17,2,1},
{7,0,8,17,3,16,5,18,8,10},
{14,0,15,18,10,12,11,14,13,14},
{17,6,14,19,10,14,14,14,15,16},
{14,9,15,19,8,19,12,14,17,16},
{15,11,14,18,9,20,13,16,19,18},
{18,13,17,24,12,20,12,14,20,20},
{18,9,18,20,12,20,13,15,16,19},
{8,15,10,18,13,20,14,15,12,9},
{3,18,8,9,10,17,7,15,9,2},
{1,16,5,7,5,17,5,18,4,3},
{0,17,4,9,0,17,2,21,4,1},
{0,13,0,7,0,6,1,16,3,0},
{0,2,0,5,0,3,0,11,0,0},
{1,3,5,8,0,5,0,13,3,1},
{9,10,9,17,0,13,3,15,9,13},
{15,12,17,16,0,16,10,17,13,17},
{16,13,13,18,6,18,15,17,15,16},
{19,14,13,17,10,16,14,17,15,13},
{15,14,12,15,11,23,13,17,13,15},
{14,17,12,17,9,20,9,17,14,16},
{11,21,12,17,16,19,12,17,14,18},
{12,23,16,20,16,19,13,23,16,16},
{16,21,17,20,13,22,13,23,15,20},
{20,19,20,24,15,24,13,23,14,22},
{17,19,19,25,12,24,13,23,15,17},
{8,19,14,21,5,23,12,23,14,14},
{2,18,7,11,0,20,5,24,9,7},
{0,14,2,0,0,7,0,19,2,6},
{0,6,3,5,0,3,0,11,1,2},
{9,8,15,12,0,5,4,12,9,14},
{15,9,15,14,0,16,12,14,15,18},
{16,9,11,12,3,18,16,14,18,10},
{18,10,10,13,10,13,14,12,17,13},
{16,14,9,10,11,14,11,12,15,12},
{15,23,9,7,12,20,14,12,14,11},
{11,23,7,6,17,16,14,10,10,9},
{6,25,12,7,13,16,12,16,5,11},
{8,25,14,12,13,15,12,16,7,12},
{12,22,18,15,13,11,9,16,6,15},
{14,20,15,20,14,12,8,16,10,20},
{18,19,20,26,12,10,8,21,14,21},
{20,16,18,18,5,8,10,21,17,23},
{10,14,11,12,0,5,7,19,16,13},
{2,14,5,3,0,0,3,7,3,2},
{6,6,9,8,0,4,3,7,5,12},
{15,8,14,14,0,9,12,9,12,17},
{16,14,14,15,3,17,16,6,16,14},
{18,16,9,7,9,17,14,6,21,12},
{16,19,10,4,11,13,12,5,17,12},
{16,17,8,7,12,13,14,5,17,7},
{10,16,9,4,15,18,15,5,6,4},
{8,19,10,3,12,11,13,9,4,4},
{4,19,8,9,12,8,7,11,2,10},
{5,21,10,10,13,5,7,11,3,11},
{9,20,12,17,13,4,7,12,6,14},
{12,20,14,15,14,2,5,18,10,16},
{13,17,19,19,13,1,5,21,15,20},
{17,14,19,12,5,2,7,19,15,24},
{14,14,16,13,0,1,7,19,15,15},
{7,11,9,2,0,0,2,1,3,7},
{11,6,9,2,0,4,5,5,7,17},
{16,7,13,7,3,10,16,5,13,18},
{17,10,12,8,7,16,16,5,17,17},
{19,6,11,7,10,12,14,4,21,13},
{16,7,10,4,12,9,13,0,17,7},
{13,6,10,2,17,13,14,0,14,4},
{9,9,10,9,14,7,16,0,7,4},
{6,16,9,9,16,6,12,6,5,4},
{3,20,6,13,15,11,6,6,2,5},
{4,20,10,16,17,10,5,12,3,10},
{9,19,14,14,14,8,3,18,7,14},
{10,15,17,17,15,8,4,19,11,15},
{13,14,18,17,12,6,4,17,16,20},
{14,14,21,14,5,2,0,19,15,20},
{20,12,19,11,1,0,0,7,10,20},
{10,10,10,2,1,0,0,0,7,8},
{15,4,2,0,0,5,10,1,5,17},
{17,4,11,0,3,10,16,5,11,17},
{19,4,9,4,9,13,15,4,14,19},
{18,3,8,4,12,12,16,0,19,9},
{16,5,6,4,17,11,15,0,20,5},
{12,6,5,6,15,15,18,0,16,4},
{7,8,10,9,13,8,17,6,9,5},
{5,19,8,13,13,13,10,6,5,8},
{2,20,10,14,17,17,8,13,9,9},
{3,18,12,17,20,15,5,14,11,9},
{8,16,13,17,19,14,7,17,10,15},
{9,16,16,20,17,13,7,18,10,16},
{11,14,20,18,12,5,4,16,16,18},
{14,12,20,17,6,6,4,13,11,20},
{20,11,11,8,1,2,0,0,11,19},
{16,9,5,0,0,0,0,0,4,12},
{16,2,1,0,3,5,16,0,0,19},
{19,2,3,0,8,9,17,0,7,16},
{19,2,3,0,9,12,16,0,9,19},
{18,3,3,0,18,13,14,0,17,16},
{14,5,3,8,16,12,16,0,21,10},
{11,3,3,11,12,20,18,0,20,9},
{7,12,4,16,11,15,15,6,19,8},
{5,17,6,17,11,16,13,11,17,4},
{2,20,11,17,18,18,9,13,15,9},
{3,17,16,19,20,23,11,17,13,13},
{8,14,17,19,18,24,13,18,11,17},
{9,16,19,23,17,21,12,15,12,12},
{11,12,20,23,13,14,9,14,12,17},
{15,12,13,8,6,11,6,7,11,20},
{20,11,7,5,0,6,4,0,4,18},
{16,9,1,0,0,0,0,0,2,18},
{17,3,1,0,7,3,17,0,0,12},
{20,1,2,0,11,13,16,0,7,15},
{19,1,1,3,19,11,18,0,10,19},
{16,0,0,6,21,14,17,0,16,15},
{12,2,1,9,13,14,18,0,19,9},
{11,8,1,11,8,11,18,7,19,10},
{7,12,5,14,6,11,15,12,18,8},
{5,17,14,16,12,12,10,14,21,9},
{2,16,14,18,18,15,9,16,20,15},
{3,16,15,18,20,21,11,18,16,13},
{8,14,19,20,21,20,16,15,15,13},
{9,14,19,17,21,21,17,14,18,16},
{12,12,16,16,17,22,17,13,14,19},
{15,12,8,14,10,21,14,0,9,20},
{18,11,5,5,5,12,11,0,4,17},
{18,9,0,2,5,4,4,0,0,18},
{20,1,0,0,9,6,17,0,6,0},
{20,0,1,0,16,9,20,0,10,9},
{18,0,1,3,24,5,19,0,13,10},
{15,0,1,4,19,4,15,0,14,10},
{13,7,1,5,13,3,14,3,17,12},
{11,9,8,5,4,6,16,12,17,13},
{8,12,13,7,6,3,13,15,13,12},
{5,15,16,5,15,2,5,15,13,17},
{2,16,16,6,18,16,4,16,14,15},
{2,17,17,12,21,19,7,15,13,15},
{8,12,19,16,22,16,9,14,16,17},
{9,14,16,24,21,15,12,13,18,17},
{12,12,8,26,19,20,15,13,17,18},
{15,12,4,18,10,21,17,0,15,18},
{18,8,0,12,5,19,16,0,10,18},
{16,7,0,3,1,11,14,0,4,16},
{20,0,0,0,9,5,18,0,10,0},
{20,0,0,0,16,1,20,0,14,4},
{19,2,0,0,14,0,18,0,18,6},
{14,4,2,0,14,0,16,3,17,4},
{12,7,7,0,9,1,16,11,13,5},
{11,9,15,0,5,1,11,15,10,6},
{8,12,16,0,7,1,6,13,6,14},
{5,14,15,3,13,7,2,11,7,14},
{2,16,15,4,19,10,0,15,7,10},
{2,15,14,9,23,6,5,15,6,10},
{8,12,10,13,19,11,9,14,12,15},
{11,14,7,18,19,16,10,13,14,14},
{12,12,4,19,17,19,16,6,16,15},
{15,12,0,21,10,17,15,0,16,18},
{18,8,0,22,5,19,17,0,17,18},
{13,7,0,13,3,18,15,0,9,14},
{20,0,0,0,14,4,17,0,15,0},
{20,0,0,7,13,1,19,0,16,0},
{18,2,2,7,13,3,20,3,20,0},
{14,5,8,3,11,3,16,7,15,0},
{12,8,13,3,11,1,12,13,9,1},
{11,9,16,1,12,1,10,15,5,1},
{8,9,17,2,16,7,9,10,4,4},
{5,14,14,5,18,7,5,16,5,5},
{2,14,14,9,23,5,3,15,7,6},
{2,17,11,4,24,8,7,14,4,8},
{10,12,5,6,21,17,12,13,7,13},
{11,14,2,12,18,17,12,12,10,12},
{12,12,2,19,15,16,19,0,14,15},
{14,11,4,21,9,17,18,0,16,18},
{15,7,4,23,7,19,20,0,18,16},
{9,7,5,17,7,19,19,0,17,6},
{15,0,0,12,7,11,16,0,18,0},
{20,2,2,12,9,9,22,4,19,0},
{18,5,8,10,6,7,20,7,19,5},
{15,5,13,7,5,5,15,13,13,5},
{13,8,14,8,5,9,15,15,7,4},
{13,9,15,7,5,6,14,13,3,5},
{8,9,15,8,7,3,10,17,0,4},
{6,12,12,0,14,3,3,16,3,5},
{3,14,10,4,21,8,2,13,7,8},
{5,17,8,4,19,9,6,16,7,9},
{10,12,6,8,18,14,9,13,6,13},
{12,14,6,14,16,12,12,12,9,12},
{12,12,4,18,14,15,15,0,14,16},
{12,10,4,21,8,17,18,0,18,16},
{15,7,6,21,6,19,19,0,18,15},
{7,7,8,16,7,16,16,0,17,4},
{8,0,2,11,5,15,15,0,18,2},
{19,4,9,13,5,12,22,7,20,7},
{17,5,13,19,5,12,21,7,17,8},
{16,6,16,14,5,10,14,14,14,6},
{13,8,16,6,5,6,10,13,6,9},
{12,9,14,3,5,3,10,13,6,8},
{11,7,12,1,7,7,11,18,2,11},
{7,11,10,3,14,5,8,15,3,7},
{8,14,12,5,21,9,3,14,6,10},
{8,17,10,10,15,14,7,15,8,8},
{11,12,11,14,16,13,12,12,13,12},
{9,14,9,16,18,12,12,0,13,15},
{12,12,11,20,12,17,17,0,15,16},
{16,10,10,21,9,19,16,0,16,16},
{11,7,13,17,5,18,19,0,17,7},
{5,7,8,10,6,5,5,0,11,4},
{3,3,8,14,0,8,5,6,8,1},
{15,10,17,22,0,23,16,7,22,9},
{19,10,20,19,0,19,22,13,15,13},
{16,11,20,18,0,13,14,12,14,7},
{16,12,17,15,0,14,13,13,13,11},
{14,13,18,9,0,10,12,17,9,11},
{12,11,15,9,2,7,12,16,8,12},
{11,11,15,9,10,7,9,16,8,12},
{9,14,15,10,18,14,7,16,6,12},
{10,17,15,12,16,16,10,14,6,9},
{10,16,12,15,14,14,15,12,8,15},
{12,18,11,16,16,16,16,0,13,16},
{16,17,13,21,12,18,13,0,15,14},
{10,15,15,16,6,18,16,0,17,11},
{5,12,16,10,1,6,8,0,14,4},
{0,12,10,0,0,1,1,0,3,1},
{1,6,13,10,0,11,5,6,4,1},
{4,10,22,16,0,13,5,11,8,3},
{11,10,21,19,0,23,16,11,20,11},
{19,11,20,20,0,21,20,12,20,18},
{20,12,20,15,0,14,20,19,19,13},
{19,12,20,16,0,12,18,18,18,12},
{16,11,20,13,2,11,16,16,15,12},
{15,10,20,13,11,12,14,16,12,13},
{8,14,22,10,17,16,12,16,9,10},
{10,18,21,11,16,15,10,13,9,12},
{14,16,20,17,14,16,14,4,16,14},
{16,18,18,17,15,18,15,0,17,12},
{9,17,18,16,13,15,16,0,16,5},
{5,15,18,10,5,2,7,0,12,4},
{0,12,17,0,1,0,0,0,1,1},
{0,12,7,0,0,0,0,0,0,1},
{0,4,14,5,0,6,0,3,0,0},
{0,9,12,7,0,9,0,11,2,0},
{1,4,12,7,0,10,3,11,3,5},
{1,6,12,10,0,7,3,10,8,5},
{6,9,12,10,0,11,8,10,10,15},
{12,10,10,15,0,12,15,11,14,13},
{13,7,10,18,6,13,14,13,15,15},
{15,7,10,16,12,18,18,14,16,13},
{17,10,10,18,19,18,17,14,15,13},
{11,13,11,14,15,15,13,12,13,6},
{6,13,11,5,13,6,10,0,11,0},
{1,16,11,2,14,0,1,0,3,1},
{0,15,15,2,13,0,0,0,0,0},
{0,13,11,0,8,0,0,0,0,0},
{0,14,13,0,3,0,0,0,0,0},
{0,10,6,0,2,0,0,0,0,0}};
        
    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
