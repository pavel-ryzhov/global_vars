#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.699366,0.311087,0.144834,0.456572,-0.783496,0.674557,0.0857572,-0.653375,0.659641,0.321939,0.61963,0.439569,0.724801,0.230981,-0.391084,0.578311,0.214692,0.0773214,-0.00948435,-0.636951,-0.426377,-0.20538,-0.272327,0.357446,0.519443,-0.79535,-0.712943,-0.613557,0.220526,0.0472027,-1.20749,-0.102898,0.186606,0.461255,-0.347796,0.409656,-0.166142,-0.61922,0.683536,-0.044276,0.540422,0.69018,0.307566,-0.0275463,-0.944717,-0.162076,0.192666,-0.49314,-0.287498,-0.511939,-0.57694,-0.283446,0.373449,0.736841,0.0276261,-1.47535,-0.468542,-0.536249,-0.175586,0.454878,0.00868207,0.181017,-0.168909,0.214832,0.0474091,-0.278125,0.0915392,0.699296,-0.17347,0.477758,0.347734,0.00290515,-0.0341228,0.0889224,-0.44793,-0.149329,-0.31235,0.281358,-0.6434,-0.000973897,-0.714307,-0.654578,0.00720977,0.583536,0.0816746,-0.05275,0.403841,0.704255,-0.18818,-0.331192,-0.510284,0.0975755,0.431122,0.189563,-0.165642,0.437947,0.150497,-0.337671,0.0584891,-0.297833,0.074109,0.203608,-0.117797,0.242016,0.21271,0.461277,0.0345543,0.464118,0.455544,-0.212904,0.771071,-0.244996,-0.316364,-0.727691,-0.0515858,-0.174826,0.0548269,-0.569663,0.848526,0.25962,-0.863393,-0.0573258,0.525239,0.819983,-0.40403,1.63401,0.284989,-1.7874,0.45461,-0.701477,-0.207696,0.744967,0.387733,-0.10366,-0.0371414,0.847483,-0.00336468,-0.443977,1.8507,-0.682546,1.31597,0.75607,0.31664,0.0461265,-0.298962,-0.537294,-0.181256,-1.11119,0.369942,0.104387,-0.708869,0.635061,0.788772,0.0957629,-0.944039,0.520344,-0.440725,-0.184072,0.144506,0.744633,1.02339,-0.0206232,0.0318536,0.609171,-0.0327422,-0.490512,0.40773,0.508925,-0.473833,-0.161587,-1.23248,-0.136856,0.179066,0.537211,0.00767391,-0.403243,0.033609,-0.110065,0.362095,-0.132753,-0.577899,-0.169872,0.276018,0.23299,-0.359767,-0.219436,-0.15075,0.187115,-0.570516,0.150682,0.0606711,0.566409,-0.524158,-0.148853,-0.768872,-0.618197,-0.33385,-0.0779103,-0.163569,-0.00998602,-0.490906,-0.0510117,0.368694,0.696395,-0.210934,-0.363997,0.32507,-0.24986,-0.51719,0.0455214,-0.392217,0.00632093,-0.314596,0.791014,-0.499053,0.531598,0.631374,0.0966886,-0.0523432,0.321935,0.018697,0.483026,0.031307,-0.238218,-0.688388,0.620581,-0.246175,-0.544309,0.135973,0.0308391,0.184894,-0.0158555,0.218124,0.202717,0.334785,-0.62854,0.19585,0.0249532,0.0284617,-0.17198,0.223352,0.548763,-0.165477,0.0692092,0.159154,-0.583054,0.127653,0.684639,0.228816,1.20581,0.180429,0.101124,0.189635,0.0920146,-0.563284,-0.0948269,-0.101862,0.0625751,-0.495029,0.489488,-0.364461,-0.513396,-0.849849,0.382412,0.750932,-0.180468,-0.0237941,0.122339,-0.41292,0.437756,-0.602183,0.0126529,0.53626,0.579389,-0.790937,0.723384,0.0947754,-1.24724,-0.116665,0.0678286,-0.0880215,-0.0461241,-0.0538593,0.282625,0.718266,0.480024,-0.0385616,0.405258,1.03325,-0.375958,0.0639533,-0.190325,-0.160119,-0.592251,-0.139149,0.0811942,-0.241503,-0.752671,0.530525,-0.408583,-0.22266,-0.0866019,0.0378971,0.348734,-0.432611,-0.0788395,-0.0239196,0.334178,-0.585697,0.592535,0.525818,-0.365,-0.516761,0.236094,-0.119777,-0.493121,0.0852884,-0.162096,-0.491836,0.186249,-0.853775,-0.246536,0.549842,0.541606,-0.008077,0.246965,0.48504,0.718407,-0.0323045,-0.495055,0.0573178,-0.308441,0.022097,-0.057042,0.213303,0.503244,-0.23788,-0.195855,-0.592745,-0.788099,-0.746094,0.203075,-0.47842,-0.33872,-0.328631,-0.460326,0.02468,-0.366549,0.606879,-0.0882198,0.381645,0.8,0.636898,0.410758,-0.25955,0.0736603,0.338403,-0.0548401,-0.649834,-0.354838,-0.34445,-0.481017,-0.295195,0.417508,0.0251451,-1.08915,0.509836,0.825559,-0.641165,0.015917,-0.228956,1.27476,-0.0850268,-0.695304,-1.14582,0.643855,-0.619292,-0.207076,0.689374,0.0173887,0.872547,-0.00136559,0.108916,-0.742887,-0.362837,-0.502282,0.548603,-0.4329,0.0891455,0.580265,0.432581,0.259187,-0.923133,0.268143,0.415962,-1.32731,0.206348,1.03896,0.240937,1.54298,0.491776,-0.314072,0.611866,0.238593,-0.345339,0.805372,-0.201431,0.477692,-1.05986,0.364995,-0.901723,-0.969681,-1.4337,0.024241,0.893644,-0.106619,-0.54358,0.201768,-0.601439,0.058544,0.344231,-0.0183904,-0.258505,0.390647,0.0292443,-0.620374,0.27959,0.721835,-0.71308,0.846833,0.281735,-0.493335,-0.286196,0.307556,-0.357613,-0.200206,-0.507781,0.381219,-0.511045,0.554709,-0.851249,-0.496312,-0.316216,0.488311,0.484375,0.330899,0.257005,0.942231,-0.562664,-0.674929,0.0869836,0.195335,-0.59234,0.405531,-0.140993,0.631181,-0.0493972,-0.0400714,0.343244,-0.00185708,0.0514785,-0.864249,-0.482933,-1.1269,-0.0857276,-0.713312,0.530351,-0.424054,-0.00877866,0.233884,0.0233331,0.763326,0.358524,0.527929,0.338585,0.48096,0.307252,0.499987,0.113756,-0.652084,-0.444332,-0.808103,0.0451605,-0.69502,0.0654846,1.34324,-0.41529,-0.527758,-0.438244,-1.7142,-0.352313,-1.21544,-0.392857,-0.193581,0.660616,-0.174429,0.855655,-0.343025,-0.237158,-0.332234,0.576894,0.730305,1.44824,0.168168,-0.948239,0.511083,0.586336,0.617971,-0.176469,-0.683187,-0.331802,-0.606767,-0.248216,-0.500275,0.381813,-0.426511,-0.107803,0.556551,-0.36032,-0.335866,-0.236926,0.292163,-0.0272676,-0.0615993,0.116156,0.407539,-0.220781,-0.0993281,-0.337616,-0.00649397,0.650017,-0.431751,0.352445,-0.417763,-0.871286,-0.056387,0.329871,-0.193191,0.503118,0.625104,0.147594,0.232916,-0.120046,-0.312996,0.344583,-0.183131,-0.0761666,-0.137686,0.160525,0.28986,0.520436,-0.235922,0.603035,0.73279,0.225627,0.30233,0.249298,0.612214,-0.515257,-0.0136613,-0.695494,-0.715051,-0.581849,0.0647357,0.340468,-0.214369,-0.512274,0.0953769,-0.376694,0.171528,0.24927,-0.365234,-0.9211,0.676042,0.404831,-0.613065,0.508676,1.55308,-0.756452,1.26352,0.330599,-0.0755467,-0.438529,-0.119569,-1.60066,-0.409179,-0.3017,-0.487344,-1.08753,0.649879,-1.35031,-0.154967,0.566429,1.32278,0.813275,-0.337279,0.857712,1.97945,-1.23115,-0.43892,1.21579,0.511811,-1.06562,0.00448348,0.324295,1.02348,0.104533,-0.844292,1.602,-0.814786,-1.65804,-0.418982,-0.0181466,-2.72135,-0.528101,-0.153315,0.820204,-0.568742,1.80768,0.385986,2.44332,1.98975,-0.558829,-0.38579,0.780115,0.350538,-0.423573,-0.847648,0.13203,-0.148126,-0.355831,-0.568325,0.123976,-0.251997,-0.451784,1.46826,-0.150471,-0.384051,0.206469,-1.45655,0.090229,-0.999256,-0.324947,-0.485923,0.435017,-0.468888,0.93971,-0.801718,-0.388771,0.0346075,0.571224,0.99242,1.59515,-0.0380269,-0.413912,-0.0405125,0.188655,0.550865,0.311673,-0.600452,-0.381115,-0.576402,-0.0684352,-0.302588,-0.535717,-0.236906,-0.0265,0.419963,-0.403358,0.00426061,0.657323,-0.252781,-0.253155,0.520618,1.1445,0.59484,0.0774109,0.989836,-0.471411,0.0335156,0.29368,-1.09928,-0.338264,-1.16128,-1.29821,0.942247,0.10302,-0.181131,1.94927,-0.317794,0.16192,0.369516,0.867021,0.00951171,-0.305573,0.619063,-0.0351428,-0.688381,0.272675,-0.333486,-0.117328,0.445183,-0.0283838,0.404076,0.598089,-0.232293,0.347254,-0.603463,0.23649,0.0749131,-0.021768,0.287149,0.344882,0.0476447,-0.16335,-0.643497,0.0661611,-0.214768,0.577975,0.683496,0.247089,-0.21019,-1.12744,0.916472,0.422567,-0.106129,0.572164,1.18408,0.217041,0.867093,-0.14908,0.2095,-0.233815,-1.40407,-1.74064,-0.429738,-0.162559,-1.07431,-0.27732,0.552843,-0.119109,1.01809,0.393778,1.26785,1.08085,-0.95771,0.889141,1.26654,-0.950829,-0.187471,1.95558,1.02637,-0.86631,-1.56718,0.89775,0.897547,-0.651119,-0.919877,1.09466,-1.33537,-1.29412,-1.77125,0.292511,-0.611623,1.56024,0.0306762,0.965425,1.43107,0.594643,0.292726,1.52537,0.712871,-1.38894,-0.701635,0.395724,2.32302,-0.645175,-0.37429,-0.321714,-1.06804,0.212883,-0.479675,-0.112905,0.243535,-0.310757,1.07424,0.257344,-0.0875657,-0.0731834,-0.508228,0.715231,-2.06521,0.372893,0.0954564,1.48146,0.352177,0.402956,-0.447096,-1.37635,0.175556,-0.399762,-0.599106,0.522582,-0.308514,0.175727,1.03785,-0.726306,0.825154,0.862837,-1.39504,-0.506056,-0.942664,-0.174679,0.428078,-0.991697,0.679253,0.226679,-0.151444,-0.402851,0.164513,0.900622,-1.23117,0.0305855,-0.169885,0.73458,0.478467,0.213388,-0.224166,-0.986511,-0.00672031,-0.590807,-0.427147,0.837547,-0.390543,-0.340538,0.416311,0.140352,0.503512,1.07036,-1.04769,-0.368523,-0.302331,0.442084,0.0250772,-0.319834,0.0350656,-0.217462,-0.301111,0.449989,-0.0928174,0.244655,0.0391328,0.139873,0.213323,0.993185,-0.10624,0.355314,-0.591718,-0.279925,0.303089,0.0112019,-0.239268,0.396916,-0.637995,-0.535081,-0.318795,-0.493884,-0.226058,1.08649,0.82763,-0.749089,-0.355406,-0.614965,-0.243153,-0.385477,-0.0628944,-0.310573,0.383097,0.430912,0.564923,0.209626,0.108724,-0.529938,-1.65029,-0.736189,-0.232117,0.585857,-0.152242,0.247317,0.482953,0.624613,0.799511,-0.132457,-0.240981,-0.282254,-0.896539,0.324524,-0.464162,0.786764,0.334102,1.50968,0.993855,0.0702464,-1.8457,0.846712,0.874521,-0.971507,-0.586448,-0.112126,-1.14293,-0.32052,-2.14741,0.0837563,1.36861,2.30764,-0.175969,0.697138,1.88391,-0.221081,0.282898,0.0255177,-0.390728,-0.867448,-0.440409,-0.157475,2.75387,-0.268724,0.377327,-0.663043,-1.39556,0.318111,-0.0605151,-0.158301,-0.209737,0.421468,-0.0147325,-0.00916413,0.492904,-0.0357436,-0.180198,-0.0289309,-0.716359,0.592629,0.529291,0.178913,0.597795,-0.0099531,0.197119,-0.737536,-0.187702,-0.0948476,-0.61075,-0.557786,-0.0980998,0.546135,0.870676,-0.462959,0.207935,-0.540026,-0.438858,0.653727,-0.100922,-0.349052,0.628739,0.624836,0.599541,0.649897,0.126765,0.405048,-0.208399,-0.1665,-0.583062,1.02662,0.116189,-0.035707,1.03355,0.0714119,-1.27078,-0.778382,-0.186036,0.301283,-0.600311,0.499192,0.138684,0.829582,0.357395,-0.292046,0.81822,-0.104431,0.00614609,-0.417326,-0.550057,0.0618975,-0.261621,0.0919587,-0.277258,-0.291207,-0.19582,-0.212277,-0.299474,0.139425,0.071239,-0.0136287,-0.422967,0.335851,0.156491,0.0647666,-0.0546381,0.283505,0.0967471,0.981599,-0.139183,0.549506,-0.888373,-0.766173,-0.0642345,0.29515,-0.17333,0.6164,0.802157,-1.15061,-0.197389,0.0685573,-1.25969,-0.701972,-0.249051,-0.847808,0.305692,0.787497,0.431353,1.17445,0.144921,-0.689443,-0.640847,-0.445556,-0.51091,1.20245,0.728411,-0.138902,0.516061,0.305348,0.592437,-0.125283,-0.441346,-0.920421,-1.04188,0.431074,-0.837885,1.54298,0.862409,-0.156085,0.0298845,0.49815,-0.863032,-0.0432408,0.095771,-0.781849,-0.272848,-0.0761514,-0.381862,0.383602,-0.183568,-0.209957,0.650479,0.128381,-0.773981,0.574243,0.302933,0.148292,-0.0186873,-0.597183,0.123969,0.149279,0.0925106,-0.360023,0.38544,0.209062,-0.138415,-0.196484,-0.173322,0.833563,0.378169,0.182196,0.214211,0.416244,-0.696381,0.322924,0.346808,-0.144733,-0.0348881,-0.899135,0.389147,-0.165196,-0.0879112,-0.79104,-0.538063,-0.28306,0.00533853,0.529208,-0.174373,-0.282293,0.580074,-0.385474,0.475145,0.749478,-0.0142768,0.130728,-0.17089,-1.53249,-0.367642,0.533384,0.340436,0.226425,0.348623,0.277658,0.142854,0.426427,-0.178884,0.596732,0.0509184,-0.341215,0.857321,1.1095,-0.40067,-0.938206,0.856826,-0.453817,-0.727662,0.455252,-0.483015,0.261427,-0.292119,-0.0833401,0.535519,0.930805,-0.336718,-0.512632,-0.0692693,-0.147642,0.596142,-0.416455,-0.531858,-0.49677,0.000392911,-0.154772,-0.471041,-0.0017994,0.261895,-0.202115,0.189095,0.0915316,-0.131055,-0.377488,-0.109206,0.00743944,0.186401,0.28196,0.113314,0.00575348,0.215655,0.221304,-0.00700026,-0.0657618,-0.477577,-0.203046,-0.274004,0.32315,0.043702,0.271088,0.253213,-0.407823,0.406095,0.764388,-0.922938,-0.562306,-0.115428,-0.706185,-0.235682,0.119542,0.0173115,0.344177,0.279337,-0.708939,0.252978,0.167401,-1.09703,0.478093,0.411885,0.113125,0.415624,-0.461336,0.283,0.0568685,-0.0679308,-0.470939,-0.469244,0.185015,-0.638618,0.574394,0.406025,-0.110368,0.608599,1.06513,-0.123316,-0.083912,0.0293189,-0.326525,-0.0504585,0.0707193,-0.184176,0.0404845,0.865371,-0.572165,0.789169,-0.369524,-1.23471,0.156696,-0.407053,-0.262919,0.1498,-0.916088,0.138402,0.386075,0.562755,0.0420673,-0.840677,0.292689,0.164871,-0.270054,0.679929,0.61977,1.17491,0.890806,0.0171251,0.16999,-0.149305,-0.0748048,-0.235096,-0.713572,-0.163972,-0.924967,0.747517,-0.842002,0.400734,-0.352844,-1.53015,-0.535166,0.482732,1.27693,0.216796,-0.210087,0.632401,-0.048843,0.599716,0.239835,0.328592,0.61096,-0.120214,-1.09414,-0.32644,0.0843037,0.718011,0.250376,0.216875,0.245415,-0.281289,0.0622328,-0.390051,0.177878,-0.0627616,-0.547789,0.76889,0.281626,-0.310181,-0.518243,0.00153636,-0.543343,0.261311,1.24609,-0.19563,0.322574,0.220123,-0.448422,0.0665311,0.415057,-0.2054,-0.338464,-0.850649,-0.378819,0.322594,0.362621,0.149456,-0.435685,-0.27812,0.487681,-0.359375,-0.106716,0.0224736,0.501639,-0.0626845,-0.631758,-0.199827,-0.206751,-0.533473,-0.112669,-0.0113114,0.210188,-0.021,0.280159,0.47405,0.405728,0.255023,-0.926131,-0.463584,0.0558642,0.0520376,-0.013897,-0.308465,0.0760491,0.358854,0.638849,0.725403,1.06743,-0.118439,0.257884,-0.0808022,0.128263,-0.238446,-0.537179,-0.32255,-0.337152,0.52923,-0.462458,1.13191,0.88829,-1.02877,-0.481391,-0.364509,0.233278,0.208382,-0.599541,-0.0693135,0.339628,0.156116,-0.125402,0.240132,0.252884,0.393623,-0.582965,-0.101377,0.592496,0.486107,0.295738,0.557119,0.683877,-1.29121,0.755115,1.03816,-0.706048,0.279441,-0.71625,1.47323,-0.0330069,0.222403,-0.801106,-0.176359,-1.15593,-0.41979,0.103819,0.312829,-0.327934,-0.475621,-0.359391,0.198387,0.408665,-0.356241,0.271778,0.369871,-0.40673,0.710847,-0.903054,0.106201,0.971133,-0.0925826,-0.554149,-0.496961,-0.302254,0.274858,-0.644695,0.321427,0.269743,1.23972,-0.83028,0.292586,-0.798056,-1.43047,-0.133423,0.586214,0.328815,0.0798408,-0.542609,0.118475,0.586942,0.18641,-0.749184,-0.80812,1.01733,-0.340326,0.384793,0.381321,0.0631993,1.03071,0.979434,-0.710306,0.138159,-0.0776408,-0.710241,-0.10373,-0.0105081,-0.133469,-0.188597,0.230888,-0.452241,0.609075,-0.118027,-1.15221,0.268694,0.841587,0.441986,0.31954,-0.0650858,0.222018,-0.227802,0.148456,-0.493597,0.375265,0.638701,-0.506135,-0.131703,0.22462,0.907498,-0.58128,-0.15691,0.120002,0.830857,-0.72723,0.653138,0.411185,-0.503483,-0.52186,-1.16705,0.636459,0.311481,-0.382004,0.38975,0.796593,-1.06448,-0.842044,0.834091,0.0359509,1.49433,-0.408974,-0.136132,-1.21103,-0.283421,0.691761,0.0494561,-0.102156,0.413866,0.697891,0.888451,-0.375723,-0.439257,1.09106,0.818011,-0.593336,1.28052,0.573093,-0.827843,-0.149423,-1.34346,0.836625,0.276385,-0.410737,-0.121465,1.03816,-1.45432,-1.12905,0.707128,0.197289,1.35493,-0.50145,0.00728986,-0.630017,0.211848,0.418721,0.403281,0.736538,-0.223403,-0.0350613,0.143083,0.347022,0.24552,0.0159192,0.201838,-0.0753596,-0.00857653,0.156975,-0.45799,0.237301,-0.2142,0.0629898,-0.52517,-0.088256,0.28149,-0.580028,-0.0448079,0.272606,0.645371,0.241965,0.180888,0.807454,0.567449,0.104055,-0.217933,0.0521563,0.714776,0.199962,-0.35515,0.215054,1.88364,-1.93966,1.69711,-1.45006,0.640388,-2.45564,0.754226,-1.46223,-1.30333,-1.25901,0.268303,-3.22931,0.621524,-0.286099,-1.55772,-1.04399,0.556418,0.627269,-1.20224,-1.30807,-2.96919,-1.74701,0.182574,0.304368,-1.95977,0.975567,0.0345515,0.416914,1.35317,-1.52252,-2.45877,2.33606,0.74015,-2.21297,-0.598333,-1.25203,-1.39809,0.874757,-0.984693,0.944711,1.42306,-0.66674,1.10361,-1.07817,0.783647,-0.549129,-0.373806,-1.79413,-0.968295,-2.28479,-0.760065,-1.98686,-1.7783,-3.7383,0.188154,0.788445,0.734449,0.989173,1.24015,0.594556,-1.30705,1.50439,0.904555,-1.86789,-0.181023,-1.16148,-1.27319,-0.108415,-1.07207,-0.114249,0.579644,1.26787,0.96646,1.6595,-0.622856,-1.71941,-3.06661,-2.1731,-0.794148,0.559561,0.00290676,-1.56654,-1.69221,-0.495803,1.54094,0.0641328,-0.378511,1.07237,-2.69553,0.117686,-0.40524,-0.32875,-0.0121328,2.02217,-1.66875,-2.64903,-2.10417,0.287638,-1.94491,1.38024,-1.67599,-0.416622,-1.70001,1.89815,-0.416741,-1.16178,-3.02631,1.31374,1.23154,1.2934,-1.531,2.04518,0.911657,1.03714,-2.79809,2.39543,-1.84396,0.0946267,-2.56615,-2.19795,-0.722479,0.0971169,-0.541472,-1.30153,1.93327,-0.958216,-1.58468,2.01797,-0.793065,-0.870558,-1.91577,-1.93914,1.23409,0.369073,-0.480354,-1.67712,-1.2418,0.764321,3.05065,-2.68368,-2.59571,-1.93377,-0.56882,-1.35033,2.09768,-2.52803,2.14928,-0.457249,1.91842,-1.52924,-0.722096,2.78754,-1.62647,-1.73994,2.52902,-1.73557,-1.48584,1.22815,-0.815776,-1.11973,0.381147,-2.23959,-2.90559,-0.0760989,0.755945,0.468871,-0.231228,-0.662205,0.105619,1.30709,0.802149,-1.74645,-1.61157,2.33842,-1.49058,-1.9479,1.31889,-0.03472,0.71035,-2.51451,-0.347696,0.631788,-1.05876,-1.43469,-2.24682,1.80867,2.49074,0.131863,-2.51742,-2.39108,0.211072,-1.19991,0.00788165,0.241679,-0.553788,-0.985377,-0.415341,-2.05796,-0.823185,0.443308,0.0593283,2.22579,-1.99831,-2.48275,0.683057,1.46278,1.45427,-1.6489,-2.44013,-2.04945,0.97417,-0.63029,-0.935659,-1.41691,-1.9147,2.24206,0.944612,-0.984918,-1.89922,1.11042,-1.9302,0.0631362,-0.630777,-1.694,-1.44346,2.17347,-1.50641,-1.4214,2.12589,1.29134,1.12558,-2.50958,0.917223,-0.77077,-1.16187,0.162972,-2.30296,0.52242,-0.0639901,1.25666,0.914103,-1.03437,1.56843,-1.44222,0.112808,-1.26907,-1.48556,1.54929,-2.19413,0.286345,1.26608,-1.23029,-0.369123,-1.84387,1.13446,-3.85548,2.12391,-1.15103,1.3264,-2.25875,0.370401,0.0408141,-0.330856,-0.474545,-2.75079,0.397168,-0.710359,-2.69934,0.470755,0.0525509,1.11362,-0.598796,1.49821,-2.14593,-0.271409,-1.74163,-2.30337,-1.74458,1.28383,1.51434,-3.72196,1.4082,-3.72735,0.965471,1.05953,-1.17486,-0.0730196,-0.900278,-0.143426,0.068172,-1.24451,0.0432763,-0.670491,1.4826,-0.236582,1.98877,-2.01911,-1.07435,-2.27811,-1.6869,0.825736,0.612382,0.991342,0.756891,0.703277,0.62317,1.21369,0.84048,0.608907,0.751037};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
