#include <iostream>
#include <vector>
#include <map>
#include <cassert>
#include <cmath>
#include <fstream>
#include <string>
#include <cstring>

#define IMGSIZE 400          /* Размер изображения к которому входящие приводятся */

using namespace std;

double weights[] = {-3.60455,-4.50471,-0.352502,-0.573498,-0.630479,-0.522235,-0.417181,-1.42661,1.19912,0.548499,-0.93694,-1.97458,-0.881498,-7.40085,-4.74994,-4.9057,-3.7633,-1.93166,-4.90941,-4.45066,-0.907572,-0.905239,0.675587,0.898919,-4.22488,0.562525,0.236866,0.198814,0.543218,1.80736,2.20326,-0.539115,-0.733675,-0.629174,0.510739,-1.80436,-4.0031,-1.05591,-2.89324,-3.24177,1.36785,1.3153,0.100529,0.061788,-1.9712,-2.79831,-1.07622,-0.202003,3.01252,-0.77499,-2.14218,1.53327,2.41062,0.110418,-3.67071,-5.73617,-1.38243,-5.05756,-0.579195,-1.87504,2.49347,0.410289,3.63552,-0.814113,-2.6566,-1.2224,3.29145,2.32695,1.19215,-3.78038,-2.89907,-0.171978,0.364704,1.39353,0.053321,-0.712182,0.554492,0.715892,-0.601721,-0.777854,1.74913,-0.262637,0.60226,-0.927716,-3.54831,-1.46156,0.722709,-0.0449066,-0.317286,1.57913,0.337999,0.943621,0.0290025,1.10154,2.66591,0.109112,3.20703,1.71247,2.34104,-0.211034,-3.23208,-0.360484,-1.08819,-2.22634,-2.73486,-0.102148,-0.475091,-1.53638,1.72474,-1.2237,-4.24518,1.58419,2.89431,2.15503,2.75999,0.99549,1.03034,1.39637,3.87773,2.69566,-0.463856,1.25894,-0.802626,-0.864799,-1.89738,1.85143,2.18958,-1.83464,-3.17506,-6.91305,-6.10082,-4.13989,-1.17233,2.77469,1.01416,0.644875,4.13449,4.00753,5.58253,6.18591,3.97197,0.32592,-0.341843,-0.439302,-0.627506,2.50465,-0.595192,0.123555,-3.10349,-4.9439,-2.54568,-2.00707,0.235403,1.74074,0.0883088,-2.46519,2.25645,4.15749,7.48187,8.38155,4.51972,0.9095,0.638903,0.89877,-0.500161,2.33548,3.09401,0.139994,-1.00548,-3.62616,-6.91409,-3.26764,-2.39317,-1.28295,-0.489514,0.329472,-1.30727,1.15438,5.89757,8.72969,4.73095,-1.08974,-0.232164,-0.611002,-1.61772,-1.28159,-0.781947,-0.8674,-4.78339,-7.44415,-8.35553,-6.80051,-3.99219,-4.48155,-7.27327,-5.25106,-2.89625,-1.47792,1.8102,6.50098,6.28417,2.92365,0.62063,1.66881,-0.478663,-2.94527,0.170898,-0.239566,-3.97959,-3.97316,-3.58453,-3.05472,-2.58397,-2.95961,-6.04245,-5.22854,-1.25335,-3.33743,-2.46678,5.56677,6.24417,3.94888,3.20761,4.3651,0.405249,0.800644,2.84776,-0.645105,-2.03108,-5.46274,-4.76112,-3.29782,-0.488334,-1.85685,-1.81564,-2.43695,0.121971,-2.63909,-3.38316,1.37478,7.02597,4.64212,3.10238,3.57677,1.20387,0.407686,1.05537,-0.84804,-3.23902,-6.98617,-5.51597,-4.00642,-1.22694,-1.39752,-0.864471,-0.925958,-1.15025,-3.69409,-3.37367,-1.06674,3.32752,4.2807,4.4753,3.15517,1.90955,2.07015,1.26039,-0.9935,-3.3051,-6.47253,-6.04382,-4.20653,-0.184512,-0.032637,2.34937,-1.90326,-2.60161,-3.30457,-1.16818,-0.883759,2.98898,2.31694,2.43907,2.63955,0.409721,2.32085,0.600386,3.1885,1.68084,-5.03659,-5.08132,-1.33155,0.342891,1.88119,1.40308,0.0879312,-0.486714,-1.02058,0.0968624,-3.42674,1.84759,2.96205,2.11012,2.28208,0.856736,2.9243,3.3102,3.05692,3.12743,0.202312,-0.722072,0.587208,1.20605,0.0355171,-0.185932,-2.44291,-1.67921,0.281209,-0.049353,-5.99865,0.873902,1.23242,1.02455,-0.644817,-0.0702683,0.324956,2.75813,1.33117,1.68756,0.0822619,0.561918,2.8903,-0.517228,-2.04869,-0.867855,-1.9449,0.877921,0.841035,-3.29579,0.979466,0.850531,-1.50558,-1.50424,-0.14838,-3.68347,0.0482487,1.25565,3.33688,2.39507,-1.96876,-2.62041,-0.313006,-1.17332,0.0470919,-0.493563,-3.59179,0.329618,0.264016,-0.230111,1.00999,0.729295,0.457557,-1.17845,-0.965376,-2.74241,-2.84362,-1.70623,-0.890841,-0.748334,-1.75916,-2.69424,-0.0762128,-1.94249,-3.44214,-5.25699,-4.45058,-4.08793,-1.14378,-0.851826,-0.465612,-4.21476,-2.07635,-2.08158,-0.309433,-0.594623,-4.44235,-0.0801058,-1.61239,-0.145415,0.0125404,-0.704974,0.575136,-0.440342,0.235192,-5.5578,-2.04462,-2.48791,-2.94132,-3.27093,-6.80898,18.6103,5.94649,3.06705,-1.17868,1.34362,2.52009,-2.21837,-13.1135,-6.01556,-7.26371,-8.00378,-7.16771,-4.88855,1.98697,-7.93826,-5.44351,3.42093,6.11097,3.99111,9.88848,5.66122,2.07106,-6.28558,-3.00289,-4.53409,-8.62361,-16.5212,6.09186,-3.16249,-5.85688,6.1696,3.14885,-9.46395,-11.5395,-8.26908,-10.4437,1.73236,8.52394,9.22509,6.43597,10.7655,11.7892,8.50757,-7.12785,-0.138877,3.15006,3.47038,-0.116829,1.17213,-4.58528,-2.62495,-2.64939,-16.4847,-6.80589,-7.41081,-2.82459,-10.1506,1.99476,0.296938,9.85631,-0.710868,0.161881,-3.70984,-0.63732,8.4114,6.48565,-0.546888,2.73538,0.605484,5.31407,1.64933,3.0298,1.65917,-3.36413,-5.53038,4.3841,-6.39784,-1.63082,4.9832,12.1358,-1.96281,-12.9694,-4.66413,-2.92533,14.2703,7.79323,4.56043,2.07326,-2.63748,2.10187,5.59567,10.8589,8.0228,-4.02516,8.52007,-1.8282,-2.39528,-3.74221,5.74974,3.32316,5.45968,-2.86997,-9.1515,-1.61337,-2.13314,-3.32272,2.92666,0.165298,-1.62645,1.54433,8.55166,2.63586,1.19708,9.13712,-0.428761,8.03178,-4.39538,2.96992,3.0093,0.955126,5.86327,0.574807,-2.40207,-12.5843,6.3208,-3.01733,-4.75405,0.235381,6.33526,7.56524,15.9069,-5.18017,7.02269,-6.2178,5.18288,-4.86237,-10.9955,5.21184,-0.52814,6.89581,5.10701,6.985,-5.7618,2.38635,-0.465598,-3.58928,1.08019,-2.57259,-0.873941,16.4738,-7.17036,7.11692,8.70836,-0.791202,4.56807,-1.23276,-6.2376,5.66124,1.28112,8.39821,13.6514,1.60542,-2.47645,-0.284606,-4.14603,-1.47847,-6.85318,3.64158,-1.26706,2.29413,0.725863,0.930978,-0.751225,4.71976,-1.52641,-5.68117,-5.88077,2.28436,0.416263,16.8955,16.3324,4.95938,-2.46471,-2.5657,-5.7875,-3.50106,0.223401,4.03908,1.5887,6.82953,-4.19166,2.01522,7.25847,-3.05385,-3.78456,-3.966,-7.39207,6.83615,-5.46913,13.4246,11.488,3.04959,-6.94601,-7.05082,-13.6408,3.39414,-7.74374,5.23425,-7.7475,-6.81681,5.45641,-3.74132,-0.621423,-4.74433,-7.28999,-20.7395,-0.494258,-4.21298,-1.20676,0.638556,10.6352,-2.31624,-8.388,-11.3658,-1.71425,2.23757,9.35724,4.55669,1.97814,-1.10486,0.577343,-7.10531,-2.95954,-6.69129,-2.88607,3.79772,0.705164,-2.79689,-5.17924,-4.32387,10.0021,1.5829,-19.7321,-5.9293,-4.6562,6.04482,-5.21027,0.217781,-9.93355,-3.53476,-3.30626,1.78955,1.38409,0.462736,-0.474317,-5.34046,-0.252355,-0.776088,-0.163705,1.40374,7.86326,-11.3344,-9.64793,0.0796301,3.12304,2.40424,6.78923,-2.887,-1.68919,2.99928,-7.81581,-2.65877,12.3794,0.727397,0.470291,5.31117,0.504658,-4.72976,-1.67335,-6.76695,2.32305,-12.6558,-16.6023,-4.82889,1.26742,3.6381,-7.37399,-1.0366,5.59284,8.61367,-4.90882,0.816054,4.4204,0.06305,1.9269,3.55705,-0.140462,-3.32365,-3.47417,-9.20855,-1.24504,-3.06914,-0.284119,-2.80756,1.36899,6.2887,-8.88807,-1.99532,-5.83055,8.24041,0.175563,4.74507,1.51228,-3.78619,-0.688809,9.36725,-1.48558,-14.2689,-9.53871,-6.83137,5.31614,5.10712,-10.0122,-12.2759,-4.99765,-3.13882,-1.8304,11.0108,-0.253555,-0.635399,-1.80695,0.104414,3.06589,1.7074,3.2214,6.62885,2.61626,-7.01109,0.213399,-2.73127,2.22476,1.23016,-10.8662,3.59634,0.244922,0.834323,-7.02915,-2.79271,-2.0002,7.28594,-1.48065,0.335518,7.12734,-4.3138,7.57495,13.0781,-0.922408,-2.13162,2.25214,14.7964,-1.15807,-10.2635,4.89798,3.74146,1.59307,-3.8075,-0.615603,-2.53064,-8.9183,-0.0961448,0.597004,1.44536,0.977399,-10.3868,3.40216,-6.79941,8.6388,5.39659,18.1588,15.7527,17.4246,-0.270521,-10.7633,0.198504,-8.3064,1.12797,5.71668,0.999958,-0.310131,-1.11455,-2.74362,-3.34451,22.4163,4.04693,4.53573,6.72426,5.99734,10.5517,14.8175,12.3662,-1.73337,-0.83266,-1.81894,-2.25151,-0.294257,-1.08531,-0.130247,1.70138,5.1342,0.884484,1.72555,1.38699,0.420308,-2.78469,-5.13236,-0.965092,-0.510001,0.256996,-2.22103,-3.40528,-2.26269,-2.92665,0.185107,-1.02495,-2.51999,3.78582,2.05387,-0.202757,-0.682425,-4.07308,-1.59068,-2.02529,-2.48807,-0.328952,1.9888,-0.416428,-2.4812,-2.67854,-3.19417,-3.45406,-2.38946,1.70196,-2.30564,1.61515,-0.351215,-0.354781,-1.27552,-2.90633,-2.89068,-1.22934,-1.8291,-3.06411,-3.85883,1.85494,-0.84768,0.947758,-0.387775,-4.93924,-5.28261,-3.68016,-1.79821,-4.33716,-2.46438,-3.43512,-0.969417,-1.13581,-0.485477,-2.11662,0.16572,-1.41832,-0.0395138,-1.34664,-0.0091633,0.366473,0.74111,-3.53324,-0.961964,-1.59472,-2.53899,-3.02815,-2.85786,0.653673,0.718987,-2.91808,0.511485,1.18561,-0.270075,-0.492419,-0.210299,0.741433,1.55372,0.573573,-1.38571,1.46806,2.17491,2.32573,1.39243,2.33656,1.39081,2.00789,-0.554257,1.75282,-1.2639,-1.82217,1.75576,1.79629,-0.0901236,1.51149,0.73329,0.891864,-0.481408,-1.5121,0.808692,1.66671,0.75228,1.76931,3.77877,1.76582,3.79955,2.8644,3.91411,0.654969,-2.45832,-0.108558,2.16005,-3.1837,-0.574614,-0.873572,-1.94034,-2.99845,-5.37971,-1.37385,1.634,-2.25601,1.1404,1.08007,3.96701,3.60958,4.24796,-0.263368,1.33216,2.11118,2.74487,1.25992,3.95862,1.74354,0.675371,-1.40678,-1.72319,-4.72463,-3.1187,0.282024,-0.427308,-1.75724,-3.87028,1.37681,2.94019,4.45892,2.40722,0.872667,-0.402219,-0.855359,0.432946,-1.97696,-2.34678,-0.264436,-1.37265,-2.51592,-2.36995,-3.46582,-2.76031,-0.629887,-1.16935,-2.12684,0.883655,0.387405,5.58075,6.46366,-0.0850408,-1.50493,-0.898975,1.00343,0.523631,-0.0325135,-1.07853,-3.24319,-0.722872,2.19955,-4.2774,-4.00533,-0.189101,-3.76464,-0.528897,0.268228,3.10634,4.00727,5.16448,2.72544,1.4218,0.160925,1.53683,0.215658,-3.0479,-2.88384,-1.3714,-1.32607,-2.38454,-4.06032,-2.77392,1.65718,-2.19976,-2.10144,-2.24021,0.919786,0.259406,1.24397,1.29878,1.30065,-2.37026,-2.69393,0.614882,-2.2486,-1.2696,0.480542,-2.3204,-1.21046,-2.64215,0.715487,-3.84533,-1.57165,1.18479,-0.820896,-0.43829,-2.2382,-2.83597,-6.15362,-5.22813,-4.27993,-6.67555,-4.24055,0.260862,-0.445528,-0.429721,0.920903,3.57849,0.353903,-0.667958,-2.57955,-1.93313,1.12347,1.78934,-1.69158,1.38459,-4.82726,-2.66416,-4.46615,-6.36292,-10.4642,-9.77664,-4.88285,-0.325822,-0.793221,-1.176,0.772221,1.0465,-2.2723,-0.173703,3.43145,0.383714,-0.767266,-1.48423,-1.15999,-3.35624,-5.02658,-4.46279,-3.47666,-8.50056,-7.77623,-7.36778,-4.31716,-1.07275,-2.25612,-1.12116,-0.778332,-0.676642,0.420039,5.79519,3.7939,0.907447,-0.934021,-0.814984,-4.28551,-4.64601,-3.05263,-3.07493,1.53399,-6.88705,-5.87793,-5.66566,-3.5436,-2.52564,-1.57331,-2.07639,1.36447,-0.00947035,3.29643,3.17394,4.12425,0.973577,-2.41781,-0.46323,-2.86036,-1.656,-1.09155,0.434976,-0.295929,-1.52405,-2.00711,0.496054,-1.08915,0.463001,1.09201,1.10038,-0.0801837,0.852923,5.02165,5.33567,4.7421,-0.159666,-0.695892,1.23794,1.5106,-2.38598,1.02758,-0.841662,-0.400052,1.20552,1.22686,3.79446,2.01534,1.20316,0.215769,1.43446,0.0347844,0.807124,2.37043,1.18215,1.6692,-1.35651,0.697303,1.16329,-0.0686355,0.530941,4.0914,0.701915,2.82413,0.51266,2.89323,2.29836,0.962086,-0.694511,1.33187,0.755148,-1.40255,-6.43493,-1.65215,-1.58857,-0.380799,0.0710343,-0.340434,1.92372,2.06474,1.60567,0.684019,4.10044,4.2754,5.3704,7.62168,8.88661,3.51641,3.32022,0.257522,1.41073,1.53147,1.77361,-1.6993,-4.76761,-2.95977,-0.912218,-0.74514,-1.2969,0.36707,-1.37731,0.21774,0.846677,2.20228,8.06529,5.50462,4.03759,8.46322,-0.532539,-3.4046,-1.0976,3.59225,4.319,2.50258,1.72638,3.61272,2.15033,2.84159,0.184198,-1.83211,5.46083,2.18642,-4.04496,-2.52795,-0.800938,-3.70516,-8.02131,-9.73737,1.5997,6.70611,1.70174,0.880601,-0.708022,0.396008,1.04545,1.30142,0.962554,-0.478432,0.0969021,-0.409848,-1.49856,-2.74298,-4.05405,-0.00247462,-4.20567,-3.59793,-2.13747,-8.12684,2.17943,3.78311,2.06331,0.471871,-2.12169,-1.9835,0.162478,-0.540827,-2.84557,-0.540775,1.34075,-1.53779,-1.08834,0.800671,-2.97811,-0.641108,-1.97757,-3.27596,-8.59644,-0.0855137,0.436484,1.9279,1.99528,0.253218,-1.61954,-0.875209,3.66448,3.17101,-0.608102,-0.254188,-4.2535,-6.07044,0.132073,2.43433,5.20285,3.60732,4.10211,-4.19737,1.64129,4.66673,2.17922,6.47193,3.05909,-2.1358,-1.91986,-0.913984,1.08917,1.53452,2.24004,4.29033,0.981864,1.68462,4.17336,0.693608,1.41614,4.33037,-0.790308,-0.372543,6.506,11.4028,2.43953,5.4311,0.573986,-2.33937,-5.80338,-3.2707,-0.223681,-1.76334,-2.61015,0.132475,-3.52775,2.16966,-1.58205,-1.02092,0.602074,1.60289,-2.53183,3.29524,1.77668,1.42049,-4.54119,-1.92918,-3.8465,-6.84603,-1.37285,1.19155,1.71988,-3.28248,0.731003,4.70369,0.984787,-0.86498,3.05409,5.2853,2.46688,-2.98158,4.00704,4.037,1.46879,-0.0815302,-6.12167,-10.6608,-12.5417,-6.97198,-8.32753,-4.27034,-4.58897,-2.05688,2.14239,0.694068,2.94419,2.87934,0.945103,2.05267,-1.39616,-2.99144,5.38903,0.79469,2.94285,-1.52509,-4.66489,-10.9339,-8.17264,-8.04458,-11.6437,-8.05463,-3.30354,-8.28489,-2.20475,-2.59177,-6.72505,-1.13209,-4.30741,-1.03699,-4.91029,-4.77793,-9.0097,-3.58909,0.474046,-1.25694,-2.39573,-5.93839,-0.146803,-4.06098,-0.910025,3.11161,2.7155,0.0261755,6.46884,2.72965,0.0577177,-2.03308,1.59046,0.972456,-2.38822,-2.78626,-1.00098,-6.30098,-4.78065,-8.64771,-0.831903,-3.28329,-4.18006,-7.68948,-7.56089,-7.58931,3.93097,6.08726,7.35643,1.15233,1.73454,-1.73409,-1.33684,-4.24719,0.102373,3.52278,0.438121,-0.679783,4.62626,-1.90902,-2.43339,-3.12882,-6.10632,-11.1193,-10.4013,-5.47443,-3.76916,-7.83615,-0.0406006,-2.89228,-3.86064,-5.65751,-6.86315,-1.19702,0.24585,3.04006,1.93892,0.445449,2.42206,-4.19252,1.61512,-0.879024,-4.52333,-5.57166,-5.05336,2.5287,0.540935,-6.44732,-9.6079,-1.23001,-6.08731,-1.50304,0.917326,2.1941,-1.62203,-1.88615,1.28861,4.21697,3.17157,2.11056,-0.0416921,-1.16579,-0.52931,-3.68307,-2.93286,0.972384,-4.73915,-4.69002,-4.99392,-0.184963,-0.068108,0.380799,2.13287,-1.20203,-0.506308,-3.5589,-0.24431,6.08737,5.75617,3.84699,2.2251,-2.59109,-2.38236,-1.42746,-5.50573,-5.92422,-6.50285,0.281776,-1.54163,-6.78861,-4.07824,-1.29291,-0.975197,-2.73719,6.87404,-0.470371,3.85332,2.82114,1.41698,4.69426,3.62028,-0.480386,0.675114,-0.376062,4.70258,3.85072,0.308104,4.73547,-0.522919,-8.86286,-2.11254,-0.667475,-0.348989,0.530262,6.42371,0.968436,1.63743,3.20715,1.25233,-6.9176,3.33155,-1.37202,-2.38758,5.29865,6.6104,-1.21136,1.44127,2.502,-4.24341,-1.14597,0.00615075,-1.09941,0.539292,5.5985,3.25306,0.0353929,2.60568,3.65245,0.534035,0.873793,1.55746,3.39142,-3.19306,0.744841,1.2436,2.91588,-1.35229,3.0568,-1.26184,3.07977,0.796904,-2.06446,-1.18168,-0.393597,1.65563,-1.46209,0.863188,-2.29952,1.8036,-2.90521,8.67689,-1.17469,-0.269925,-0.697921,0.362165,-3.76768,0.355006,4.38645,-0.287705,3.48052,0.125686,-1.90796,1.61112,-1.19574,-1.12294,2.47994,-11.4642,-2.22485,-5.93713,-4.1557,1.51169,2.77259,5.25427,-0.817845,-3.03397,-0.424216,0.912143,2.33266,-0.073282,-0.320926,1.76444,1.92945,-3.36337,-3.71215,1.01084,-4.81897,-6.59797,-3.85875,-2.84274,-5.40918,-0.745828,0.144203,-0.21573,0.585628,0.581905,-0.307176,-1.2317,1.09751,0.0958371,-0.548113,-1.38298,-0.590317,-0.997066,-0.611994,0.278682,0.433506,0.299128,-1.31393,-0.876464,-0.755527,-1.44961,-1.38961,-0.728191,-1.0839,-1.08014,-3.12657,-1.61707,-1.73443,-0.188824,-1.65599,-0.715812,-1.63961,-0.459054,-1.69853,-2.78628,-2.56642,-0.535521,-0.947859,-1.78963,-2.34024,-0.970887,-1.44029,-0.866567,-2.76718,-2.33904,-3.12164,-1.70022,-0.806348,-0.716653,0.37502,-1.28127,-0.427669,-2.55187,-2.42659,-1.5741,-0.44996,-0.436821,-0.881493,-1.84626,-1.1386,-0.81154,-0.87154,-1.63473,-1.60684,-3.02055,-0.896528,-0.436873,-0.392361,0.467936,-1.2205,-0.566467,-0.939569,-1.33199,-0.813522,1.62894,0.063691,-0.392807,-1.82608,-1.12329,-0.149376,-0.893658,-1.32923,-1.42397,-1.42261,-2.90747,-0.60761,-1.59199,-2.18506,-0.145758,0.677463,-2.23843,-0.80948,0.0682924,1.9734,0.765832,0.289323,-0.164966,-0.749804,-0.920068,0.14904,-0.760211,-1.19746,-1.19988,-2.07233,-1.72468,-1.12945,-2.37441,1.25673,1.42228,-1.19445,-0.625228,-0.134408,0.392242,2.45547,1.94902,1.79459,0.167384,-0.379294,-0.505123,-0.883982,-1.68888,-1.33863,-2.07616,-2.53188,-2.2724,1.63437,2.1018,1.53271,-0.0302138,0.145205,1.41583,1.0845,1.07364,2.13548,2.77143,1.81349,0.805588,-0.132614,-0.981605,-0.512715,-1.1034,-0.669313,-0.159135,0.037146,0.190862,2.87786,1.20449,0.137561,1.21244,1.69339,1.98208,-0.0165691,1.43579,2.58793,2.29358,1.62948,0.0977394,-1.66514,-0.92552,-0.487956,-0.580445,0.725215,-0.943207,-0.399538,0.557705,-0.292445,-0.147045,-1.30198,-0.931492,-1.89385,-0.981977,-1.67803,-1.22373,0.984228,0.545958,1.23694,-0.307132,-1.72018,-1.63956,0.0605388,0.894572,-0.767893,-0.513462,1.2171,-0.771252,0.301284,-0.120221,-0.957159,-2.15961,-2.19773,-2.32141,-0.185527,-1.30031,-0.176316,-0.566582,-0.329391,0.910728,-1.03552,-1.15878,-0.606637,1.81069,-0.939884,0.359992,1.35283,2.86187,3.79415,2.69859,2.35285,-0.0534673,0.0530964,0.0989673,1.12773,-0.942509,1.43309,0.591111,2.18785,-0.810598,-0.145204,0.425678,2.48311,-0.119413,-0.284244,2.31361,3.36536,1.63531,0.565613,1.09173,0.237159,0.461662,0.156359,1.28849,0.718083,0.238371,2.18994,1.31594,-1.46796,-0.778698,-0.5761,-1.55908,1.89327,-1.77674,-0.175314,3.527,2.18763,2.36252,3.16982,3.28794,2.44943,0.963015,2.38921,2.02928,0.998628,0.890575,1.46135,0.24291,0.219631,1.51383,-1.28422,-0.894326,0.033748,-1.13894,2.21845,1.78407,1.52963,2.18144,1.20836,0.283175,0.439578,0.124842,1.39168,2.75233,0.622065,1.80461,1.9319,-1.09811,-0.444141,-0.891329,-1.34679,-2.93764,-1.84485,0.0687216,0.32533,0.464158,0.455118,0.955653,1.50009,0.97425,1.04967,0.183529,3.2378,3.31202,2.10594,0.926541,0.592731,-0.552196,-0.327339,-1.30184,-1.07391,-0.684771,-0.0865394,-0.48012,-2.52974,-1.99657,-1.27199,-0.572119,-0.613002,-0.091847,0.44296,1.41093,1.4236,0.615581,0.160563,-0.676572,0.012461,0.172006,-1.38442,-1.25867,-0.475264,-0.361312,1.86048,-1.5003,-2.23305,-2.32514,-2.24204,-2.14004,-1.81835,-1.93985,-1.01454,-0.763407,-0.601421,-2.84274,-0.797672,-0.827309,-0.0189413,0.296492,-2.06624,-0.982049,-1.98734,-1.46911,1.36142,-2.01305,-1.45203,-2.9883,-3.3736,-2.39154,-2.91666,-3.16231,-1.48449,-2.48298,-2.28941,-0.378547,0.620955,0.0969258,0.898953,-0.814712,-1.78303,-1.6274,-1.20724,0.769776,1.4734,-1.88008,-2.20081,-1.91325,-3.66173,-3.8223,-3.81988,-3.74508,-2.14335,-2.93187,-2.4748,-1.56673,-0.538268,-0.840913,-0.139241,-1.28383,-1.0868,-0.679405,1.0067,1.35594,1.05843,-0.601198,-1.57287,-2.50738,-3.55897,-3.1617,-3.94911,-4.01032,-2.62884,-3.11608,-2.9997,-1.177,0.187952,-1.54076,-0.0936446,2.18348,3.67806,2.56851,1.94604,1.39594,1.49836,-0.173599,2.3263,-6.23117,-0.554973,0.599238,4.84266,1.305,1.22015,2.44213,1.10353,0.911889,-3.7012,-7.8319,-6.11197,-3.76013,2.33085,4.30668,2.4304,5.10107,1.96529,-4.20431,-4.51851,-3.83472,-3.48879,5.28211,5.14997,-4.01357,1.16237,1.01414,2.40478,3.19153,-1.57493,-1.46248,-0.787402,-3.04437,2.32775,-0.355283,3.74066,8.17605,0.121559,-0.563588,-1.27328,1.8886,-1.62244,2.53182,-1.14158,1.76993,4.44568,-1.23558,0.37407,-2.71362,-4.00786,-0.380091,2.73206,3.73548,4.48929,0.425948,5.18205,-3.02427,-11.4967,-0.22819,-4.39581,-4.21403,5.6384,1.58926,3.86749,-1.61696,-2.76597,3.26954,-4.38305,-3.74101,0.780677,0.338645,0.880436,-1.82078,-6.05115,-4.43848,1.83605,-9.36813,-5.93936,-4.71687,-7.90301,-2.88797,1.54912,3.26951,0.277448,-2.19776,1.26472,1.61786,6.48829,4.704,-3.64601,-2.27768,-4.15624,-1.51806,0.8324,-5.88696,-2.7286,-6.42426,-6.81992,-4.67742,-3.64085,-1.90642,5.41397,4.33517,-2.80832,3.79579,7.49902,2.67867,-2.5332,-0.412584,-1.91441,4.15033,-4.61337,-2.58291,-3.9866,-3.01083,-3.14202,-11.1738,-7.86158,-1.22253,0.211846,5.23013,9.0017,6.31845,-2.43412,2.15138,-0.313501,1.91655,-4.23457,0.271225,0.35025,0.302479,-2.70494,-5.47021,-5.798,-5.54569,-2.26523,-5.41091,-6.92839,2.73655,-0.20154,11.2476,4.37596,4.74708,-1.07454,4.63438,-0.181051,-1.32767,0.571069,-1.46715,-0.24845,-5.04726,-6.43055,-5.35419,-7.16331,-3.30163,-0.187438,-1.43189,-4.43611,0.932341,-2.55389,4.99648,4.03865,3.28342,3.64687,6.78067,8.51044,-1.27156,-3.50972,1.08363,2.26125,-5.74034,-1.22109,-1.67195,-1.25653,5.73075,-0.273144,2.66928,-1.59527,-3.41912,7.41639,4.26804,1.05191,-0.468377,-8.76026,0.450598,-2.77615,-5.27095,-2.57272,-3.30307,-0.399992,-0.172318,-0.266943,6.15074,0.0993064,-3.87663,-1.99669,-4.18657,2.96846,-8.04545,2.55219,0.522764,-3.91343,-3.8827,-2.71101,-3.42205,-3.04341,-6.08927,-3.36343,-10.0245,3.22648,0.828191,0.0676059,0.317198,-1.22441,0.350919,-2.88355,-5.35701,1.28248,-14.5626,-9.80185,-11.8533,-8.34454,-7.94799,-3.7943,-2.00626,2.3973,-7.5105,-6.54467,-3.0434,-0.162216,-3.18975,0.905517,-0.738391,5.94089,1.84589,-1.56652,2.06242,6.15944,-5.87983,-8.18226,-10.4074,-9.61785,-1.32748,-0.515653,0.2761,-2.10293,-3.8052,-4.55446,1.94956,-4.24715,-0.39902,6.48822,0.292592,-0.788104,0.297935,-0.89277,2.44813,3.20636,-9.85726,-9.23517,-9.8183,-5.29473,0.690445,3.57493,3.30904,0.755379,-0.110311,1.30096,1.58405,-3.10076,2.99253,4.14722,2.51826,2.18474,3.74757,-1.48925,0.683562,2.33633,1.83589,-4.62972,-4.91951,-1.36996,2.18097,0.214311,-0.564994,-4.77282,-2.87553,-5.51963,-2.65488,2.55145,1.72332,4.06036,0.309427,-1.1038,4.96769,2.15421,-3.68853,1.96816,6.04461,-0.416806,-2.12529,-3.53311,-2.4498,1.40408,-0.583406,-3.42698,0.421983,-2.8443,-3.4886,-2.22189,5.36278,3.58562,-1.31329,2.35846,3.17201,0.572649,-3.6824,5.77671,2.45064,-0.299827,-2.67618,-1.35781,-5.23476,1.24715,-4.4248,-0.324854,0.203422,-2.96192,2.64679,6.73067,1.85364,2.57091,-4.03333,-5.2574,0.213091,0.655467,2.81493,-2.5208,-5.42861,6.42582,6.12728,6.17659,1.68653,0.802763,0.770584,5.1456,3.06471,1.88586,-0.649524,3.42327,-4.57823,-1.62818,-5.11708,-3.4867,1.49959,4.16692,-5.08693,2.78657,1.7746,4.37746,0.528475,4.33788,-5.07807,3.24491,-1.07478,-4.31445,-0.959772,1.52262,5.72804,-1.41886,-1.93333,2.81644,-0.413804,-2.97817,5.85354,-5.04321,3.49695,-2.37156,-4.44066,-5.82766,-3.80525,2.62646,0.886562,10.3043,-3.92337,-2.07348,-0.157794,-0.58002,-2.17835,-2.25974,2.7805,1.87081,-2.98556,-1.43983,2.05976,2.08976,-3.1452,-3.2819,-0.81549,-2.74878,-2.14556,-3.22214,-3.14604,-5.74534,-2.4711,-4.6033,-6.04178,-5.75655,-5.05447,-6.85273,-2.4013,4.61446,-1.64552,-1.82538,-1.1155,-0.888298,-5.94987,-0.93876,0.535082,-1.67003,-1.9548,-3.01315,-0.338767,-3.46517,-6.79326,-1.59574,-2.35107,-1.83157,-1.09162,-1.1528,-0.160953,-3.22704,1.95551,-0.148017,0.32245,-3.66089,-5.68729,2.53184,-0.0933022,0.319929,1.35064,-1.1161,-7.22557,-3.19315,-1.5755,-0.998334,-6.0605,-2.76887,0.982005,-0.0168,-6.66152,-2.39357,-4.06291,-5.08412,1.04042,2.00261,-1.36511,2.18256,1.18707,1.84582,-1.39272,-3.59948,-3.1082,-3.57413,-7.75827,-5.10014,-1.46053,-3.06295,-3.50438,2.17128,-1.78925,0.266772,-1.01948,-7.38601,-0.832905,-4.07947,5.07179,0.831984,1.64199,1.50728,-1.80809,0.235037,-0.988975,-4.17772,-7.21493,1.39094,1.75485,-1.82394,-0.906327,3.73833,3.3124,4.11995,-4.28674,-1.0686,-5.39854,-2.33515,-5.78187,0.97491,4.16762,1.76482,-0.733131,0.299588,-0.332219,1.39567,-1.10618,-0.580709,0.938362,-0.904881,2.30718,5.01632,-2.46273,-4.25841,-4.26263,-7.82991,1.90643,-6.48831,-8.06797,-1.60612,6.05058,2.58868,-0.199726,1.44554,4.33913,1.1823,-0.019831,2.18726,0.983779,0.631207,-0.981587,-0.0957347,-2.45445,-1.72054,-3.02234,-7.22887,-9.66362,-5.40364,-10.4658,-12.535,4.97604,4.74198,1.47424,2.16087,6.32939,-2.3189,1.8299,2.94105,-2.87358,0.479819,4.01553,0.0922331,-3.39009,-2.06557,-1.58856,-7.93557,-8.08543,-9.21804,-9.56714,-12.0847,8.16578,3.04852,4.18662,-0.293645,0.251603,-4.59245,1.2334,-2.59234,-2.13391,-5.3142,-0.886729,4.64437,-0.419906,-0.579832,-4.73585,-3.913,-2.20667,-2.60647,-3.51471,-9.90831,10.6342,7.96439,5.39352,4.32935,5.76902,-2.94111,2.11114,-1.13822,1.96222,-0.16845,-2.2227,-2.70812,-1.64973,3.64077,2.19429,1.41891,1.0821,4.57828,-1.27112,-3.98853,8.02885,3.36766,0.514631,4.80896,2.87069,4.21597,4.18972,-5.1588,-0.512383,-5.13362,0.163052,-5.92402,-2.5859,-2.80971,3.64858,-0.0943365,2.86699,-3.91902,5.69963,-1.23973,4.11947,-0.154907,4.19879,-1.45889,1.05233,1.0738,2.3556,1.20075,-0.34482,-3.1997,-0.177902,-1.51669,-3.27659,-2.87481,-1.16509,-0.179837,0.860617,-4.11019,1.58071,4.88452,2.91468,5.74853,2.07771,1.82745,1.78173,1.75216,2.64798,-0.200155,-3.27816,-6.27876,-5.28458,-2.89738,-0.256129,1.22895,3.25548,-0.766061,-0.457756,-0.257987,-0.849602,-0.537582,-0.469448,2.44895,0.0606424,-0.0527481,1.40578,0.574376,1.73081,-2.06534,-2.58648,-4.85308,-1.68902,-0.50446,-5.25334,0.324591,6.76698,5.43753,-1.69609,0.0605951,1.07795,1.82087,2.1625,0.490641,2.25544,-0.340382,2.05994,-1.47453,1.81259,2.20831,0.444429,-6.42646,-1.18872,-2.37678,-0.668997,-2.67894,3.22399,0.107055,-1.36544,0.694415,0.710911,-2.1881,-2.39429,7.03234,-3.13414,-2.80972,1.64239,0.254709,-0.603669,4.61295,-2.14643,-2.5231,1.76914,1.80575,-1.92083,-1.95623,0.0520217,0.99729,2.55454,1.56147,-2.58364,4.9118,4.41283,-2.80034,2.98747,-1.89003,2.08263,2.60937,2.86279,4.98178,2.22388,-4.24235,-1.34625,-1.52734,-0.948232,2.35181,-0.502372,-1.07173,2.21743,-2.48099,5.22548,2.2776,-0.125414,1.9309,-0.764917,4.20895,3.835,1.5085,4.63664,2.50079,1.58443,2.23689,2.51626,5.21292,2.20307,1.31732,2.71629,0.455376,-1.07198,0.611934,4.27405,0.921856,-1.64666,-3.85469,2.0518,-3.14292,3.75962,-0.905683,-1.34758,3.12497,1.06146,0.00792305,2.07592,3.3816,1.05023,-0.580554,2.56341,-2.6058,4.40195,2.79928,0.951856,-1.64475,-2.11349,1.36668,-0.342243,-3.13089,3.99403,-5.69736,0.268352,-0.0934378,0.302741,1.29946,-2.28058,-2.10573,-1.79022,0.285697,2.17044,-1.09064,-1.16751,-1.62886,-1.29438,0.09,5.64173,4.10955,3.42274,4.02277,4.11603,3.78617,3.35617,1.88162,-1.3643,2.21595,-0.0346626,1.01561,0.878482,0.282725,-0.432259,0.10646,1.55115,1.75107,1.73419,-0.211101,3.25266,2.81754,2.96127,3.35569,2.05991,2.90264,0.9978,1.52374,1.88236,3.25972,-0.289731,0.793814,1.55701,1.89629,0.317314,-0.246042,1.67101,0.964474,-0.462584,0.312836,-1.35261,0.631398,0.457412,2.28603,3.34617,1.83426,2.14193,1.61011,1.21289,1.57051,2.3005,-0.453176,-1.05363,-1.74404,0.471718,-1.73934,0.956968,-0.984446,4.22991,3.27785,0.481706,0.448895,0.825345,1.2525,-0.475549,1.12378,-1.00578,1.0005,0.139205,1.00675,0.0584556,-2.34883,0.619233,0.954373,1.51221,0.343242,1.90335,1.02107,-0.266332,-2.06312,1.28349,1.67502,1.48039,1.02668,-1.07049,-0.97086,0.719993,-0.206435,-0.120254,-0.00381614,-0.415339,-1.76333,-2.01132,1.19374,-1.24018,0.13042,-2.35211,0.728283,-0.662295,-4.67201,-0.0772504,0.501816,-0.0882981,-1.41419,-1.76474,0.789264,0.610503,-0.473363,-0.233776,-2.94089,-1.38191,0.156124,-0.488796,-1.27867,0.858506,1.14825,-3.10455,0.146604,-3.07383,-1.64601,-1.39843,-0.70649,-2.63646,-2.82601,-2.68602,-0.179737,-1.8348,-2.87057,-1.93132,-1.30269,-1.93871,0.375902,-2.91985,0.00883853,-0.42391,0.914959,-2.0525,-0.977716,-1.82577,-2.03603,-0.974961,-1.31567,-1.66157,-2.04214,-1.23554,-1.77801,-0.858078,-2.02969,-3.12291,-2.41123,1.32233,-0.90632,0.226124,1.01225,0.504547,-0.123762,1.7418,0.749029,-1.51622,-0.108796,-2.08683,-1.7344,-1.7744,-2.8712,-2.16597,-1.61049,-1.15475,-3.06873,-3.26277,-0.230378,0.284649,-0.417751,-1.38534,-0.678988,2.5092,0.704031,1.73747,-3.02312,-1.15689,-1.41567,-0.359926,-1.74695,-3.13234,-2.15459,-1.13146,-1.89369,-0.657878,-3.03466,-3.33714,-1.44025,0.36415,-0.131377,-3.13891,0.455792,-0.200068,-0.183193,0.279585,-0.907092,-1.14689,-0.997731,-0.379926,-0.329926,-2.98712,-2.22359,-0.714517,-1.12508,-4.44052,-1.60844,2.40674,1.34706,0.313905,-1.72229,0.414594,-0.832391,-0.269197,-0.223539,1.68599,-1.13696,-1.75776,-1.38982,-0.309926,-1.48009,0.352092,-1.02252,-0.999959,-1.38984,-0.46629,0.699375,0.266386,0.507089,-2.81539,-1.17202,-2.02017,-0.728208,0.719529,-0.673997,-1.85705,-2.16775,-1.34982,-0.987731,-0.339926,-0.359926,-0.350794,-0.296124,-0.27608,-1.18177,1.14894,3.21607,0.302162,-0.616955,0.475382,0.543132,-1.46276,0.380185,1.53889,0.71886,-2.79785,-1.75572,-1.43773,-1.04773,-0.319926,-1.10281,-0.726386,-1.76011,-0.433747,1.29097,2.09535,0.992052,0.251098,-1.63517,1.57769,-0.950943,-0.493886,1.44101,-1.15668,-2.48949,-2.06992,-1.73572,-1.69572,-0.997731,-0.705824,-1.79672,-1.06948,-1.38406,-1.46775,4.42473,1.99628,-0.112902,0.423806,2.9175,1.37922,-0.0828751,-0.417193,1.53263,-1.98897,-1.69437,-1.99992,-2.52398,-2.50398,-2.53398,-1.47564,-0.737395,-1.92446,-2.61169,2.13907,-1.76718,4.5994,1.07093,2.18676,0.569717,-0.480256,-1.29787,0.812777,-1.34168,0.464031,-2.91052,-2.85818,-2.89892,-2.43261,-1.61434,-1.44463,-2.87703,-0.366923,-0.39735,1.10621,0.0434555,2.27972,-1.58645,1.66013,1.11844,-0.246888,-0.165035,-0.271231,1.05293,-4.00737,-2.02576,-4.78135,-2.78681,-1.67434,-1.62434,-1.01303,-1.74265,0.236412,-0.175468,0.440099,1.43072,2.00594,0.847253,1.1437,-0.903191,-2.49433,-2.6211,-2.02546,1.10247,-2.26298,-1.85703,-1.52382,-3.48957,-2.717,-2.09038,-0.896064,-3.47106,-4.45715,-1.56677,-0.921732,-2.4483,-1.81697,-3.78286,-1.64049,0.13554,-0.474651,1.64605,-0.353122,0.364917,-1.8368,-2.54416,-2.94408,-4.62774,-3.54358,-2.87704,0.341761,-3.3495,-3.14381,-0.239862,-1.13944,-4.62802,-0.622127,-2.60233,-2.27987,-2.10483,-0.435861,-1.08186,-2.31768,-3.81391,-4.07674,-3.73181,-3.85437,-3.02611,-2.97206,-1.96804,-1.56461,-1.68161,-5.051,1.53827,0.780147,1.83965,-4.91416,3.61377,0.558369,-1.33155,1.55813,-2.91727,3.30192,-2.05213,-7.33448,-0.338222,1.73659,-4.61895,-5.33865,-4.18336,-0.134752,-5.23495,-1.07755,-1.98893,-8.68758,-0.0784931,0.624856,3.01998,-2.87166,-4.70454,6.84385,-1.23244,-1.25293,-5.19397,-2.73393,0.89486,-2.19542,-6.43167,-6.10594,-0.607416,-7.4676,-6.98221,-5.84349,-4.72798,2.91728,6.18128,-0.345338,-3.25571,0.86002,-2.69094,2.16411,-2.2497,-0.00964756,-8.2725,-2.90953,-3.17009,-5.44099,2.31928,-3.46673,-4.93758,-3.75232,-8.39544,3.81835,-1.34498,6.95196,6.25039,-2.09941,-0.753005,-4.24975,-8.34699,2.98583,-4.09951,-0.768056,-9.07207,-6.99409,0.839805,-4.98043,-2.4067,3.14946,5.20839,-5.64231,-1.05468,4.93518,-2.05204,-2.27116,-0.458929,-8.77813,1.27267,-0.0961705,-4.37069,3.71278,-6.17072,-1.32571,-1.74952,1.81392,1.18038,-0.00834184,-0.372216,1.73434,1.78085,1.46709,-8.77781,6.37949,-4.69353,-2.15109,-4.14983,1.06014,5.62148,-1.27484,-1.58614,0.943119,1.29364,-4.15305,2.7603,1.54396,0.946625,-2.37488,2.50956,-3.11822,6.89695,5.54762,5.71815,11.3341,0.944949,3.60578,3.85033,7.14468,-2.32239,-3.93636,-4.48331,8.01732,2.04809,1.71083,10.8434,7.97123,8.37761,0.387677,5.53031,-2.11826,0.794612,5.54718,5.20555,7.18899,2.7424,2.68698,2.30612,7.14555,-2.56549,0.916101,5.86307,-0.175518,-2.51845,5.11351,3.56989,-0.766812,6.11548,-2.23215,1.11426,-1.38266,-4.68911,-6.50839,-6.82913,5.26933,-1.77412,9.65227,4.95454,8.53773,6.55379,0.241067,2.98143,3.87331,-4.23748,-4.95058,0.573763,7.36027,0.215273,-2.20158,-1.13498,-11.1584,-11.6415,-19.7428,-9.24909,-10.9255,-14.3601,-10.7714,1.8817,1.86958,5.79051,-5.96735,1.85305,6.422,-0.146813,0.843478,-5.40178,0.988121,-6.79653,-2.54239,-8.48681,-7.13668,-19.7753,-8.58868,-13.9493,3.82137,1.15274,-2.28563,9.27041,8.37171,8.30086,2.45065,4.02258,-8.00359,9.83205,3.74647,-1.33297,1.41059,-1.46002,-0.858164,1.95117,-7.01389,-10.8011,-0.0442662,9.20872,-1.95612,-3.34123,6.26057,6.01969,11.6739,3.98925,-0.147759,-1.48653,-1.96048,-3.81079,-0.707864,3.75253,-3.34155,-9.72016,1.27818,-8.28532,-2.98561,-0.396694,11.8471,2.56602,-2.69545,4.10195,4.04093,3.92415,2.54433,-3.21044,-4.46089,-0.599578,1.7311,3.89001,-1.04883,-1.77017,-2.93959,-5.17587,-7.28244,-6.25245,-2.82172,4.18058,13.8818,-0.500771,11.7584,-0.356157,1.90121,-1.56397,1.68184,-5.84901,1.0101,-1.26637,-0.473878,3.88779,-1.88396,-4.42538,-8.47361,-6.87553,1.05485,2.03217,-3.74288,-0.456528,4.24671,2.32365,2.50216,5.38631,1.03942,-1.76585,0.941789,-7.66831,2.41473,-13.3609,-11.2808,-4.21618,4.07613,-2.63955,-0.544694,3.37472,-1.06632,1.41648,0.103845,-2.70826,12.6088,-6.56702,5.42723,8.14087,-4.22939,-2.27463,4.45217,-3.12381,-9.81574,-13.1487,-6.64942,-6.07287,5.20385,0.20171,7.41215,1.70825,3.62547,5.03501,2.41585,0.0490346,5.96599,5.02105,-2.1174,5.60623,-2.60587,-0.302612,-0.548993,-2.9286,-0.00128121,-4.81932,-2.40779,-9.63682,-0.316269,-1.56093,-2.35348,3.27614,2.91063,1.54155,-5.87324,4.02546,-2.94241,-3.15596,-2.65731,0.369597,-12.3467,-11.9645,-6.7029,-0.86257,7.68098,4.32305,-0.479317,0.378518,0.311016,-4.01999,-1.95324,-8.73303,-1.9774,2.21734,4.89179,3.86129,-1.50127,2.60144,-2.55975,-1.84511,0.508426,-2.06387,1.79648,-1.13835,6.87361,1.31332,1.7725,-3.00062,-5.69745,-0.321769,-9.9871,-6.0671,-0.299649,-0.614438,1.12082,3.05135,-12.0416,-12.6789,-1.32954,-2.52884,-4.4175,-0.888174,1.70308,9.18539,4.5943,2.42197,-0.496971,-3.86655,-5.6835,-6.64154,-3.17404,-4.4038,-4.32808,-1.23261,-4.43442,-8.3549,-1.75163,-1.5889,0.703165,0.452911,-1.14315,0.52027,3.34542,0.975283,-0.125345,-0.223037,-0.541836,-3.25377,-3.89241,-1.93121,0.0340356,2.1286,0.986002,-2.12567,-6.6267,-4.77031,-3.43109,-1.84189,-0.429816,2.93976,-1.16131,-1.86505,-1.62332,-2.43387,-2.04503,-1.86471,2.51971,2.81796,2.41604,1.82315,2.91431,-5.07198,-6.70428,-2.07843,-4.16106,-8.30193,-2.68578,4.89076,1.65506,0.24528,3.11619,-5.73657,-1.05628,0.4948,0.356247,1.41388,5.89187,0.481908,-2.685,-3.73403,-6.19317,-2.18321,0.956112,-4.87978,-0.659508,-2.69105,2.68387,3.20272,-1.4103,-2.77526,-0.29132,0.385379,-2.86019,-0.422556,0.626492,-2.7757,-3.86366,-0.170477,-0.223523,-0.250811,-0.780825,-4.4726,0.238073,-2.81475,-0.967375,1.84399,3.6477,3.46446,1.0626,-1.2996,3.96057,-0.238239,-2.36149,-2.52811,-0.0213935,-3.06214,-4.55898,3.29509,-1.82073,-2.56535,-0.270913,-1.41733,1.4443,0.0746507,4.94146,4.07477,3.6978,0.0650422,-2.23131,0.109867,0.431446,-3.34784,0.372499,-1.53698,0.955545,-2.10089,0.988754,4.51589,1.51655,-0.349426,-0.191472,0.811337,0.207694,1.63621,1.86557,3.25037,9.36107,0.173225,-1.80381,4.31949,1.08953,-2.48409,-2.21357,-2.23695,-2.0773,-3.57514,-3.61231,-2.07711,-2.21909,-1.00847,-1.49806,-3.18605,-1.27909,0.0573805,4.2055,8.3084,7.44634,3.19333,3.30814,1.31547,1.24623,-0.231324,3.50343,-6.19418,4.34349,-1.63189,-1.95638,2.36359,0.752622,0.0641207,-3.13644,0.626342,-0.853656,2.06293,5.8386,3.35476,7.2828,7.52687,4.15434,0.560334,-0.610233,0.720391,2.43953,0.0115361,0.809839,-0.960235,-2.30213,2.00278,1.44956,-1.46183,-2.59392,-3.99523,2.42608,5.26606,4.90466,4.04848,-2.94227,11.9426,0.214229,-3.80545,5.59564,-0.346774,0.334015,-3.30631,-0.975515,-1.0555,-3.22048,-6.11406,-1.03409,-4.57823,-6.16118,-2.61688,-2.483,-1.78845,0.95812,6.6615,-11.19,-0.160884,6.81944,-2.09047,1.01482,4.51227,3.66353,8.30433,7.82947,1.83536,1.54265,-0.542166,3.47797,-0.328031,-0.829724,-1.83994,-0.579267,-2.29135,3.30689,1.53423,-17.0922,-12.9158,-5.59172,-4.74843,-1.88633,-5.08393,-3.84927,4.13629,1.82209,3.05578,-0.0781357,0.879325,-0.983146,-1.36029,-1.54274,2.05468,0.234478,0.98382,2.45642,1.70705,-17.818,-7.43947,-5.11048,-10.1944,0.729722,0.328415,-1.47183,0.552212,3.80795,-1.02105,0.592218,-0.294837,4.60035,3.73564,5.8809,5.22672,0.427747,2.21735,2.59559,4.73213,-16.5796,-10.0887,1.13491,-4.32144,4.47203,2.52794,4.56355,4.16454,5.00804,2.70989,-2.31896,0.24421,3.76893,6.53876,5.82191,6.93126,1.82895,0.9285,1.1479,-1.08562,-7.92327,-1.21365,-1.85983,-9.35665,-4.49647,-2.03918,-1.49703,0.180983,-3.76263,-4.90111,-5.3455,4.1404,-2.25639,0.302398,-1.81584,-0.149921,0.200908,0.886573,0.758464,0.83985,-0.175498,0.532069,-1.59316,-5.19131,0.881783,-3.68851,-2.45457,-0.87221,1.54428,2.04267,2.72559,0.893896,-2.51188,0.397389,-2.26594,2.35593,1.57364,0.312677,0.126468,1.18423,6.68697,4.14727,-0.198565,-1.64828,2.13337,-3.64743,-2.74611,3.64155,8.81747,1.62079,-2.25603,-0.522751,-1.3784,-1.16077,-1.00878,-1.44826,-1.65667,1.01914,-0.91878,2.94094,-2.66497,0.68027,0.642848,-0.360504,-0.0177842,-2.7475,-0.743878,-0.0727348,-0.560224,-8.41804,-2.26457,-3.5351,-3.63918,-2.67597,-0.551898,-4.87767,-4.29149,-4.53727,1.68499,0.421998,-0.482011,-3.27497,-1.20564,5.53888,1.28196,5.01294,-1.88551,0.424151,-0.688811,0.390094,0.169485,-1.50123,-3.60583,-4.62088,-3.40114,-5.38974,-3.63573,0.954279,-1.5732,-1.0576,0.259926,-5.66584,-1.92414,-5.70993,3.78996,2.4028,-2.57998,-2.52687,2.16793,1.27683,-2.063,-6.3799,-7.50466,-6.03553,-0.751526,0.135577,-12.0196,-3.99216,-8.43631,-5.51813};


/**
* Класс представляющий одну цифру на картинке
*/
struct Digit
{

double S; // площадь цифры
int Xl,Xr,Yl,Yh; // границы цифры
int * digit; // массив для хранения цифры 20х20
int label; // метка цифры в исходном изображении

Digit(int l)
{
	label = l;
	Xr = Yl = 0;
	Xl = Yh = 32000;
	S = 0;
	digit = new int[IMGSIZE];
}

~Digit()
{
	delete[] digit;
}

};

/**
* Изолированные множества для разметки связанных областей
*/
class DisjointSets
{
public:

	// Создание пустого объекта изолированных множеств
	DisjointSets()
	{
		m_numElements = 0;
		m_numSets = 0;
	};

	// Деструктор
	~DisjointSets()
	{
		for(int i = 0; i < m_numElements; ++i)
			delete m_nodes[i];
		m_nodes.clear();
		m_numElements = 0;
		m_numSets = 0;
	};

	// Поиск множества(идентификатора) к которому принадлежит элемент
	int FindSet(int elementId) const
	{
		--elementId;
		assert(elementId < m_numElements);

		Node* curNode;

		// Ищем корень дерева представляющего множество к которому принадлежит элемент
		curNode = m_nodes[elementId];
		while(curNode->parent != NULL)
			curNode = curNode->parent;
		Node* root = curNode;

		// Идем к корню обновляя родителенй `elementId`. Делаем их непосредственными сыновьями
		// корня. Оптимизируем дерево для дальнейшего использования.
		curNode = m_nodes[elementId];
		while(curNode != root)
		{
			Node* next = curNode->parent;
			curNode->parent = root;
			curNode = next;
		}

		return root->index;
	}

	// Объединение двух множеств
	void Union(int setId1, int setId2)
	{
		assert(setId1 < m_numElements);
		assert(setId2 < m_numElements);

		if(setId1 == setId2)
			return; 

		Node* set1 = m_nodes[setId1];
		Node* set2 = m_nodes[setId2];

		// Чтобы результируюющее дерево было более сбалансированным меньшее дерево прививаем к большему
		if(set1->rank > set2->rank)
			set2->parent = set1;
		else if(set1->rank < set2->rank)
			set1->parent = set2;
		else 
		{
			set2->parent = set1;
			++set1->rank; // обновляем высоту
		}

		// Уменьшаем количество множеств
		--m_numSets;
	}
	
	// Добавляем новые элементы. Id новых элементов задаются последовательно начиная с не использованных до этого.
	void AddElements(int numToAdd)
	{
		assert(numToAdd >= 0);

		m_nodes.insert(m_nodes.end(), numToAdd, (Node*)NULL);
		for(int i = m_numElements; i < m_numElements + numToAdd; ++i)
		{
			m_nodes[i] = new Node();
			m_nodes[i]->parent = NULL;
			m_nodes[i]->index = i;
			m_nodes[i]->rank = 0;
		}

		m_numElements += numToAdd;
		m_numSets += numToAdd;
	}


private:

	// Структура представляющяя вершину в дереве
	struct Node
	{
		int rank; // максимальная высота
		int index; 
		Node* parent; 
	};

	int m_numElements; // Количество элементов на данный момент
	int m_numSets; // Общее количество множеств на данный момент
	std::vector<Node*> m_nodes; // список всех вершин
};


/**
*	Нейрон с сигмоидальной функцией
*/
class Neuron
{
public:
	/**
	*	Конструктор
	*/
	Neuron(int c)
	{
		count = c;
		w = new double[count];
	}

	~Neuron()
	{
		delete[] w;
	}

	/**
	*	Передаточная функция
	*/
	double Tranfer(int *x)
	{
		return activator(sum(x));
	}

	/**
	*	Инициализация начальных весов синапсов значениями
	*/
	void GetWeights(double *weight)
	{

		for (int i = 0; i < count; i++)
		{
			w[i] = weight[i];
		}
	}

private:
	double* w; // веса синапсов
	int count; // количество синапсов

	/**
	*	Сумматор
	*/
	double sum(int *x)
	{
		double nec = 0;
		for(int i = 0; i < count; i++)
		{
			nec += x[i]*w[i];
		}
		return nec;
	}

	/**
	*	Сигмоидальная функция активации
	*/
	double activator(double nec)
	{
		return 1/(1 + exp(-nec));
	}
};

 /**
   * Однослойный n-нейронный перцептрон
 */
class Perceptron
{
public:
	/**
	*	Конструктор
	*/
	Perceptron(int n, int m)
	{
		this->n = n;
		this->m = m;
		neurons.insert(neurons.end(), n, (Neuron*)NULL);
		for (int j = 0; j <n; j++)
		{
			neurons[j] = new Neuron(m);
		}
	}

	/**
	*	Деструктор
	*/
	~Perceptron()
	{
		for(int i = 0; i < n; ++i)
			delete neurons[i];
		neurons.clear();
	}


	/**
	* Распознавание образа
	* x - входной вектор
	* y - выходной вектор
	*/
	void Recognize(int *x, double *y)
	{
		for( int j = 0; j < n; j++)
		{
			y[j] = neurons[j]->Tranfer(x);
		}
	}

	/**
	* Инициализация начальных весов значениями
	*/
	void GetWeights(double *weight)
	{
		for(int j = 0; j < n; j++)
		{
			neurons[j]->GetWeights(&weight[j*m]);
		}
	}

private:
	std::vector<Neuron*> neurons;
	int n,m;
};

/**
 *	Класс реализует метод последовательно сканирования 
 *	для разметки связанных областей
 */
class SeqScan
{
public:
	/**
	*	Конструктор класса
	*/
	SeqScan(int row, int column)
	{
		row_count = row;
		column_count = column;
		labeledMap = new int[row_count*column_count];
		memset(labeledMap, 0, 4*(row_count*column_count));
		label = 0;
	}

	/**
	*  Деструктор
	*/
	~SeqScan()
	{
		delete[] labeledMap;
	}

	/**
	*  Функция пост обработки
	*/
	void PostProcessing()
	{
		for (int i = 1; i < row_count; i++)
		{
			for (int j = 1; j < column_count; j++)
			{
				if (labeledMap[i*column_count + j] != 0)
					labeledMap[i*column_count + j] = conflict.FindSet(labeledMap[i*column_count + j]) + 1;
			}
		}
	}
	
	/**
	*  Выделение цифр
	*/
	void SeparateDigits()
	{
		int rows = 20, columns = 20;
		map<int, Digit*> reg;
		vector<int> toDelete;
		int count = 0;
		for (int j = 1; j < column_count; j++)
		{
			for (int i = 1; i < row_count; i++)
			{
				if (labeledMap[i*column_count + j] != 0)
				{
					if (reg.find(labeledMap[i*column_count + j]) == reg.end())
					{
						reg[labeledMap[i*column_count + j]] = new Digit(labeledMap[i*column_count + j]);
						Lcount.push_back(reg[labeledMap[i*column_count + j]]);
						count++;
					}
					if (reg[labeledMap[i*column_count + j]]->Xr < j)
						reg[labeledMap[i*column_count + j]]->Xr = j;
					if (reg[labeledMap[i*column_count + j]]->Xl > j)
						reg[labeledMap[i*column_count + j]]->Xl = j;
					if (reg[labeledMap[i*column_count + j]]->Yl < i)
						reg[labeledMap[i*column_count + j]]->Yl = i;
					if (reg[labeledMap[i*column_count + j]]->Yh > i)
						reg[labeledMap[i*column_count + j]]->Yh = i;
					reg[labeledMap[i*column_count + j]]->S++;
				}
			}
		} 
		for (int i = 0; i < count; i++)
		{
			//Убираем из рассмотрения области в которых менее 20 клеток
			if (Lcount[i]->S < 20)
				toDelete.push_back(i);
			else
			{
				int c = 0;
				double height = (Lcount[i]->Yl - Lcount[i]->Yh) / double(rows - 1);
				double width = (Lcount[i]->Xr  - Lcount[i]->Xl) / double(columns - 1);

				for(int k = 0; k < rows; k++)
				{
					for(int j = 0; j < columns; j++)
					{
						if (labeledMap[(int)floor(k*height + 0.5)* column_count  + (int)floor(j*width + 0.5) +
								Lcount[i]->Yh*column_count + Lcount[i]->Xl] == Lcount[i]->label)
						{
							Lcount[i]->digit[k*columns + j] = 1;
							c++;
						}
						else
							Lcount[i]->digit[k*columns + j] = 0;

					}
				}
				if (c < 2*(rows+columns))
					toDelete.push_back(i);
			}
		}
		for (int i = toDelete.size() - 1; i >= 0; i--)
		{
			Lcount.erase(Lcount.begin() + toDelete[i]);
		}
	}

	/**
	* Метод последовательного сканирования
	*/
	void Run(char *data)
	{
		for (int i = 1; i < row_count; i++)
		{
			for (int j = 1; j < column_count; j++)
			{
				if (data[i*column_count + j] == '@' || data[i*column_count + j] == '#' || 
					(data[i*column_count + j] == '%' && 
					(labeledMap[i*column_count + j - 1] == 0 && data[i*column_count + j + 1] == '.')))
				{	
					if (labeledMap[(i - 1)*column_count + j-1] != 0)
					{
						labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j - 1];
					}
					else
					{
						if ((labeledMap[(i - 1)*column_count + j] == 0) && (labeledMap[i*column_count + j - 1] == 0))
						{
							label++;
							labeledMap[i*column_count + j] = label;
							conflict.AddElements(1);
						}
						else
						{
							if ((labeledMap[(i - 1)*column_count + j] != 0) ^ (labeledMap[i*column_count + j - 1] != 0))
							{
								if (labeledMap[(i - 1)*column_count + j] != 0)
									labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j];
								else
									labeledMap[i*column_count + j] = labeledMap[i*column_count + j - 1];
							}
							else
							{
								if ((labeledMap[(i - 1)*column_count + j] != 0) && (labeledMap[i*column_count + j - 1] != 0))
								{
									labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j];
									if (labeledMap[(i - 1)*column_count + j] != labeledMap[i*column_count + j - 1])
									{
										conflict.Union(conflict.FindSet(labeledMap[i*column_count + j - 1]), conflict.FindSet(labeledMap[(i - 1)*column_count + j]));								
									}
								}
							}
						}
					}
					if ((labeledMap[(i - 1)*column_count + j+1] != 0) && 
						(labeledMap[(i - 1)*column_count + j+1] != labeledMap[i*column_count + j]) )
					{
						conflict.Union(conflict.FindSet(labeledMap[i*column_count + j]), conflict.FindSet(labeledMap[(i - 1)*column_count + j + 1 ]));								
					}
				}
			}
		}
		PostProcessing();
	}



	/**
	*	Получение массива цифр с метками
	*/
	const vector<Digit*>& GetDigits()
	{
		return Lcount;
	}
	
private:
	/// Цифры с метками
	vector<Digit*> Lcount;
	/// Количество столбцов в массиве меток
	int column_count;
	/// Количество строк в массиве меток
	int	row_count;
	/// Массив для хранения меток
	int* labeledMap;
	/// максимальный номер меток
	int label;
	/// Не пересекающиеся множества для хранения конфликтов меток
	DisjointSets conflict;
};

/**
*	Основной класс представляющий Сканер
*/
class Scanner
{
public:
	/**
	*	Конструктор класса,
	*	Считывает изображение в массив.
	*/
	Scanner(int ac, char* av[])
	{
		int tmp[100000];
		int i = 0;
		string str;

		getline(cin,str);
		column_count = str.length();

		do
		{
			for (int j = 0; j < column_count; j++)
			{
				tmp[i*column_count + j] = str[j];
			}
			i++;
		}
		while (getline(cin,str) && !str.empty());

		row_count = i;
		data = new char[row_count*column_count];

		for(int i = 0; i < row_count; i++)
		{
			for(int j = 0; j < column_count; j++)
			{
				data[i*column_count + j] = tmp[i*column_count + j];
			}
		}
	}

	/**
	  *  Деструктор
	*/
	~Scanner()
	{
		delete[] data;
	}

	/**
	  *  Запускает цикл обработки изображения.
	*/
	void Run()
	{
		int n = 10; // количество цифр и соответственно нейронов
		double z[10]; // массив для хранения выдачи нейросети

		SeqScan labelScan(row_count, column_count);
		labelScan.Run(data);
		labelScan.SeparateDigits();
		
		Perceptron perceptron(n, IMGSIZE);
		perceptron.GetWeights(weights);

		for (vector<Digit*>::const_iterator it = labelScan.GetDigits().begin(); it != labelScan.GetDigits().end(); it++)
		{
			int number = 0;
			double prec = 0;
			perceptron.Recognize((*it)->digit, z);
			for (int k = 0; k < n ; k++)
			{
				if (z[k] >= prec)
				{
					prec = z[k];
					number = k;
				}
				//cout << "Number is: " << k << "  " << z[k] << endl;
			}
			cout << number;
		}
	}

private:
	/// Количество столбцов в изображении
	int column_count;
	/// Количество строк в изображении
	int	row_count;
	/// Массив для хранения изображения
	char* data;

};


int main(int argc, char* argv[])
{
	try
	{
		Scanner scanner(argc,argv);
		scanner.Run();
	}
	catch(exception& e)
	{
	cerr << "Error: " << e.what() << "\n";
	return 1;
	}
	catch(...)
	{
	cerr << "Exception of unknown type!\n";
	return 2;
	}
	return 0;
}