// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={31,24,32,-1,8,9,10,3,-5,-4,8,-7,-2,-4,-14,1,17,16,-6,-2,10,-3,-2,-7,-9,0,4,-10,-9,-9,-16,-3,9,0,3,-3,0,11,-4,-12,-7,6,16,-4,10,2,-3,-3,11,5,-4,-15,-2,0,3,-10,-1,9,5,-9,0,-15,3,-15,11,-4,1,13,26,21,3,6,-7,13,14,-3,7,14,14,22,4,-4,10,7,14,6,-4,-3,-5,3,4,2,-4,0,12,15,21,15,19,0,4,-4,-12,-14,-15,-2,-19,-33,-20,-5,8,33,37,16,-6,-20,-5,-7,-4,-14,-20,-19,-13,-12,-13,-24,-12,7,22,16,-7,-17,-6,1,3,-16,-6,0,-2,-16,-5,-14,23,4,21,13,2,-15,-10,-12,-4,-12,-5,-12,-12,-13,-1,4,4,-15,14,34,13,11,3,-2,7,0,-4,-10,-2,-6,7,-8,2,-2,9,10,11,14,5,20,-1,-5,-3,7,-1,-10,0,-5,-18,-9,16,3,6,7,13,11,5,-3,-5,5,8,0,-1,0,12,-26,-3,-2,4,14,6,16,19,12,-11,13,3,-11,-2,-1,-3,-19,9,10,3,-5,5,9,-1,-3,-12,-3,1,-19,-1,10,-2,-12,16,-2,-6,-6,-25,-14,-5,-11,-16,-10,-7,-7,-2,13,-15,-1,9,20,-16,3,-44,-7,-14,-3,-31,-12,-10,8,28,34,16,27,-11,32,22,10,-27,-1,-5,-1,-16,-11,-1,-9,-13,-20,-4,24,18,20,-1,-10,13,6,10,2,-20,5,-6,4,-1,-12,-23,21,23,-26,4,-10,1,19,28,0,-7,20,-7,-10,-1,-32,-28,10,-9,-12,17,4,7,26,14,21,11,31,0,21,4,-2,-8,10,-2,5,4,-14,6,10,16,11,7,0,-25,15,-18,-9,1,22,20,29,-3,-14,0,-19,13,3,-12,15,0,-2,-24,-7,1,17,30,13,8,-16,-22,-25,3,11,-4,-25,-25,-27,-8,-28,-18,11,14,-20,-25,-30,-11,8,-7,6,-10,7,0,3,-9,-21,-7,25,2,-8,-37,-15,12,-19,-11,13,-7,7,-8,-32,-2,1,17,3,-10,6,-4,-17,-2,3,4,-7,-7,-8,-5,15,16,22,2,-21,-2,-39,1,-10,-3,13,-9,-4,-7,-4,12,10,15,16,-33,-27,-3,-39,5,-15,13,9,-5,11,6,-5,4,31,36,22,3,-33,11,6,-15,-22,-6,-13,7,16,-2,1,1,20,2,-5,1,-8,7,-6,-8,-28,-12,-3,7,16,-6,10,-4,17,1,19,27,24,20,3,18,28,-3,-15,-16,-11,0,-29,-13,0,2,18,29,61,7,-4,11,4,19,6,13,-6,-3,-19,-11,-5,-12,1,3,-10,-3,-3,-8,1,-21,-20,1,3,-12,-4,-18,-6,-6,-6,-21,-2,19,1,11,2,-7,1,-13,-8,-17,-14,0,-3,6,-8,-8,-4,8,-7,-9,4,5,5,-9,-9,-7,-7,-5,7,5,-1,7,-3,-6,-8,-6,-9,19,11,5,-1,6,-1,2,0,8,-2,0,10,12,9,7,0,7,-3,-10,-10,11,-7,-4,0,-6,1,12,7,8,29,10,-9,7,-1,-22,2,3,-7,4,-4,9,2,27,7,6,-3,-16,-6,2,-11,-22,-23,-4,-19,0,-3,8,11,10,-11,0,5,7,2,6,0,-15,-4,-8,-8,18,5,4,7,-8,-34,4,25,17,6,1,8,3,1,-7,-2,4,-17,-6,-14,-15,-38,9,1,-6,5,13,6,4,-5,-9,3,3,-13,-19,-15,-29,-37,16,-8,-6,-11,6,8,12,1,-3,3,-9,-12,-6,-18,-4,-1,21,5,0,-1,15,31,19,2,8,-2,-13,-4,12,-4,8,15,17,3,-10,10,16,24,27,-6,-4,5,3,2,2,-13,10,21,18,22,12,13,4,-3,4,0,7,11,-2,-10,-12,4,14,34,16,41,19,-21,-20,-22,-2,-12,-4,-3,-6,-1,-4,15,39,19,106,35,79,32,-16,43,2,-10,-11,-14,12,-25,-66,-12,-31,-27,18,13,-38,-7,-16,-36,11,-2,-40,-10,-14,7,-10,1,-18,-48,13,22,19,-35,44,20,15,-1,1,2,-32,-3,1,-5,-17,-32,23,-11,25,-16,16,-19,0,-32,-33,-14,1,-15,-4,-35,-8,23,-8,-37,44,-54,47,37,37,-2,-14,33,-1,-7,19,0,60,38,1,-29,-16,-50,-25,-47,60,30,20,24,19,37,14,22,29,29,44,-34,-61,-88,21,-37,-4,16,-18,-22,-12,17,-12,21,-10,-16,52,11,-15,-29,20,-21,36,32,-18,-49,3,-1,-5,4,-37,-63,55,-10,24,-27,-28,-11,8,16,5,24,29,2,-3,-1,5,-8,9,-52,9,-49,-24,-46,10,-1,-25,5,12,-3,3,55,29,11,39,15,25,-27,-21,-23,-8,-37,27,-6,22,-24,26,16,90,-10,35,-16,-25,0,17,-30,4,-46,-10,-28,-11,13,12,-13,-5,61,63,18,-13,-7,35,14,-21,-59,5,6,31,7,-3,-18,36,12,76,29,3,6,-9,52,22,-36,-13,-14,-11,-50,27,-10,-22,2,42,2,-29,-1,-39,9,21,-9,18,6,16,-22,4,-24,6,-10,88,82,10,10,-30,-12,-14,-9,-37,5,-20,-31,-32,-16,-53,-27,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,74,3,17,39,25,-6,11,-35,-2,-44,3,-34,-12,10,53,-16,13,-30,23,14,30,24,3,-17,-17,-51,-33,-43,-40,-18,43,31,0,4,18,-20,-3,12,15,-2,-35,16,40,36,-20,-52,11,-10,-15,1,-4,16,33,12,-5,-46,11,-6,14,-10,17,-44,-18,-38,-49,-7,-38,18,31,-9,-8,13,-8,-36,-36,-7,7,-18,-48,-3,43,-6,50,16,15,32,17,-29,18,1,-4,-27,11,-16,14,6,8,13,-22,0,7,37,4,-22,1,25,25,-43,-38,-12,-18,44,-10,-13,4,47,-23,25,-6,2,-4,17,19,42,15,4,22,-1,51,8,26,50,-49,-11,6,-50,-8,-1,-17,18,-24,-26,-42,34,4,-11,-36,-36,-3,40,-49,-22,8,7,-5,-61,-9,-10,23,-19,-27,-40,-24,-46,-4,29,-30,-19,18,-35,-20,-36,20,25,-2,19,27,-57,2,20,26,-20,-28,2,21,-6,14,-16,-12,12,-42,-13,26,-8,24,21,-8,36,-6,9,31,16,15,22,-32,33,29,13,74,19,-2,-25,-12,-19,-1,18,41,5,15,5,-16,4,27,-6,51,40,-8,-3,-2,-52,-23,8,4,29,-36,46,-4,11,10,-47,43,36,-4,49,-9,-21,-29,-17,-5,13,-18,-7,16,-19,2,-5,29,12,15,-6,-8,11,-9,-20,-9,-13,-22,-1,-5,-1,-6,20,8,-15,-22,-14,-6,-10,-3,-7,-18,8,-33,-14,-12,-25,21,-22,-2,1,-15,-3,17,2,-1,-7,7,-5,-33,-20,-1,-47,-7,38,-1,-26,-8,1,4,-9,-23,-23,-5,7,-28,-41,-12,7,-32,32,35,-17,14,-3,10,12,10,9,39,-4,-21,-27,-15,7,-19,-3,31,1,-4,4,4,-23,3,-15,19,7,3,-38,-26,-23,-33,-33,42,28,3,-28,-15,-17,2,-1,5,9,9,24,4,3,-10,-28,34,32,-11,-24,-1,-19,20,20,-5,12,9,-6,3,17,29,-28,18,43,18,-12,2,-22,-7,-6,-6,9,7,-8,-3,2,14,-22,13,19,11,11,3,-16,4,-19,-26,1,16,13,5,-7,14,-24,17,50,52,3,14,28,15,-12,-9,-7,13,2,19,10,8,-11,1,2,13,2,-6,23,7,-11,1,-11,6,-6,21,-23,1,-12,2,3,11,-3,-14,13,7,-7,-4,-19,-20,17,22,-25,31,26,-3,-20,26,35,36,19,22,-6,12,6,-5,-8,3,7,-10,-8,-16,-3,13,3,14,4,13,-15,13,-10,-14,-12,-31,-3,46,29,33,6,14,-6,-17,-10,5,7,-27,-37,-24,-16,8,11,0,-2,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,51,29,15,26,18,0,20,-20,-23,-6,8,-8,-14,-32,4,-3,26,9,-3,-1,-19,-15,1,-2,-31,-10,-1,-44,-11,-19,-23,-3,7,10,2,3,13,24,0,-18,-8,-33,-10,-37,7,-29,-4,6,28,-17,30,12,-9,-14,12,-35,9,-12,-8,-35,22,-13,-1,-28,4,12,16,-7,8,23,-11,0,-29,-5,-7,-1,3,-16,36,7,3,14,10,14,19,-12,5,-3,-29,-18,3,-4,11,13,47,35,-25,9,2,23,21,58,36,9,35,1,-4,-33,3,18,4,-11,-14,-52,-19,-12,-12,20,36,-5,-23,3,-15,-20,-9,-35,0,-62,-17,-7,-8,-31,18,13,-8,19,26,16,7,4,4,6,13,-10,19,4,48,30,36,20,-4,27,18,15,20,0,6,6,2,-26,58,36,36,-13,8,-2,-19,-13,17,20,0,16,6,5,16,-24,20,22,-10,-26,-29,4,-30,-5,-2,-10,0,-11,-23,17,-20,12,45,26,21,-4,-3,11,13,-32,-17,-20,4,-8,-18,14,-10,8,27,12,2,-23,-2,-3,8,13,-2,4,5,-3,-10,7,-18,17,-1,18,-7,20,5,18,-1,-2,10,-4,-15,-31,-7,6,13,25,49,-12,-30,-12,-21,-23,-11,2,-30,-16,-31,-35,-30,29,-4,-5,16,19,4,6,17,18,22,-9,-9,10,0,-1,4,-45,-20,9,31,9,22,-18,-29,-2,-10,-4,-3,4,-4,-44,-18,-8,-17,-32,32,8,-6,-1,12,9,7,4,-27,5,4,5,-6,-14,-3,-3,33,3,12,-4,-7,0,-1,-51,-6,4,6,-9,12,-31,-18,8,14,2,18,-11,19,-7,-18,3,7,4,9,-35,6,-1,12,10,41,10,27,3,6,9,1,-10,14,-8,11,-2,-17,-18,8,26,30,22,23,16,5,10,15,-1,-33,-15,10,-9,-18,0,21,33,16,13,29,-17,27,2,2,-4,-5,-2,-25,-20,10,-10,4,29,-11,2,14,25,5,9,10,-4,4,2,-25,-2,-10,-6,18,18,-27,-45,5,10,7,28,33,8,18,-8,-2,-24,-2,4,9,-2,2,-23,-30,-38,-13,16,23,7,14,12,1,4,6,15,17,14,-10,-22,7,-14,6,-37,22,-5,-12,-1,-4,3,14,-3,-23,-10,27,-4,9,-6,-10,-11,-17,13,9,14,-10,2,22,0,15,-26,26,2,9,-12,-4,-15,2,3,-15,15,4,-2,8,-7,-24,-22,11,16,-1,-5,-8,6,6,-27,-23,-15,-3,-17,7,-23,4,-7,17,-7,6,2,-2,-30,1,-18,-19,-18,-20,-30,-18,-13,-5,-3,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) 
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			
			
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

