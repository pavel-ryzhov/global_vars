#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{3,20,2,33,0,36,1,73,4,2},
{6,32,22,52,0,44,4,108,9,8},
{29,33,31,71,4,76,17,91,28,15},
{46,44,58,83,24,98,38,93,39,56},
{62,64,77,100,33,97,56,94,73,89},
{84,72,89,99,34,88,67,94,85,89},
{80,77,89,110,61,86,63,94,85,74},
{73,77,87,110,56,106,62,83,87,85},
{79,104,100,110,62,110,84,100,97,88},
{88,102,105,122,72,106,90,99,115,113},
{100,92,102,120,71,110,107,99,106,120},
{87,107,80,116,76,111,99,102,96,83},
{46,106,44,77,74,110,73,102,77,51},
{27,86,40,64,66,107,65,102,41,27},
{4,85,19,58,40,100,55,102,29,28},
{3,84,0,29,33,70,44,99,16,8},
{30,45,46,42,0,36,29,68,24,41},
{38,60,69,62,0,45,39,91,41,56},
{69,62,88,82,24,89,57,92,84,88},
{81,65,85,74,33,91,68,89,85,81},
{79,82,80,81,51,84,64,86,95,74},
{80,86,81,82,63,80,69,86,83,72},
{75,94,77,83,57,96,64,86,72,70},
{69,97,79,88,67,97,77,86,77,79},
{68,116,90,86,80,95,75,102,73,84},
{69,123,100,95,75,99,77,105,78,85},
{79,114,97,99,79,103,85,118,94,85},
{83,113,98,121,88,105,102,119,91,103},
{101,113,103,123,84,104,93,113,94,106},
{76,89,100,125,80,104,70,119,101,109},
{48,84,53,60,47,90,58,118,72,89},
{29,72,17,25,21,28,30,83,22,76},
{38,44,62,55,0,38,34,42,35,76},
{83,55,75,70,4,72,61,60,73,89},
{84,55,71,65,38,89,93,60,89,64},
{88,73,70,60,47,90,89,54,99,75},
{84,78,71,65,80,80,76,45,93,83},
{86,84,71,58,65,78,69,47,78,85},
{74,85,57,58,76,86,52,54,68,46},
{43,95,69,57,75,72,58,63,40,32},
{39,119,80,74,73,69,55,85,39,54},
{60,109,83,82,78,52,59,100,38,76},
{70,99,79,89,91,56,75,109,58,87},
{70,110,87,84,86,48,51,117,66,101},
{75,113,96,104,90,47,49,122,75,100},
{95,82,100,82,79,42,47,105,104,120},
{76,74,105,73,34,39,46,94,79,120},
{48,58,52,33,21,18,23,12,52,59},
{61,56,72,47,0,41,46,53,41,88},
{84,63,67,61,20,82,93,52,80,70},
{92,66,72,66,54,91,94,52,96,86},
{88,72,64,57,80,87,79,49,94,91},
{92,67,66,57,64,81,73,45,94,71},
{85,66,66,59,77,84,73,48,69,51},
{64,54,56,75,74,80,66,51,53,32},
{34,64,51,78,72,61,51,87,38,27},
{26,91,68,78,83,63,53,90,31,33},
{46,99,69,87,83,48,58,97,41,78},
{56,98,83,86,91,48,51,105,66,84},
{67,104,101,80,94,47,50,110,79,97},
{75,102,104,82,92,44,53,103,89,97},
{79,82,107,71,77,40,36,79,87,115},
{101,60,106,67,29,20,35,51,80,101},
{75,54,79,33,23,4,23,14,45,75},
{83,31,45,6,13,49,86,2,45,93},
{92,63,56,15,28,76,94,24,67,93},
{98,63,51,51,66,72,96,24,91,95},
{95,43,44,51,84,72,82,1,87,76},
{84,44,40,64,82,84,82,4,95,60},
{78,44,40,80,63,97,89,7,86,52},
{53,67,35,68,53,68,71,39,59,52},
{28,75,37,77,69,80,62,53,53,46},
{25,89,54,91,74,85,52,62,61,51},
{45,102,85,91,97,91,49,67,78,71},
{54,92,89,91,122,78,54,92,75,85},
{66,100,98,77,116,64,51,85,79,100},
{73,102,102,83,84,53,51,77,85,94},
{78,62,98,78,61,35,16,72,70,106},
{94,56,93,47,29,32,19,16,52,106},
{100,50,66,22,20,11,22,12,35,93},
{92,33,33,6,32,54,93,0,19,110},
{99,42,38,33,62,74,97,0,51,92},
{100,43,36,33,92,67,100,0,77,92},
{93,39,19,52,105,72,88,0,96,89},
{83,36,15,73,65,77,90,20,92,75},
{68,48,15,82,46,97,95,24,94,72},
{53,66,51,78,44,79,84,51,92,52},
{17,77,65,84,67,73,75,62,87,45},
{14,88,88,74,51,82,76,85,71,64},
{45,101,93,86,103,106,78,80,80,79},
{53,91,92,97,126,118,88,84,88,88},
{67,100,93,94,110,119,73,85,79,80},
{72,82,92,88,75,90,73,76,77,91},
{83,62,93,54,66,78,58,48,61,106},
{94,51,63,26,27,40,46,12,24,94},
{93,50,47,6,22,32,6,3,0,86},
{93,27,19,20,38,40,95,0,35,44},
{102,36,14,20,100,62,101,0,66,85},
{92,35,14,21,118,46,103,0,75,73},
{84,36,24,27,113,47,104,23,83,74},
{75,43,24,43,83,45,99,25,104,73},
{68,62,34,68,63,58,87,51,104,62},
{42,66,67,84,48,43,67,81,77,48},
{17,79,91,84,80,49,57,86,88,57},
{14,88,91,80,75,69,51,76,73,90},
{44,97,86,88,106,96,63,72,76,87},
{53,87,92,99,130,111,76,85,94,68},
{67,86,95,104,128,100,89,78,96,98},
{82,82,78,101,103,108,102,63,89,84},
{83,62,60,82,89,99,82,15,63,89},
{94,50,42,45,65,87,70,0,43,86},
{91,50,20,10,51,55,41,0,18,84},
{102,26,0,6,59,28,99,0,60,41},
{102,35,11,6,99,40,103,0,78,57},
{92,39,30,14,95,32,105,16,81,71},
{76,42,41,19,66,29,98,25,90,45},
{74,56,45,29,61,28,88,47,95,44},
{68,62,52,27,50,21,67,81,87,44},
{54,61,102,47,47,21,48,72,62,67},
{28,81,90,48,85,50,39,70,44,69},
{25,91,91,52,72,59,34,72,45,60},
{44,97,83,65,107,76,46,85,47,57},
{54,74,74,80,117,83,67,82,68,80},
{73,76,59,101,108,98,70,74,73,86},
{81,82,51,100,87,100,97,36,81,73},
{83,62,45,105,74,99,79,9,89,86},
{85,50,18,97,55,95,80,0,80,86},
{90,48,0,72,39,80,73,0,58,82},
{101,26,17,24,73,44,103,0,79,17},
{102,36,18,35,74,31,121,17,99,27},
{93,41,32,39,68,32,117,42,99,27},
{77,56,45,28,48,29,79,47,93,50},
{73,57,51,37,48,28,61,77,57,55},
{68,62,82,35,48,29,52,82,57,51},
{54,66,81,50,62,42,52,68,50,50},
{28,81,64,63,96,49,43,73,37,32},
{25,89,69,69,83,36,39,85,44,47},
{44,84,64,67,104,60,59,86,52,77},
{65,68,61,67,118,88,80,78,44,74},
{76,76,46,79,98,95,84,62,64,80},
{81,82,41,87,78,94,97,4,77,72},
{74,56,29,107,68,94,91,0,84,86},
{90,50,29,105,48,87,93,0,81,83},
{81,45,11,103,42,87,88,0,81,73},
{79,26,18,68,54,76,96,17,91,37},
{102,41,37,69,42,69,121,36,111,44},
{88,55,49,71,39,59,108,47,105,45},
{78,56,52,60,41,56,81,68,76,43},
{74,57,82,71,39,72,72,73,49,43},
{69,58,82,69,49,67,53,69,42,62},
{55,69,73,65,57,45,45,91,29,57},
{30,82,69,53,90,43,37,81,26,51},
{33,81,74,59,91,63,33,84,42,41},
{57,84,65,61,119,78,51,83,47,65},
{72,64,64,68,116,86,71,75,67,61},
{77,76,64,80,94,91,71,49,74,73},
{73,77,57,87,90,85,95,0,70,74},
{76,50,58,106,82,84,81,0,80,84},
{82,48,48,102,67,87,89,0,81,81},
{48,45,40,97,65,84,76,0,77,67},
{53,31,44,76,12,80,63,37,111,45},
{101,55,58,75,12,86,121,47,109,55},
{94,55,66,82,12,87,113,67,89,55},
{81,57,89,71,12,77,81,75,73,46},
{77,53,91,76,16,74,73,59,43,70},
{69,64,92,60,30,60,66,92,33,74},
{68,70,70,55,31,61,49,101,50,64},
{39,66,81,56,61,56,41,86,49,38},
{48,81,89,65,68,69,37,86,37,39},
{66,78,86,68,93,82,59,82,64,57},
{74,64,83,69,101,79,79,55,77,59},
{68,76,75,83,94,80,92,3,83,77},
{67,76,81,95,70,80,98,0,66,73},
{83,50,53,101,61,87,73,0,77,81},
{57,46,58,95,45,82,72,0,77,49},
{38,45,55,45,38,48,48,0,50,43},
{35,62,66,80,0,78,47,44,64,20},
{53,77,86,104,0,105,68,68,94,62},
{79,77,111,100,0,109,93,72,112,89},
{91,79,103,98,0,103,90,76,105,72},
{90,81,97,79,4,88,96,89,79,80},
{92,81,97,79,18,71,85,94,72,77},
{86,64,89,75,15,70,82,103,72,62},
{74,70,93,76,61,69,79,86,72,67},
{71,73,104,78,68,73,77,85,67,72},
{53,79,103,76,95,70,76,79,67,76},
{62,80,105,77,97,75,74,57,71,64},
{79,93,98,98,93,87,92,7,69,76},
{83,97,98,96,70,83,97,4,76,61},
{55,70,89,58,58,54,50,0,73,48},
{30,68,88,37,34,38,30,0,46,45},
{21,67,66,17,27,20,14,0,25,37},
{0,77,68,36,0,26,12,28,15,9},
{9,80,90,74,0,51,28,69,32,19},
{10,88,86,72,0,59,40,75,50,14},
{39,88,86,94,3,54,58,74,81,48},
{69,84,90,100,7,89,78,63,85,100},
{100,71,90,104,28,93,98,78,96,103},
{86,78,71,98,38,85,71,85,91,76},
{77,77,72,97,63,88,74,86,84,79},
{84,79,87,91,72,87,94,75,68,81},
{74,77,84,64,89,72,80,59,77,76},
{82,79,84,46,98,61,94,27,68,39},
{38,78,80,20,98,32,67,7,45,46},
{6,98,99,7,78,1,44,4,25,9},
{4,93,82,1,69,0,26,0,5,7},
{4,91,70,1,52,0,26,0,0,6},
{0,89,65,0,48,0,22,0,0,1}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
