#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{4,16,1,31,0,33,3,70,4,2},
{8,25,18,47,0,41,7,101,8,8},
{27,26,27,66,4,72,20,85,29,13},
{46,36,56,78,23,95,33,87,40,50},
{59,61,72,95,34,93,53,88,70,85},
{82,67,84,93,33,83,63,88,80,85},
{79,71,84,103,57,80,60,88,79,72},
{71,74,82,103,52,100,59,78,83,80},
{77,98,93,102,57,104,80,95,92,83},
{87,96,99,118,70,101,87,94,110,110},
{96,84,96,118,68,106,102,94,103,116},
{79,103,74,115,74,107,94,97,97,78},
{42,102,43,77,73,106,69,97,76,49},
{25,85,37,63,65,102,58,97,40,28},
{5,83,19,57,39,96,47,97,28,28},
{4,83,0,29,32,66,36,93,15,7},
{28,44,42,40,0,33,20,63,22,40},
{36,56,64,61,0,42,34,87,42,50},
{64,59,83,81,23,85,53,88,79,84},
{78,61,80,71,32,88,62,86,80,77},
{76,78,77,77,49,82,57,81,88,70},
{77,82,77,78,59,77,60,81,75,69},
{70,91,73,79,53,93,57,81,69,67},
{67,94,76,85,61,94,70,81,75,75},
{65,113,85,83,77,92,70,96,69,80},
{67,119,95,90,71,96,72,99,75,83},
{75,109,93,93,79,101,79,111,87,84},
{79,109,94,117,89,103,95,112,85,100},
{97,109,97,119,82,102,90,106,88,103},
{71,89,94,123,77,102,68,115,101,102},
{44,82,50,57,46,88,54,113,67,84},
{28,70,17,27,22,27,21,78,24,75},
{36,41,59,54,0,35,27,40,33,69},
{81,51,73,70,4,69,57,59,71,85},
{82,50,69,64,38,85,89,59,83,61},
{85,67,70,59,47,87,83,53,93,71},
{80,72,71,62,75,77,67,43,88,81},
{82,79,71,55,60,74,63,45,72,82},
{69,83,58,56,72,81,58,51,67,43},
{43,92,68,54,71,69,61,59,40,29},
{39,114,77,71,73,66,59,82,40,51},
{59,105,79,77,78,49,64,96,38,72},
{66,95,76,84,89,54,81,102,55,84},
{68,106,84,79,83,47,55,111,61,96},
{74,108,92,101,87,46,57,115,72,96},
{92,81,95,80,76,41,56,99,102,115},
{71,73,100,71,32,38,55,90,78,113},
{44,55,49,32,22,17,28,13,50,59},
{58,51,68,46,0,38,42,52,39,84},
{82,57,64,61,21,78,89,51,77,67},
{90,59,70,65,52,86,90,51,89,84},
{85,67,63,55,75,83,72,48,89,87},
{86,63,65,52,59,77,67,42,89,68},
{80,65,66,56,71,81,64,44,67,51},
{59,52,57,73,70,75,70,47,53,34},
{35,62,50,75,73,60,49,83,38,26},
{28,87,63,75,82,62,53,84,31,31},
{46,93,65,83,80,47,65,91,37,73},
{53,94,79,85,87,48,55,100,61,80},
{65,100,98,77,90,46,55,105,75,91},
{74,98,101,80,89,44,59,97,87,93},
{77,81,102,68,73,41,41,76,86,111},
{97,58,101,64,31,22,40,47,78,98},
{70,50,75,29,25,5,29,12,40,70},
{81,27,42,6,13,47,82,2,41,91},
{90,57,54,16,27,73,90,19,65,90},
{95,57,50,50,61,68,93,19,85,92},
{89,39,44,50,78,69,76,1,85,72},
{78,40,40,61,79,82,74,4,90,57},
{73,41,40,78,60,94,83,6,82,50},
{50,65,37,64,57,67,76,36,57,51},
{30,74,39,74,66,80,67,50,51,44},
{27,86,52,88,72,84,57,60,63,49},
{45,97,81,88,93,89,52,66,76,68},
{51,87,85,87,116,75,59,86,76,82},
{64,96,95,74,111,61,54,83,77,95},
{72,98,99,80,80,51,54,73,83,91},
{76,60,93,74,60,31,18,69,71,103},
{93,55,88,43,30,29,22,15,46,103},
{96,47,64,20,19,9,22,10,32,90},
{90,31,31,6,30,53,89,0,18,107},
{96,38,36,33,60,71,95,0,47,90},
{96,38,34,33,88,63,95,0,75,90},
{87,32,17,50,103,69,80,0,89,86},
{77,32,13,70,64,74,85,18,86,70},
{65,48,13,77,47,94,89,20,87,68},
{50,65,51,73,47,75,76,50,85,52},
{16,77,64,79,63,69,65,60,83,44},
{13,85,84,70,47,77,69,85,69,64},
{45,97,90,83,97,101,73,76,76,75},
{50,87,89,95,120,113,83,80,83,85},
{65,96,90,94,106,114,66,80,74,77},
{71,77,88,83,73,85,68,72,75,90},
{80,60,87,51,65,74,62,44,61,103},
{93,48,60,26,26,37,48,10,23,91},
{91,47,45,5,21,29,8,2,0,83},
{91,23,20,17,38,38,91,0,36,42},
{98,30,11,17,96,57,97,0,61,82},
{88,30,11,18,114,41,98,0,71,71},
{78,31,19,25,109,42,101,19,76,72},
{71,40,19,39,80,40,92,22,98,71},
{65,62,34,63,63,54,80,50,98,61},
{36,65,66,80,49,41,61,80,78,45},
{16,78,89,81,76,48,48,85,87,54},
{13,84,89,76,72,68,43,71,67,84},
{44,94,83,83,102,91,58,67,70,82},
{50,84,88,94,123,106,71,80,87,67},
{65,81,89,103,125,96,84,74,90,95},
{79,77,74,101,102,104,99,59,87,81},
{80,60,56,80,86,95,80,14,61,86},
{93,47,40,45,61,83,65,0,44,83},
{89,47,22,11,49,49,33,0,18,81},
{98,23,0,6,55,26,96,0,57,42},
{98,30,9,6,96,36,98,0,75,56},
{88,35,25,13,92,27,101,13,78,70},
{72,38,37,18,65,24,91,22,85,46},
{70,54,44,26,59,23,80,45,91,42},
{65,62,51,25,48,18,59,80,84,42},
{51,59,99,44,45,18,39,72,57,65},
{30,79,86,45,81,51,26,71,41,63},
{27,86,87,50,69,59,22,67,43,57},
{44,94,77,59,101,73,37,80,43,56},
{51,70,69,75,111,77,62,77,64,79},
{70,72,55,97,105,93,64,70,70,82},
{78,77,47,96,86,95,94,38,79,70},
{80,60,42,102,71,95,77,8,87,83},
{86,47,19,95,54,91,76,0,77,83},
{88,46,0,70,36,78,67,0,60,79},
{97,23,15,25,72,40,99,0,76,18},
{98,31,17,34,71,27,118,15,93,27},
{89,37,31,38,66,28,114,40,95,26},
{73,53,44,28,47,25,84,45,88,47},
{69,54,52,34,47,24,64,77,56,52},
{65,62,79,33,48,25,55,81,50,49},
{51,64,77,46,63,39,55,69,44,50},
{30,79,61,60,94,50,43,68,34,31},
{27,85,65,67,81,36,40,80,41,47},
{44,80,61,65,100,56,51,81,47,74},
{60,64,58,63,115,82,76,74,45,72},
{72,72,44,76,95,90,79,60,62,76},
{78,77,39,82,75,89,96,5,75,71},
{73,52,31,103,66,90,89,0,83,83},
{88,47,31,102,47,84,90,0,78,80},
{79,42,12,100,42,84,83,0,78,67},
{74,23,17,69,54,74,93,15,89,33},
{98,37,36,70,42,69,118,35,105,42},
{85,52,49,71,37,57,103,45,99,42},
{74,53,53,57,39,54,85,66,70,41},
{70,54,80,67,37,70,76,74,44,41},
{66,57,79,66,47,65,57,70,40,57},
{52,66,69,63,53,42,49,87,26,54},
{32,79,66,48,86,42,38,74,25,46},
{34,78,69,55,85,60,35,79,41,37},
{55,80,59,58,115,72,44,78,46,61},
{67,61,61,64,113,80,65,71,67,59},
{73,72,60,78,92,86,65,47,70,70},
{72,70,55,82,88,80,94,0,69,72},
{77,48,56,102,78,81,76,0,76,81},
{80,46,45,98,62,84,84,0,78,77},
{48,42,37,93,59,82,73,0,75,62},
{51,30,43,75,11,78,58,36,104,46},
{97,53,58,74,11,83,119,45,104,52},
{90,53,67,79,11,84,106,65,84,52},
{78,54,86,68,11,74,73,75,65,42},
{73,49,87,71,16,71,64,62,42,66},
{66,63,89,55,27,56,57,88,33,71},
{62,67,68,51,29,56,53,95,47,59},
{40,62,79,51,57,54,42,81,45,33},
{48,78,86,63,64,66,40,81,38,35},
{64,74,83,66,89,76,54,77,62,56},
{69,61,81,66,96,74,74,52,71,58},
{66,72,75,78,91,77,88,4,78,74},
{66,70,81,90,66,76,93,0,65,71},
{81,49,51,97,57,84,67,0,74,78},
{54,44,56,91,40,80,67,0,75,45},
{36,42,53,44,34,45,42,0,51,42},
{34,61,67,80,0,77,39,42,63,19},
{51,74,88,103,0,103,67,66,92,60},
{74,74,106,97,0,106,90,71,108,84},
{86,75,99,93,0,99,82,77,98,70},
{85,76,94,74,5,86,86,85,72,76},
{88,76,94,75,16,68,77,89,66,73},
{80,59,86,71,13,65,74,99,68,58},
{72,68,90,72,57,66,71,81,69,64},
{69,69,99,74,64,69,72,80,62,69},
{54,75,98,70,93,66,71,75,63,75},
{60,77,100,71,92,71,67,54,63,61},
{76,86,93,95,90,84,81,6,64,73},
{81,91,93,92,66,79,91,3,74,56},
{52,67,86,55,55,52,58,0,72,44},
{28,65,84,34,30,35,35,0,46,41},
{20,64,62,14,24,19,18,0,25,37},
{0,74,65,34,0,25,0,26,12,10},
{10,76,85,69,0,48,20,68,29,20},
{11,85,81,68,0,58,32,74,49,15},
{38,86,81,92,2,54,54,74,76,48},
{62,81,85,99,7,87,77,64,83,99},
{96,66,85,100,26,90,96,72,94,99},
{84,74,68,94,34,81,67,80,88,75},
{75,74,69,94,59,85,70,81,80,77},
{82,76,82,88,67,84,89,71,66,78},
{75,71,79,61,85,69,76,56,75,73},
{80,76,79,44,93,56,89,27,66,35},
{36,74,75,21,94,32,62,6,43,42},
{8,92,95,7,73,1,34,3,24,9},
{5,87,77,0,64,0,29,0,7,7},
{5,85,65,0,47,0,29,0,0,6},
{0,83,60,0,43,0,22,0,0,1}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
