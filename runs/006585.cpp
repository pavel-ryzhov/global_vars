#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.893053,0.815048,-0.336562,0.0608664,-0.14258,-0.208182,0.214945,0.332382,0.101715,0.620971,-0.894808,0.110948,0.774183,-1.35165,-0.293216,-0.122686,0.0877734,0.431991,-0.860016,-0.921726,-0.1293,2.22233,0.425029,0.0354549,0.744179,-1.33531,1.67997,0.624885,0.26907,0.151715,-0.494965,-0.273309,0.930186,-0.705512,-0.0873703,-1.00156,0.617304,-0.0648102,1.30436,0.497408,0.178097,-0.836943,-1.93768,0.0923422,-0.0995988,-0.971483,0.642847,-0.000648019,0.764656,1.62585,0.0994169,0.760978,0.53937,-0.19292,0.19549,0.325388,0.410183,-0.0476728,-0.491672,-0.453663,-0.88515,0.88384,-0.659913,-0.124692,-1.19388,-0.408635,-0.398287,-0.0579067,0.270618,0.137968,-0.506628,0.565614,-0.00343216,0.476544,0.731452,-1.21123,0.0676234,-0.0546693,-0.199267,0.38024,0.582442,-0.65798,-0.624973,0.0667294,0.39335,-1.09469,1.27193,-1.20006,0.890491,1.21119,-0.150502,0.242067,-0.549762,0.173397,0.263918,-0.288623,0.743872,-0.316113,0.478794,0.156061,-1.80312,-1.52222,0.0375947,-0.0456066,-0.0297457,0.309526,-0.353448,1.00171,-0.074819,0.00144265,0.271657,0.787451,-0.114226,1.04641,-0.437772,-0.278596,-0.161159,0.219375,-0.791776,-0.234419,-0.142519,0.105574,0.753605,0.285077,0.50623,0.431508,-0.504353,0.206256,-0.676042,-0.821085,0.860027,0.415775,0.138067,-0.113711,0.531343,0.496201,-0.814757,0.556202,0.875637,0.189139,0.769879,0.0108144,-0.0406969,-0.421371,0.511736,0.0279605,0.371693,-0.544685,0.526224,-0.0809619,-0.436586,-0.425817,-0.0231366,0.0185704,-0.509088,-0.494222,-0.360082,0.55319,0.57001,0.208906,-0.166985,0.901664,0.544993,0.205814,0.0255518,0.438957,-0.839346,1.44067,-0.00555736,-1.04849,-0.341625,0.383375,1.3381,-0.370845,-0.331659,-0.0550772,-0.445356,1.51849,0.0337857,0.0881696,1.45849,2.56347,0.265919,-0.319215,-0.00301674,-0.680005,0.397371,-0.0694324,0.209565,0.588346,-1.47056,-1.42969,0.463693,-1.21781,0.374446,-1.35739,0.446082,0.160113,1.27532,0.191501,0.723315,-0.275835,-0.88606,0.0989012,0.0465779,-0.256928,-0.33388,-0.360316,-0.274138,0.954963,0.0535334,0.639229,-0.102229,-0.570251,0.542146,-0.0153979,-0.402536,0.421222,-0.270108,-0.525634,-0.831143,0.30312,0.114633,-0.287862,0.859748,-0.382532,0.863102,0.723902,0.470427,-0.533348,0.0466878,0.324674,0.144983,-0.065742,-0.058679,-0.456777,-0.130467,0.771794,0.813567,-0.0548379,0.044603,-1.23529,-1.5734,0.146722,0.391921,-0.873706,0.100813,-0.281494,0.267326,1.12584,-0.747117,0.254581,0.0291293,0.242045,0.0439151,-0.403992,-0.431086,0.443879,0.0653107,-0.3516,-1.2768,0.382721,-0.221042,-0.366445,-0.448217,-0.302623,0.0489852,0.296285,-0.273632,-0.457321,-0.65583,0.124453,-0.0318954,0.0828392,0.634341,-0.828406,-0.419245,0.130682,0.860684,-0.126365,0.264287,0.140008,0.208289,0.230393,0.120716,-0.629506,0.479061,0.661576,0.664495,-0.417116,-0.58456,-0.0496806,0.847577,0.0188413,-0.27607,0.318019,0.490354,-0.272559,0.0156443,0.219472,-0.311742,0.633408,-0.698804,-0.230118,-1.16757,0.0251496,0.432897,0.0117534,0.0484441,0.385735,-0.1814,-0.55917,0.27013,0.431752,0.42744,-1.00826,0.270255,-0.261173,0.171611,1.02463,2.32582,-0.211537,-0.420933,-0.0161274,-0.00678118,-0.664433,0.524228,-0.450273,0.420761,0.213343,0.626457,0.788496,-0.211475,-0.549896,0.349055,0.129067,0.528078,0.3402,-0.0586615,-0.0922963,-0.867698,0.184326,-0.433967,-0.155734,-0.36912,0.109668,0.561422,0.481095,0.710769,-0.40232,0.131283,0.205386,0.498079,0.209236,-0.225023,-0.491443,0.140684,0.585883,0.301536,0.896999,1.15463,0.757531,0.1418,0.20542,-0.189054,-0.122208,0.056859,-0.117019,0.683261,0.892068,-0.864248,0.0328632,-0.118012,-1.07751,-0.139999,-0.568473,0.341475,0.825483,-0.342037,-0.902403,-0.0312586,0.533408,1.11945,0.10962,0.150976,-0.864984,1.3175,0.730667,0.272193,-0.238387,-0.291864,-0.00731159,0.372653,-0.97989,-0.383717,-0.421007,0.389017,0.223441,1.31902,-0.749371,-0.41872,-0.720196,-0.511776,0.852532,0.372281,-0.124513,-0.112561,-0.165543,0.104526,-0.525782,0.843789,0.502775,-0.27404,1.09654,0.63317,-0.36104,0.0365708,0.442275,-0.11475,0.574748,-0.138102,-0.940778,-0.0427946,-0.185332,-0.115587,0.730147,-1.23473,0.690047,0.197325,-0.371905,0.689052,0.466417,-0.869812,-0.0816061,0.408385,0.338208,-0.100245,0.434505,-0.208276,-0.981515,-0.860776,-0.322603,-0.250351,0.735317,1.18563,-0.441827,0.189356,0.43259,-0.00660481,-0.944899,0.0909056,0.305727,0.861206,0.0660343,0.152285,0.323179,-0.565504,-0.116122,0.694892,0.273401,0.415164,0.331749,-0.728582,-0.392738,-0.67033,-0.201235,-0.169097,-1.21588,-0.356869,0.0934423,-1.14723,-0.590698,-0.925401,0.341866,0.578447,-0.57784,-0.273558,-0.256461,0.410791,-0.341077,0.939934,0.40971,0.326481,0.0657345,0.542277,-0.644039,0.814958,-0.500658,-0.345586,-0.351875,0.316909,0.37647,0.580616,-1.11245,0.228751,0.628252,-0.121547,-1.22971,0.722801,-0.051681,0.291487,0.0301923,-0.77662,-0.462292,-0.0440795,-0.320453,1.38194,-0.962769,0.0745054,0.00975287,-0.255186,-0.0516507,-0.444749,1.17904,-0.380864,-0.28497,0.0143257,-0.0709273,-0.618195,0.776095,2.3468,0.769881,0.780369,-0.2881,-0.407332,-0.363847,0.931402,-0.607986,0.973937,1.26503,-0.296374,-0.648596,-0.58942,-1.0052,-0.161326,-0.545468,1.98384,-0.868766,-0.321972,-0.0965784,-0.184456,-0.854285,0.283179,0.202482,0.258875,-0.414054,0.442234,0.227559,-0.0270971,0.491296,0.181065,0.0844513,0.0225348,0.0848672,-0.704471,0.384627,0.184099,-0.727106,-1.10514,-0.0394912,2.22455,0.546097,-0.129996,0.244506,0.127797,-0.978978,1.61833,-0.885595,1.28563,1.38742,-0.480551,0.266728,-0.648004,-1.35483,-0.0991433,-0.298866,2.10624,-1.00123,-0.787113,-0.73722,-0.851691,-1.2743,0.452159,0.398473,-0.666939,-0.972525,1.02576,0.053154,0.290385,-0.387915,0.63986,0.907281,-0.506808,0.459026,-0.378615,0.539329,0.582663,-0.546991,-0.893018,-0.335824,-1.77643,-0.432196,0.0785629,0.79233,0.0751556,0.641684,-0.412761,0.903046,0.89091,-2.18449,0.999943,0.0243889,0.405183,2.33821,-0.330702,-0.836239,0.106721,0.46449,-0.502492,1.40207,0.525552,-0.652188,-0.592769,-0.321319,-1.22963,1.38696,-2.77216,0.552091,-0.52278,0.376734,0.429607,-0.535969,-0.262097,-0.312074,0.811222,0.484783,0.369713,-0.0301123,-0.733439,-0.991284,-1.90333,0.147736,0.900167,0.0956571,0.385487,0.446438,-0.376273,-0.309764,-0.255185,-0.821359,0.558884,0.328516,-0.840821,1.23578,0.062582,-0.525687,-0.899987,0.196741,0.55532,1.06481,-0.148279,-0.604256,0.800081,0.0259041,0.0115947,0.768602,-1.21502,-0.0816984,-0.419936,-0.0593813,-0.209443,-0.487629,-0.672759,-0.00350582,-0.366301,-0.306405,-0.209307,0.310177,-0.529925,-0.773445,0.303077,-0.00599271,0.0857762,-0.19539,0.147286,-0.156647,-0.0665523,-0.843151,-0.857116,-0.699807,0.837826,0.665767,-0.182052,0.0224759,0.673913,0.344534,-1.31332,-0.332729,0.870339,0.313041,-0.315373,-0.276648,-0.178571,-0.237054,1.18758,0.680401,0.849557,-0.351016,0.609956,-0.149894,0.11372,0.30643,0.159447,0.435746,-0.890826,-0.24992,-0.485992,1.27958,0.266327,0.133588,0.549,-0.405247,0.153818,-0.25443,-0.273456,-0.0794176,-0.549569,-0.189433,-0.780625,0.959905,0.170112,-0.443116,-0.864003,-0.163272,0.571254,0.508856,-0.0728583,-0.472436,-0.0602321,-0.406837,0.223413,-0.944955,0.142149,0.422417,0.318805,-0.230622,0.0274897,-0.36339,0.468345,-0.322229,0.601644,0.726476,-0.0927129,0.0699297,-0.157526,0.736435,-0.372645,0.035849,0.398145,0.18149,1.66116,0.0546465,-0.934243,0.246241,-0.0983712,-1.62566,2.17732,-1.07949,1.67037,1.88378,-0.191412,0.480194,-0.992982,-0.574831,0.236834,0.0942922,2.58943,-1.24666,-0.410075,-0.448006,-1.69686,-1.21228,0.104201,0.635563,-1.80703,-0.367453,0.105094,0.0617791,0.661793,-0.444187,0.885466,1.47538,-0.601279,1.52257,0.0427937,0.280583,0.519816,-0.845366,-1.79427,0.124852,-0.909421,-0.596288,-0.129466,0.0214908,-0.136238,1.65434,-0.297121,1.1262,1.42076,-1.92199,0.500675,-1.28458,1.30257,2.12104,-1.82083,-0.737983,0.756253,0.406517,-0.297572,1.10251,0.392185,-0.256279,-1.60586,-0.434421,-0.734069,1.49757,-2.32151,1.29992,-1.58559,0.809218,0.858581,-0.462668,1.20984,-0.280217,1.09134,0.242168,0.0427086,-0.406753,-0.596596,0.065576,-0.966488,-0.467106,-0.285343,-0.250126,-0.0603875,-0.355594,-0.385663,-1.16241,-0.465864,-0.417935,0.878576,0.882368,-0.844595,1.3951,0.835708,-0.392568,-1.52697,0.153376,0.0380956,0.563252,-1.37688,-0.461116,0.213738,0.0125625,-0.346874,1.16012,-1.12314,0.376709,0.764963,-0.780602,0.46589,0.849575,-0.260594,0.341831,-0.763292,-0.431144,-0.217467,1.22682,-0.29674,-0.316453,-0.458546,0.363964,0.679632,0.0623618,0.772586,0.0192564,-0.601047,-0.970122,-1.97869,-0.15175,0.0314562,0.902738,-0.521002,-0.461967,0.894929,-0.0335287,-2.36305,0.559346,1.37014,0.0125545,-0.260013,0.105075,1.26915,-0.344947,2.04861,0.384705,1.39344,0.10677,0.542956,-0.619515,-0.367046,-0.307262,-0.123687,0.00572544,-1.117,-0.316844,-0.555812,1.31367,1.39346,-0.533096,0.0374842,-0.287758,0.392338,0.369027,-0.583112,0.215805,-0.642212,1.23349,-0.500899,-0.592033,0.449205,0.0719071,-0.0700968,0.718949,0.485893,0.298389,-0.312079,0.223021,-0.704405,0.684731,1.45034,0.502041,-0.261874,0.51638,-0.751276,-0.062577,-1.21016,-0.176335,0.695253,0.353621,0.411866,0.0391597,-0.0948108,-0.4739,0.297659,0.625101,0.210279,-0.0179885,0.205808,0.044214,0.600554,-0.400699,-0.421046,-0.108083,-0.129471,-0.917674,0.944945,0.148973,0.776719,-0.19991,0.307051,0.191053,0.0221736,0.58222,-0.263298,0.138115,0.900832,-0.555291,-0.163797,0.354433,0.0738529,-0.639216,-0.930222,-0.155152,-1.80476,0.146261,-0.98838,-0.47377,0.0316647,-0.068825,-0.0103626,0.430906,-0.226781,0.77335,0.571382,-0.291095,0.379364,-0.407011,-1.13272,0.712717,-1.82963,-0.484706,0.522509,-0.754226,-0.473382,2.2209,-1.02653,1.00621,0.739613,-0.141241,-1.3583,-2.88415,0.210725,1.73968,-2.14686,-0.855688,1.15531,0.847532,0.468617,0.251037,1.07723,-0.417243,0.431007,0.282195,0.887856,1.19169,-1.47393,1.18743,-2.40478,1.23734,0.719594,-1.03312,1.21574,-0.763473,0.453368,1.48952,-0.740467,-1.31062,0.0847809,-0.689521,-0.132637,1.41054,1.34128,-0.687793,-0.560024,1.16589,-0.612705,-0.241235,0.487563,-1.43604,-0.218003,-0.830343,-1.11254,0.54028,-0.396855,-1.26986,0.560085,0.476979,-0.336258,0.104473,0.174099,-0.929782,1.22674,0.223678,0.360405,0.361963,-0.581972,0.92782,-0.0543893,0.147899,0.988187,-0.386672,0.666141,-0.839642,-0.902542,0.398851,0.342439,0.25817,-0.112371,-1.71508,-0.127207,0.689329,0.301379,-0.0588513,-0.830241,-0.184845,-0.599787,-0.894812,0.0393908,-0.681451,0.773135,0.330679,-1.30318,0.286647,0.999501,-0.295567,0.845926,0.318382,-0.174906,0.449653,-0.610595,-0.41643,1.56295,0.763741,0.0772116,0.308161,-0.286842,0.804032,1.20643,-0.256418,1.12423,0.467223,0.0980491,-0.0882253,-0.557062,0.334457,0.270001,0.979366,-0.644102,-1.15666,0.466473,-0.269096,-0.433395,-0.428532,-0.731093,0.438821,-1.08956,0.0726204,-0.830525,-0.858909,1.16709,0.58768,-0.00230374,0.176059,0.294125,0.54131,-0.852194,0.267939,-0.142785,0.336802,0.292956,0.865343,-0.265351,-0.103024,0.192516,-0.0301767,-0.127953,0.135183,1.04053,-0.784674,0.524895,0.139424,0.348888,-0.269207,-0.0117297,-0.101012,-0.190746,0.742044,0.566472,0.820866,0.168888,-0.102077,-0.332722,-0.44623,0.22351,0.0261126,-0.387989,-0.0342616,0.492793,-1.02816,0.681309,0.50582,0.443132,0.476995,-0.467135,0.0168646,-0.485331,0.525705,1.24278,0.39627,-0.216733,0.622205,-0.609311,-0.686448,-0.0315345,0.61693,-0.0360193,-0.0760564,-0.287243,-0.0420606,-0.56592,-0.280638,0.955221,0.76185,0.128707,-1.00597,-0.282077,0.728246,0.402559,1.1549,-1.78062,-0.93626,0.746857,-0.377318,0.0982705,1.55408,-0.695886,-0.105113,0.306455,1.46106,-2.09658,-2.74828,-0.612238,1.54125,-1.26315,-0.600325,0.624956,0.540256,0.941246,0.119418,-0.0800827,-1.46536,1.7835,1.0594,1.66845,1.28237,-0.733444,1.36124,-1.98934,0.79886,1.38715,-0.118721,0.717842,0.065704,-0.16412,2.40756,-0.881591,-1.36643,0.68638,-0.976314,-1.19371,1.16123,1.08602,0.215549,0.313059,0.353333,0.728866,-0.0310186,0.984069,0.0967752,-1.29558,-0.908712,-0.285134,0.191881,-0.785865,-1.12132,1.28565,0.171245,-0.515726,-0.334968,0.12718,-0.738532,0.892694,0.283702,-0.00310287,-0.21286,-0.754597,0.460435,-0.869384,0.463205,-0.298456,-0.690726,-0.433403,-0.0506404,-0.315028,0.467127,0.587631,-0.846947,-0.772545,-1.7587,-0.69367,1.2241,0.377794,-0.0820629,-0.963472,0.321898,-0.440765,0.500734,0.191849,-1.34187,0.91327,0.250692,-0.79171,0.197933,0.414049,-0.160082,1.40779,0.380717,-0.809553,0.787072,0.917843,0.601388,1.13497,1.01024,-0.192717,0.00206124,-0.519972,0.315524,1.31775,0.356014,0.693556,-0.089256,0.460818,-0.457612,-0.152549,0.475155,0.737167,0.179816,-0.502507,-0.766654,-0.743472,0.555571,0.0333279,-0.277916,0.0347649,0.930283,-0.594298,-0.0154706,-0.243349,-1.35772,0.303152,0.170326,0.148098,0.400834,-0.754922,-0.0401837,-0.894163,0.309381,1.04412,0.363345,-0.108934,0.499133,-0.249102,-0.628693,0.504783,0.491924,0.0155368,-0.128405,-0.120942,-0.326645,-0.879816,-1.30685,0.620281,-0.10311,-0.198768,-0.611595,-0.436098,0.2466,0.407206,1.24937,-0.167829,-0.276886,-0.543099,0.022786,0.495234,-0.113791,-0.635082,-0.738727,-0.285997,-0.904067,0.702823,0.798391,0.281802,0.626148,-0.0109805,0.106422,-1.71527,0.903341,1.40701,0.571121,-0.998254,1.01177,-0.377803,-0.727199,0.87014,0.890881,0.476835,0.0675278,-0.0186828,-0.556642,-0.929731,-0.620987,0.954423,0.709975,-0.205986,-1.23207,-0.547637,1.38943,0.959644,1.28124,-0.563624,-0.621816,0.177982,-0.0265042,-0.032147,0.128043,-0.59524,-0.68699,-0.222194,0.612102,-0.322902,-0.615324,-0.440499,0.23043,0.244768,0.558266,-0.375866,0.198254,0.170596,-0.0884722,-0.6032,-0.611641,1.07264,0.615709,0.726061,0.366753,0.321633,0.277372,0.0219304,-0.105953,0.606321,0.57083,0.32161,0.380859,-0.298584,0.380328,-0.670811,0.0719165,0.395232,-0.0843663,-0.269674,-0.442632,-0.376585,0.0388038,0.207578,0.110682,0.531943,0.0760726,0.180383,1.89835,-1.96996,-1.50181,0.0778578,-0.483063,-0.426894,0.108655,1.16276,0.00477991,-1.02069,-0.879649,0.32267,-0.705071,0.289369,0.526723,0.222498,-0.812273,-0.127522,0.0645883,-1.08983,0.628518,0.345471,0.492763,-0.0316113,-0.0794305,0.233773,1.07514,-0.301131,-1.70481,-0.183664,-1.05628,0.457039,1.33332,0.29605,-0.496669,-1.07668,-0.148486,0.580293,0.398827,0.82519,-0.233411,-0.113676,-0.353164,-0.294952,-0.905875,-0.0900985,0.146937,2.12605,-0.334706,-0.604722,0.348622,0.702187,1.52036,1.70839,0.799385,-0.719965,-0.60879,0.720789,-0.305817,0.686367,0.575701,0.320162,-0.20507,0.887892,0.248926,0.00741295,-0.316029,0.75534,-0.579256,-0.903828,0.355976,-0.121163,0.858696,-0.232337,-0.0101016,-0.342866,-0.0362717,0.329549,-0.340971,0.638488,-0.957936,0.398845,0.402141,-0.470616,0.428578,-0.234887,-0.253944,0.451257,0.0678069,0.0162687,0.498844,-0.862858,0.439297,0.0744564,-0.229169,-0.402536,0.546445,-0.344269,0.316515,0.486952,-0.332495,-0.268555,-0.547055,0.245298,0.557255,-0.229787,-0.8647,0.257281,0.149215,-0.333738,1.11285,-0.0811655,-1.42756,-0.523012,-0.477489,0.0424026,0.696078,-1.37789,0.0336408,-1.31006,0.712679,0.156842,-0.288163,-0.335002,0.466544,0.257681,0.915648,-1.0013,0.423366,0.651126,0.00459649,-0.303055,-0.0637141,-0.118767,0.344627,1.39296,0.707795,0.224184,-0.136073,0.0912706,-0.0793561,0.427345,0.657034,0.672091,0.0810265,0.0268271,1.08746,-0.87167,0.197615,1.11984,0.657204,0.274754,-0.654689,-0.566913,0.893537,0.11315,-0.83546,0.0100817,0.460929,-0.861007,0.587916,0.259224,0.682061,0.385185,-0.165432,1.43779,0.532987,-1.07219,-0.0232132,-0.58941,-0.0747577,0.317753,0.187645,-0.792275,0.0041042,-0.354715,-0.0837063,-0.248363,-0.104443,0.660028,-0.0914162,0.211792,1.03204,-0.51613,0.180631,0.58402,-0.00568806,0.065573,0.377441,0.0210407,-0.193879,-0.471763,-1.35964,-0.801601,1.2116,1.18951,-0.829492,0.750457,0.241502,-1.24148,1.54692,-1.14161,-0.0958243,1.30102,-0.378344,0.537083,0.258955,-1.30303,0.667892,-0.118002,-0.503843,0.368042,-0.5091,-0.944231,-0.144167,0.28773,-0.837903,-0.212047,0.0443793,-0.943631,0.252977,-0.161115,0.853826,-0.482891,-0.00158687,0.822032,0.809644,-0.304714,-0.57038,1.10522,-1.21415,0.216559,0.103023,0.674133,0.487123,0.550172,-0.187824,0.684434,0.815198,-1.43097,-0.369463,-0.47601,0.0894946,0.604584,-1.23368,0.381898,0.302239,-0.588036,-0.427462,0.320374,-0.0618453,1.87316,0.180408,-1.23728,-0.385292,0.0652619,-1.02854,0.714563,-0.984941,-0.181393,0.56852,-0.610584,-0.245305,-0.358978,-0.415725,0.275697,-0.132296,0.251187,-0.79831,-0.0662982,-0.121778,0.592526,-0.108053,0.05412,0.519279,-0.0093947,-0.0541376,0.600658,0.495857,0.240968,0.0304252,0.087484,0.373836,0.354268,-0.197715,-0.135425,0.351757,0.0318477,-0.79459,-0.223416,0.138186,0.343531,0.110319,-1.17968,-0.413085,-0.388313,-0.0122391,-0.331515,-0.267817,0.235518,0.250056,-0.149567,-0.134867,-0.166793,0.549945,0.301921,-0.237225,0.28528,-0.275286,-0.598489,1.13539,-0.384673,-1.02216,0.345973,0.348578,0.140602,-0.0391876,-0.687472,0.360019,-1.50167,-0.0453391,0.139731,-0.0855447,-0.300661,0.171208,0.809945,0.410985,-1.09724,-0.600922,-0.362737,0.171614,0.625147,-0.923217,-0.533004,0.259872,0.653414,0.00873011,-0.226528,-0.417434,0.520351,0.0958219,0.839595,0.76646,-0.920506,0.0316446,0.150655,1.50648,-0.288772,-0.212855,-0.247658,-0.704988,1.00841,0.498766,-0.133605,0.611673,0.366296,-0.574748,1.09776,0.370548,-0.41547,0.481593,0.901852,0.904192,0.677959,-1.089,0.985999,0.539014,0.147225,-1.19316,-0.294692,0.0078939,0.493514,0.188336,-0.410463,-0.118314,0.111355,-0.842691,0.595396,-0.0917474,0.827919,0.300882,0.35686,0.508832,-0.526758,0.385134,0.215141,-0.0938223,0.666717,0.201849,-0.732648,0.610344,-0.226638,-0.61922,-1.59436,0.907809,0.557541,-1.4603,0.429777,0.174983,-0.96063,0.254872,0.27085,1.53674,1.40564,-0.53902,1.00683,0.17317,-1.75243,0.467079,0.0896383,-0.334171,-0.407786,0.799807,-0.922827,-0.400059,-0.44263,-0.312701,0.177943,-0.137304,0.508874,-0.412951,-0.588375,0.600002,-0.0768584,-0.100832,0.878718,-0.521581,-0.0193329,0.971001,1.0125,0.0262091,-0.777218,-1.48709,-1.11262,-0.123819,0.243946,-0.0328845,-0.0220454,-0.30507,-0.682926,0.913723,-0.996425,-0.204716,0.814186,0.164206,-0.0161028,0.386974,-0.230376,0.403652,1.22224,-0.415804,-0.629496,-0.0397936,-0.519623,-0.196357,0.298146,0.3823,-0.0252034,0.267516,-0.641158,0.08948,0.0126448,0.153922,0.648517,0.212569,0.43719,0.679333,-0.953383,-0.360935,0.647908,0.311264,-1.42055,0.55688,1.86739,0.0221982,0.205822,0.852521,-0.260654,1.3155,-1.08139,-0.828908,-0.208411,-1.09813,0.167518,-0.344678,-0.272626,0.749571,0.43799,-1.43135,0.282446,0.342324,2.20794,-0.194059,0.458732,0.617217,0.207205,-0.0370918,-0.150655,-1.37203,-0.0247476,0.902462,0.269901,-0.974318,-0.798459,0.282886,-0.07617,1.40839,0.0227667,-1.07356,-1.21039,0.760013,-0.976976,1.19643,2.54138,0.432102,0.352843,0.738586,0.398298,1.4719,-1.27249,-1.80124,0.802186,-0.677947,-0.18982,-0.484982,0.192419,0.335407,0.448359,-1.56806,-0.211297,0.77394,2.60845,-0.979442,0.377737,0.471501,0.552696,-0.53882,-0.575022,-1.33646,0.24013,1.30589,0.437375,-0.94385,-1.64482,-0.199719,-0.267599,1.3485,0.691184,-1.0219,-1.99714,-0.383353,0.728886,-0.712842,-0.692107,0.319716,0.477206,0.555177,-0.273662,-0.423495,-0.0141914,0.00529834,1.17909,0.840724,-0.145858,0.68143,0.994824,0.778991,-0.450118,0.695157,0.88572,0.943735,-0.666034,-0.0903383,0.148124,0.549951,0.923014,1.09501,0.213463,0.687246,-0.20377,0.17881,1.1418,1.11974,0.360447,1.0889,0.276625,0.634278,-0.20803,0.2209,0.478056,0.209179,-0.843331,-1.57419,1.05191,2.58378,-1.66726,-3.91485,-1.02203,1.90933,-3.80745,1.39458,-1.64849,3.23161,-1.36265,-1.83487,1.53327,-1.38318,-1.207,1.68081,-0.810936,-0.411604,-0.938758,3.94288,0.27038,-2.55063,1.54112,-1.92076,0.871268,-0.900202,-0.316736,-1.08261,-0.305154,0.49986,0.870967,-1.35568,-3.20405,-0.445675,-0.0514674,-1.04637,-0.1111,-0.515042,0.779363,1.03182,-0.585871,0.325314,-2.69621,-0.891506,0.705984,-1.66939,-0.228286,-1.50561,-0.776428,-2.40235,-0.547889,-1.73018,1.64687,-1.57028,2.59854,-0.499392,-1.3334,-2.24516,2.47517,2.27613,0.68571,-0.167374,-1.83156,-2.2683,-1.78514,0.3257,-0.749438,0.492605,-0.94843,0.0157214,1.08223,-3.11443,-0.0248557,1.48792,1.16066,-0.109905,-2.60592,-2.10443,2.86687,-0.461735,-1.74163,-2.04827,0.649753,-1.04786,-2.2434,1.90296,-1.48982,2.14843,2.78567,-4.65338,1.91287,1.7246,-0.794295,-2.34778,-1.77779,1.31033,1.33951,-1.82269,-3.36402,1.03845,-0.689409,-0.0633016,0.183133,0.843323,-1.30242,-3.00667,-1.30686,1.65096,-2.97906,1.79105,-1.24919,0.260737,-2.30564,2.23433,-2.18031,-0.937989,0.31772,1.25126,0.148705,-0.307159,-0.796294,-0.869913,-2.49447,1.19305,1.26047,0.514537,-3.58356,-1.30347,1.16565,-2.79808,-0.572515,-3.19397,0.367677,2.16114,0.716045,-1.88051,1.10496,1.38078,-2.16486,-0.0156039,1.35439,0.593813,-1.54856,0.985359,-1.52685,-2.26831,1.80148,0.193504,-0.609577,-0.551961,0.42445,1.39909,-0.568599,0.515124,-1.31489,-1.4577,-1.53595,-1.51863,3.30988,-1.42037,1.12747,-3.13954,2.29695,-2.74388,-3.64722,1.45068,-2.38925,0.289171,-1.20443,-2.6166,-2.13724,-1.29684,-1.2795,0.75698,1.21974,0.510814,1.75179,-1.02355,0.778234,0.0407282,-3.07185,1.60602,-0.632114,-1.30725,0.38127,-2.5958,0.373743,-1.77761,-0.979224,0.473903,-1.26656,-1.94541,0.161763,0.520942,-0.0856836,-2.66025,-0.211156,0.590539,-1.96703,2.44812,2.16867,-2.764,1.12993,0.963997,1.76681,-0.849855,-2.79177,-3.02307,-1.15025,0.762583,-2.36901,-1.25965,-0.722114,3.25511,-1.10592,3.37168,-1.54425,-2.38202,-0.420863,-0.149646,-1.45927,-2.22354,2.45332,-1.95386,-2.52997,1.40548,2.87326,-1.21226,-0.194254,-1.22892,1.17503,-1.08881,0.768333,-0.737133,-1.84039,0.0323379,0.66479,-0.962341,-2.21436,-1.57405,-1.47031,1.10305,1.09302,-3.38813,2.23032,-1.24731,0.741365,-2.53897,0.411569,-2.82162,-1.77626,-1.60254,0.0858252,0.541201,0.0292456,-2.06508,0.356727,1.46605,-1.17645,0.191716,-1.31474,3.47957,-0.825185,-3.65917,-0.760322,1.84071,-1.27925,-2.52282,0.372404,-3.08025,-0.761036,-1.46618,-0.681163,-2.2065,0.0830515,0.601518,1.23816,0.92504,-3.2336,0.54931,0.552891,0.0416986,0.53197,1.17514,-2.92557,-0.161345,0.980761,1.2031,0.863924,-0.256295,0.439386,-2.37888,0.533241,-0.553006,0.489688,-0.732387,-1.63603,-1.47209,-1.08743,-2.89134,1.22977,-0.74964,0.900117,-2.23887,-1.14995,-1.12829,0.270132,0.690062,-0.502873,-2.5921,1.79685,0.967843,-1.32456,-1.40258,-2.04934,-0.647694,0.38411,0.991035,-0.41846,-2.19336,-2.91735,-0.312506,1.30604,-0.814587,0.225084,0.992479,-1.47169,-0.469899,1.03084,0.0816944,-0.559822,1.28807,-1.64789,-1.11446,-2.39994,-2.2243,-0.345167,0.452903,-0.070514,-1.51855,0.127967,-1.33311,-1.91273,1.48188,0.084432,0.0236136,-1.75078,-0.536596,0.0471971,-3.33747,1.7447,-0.753776,0.338303,-2.68973,1.09193,-2.09922,0.682804,-1.86929,-1.34385,1.26039,0.498536,-1.83187,-0.287655,-0.405884,-1.09074,0.91725,-0.860364,0.259128,-2.64874,0.687009,-2.89909,0.788814,-0.62135,0.924169,-0.251914,-0.633775,1.23266,1.75677,-2.23416,-2.42828,-1.77742,1.21506,-1.9225,0.555567,1.56042,1.92086,0.98199,-3.11844,-0.0492809,-0.45721,-1.87067,2.72525,0.0457095,0.867893,-2.19447,-1.06406,-3.58295,-0.00800057,0.30873,0.227162,0.515397,0.687993,0.621761,0.807019,0.240688,0.501011,0.597207,1.09435};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 40, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] == B : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      //numbers[i].swap(vector<string>(numbers[i].begin() + points[0], numbers[i].begin() + points.back()));
      Prune(0, numbers[i][0].size(), points[0] - 1, points.back() + 1, &numbers[i]);
      DeleteBorder(&numbers[i]);
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    // image->swap(vector<string>(image->begin() + start_y, image->begin() + end_y));
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      //(*image)[y].swap(string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x));
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
    size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    random_shuffle(width.begin(), width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    random_shuffle(height.begin(), height.end());
    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 200./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }
        result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
      }
    }
  }

};

void Test() {
  const char* files[] = {"001.txt", "002.txt", "003.txt", "004.txt", "005.txt", "006.txt", "007.txt", "008.txt", "009.txt", "010.txt", "011.txt", "012.txt", "013.txt", "014.txt", "015.txt", "016.txt", "017.txt", "018.txt"};
  const char* ans[] = {"979","484","552","723", "576", "294", "551", "853", "117", "650", "864", "448", "966", "247", "959", "858", "892", "852"};
  for (size_t i = 0; i < sizeof(files) / sizeof(char*); ++i) {
    ifstream file(files[i]);
    vector<string> text;
    string line;
    while (file >> line) {
      text.push_back(line);
    }
    Image image(text);
    image.Initialize();
    string res = image.Classify();
    if (res != string(ans[i])) {
      cout << "Failed " << files[i] << " " << ans[i] << " != " << res << endl;
    }
  }

}


int main() {  
//  ifstream file("image.txt");
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
