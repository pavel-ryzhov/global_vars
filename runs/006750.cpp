// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={27,20,30,-3,6,9,10,3,-3,-6,8,-9,-4,-6,-18,-3,13,14,-8,0,12,-3,-6,-11,-13,-2,2,-12,-11,-9,-18,-7,5,-2,5,-3,0,9,-8,-14,-11,2,16,-4,10,2,-3,-5,9,7,-2,-13,-4,-2,1,-12,-1,11,9,-7,0,-15,3,-19,11,-6,-1,9,28,21,1,8,-7,15,16,-1,7,12,14,22,4,-6,8,5,16,4,-4,-1,-5,3,6,4,-4,-2,12,15,19,15,21,2,8,-4,-10,-12,-13,-4,-21,-33,-18,-3,8,35,37,18,-6,-20,-3,-7,0,-12,-22,-21,-15,-10,-13,-24,-14,9,24,16,-7,-17,-4,3,5,-16,-8,0,-4,-16,-5,-16,23,2,23,15,2,-15,-10,-14,-2,-10,-5,-10,-14,-13,-1,4,4,-15,18,36,13,9,3,-6,5,-2,-6,-10,-2,-8,7,-10,0,-2,13,10,11,16,3,18,-3,-5,-5,9,-1,-10,0,-7,-18,-7,16,5,8,9,13,11,5,-3,-7,5,6,2,-1,2,14,-28,-7,-2,6,16,8,18,21,14,-13,15,3,-9,0,1,-5,-23,5,10,5,-3,5,9,-1,-3,-12,-3,3,-15,1,10,-6,-16,12,-8,-8,-8,-25,-14,-5,-11,-14,-10,-7,-7,-6,9,-21,-7,10,19,-13,4,-43,-8,-13,-4,-30,-13,-9,5,29,31,13,24,-10,31,25,11,-26,-6,-8,-6,-19,-14,-6,-16,-14,-21,-5,23,19,23,4,-11,12,5,11,1,-21,4,-7,-1,-4,-15,-22,24,26,-19,7,-9,0,20,31,3,-8,21,-6,-15,-2,-33,-31,15,-6,-11,18,3,6,27,15,24,10,32,3,20,5,-3,-9,11,-3,6,3,-17,5,11,17,12,8,3,-22,14,-17,-10,2,23,19,28,-4,-13,-1,-18,14,8,-11,20,3,-3,-23,-4,2,18,29,12,7,-17,-21,-24,4,12,-1,-22,-22,-26,-5,-25,-17,12,15,-21,-26,-31,-12,11,-8,9,-9,8,5,4,-6,-22,-6,26,3,-5,-38,-18,9,-22,-8,16,-6,10,-3,-33,1,2,18,4,-9,9,-1,-20,-7,2,3,-8,-2,-5,0,10,13,21,3,-18,-1,-38,0,-9,-8,12,-10,1,-2,1,13,5,12,13,-32,-24,-2,-40,4,-16,12,12,-4,10,5,-6,5,28,31,21,2,-34,12,7,-16,-23,-7,-14,2,17,-3,0,2,17,1,-6,0,-9,8,-3,-5,-31,-15,-6,4,15,-7,9,1,16,0,20,28,27,21,2,19,31,-2,-16,-17,-12,-1,-28,-12,-3,-1,19,30,64,7,-4,11,4,17,4,13,-6,-3,-19,-11,-7,-12,1,3,-10,-3,-3,-8,1,-21,-18,5,7,-10,0,-16,2,-2,-8,-21,-2,17,-5,7,2,-9,-1,-13,-8,-17,-14,2,-3,8,-6,-12,-6,6,-11,-11,6,3,5,-11,-11,-9,-9,-5,9,9,3,9,-7,-8,-6,-6,-9,17,9,5,-3,4,-3,0,2,10,0,-2,12,14,13,7,0,5,-5,-10,-12,9,-9,-4,-2,-4,3,14,7,10,33,10,-13,5,-3,-22,0,1,-9,2,-6,11,0,31,11,8,1,-16,-2,0,-13,-22,-25,-6,-21,0,-5,8,9,14,-7,-2,5,7,2,4,-2,-15,-6,-10,-10,18,5,4,9,-8,-34,2,27,17,10,1,8,3,-1,-7,-4,6,-17,-8,-14,-11,-34,7,-1,-8,7,13,6,6,-7,-9,-3,3,-9,-17,-15,-29,-39,14,-10,-8,-13,8,10,16,1,-3,1,-5,-10,-6,-18,-4,-3,19,3,-2,-3,13,29,19,4,10,2,-11,-4,12,-8,6,13,17,1,-12,8,16,24,29,-6,-4,5,3,2,-2,-15,12,19,16,20,10,17,6,-1,4,0,9,11,-6,-12,-14,6,12,34,14,45,23,-19,-20,-22,-2,-8,-2,1,-2,7,0,19,45,23,104,33,77,30,-18,43,2,-12,-13,-16,10,-27,-66,-12,-31,-27,16,11,-38,-7,-14,-36,9,-4,-42,-12,-16,7,-8,3,-16,-50,15,22,21,-35,42,18,13,-3,-1,2,-32,-5,-1,-5,-19,-36,25,-9,23,-18,14,-21,0,-30,-31,-12,1,-19,-6,-39,-12,21,-6,-35,44,-54,49,37,39,0,-14,33,-1,-5,21,2,58,36,3,-29,-16,-48,-25,-45,62,30,20,24,21,39,16,22,27,29,46,-32,-59,-88,23,-35,-4,16,-18,-20,-10,19,-10,21,-10,-16,54,13,-13,-29,20,-23,34,30,-20,-47,5,-1,-3,6,-35,-61,57,-8,24,-27,-30,-13,6,14,7,26,29,4,-3,1,7,-8,11,-52,9,-51,-26,-48,8,1,-23,9,12,-3,3,57,29,11,41,15,25,-29,-23,-23,-6,-33,29,-6,22,-22,26,16,90,-10,35,-14,-27,2,17,-30,6,-46,-12,-28,-11,15,12,-13,-5,61,63,18,-13,-7,35,14,-21,-57,5,6,31,7,-3,-18,36,14,78,29,1,4,-9,54,24,-34,-13,-14,-11,-50,27,-10,-22,2,40,0,-31,-1,-39,11,23,-9,18,8,16,-22,4,-24,6,-12,86,80,6,6,-34,-12,-14,-9,-39,5,-24,-33,-34,-18,-55,-29,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,78,1,19,35,27,-6,13,-39,-4,-48,3,-36,-14,8,55,-16,13,-30,39,22,20,24,7,-9,-25,-49,-31,-37,-34,-16,43,33,0,6,22,-20,-15,12,13,-4,-43,14,36,44,-8,-46,7,-10,-15,3,2,16,35,10,-1,-40,3,-8,10,-16,13,-54,-20,-40,-49,-9,-40,18,23,-7,2,19,-14,-32,-36,-1,13,-14,-54,-1,49,-10,56,20,3,34,17,-29,8,1,-6,-25,17,-14,18,4,8,13,-22,0,-1,43,8,-28,3,21,25,-37,-34,-12,-18,50,-12,-15,14,49,-27,21,-14,-8,-4,7,17,44,23,2,20,9,55,4,20,42,-49,-11,0,-58,-8,-3,-19,20,-16,-30,-44,42,4,-5,-32,-30,-1,48,-55,-26,12,7,-5,-63,3,-14,19,-17,-29,-32,-16,-40,-4,39,-32,-23,20,-39,-20,-32,36,25,-8,19,27,-59,6,24,22,-26,-32,-4,23,-12,12,-14,-4,14,-48,-17,28,-6,26,25,-12,30,-12,1,31,10,9,16,-24,35,29,19,72,21,4,-23,-18,-13,-3,16,43,5,5,-1,-10,4,29,2,45,44,-4,-1,-6,-58,-19,10,-2,33,-32,46,-6,5,14,-57,45,32,2,55,-15,-25,-29,-15,-7,11,-22,-9,18,-15,-6,-11,30,13,14,-7,-9,12,-8,-19,-8,-12,-21,-2,-6,-2,-5,21,7,-16,-23,-13,-5,-9,-2,-6,-17,9,-32,-13,-11,-26,20,-23,-3,0,-14,-2,18,3,0,-6,8,-4,-32,-19,0,-46,-8,37,-2,-27,-7,2,5,-8,-22,-22,-4,8,-27,-40,-11,8,-33,31,34,-18,15,-2,11,13,11,10,40,-3,-20,-26,-14,8,-20,-4,32,0,-5,5,5,-22,4,-14,20,8,4,-37,-25,-24,-34,-32,43,29,2,-29,-16,-18,1,-2,4,8,8,23,3,2,-9,-27,35,31,-12,-25,0,-18,21,21,-4,13,10,-5,2,16,28,-27,17,42,17,-11,3,-21,-6,-5,-5,10,8,-7,-2,1,13,-23,12,18,12,12,4,-15,5,-18,-25,2,17,14,6,-6,13,-25,16,49,53,4,15,29,16,-11,-8,-6,14,3,20,11,7,-12,0,1,14,3,-5,24,8,-10,2,-10,7,-5,22,-22,0,-13,1,2,10,-2,-13,14,8,-6,-3,-18,-19,18,23,-26,30,25,-2,-21,25,34,37,20,23,-5,13,7,-4,-7,2,6,-11,-7,-15,-2,14,2,13,3,12,-16,12,-11,-15,-13,-32,-2,47,30,34,7,15,-5,-18,-11,4,6,-28,-38,-25,-15,9,12,1,-1,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,52,26,12,25,15,1,19,-23,-22,-9,7,-11,-13,-35,1,-6,27,8,-6,0,-18,-18,-6,-5,-30,-13,-6,-47,-12,-24,-30,-4,8,7,1,2,16,27,1,-15,-7,-32,-9,-38,4,-30,-7,3,31,-18,29,13,-6,-9,11,-36,10,-11,-9,-32,25,-12,-2,-31,3,11,17,-6,11,28,-8,3,-32,-8,-4,2,4,-15,33,6,2,13,11,13,20,-13,6,-6,-28,-21,2,-3,10,16,42,28,-26,6,1,22,20,59,35,10,36,0,-5,-32,2,19,1,-10,-13,-55,-22,-13,-13,19,35,-12,-22,4,-18,-23,-12,-38,1,-63,-18,-8,-9,-34,15,12,-7,22,27,17,8,5,5,3,12,-9,20,3,47,31,37,21,-1,26,19,18,21,1,7,5,3,-25,59,35,35,-12,13,5,-16,-10,22,21,-1,17,5,4,15,-25,21,21,-11,-17,-24,13,-29,-8,3,-11,-1,-14,-26,18,-21,15,48,27,22,-1,-4,14,10,-31,-16,-23,3,-7,-21,13,-13,7,28,15,1,-22,-5,-6,5,6,1,1,4,0,-13,6,-21,16,-2,19,-4,21,4,19,-2,-9,11,-5,-18,-30,-10,7,16,20,48,-15,-31,-13,-18,-22,-10,-1,-29,-17,-32,-36,-33,30,-7,-8,19,20,3,5,16,17,23,-8,-10,13,1,0,3,-46,-19,12,34,8,23,-19,-28,-3,-11,-5,-6,5,-5,-47,-23,-7,-16,-29,33,7,-5,-2,11,6,4,1,-32,4,5,6,-7,-17,-4,2,36,6,11,-3,-8,-1,2,-48,-5,9,9,-8,13,-32,-17,11,17,-3,17,-14,24,-4,-15,6,8,5,10,-32,11,-2,13,11,36,7,24,0,5,12,4,-9,13,-7,12,-1,-14,-17,11,27,27,19,20,19,4,9,12,-6,-36,-16,9,-8,-13,9,24,32,13,12,28,-20,28,-1,-1,-7,-8,-3,-24,-15,17,-1,5,30,-10,1,15,24,10,12,11,-5,1,3,-22,3,-5,-3,19,19,-26,-42,4,9,6,25,38,11,17,-3,1,-19,3,3,8,-3,3,-24,-33,-39,-10,17,22,2,15,19,6,-1,1,12,12,17,-9,-23,6,-11,1,-40,19,0,-7,4,-9,-4,9,-8,-22,-9,28,1,14,-3,-9,-10,-14,10,8,11,-15,1,19,1,18,-25,27,7,14,-7,3,-12,-3,0,-20,12,1,-3,11,-4,-21,-19,10,17,0,-6,-9,3,5,-28,-30,-18,2,-12,10,-20,7,-4,18,-14,1,-1,-3,-29,2,-19,-24,-19,-21,-31,-23,-16,-10,-8,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) 
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			
			
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

