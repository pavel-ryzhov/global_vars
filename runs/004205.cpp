#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <math.h>

#include <vector>
#include <algorithm>
using namespace std;

// ============== THE DATA ================

// Um.. guys who read these source files.. You see the amount of base64 data here. 
// This is _very close to a 64k limit. Even after I packed floats to 28 bits. 
// So some source code packing might be applied as well. F is for float, for example

float spread = 1.0001f;

#define F float
#define I int
#define V void

#define Im Image
#define R return
#define Vi virtual
#define LP PlainLayer
#define Px pixel
#define NN NNetwork

I blobSize = 47836;
I numChunks = 12;

const char* chunks[12] = {
	"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",
};

// =============== MYST ===================

typedef const char cchar;
typedef unsigned I uint;
typedef unsigned char byte;

template <typename P> P* ptrOffset(P* ptr, I offset)
{
	R (P*)((uint)ptr + offset);
}				 

template <typename P> V doPtrOffset(P*& ptr, I offset)
{
	ptr = ptrOffset(ptr, offset);
}

template <typename T> T& ptrReadNext(V*& ptr)
{	
	T& result = *(T*)ptr;
	doPtrOffset(ptr, sizeof(T));
	R result;
}

//============== IMAGE ==================

bool isWhitespace(char c)
{
	R c == '\0' || c == 10 || c == 13;
}

class Im
{
private:
	I width;
	I height;
public:
	Im();
	Im(I _width, I _height);
	~Im();
	
	I W();
	I H();
	F& Px(I x, I y);
	F* pixels;
	V clear();	
};

Im::Im(I _width, I _height):
	width(_width),
	height(_height),
	pixels(new F[width*height])
{
	clear();
}

F charToColor(char c)
{
	switch (c)
	{
		case '@':
			R 0.f;
		case '#':
			R 0.33f;
		case '%':
			R 0.66f;
		case '.':
			R 1.f;
	}
}

Im::Im():
	width(0),
	height(0),
	pixels(NULL)
{
	char buf[256];
	for (height = 0; !feof(stdin); ++height)
	{
		buf[0] = 0;
		gets(buf);
		if (!width)
		{
			width = strlen(&buf[0]);
			pixels = new F[width*100];
		}

		int x = 0;
		for (cchar* c = buf; *c != 10 && *c != 13 && *c != 0; ++c)
			pixel(x++, height) = charToColor(*c);
	}
	--height;
}

Im::~Im()
{
	delete[] pixels;
}

I Im::W()
{
	R width;
}

I Im::H()
{
	R height;
}

F& Im::Px(I x, I y)
{
	R pixels[x+width*y];
}

V Im::clear()
{
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
			Px(x, y) = 1.f;
}

// ----------- image utils -------------

I clamp(I x, I min, I max)
{
	if (x < min) R min;
	if (x > max) R max;
	R x;
}

Im* cropped(Im* img, I x1, I y1, I x2, I y2)
{
	clamp(x1, 0, img->W());
	clamp(x2, 0, img->W());
	clamp(y1, 0, img->H());
	clamp(y2, 0, img->H());

	Im* result = new Im(x2-x1, y2-y1);
	for (I x = x1; x < x2; ++x)
		for (I y = y1; y < y2; ++y)
			result->Px(x-x1, y-y1) = img->Px(x, y);
	R result;
}

Im* cropped(Im* img)
{
	I minX = img->W();
	I minY = img->H();
	I maxX = 0;
	I maxY = 0;

	for (I x = 0; x < img->W(); ++x)
		for (I y = 0; y < img->H(); ++y)
			if (img->Px(x, y) != 1.f)
			{
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
			}

	R cropped(img, minX, minY, maxX+1, maxY+1);
}

Im* resample(Im* input, I width, I height)
{	
	Im* result = new Im(width, height);
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
		{
			F normX = x * 1.f / width;
			F normY = y * 1.f / height;
			I nearestX = I(normX * input->W());
			I nearestY = I(normY * input->H());
			result->Px(x, y) = input->Px(nearestX, nearestY);		
		}
		
	R result;
}

V copyCentered(Im* inner, Im* outer, bool clear)
{
	I origX = (outer->W() - inner->W()) / 2;
	I origY = (outer->H() - inner->H()) / 2;

	if (clear) outer->clear();

	for (I x = 0; x < inner->W(); ++x)
		for (I y = 0; y < inner->H(); ++y)
			outer->Px(x+origX, y+origY) = inner->Px(x, y);
}

I markChunk(Im* input, I chunk, Im* chunkMap, I x, I y)
{
	if (!(
		x >= 0 && y >= 0 &&
		x < input->W() && y < input->H() &&
		input->Px(x, y) != 1.f &&
		chunkMap->Px(x, y) == 1
		))
		R 0;

	chunkMap->Px(x, y) = F(chunk);
	R
		markChunk(input, chunk, chunkMap, x-1, y-1) +
		markChunk(input, chunk, chunkMap, x-1, y) +
		markChunk(input, chunk, chunkMap, x-1, y+1) +
		
		markChunk(input, chunk, chunkMap, x, y-1) +
		markChunk(input, chunk, chunkMap, x, y+1) +
		
		markChunk(input, chunk, chunkMap, x+1, y-1) +
		markChunk(input, chunk, chunkMap, x+1, y) +
		markChunk(input, chunk, chunkMap, x+1, y+1) +
		1;		
}

Im* bestChunks(Im* input)
{
	I width = input->W();
	I height = input->H();

	Im* result = new Im(width, height);
	result->clear();
	Im* chunkMap = new Im(width, height);
	chunkMap->clear();
	
	vector<I> bestChunks;
	I bestPixels = 1;
	I currentChunk = 2;
	
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
			if (chunkMap->Px(x, y) == 1 && input->Px(x, y) != 1.f)
			{
				I numPixels = markChunk(input, currentChunk, chunkMap, x, y);
				
				F ratio = numPixels * 1.f / bestPixels;
				const F minRatio = 0.5f, maxRatio = 1.5f;
				
				if (ratio > minRatio && ratio < maxRatio)
					bestChunks.push_back(currentChunk);
				else if (ratio > maxRatio)
				{
					bestPixels = numPixels;
					bestChunks.clear();
					bestChunks.push_back(currentChunk);
				}
				
				++currentChunk;
			}
			
	for (I i = 0; i < bestChunks.size(); ++i)
	{
		for (I x = 0; x < width; ++x)
			for (I y = 0; y < height; ++y)
				if (chunkMap->Px(x, y) == bestChunks[i])
					result->Px(x, y) = input->Px(x, y);
	}
	
	delete chunkMap;
	R result;
}

V brightPass(Im* input, F maxBlack = 0.9f)
{
	for (I x = 0; x < input->W(); ++x)
		for (I y = 0; y < input->H(); ++y)
		{
			if (input->Px(x, y) <= maxBlack)
				input->Px(x, y) = 0.f;
			else
				input->Px(x, y) = 1.f;
		}
}

Im* prepareSample(Im* input, I size, bool clean)
{
	Im* cleaned = (clean)? bestChunks(input): input;
	Im* trimmed = cropped(cleaned);
	
	I bigH = size;
	I bigW = (trimmed->W() * 1.f / trimmed->H()) * bigH;
	if (bigW > size)
		bigW = size;	
	Im* resampled = resample(trimmed, bigW, bigH);
	
	Im* sample = new Im(size, size);
	copyCentered(resampled, sample, true);
	//brightPass(sample);
	
	if (clean) delete cleaned;
	delete trimmed;
	delete resampled;
	
	R sample;
}			   

I findSplitPoint(F* vals, I start, I end, F biasWeight)
{
	biasWeight *= 1.f;
	
	F minVal = 1e20f;
	I minIndex;

	I middle = (start + end) / 2;
	F range = (end - start) * 0.2f;

	for (I i = middle-range; i < middle+range; ++i)
	{
		F weighedValue = vals[i] + (1.f * abs(i - middle) / (end-start)) * biasWeight;
		if (weighedValue < minVal)
		{
			minVal = weighedValue;
			minIndex = i;
		}
	}

	R minIndex;
}

V splitDigits(Im* input, Im* digits[3])
{
	// create images
	Im* trimmed = cropped(input);

	// count pixels by column
	F* pixByCol = new F[trimmed->W()];
	for (I x = 0; x < trimmed->W(); ++x)
	{
		F count = 0;
		for (I y = 0; y < trimmed->H(); ++y)
			count+= 1.f - trimmed->Px(x, y);
		pixByCol[x] = count;
	}

	// find minimums
	I splitX1 = findSplitPoint(pixByCol, 0, trimmed->W()*0.66f, trimmed->H());
	I splitX2 = findSplitPoint(pixByCol, trimmed->W()*0.33f, trimmed->W(), trimmed->H());

	Im* spaceDigits[3];
	spaceDigits[0] = cropped(trimmed, 0, 0, splitX1, trimmed->H());
	spaceDigits[1] = cropped(trimmed, splitX1, 0, splitX2, trimmed->H());
	spaceDigits[2] = cropped(trimmed, splitX2, 0, trimmed->W(), trimmed->H());
	
	for (I i = 0; i < 3; ++i)
	{
		digits[i] = cropped(spaceDigits[i]);
		delete spaceDigits[i];
	}
	
	delete trimmed;
	delete[] pixByCol;
}

// ================== BLOB =================

struct Block
{
	union
	{
		struct
		{
			uint e0: 6;
			uint e1: 6;
			uint e2: 6;
			uint e3: 6;
		};
		
		struct
		{
			uint d0: 8;
			uint d1: 8;
			uint d2: 8;
		};
	};
};

byte decodeChar(char c)
{
	if (c >= 'A' && c <= 'Z')
		R c-'A';
	if (c >= 'a' && c <= 'z')
		R c-'a'+26;
	if (c >= '0' && c <= '9')
		R c-'0'+52;
	if (c == '+')
		R 62;
	if (c == '/')
		R 63;
	if (c == '=')
		R 0;
	if (c == '\0')
		R 0;
}

V decodeBlock(cchar encoded[4], byte decoded[3])
{
	Block block;
	
	block.e0 = decodeChar(encoded[3]);
	block.e1 = decodeChar(encoded[2]);
	block.e2 = decodeChar(encoded[1]);
	block.e3 = decodeChar(encoded[0]);
	
	decoded[2] = block.d0;
	decoded[1] = block.d1;
	decoded[0] = block.d2;
}

V* decode(cchar* data)
{
	I blocks = strlen(data) / 4;
	byte* result = (byte*)malloc(blocks * 3);
	
	for (I i = 0; i < blocks; ++i)
	{	
		cchar* encodedBlock = data + i*4;
		byte* decodedBlock = ptrOffset(result, i*3);
		decodeBlock(encodedBlock, decodedBlock);
	}
	
	R result;
}

cchar* loadBlob()
{
	extern I blobSize;
	extern I numChunks;
	extern cchar* chunks[12];
	
	char* result = new char [blobSize+1];
	char* ptr = result;
	
	for (I i = 0; i < numChunks; ++i)
	{											
		for (cchar* s = chunks[i]; *s; ++s)
			*(ptr++) = *s;
	}
	
	result[blobSize] = 0;
	
	R result;	
}

// ================ NN ================

// activation
extern F spread;
F activate(F value);
// learning parameters
extern F speed;
extern F inertia;

class NeuronLayer
{	
public:
	Vi I numInputs() = 0;
	Vi I numNeurons() = 0;
	Vi I numWeights() = 0;
	
	Vi F weight(I neuron, I input) = 0;	// returns 0 if there is no connection
	Vi F input(I index) = 0;					// cached input
	Vi F output(I neuron) = 0;				// compute output
	Vi F error(I neuron) = 0;				// computed error
	
	/* Work cycle: pushInput() -> pullOutput() (or output()) */
	Vi V pushInput(F inputs[]) = 0;		// for input layer
	Vi V pushInput(NeuronLayer& prev) = 0;	// for inner layers
	Vi V pullOutput(F outputs[]) = 0;	// for output layer -- others use output()
	
	Vi F weight(I index) = 0;				// for blobbing purposes
	Vi V setWeight(I index, F value) = 0;	// again, for blobbing purposes
};

F newWeight();

F activate(F x)
{
	R 1 / (1 + expf(-spread * x));
}

// ----------------- plain layer -----------------

class LP: public NeuronLayer
{
private:
	// construction data
	I __numInputs;
	I __numNeurons;
	// state
	F* weights;	
	F* inputs;			// cached last input
	F* errors;
	F* weightsErrors;	// cached last weight fix
private:
	F& weightError(I neuron, I input);
	F& weightValue(I neuron, I input);
public:
	LP(I numInputs, I numNeurons);
	~LP();
		
	I numInputs();
	I numNeurons();
	I numWeights();
	
	F weight(I neuron, I input);
	F input(I index);
	F output(I neuron);
	F error(I neuron);
	
	Vi V pushInput(F inputs[]);
	Vi V pushInput(NeuronLayer& prev);
	Vi V pullOutput(F outputs[]);
	
	F weight(I index);
	V setWeight(I index, F value);
};

LP::LP(I _numInputs, I _numNeurons):
	__numInputs(_numInputs),
	__numNeurons(_numNeurons),
	weights(NULL),
	inputs(NULL),
	errors(NULL),
	weightsErrors(NULL)
{
	weights = new F[numWeights()];
	for (I i = 0; i < numWeights(); ++i)
		weights[i] = 0.f;
			
	inputs = new F[numInputs()];
	fill_n(inputs, numInputs(), 0.f);
	
	errors = new F[numNeurons()];
	fill_n(errors, numNeurons(), 0.f);
	
	weightsErrors = new F[numWeights()];
	fill_n(weightsErrors, numWeights(), 0.f);
}
		
LP::~LP()
{
	delete[] weights;
	delete[] inputs;
	delete[] errors;
	delete[] weightsErrors;
}
		
I LP::numInputs()
{
	R __numInputs;
}

I LP::numNeurons()
{
	R __numNeurons;
}

I LP::numWeights()
{
	R (numInputs() + 1) * numNeurons();
}

F LP::weight(I neuron, I input)
{
	R weight(input + neuron * (numInputs()+1));
}

F LP::weight(I index)
{
	R weights[index];
}

V LP::setWeight(I index, F value)
{
	weights[index] = value;
}

F LP::input(I index)
{
	if (index == numInputs())
		R 1.f;
	R inputs[index];
}

F LP::output(I neuron)
{
	F sum = 0.f;
	for (I i = 0; i < numInputs(); ++i)
		sum += weight(neuron, i) * inputs[i];
	R activate(sum);
}

F LP::error(I neuron)
{	
	R errors[neuron];
}


F& LP::weightValue(I neuron, I input)
{
	I index = input + neuron * (numInputs()+1);
	R weights[index];
}

V LP::pushInput(F inputs[])
{
	copy(inputs, inputs + numInputs(), this->inputs);
}

V LP::pushInput(NeuronLayer& prev)
{
	for (I i = 0; i < numInputs(); ++i)
		inputs[i] = prev.output(i);
}

V LP::pullOutput(F outputs[])
{				
	for (I i = 0; i < numNeurons(); ++i)
		outputs[i] = this->output(i);
}

// -------------- network ---------------

class NN
{	
private:
	NeuronLayer** layers;
	I numLayers;
	F* outputs;
public:
	NN(NeuronLayer* layers[], I numLayers);
	~NN();

	I numInputs();
	I numOutputs();
	F output(I i);
	
	V pushInput(F inputs[]);					// process
	V pullOutput(F outputs[]);				// decide
	
	V load(cchar* data);
};

NN::NN(NeuronLayer* _layers[], I _numLayers):
	layers(NULL),
	numLayers(_numLayers),
	outputs(NULL)
{
	// copy and check layers
	layers = new NeuronLayer*[numLayers];
	for (I i = 0; i < _numLayers; ++i)
	{
		I inputs, neurons;
		if (i > 0)
		{
			inputs = _layers[i]->numInputs();
			neurons = _layers[i-1]->numNeurons();
		}
		layers[i] = _layers[i];
	}

	outputs = new F[numOutputs()];
	fill_n(outputs, numOutputs(), 0.f);
}

NN::~NN()
{
	delete[] layers;
	delete[] outputs;
}

I NN::numInputs()
{
	R layers[0]->numInputs();
}

I NN::numOutputs()
{
	R layers[numLayers-1]->numNeurons();
}

F NN::output(I i)
{	
	R outputs[i];
}

V NN::pushInput(F inputs[])
{
	layers[0]->pushInput(inputs);
	for (I i = 1; i < numLayers; ++i)
		layers[i]->pushInput(*layers[i-1]);
	layers[numLayers-1]->pullOutput(outputs);
}

V NN::pullOutput(F outputs[])
{
	copy(this->outputs, this->outputs + numOutputs(), outputs);
}

struct f2
{
	f2():
		l(0)
	{
	}

	union
	{
		long long l;
		byte p[8];
	};
};

// are you experienced?
I getExp(F f)
{
	R ((*(uint*)(&f) & 0x7f800000) >> 23) - 128;
	//0 1111111 1 0000000 11111111 11111111
}

uint getMantissa(F f)
{
	R (*(uint*)(&f) & 0x007fffff);
}

uint getSign(F f)
{
	R ((*(uint*)(&f) & 0x80000000) >> 31);
}

uint packFloat(F f)
{
	f *= 4.f;

	uint sign = getSign(f);
	uint mantissa = getMantissa(f);
	I exp = -getExp(f);
	
	if (exp >= 16)
	{
		exp = 0;
		mantissa = 0;
	}
	
	R sign << 27 | exp << 23 | mantissa;
	// seee emmm mmmm   mmmm mmmm   mmmm mmmm
}

F unpackFloat(uint p)
{
	uint sign = (p & 0x8000000) >> 27;
	uint exp = (p & 0x7800000) >> 23;
	uint mantissa = p & 0x07fffff;
	
	exp = -(I)exp + 128;
	
	uint result = sign << 31 | exp << 23 | mantissa;
	R (*(F*)&result)/4.f;
}

V NN::load(cchar* data)
{
	// assert size is good
	I size = 0;
	for (I i = 0; i < numLayers; ++i)
		size += layers[i]->numWeights();
	size *= 28;
	size /= 8;
	//size *= 4;
	
	// decode and load
	V* decoded = decode(data);
	V* ptr = decoded;
	for (I i = 0; i < numLayers; ++i)
		for (I j = 0; j < layers[i]->numWeights(); j += 2)
		{
			f2 u;
			for (I k = 0; k < 7; ++k)
				u.p[k] = ptrReadNext<byte>(ptr);
			
			long long mask = 0x0fffffff;
			F w1 = unpackFloat((u.l & (mask << 28)) >> 28);
			F w2 = unpackFloat(u.l & mask);
			layers[i]->setWeight(j, w1);
			layers[i]->setWeight(j+1, w2);
			
			//layers[i]->setWeight(j, ptrReadNext<F>(ptr));
		}
		
	free(decoded);
}

// --------------- cler -------------------------

const I sampleSize = 32;

class Cler
{
public:
	Vi I decide(Im* input) = 0;
	Vi V load(cchar* data) = 0;
};

Cler* makeCler();
I makeDecision(Cler* cler, Im* input);


class LinearCler: public Cler
{
private:
	NeuronLayer* layers[10];
	NN* network;
public:
	LinearCler();
	~LinearCler();

	I decide(Im* input);
	V load(cchar* data);
};

LinearCler::LinearCler():
	network(NULL)
{
	layers[0] = new LP(sampleSize * sampleSize, 10);
	
	network = new NN(layers, 1);
}

LinearCler::~LinearCler()
{
	delete network;
	delete layers[0];
}

I LinearCler::decide(Im* input)
{
	F output[10];
	network->pushInput(input->pixels);
	network->pullOutput(output);
	
	F bestProb = -1e20f;
	I bestShot;											 
	for (I i = 0; i < 10; ++i)
		if (output[i] > bestProb)
		{
			bestShot = i;
			bestProb = output[i];
		}
		
	R bestShot;
}

V LinearCler::load(cchar* data)
{
	network->load(data);
}

// ================== MAIN ===================

Cler* makeCler()
{
	//Cler* cler = new FKernelCler();
	Cler* cler = new LinearCler();
	
	cchar* indata = loadBlob();
	cler->load(indata);							  
	
	R cler;
}

I makeDecision(Cler* cler, Im* input)
{
	if (!cler)
		R 42;
	
	Im* digits[3];
	splitDigits(input, digits);
	
	Im* samples[3];
	for (I i = 0; i < 3; ++i)
		samples[i] = prepareSample(digits[i], sampleSize, true);
	
	I result =
		cler->decide(samples[0]) * 100 +
		cler->decide(samples[1]) * 10 +
		cler->decide(samples[2]);
		
	for (I i = 0; i < 3; ++i)
	{
		delete samples[i];
		delete digits[i];
	}
		
	R result;
}

I main()
{
	Im in;
	printf("%i\n", makeDecision(makeCler(), &in));
	R 0;
}