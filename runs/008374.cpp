#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 0.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{1,9,0,6,0,11,1,25,1,1},
{1,9,5,8,0,14,1,35,1,1},
{1,12,12,14,0,24,1,33,1,1},
{6,13,14,16,0,33,7,34,13,7},
{19,13,19,30,4,30,18,35,21,22},
{26,13,29,34,14,24,24,28,28,27},
{29,20,26,37,14,26,27,28,29,29},
{26,22,29,37,21,34,26,28,33,30},
{29,26,27,36,23,35,27,30,35,32},
{32,28,31,40,22,35,29,28,36,34},
{33,23,33,33,26,35,30,29,31,34},
{22,26,17,32,26,35,31,29,26,22},
{5,34,13,16,25,33,15,29,21,4},
{2,32,10,11,14,34,8,31,8,4},
{1,33,6,12,2,33,6,37,8,2},
{0,27,0,8,2,11,2,29,6,0},
{5,13,4,8,0,11,6,27,3,1},
{10,13,13,21,0,15,7,29,14,13},
{22,18,21,30,0,27,17,31,21,25},
{26,21,30,32,0,30,22,32,27,30},
{27,22,28,35,7,32,27,32,29,27},
{32,26,27,32,14,28,26,32,29,25},
{28,26,28,30,22,38,26,32,27,27},
{25,30,28,32,21,35,22,32,27,29},
{24,32,27,33,27,34,24,32,26,30},
{24,36,32,35,31,34,25,39,29,29},
{28,39,32,36,27,37,28,39,29,33},
{33,35,34,41,29,39,27,39,29,37},
{32,36,35,42,28,39,29,39,30,32},
{18,36,27,34,16,38,28,39,28,28},
{12,35,12,22,2,35,12,40,20,19},
{1,25,3,1,0,10,1,31,4,7},
{9,13,9,12,0,11,7,19,9,14},
{22,16,28,20,0,19,18,21,20,27},
{27,17,21,26,0,33,25,22,29,32},
{27,20,21,22,4,32,27,22,31,20},
{31,21,19,23,22,25,26,21,30,26},
{29,24,18,24,22,26,23,21,29,25},
{28,33,21,20,23,35,26,21,28,25},
{14,33,17,11,30,26,19,22,14,12},
{9,36,26,20,27,25,17,29,10,18},
{20,40,29,26,27,24,25,29,17,26},
{24,34,33,27,26,17,22,30,16,29},
{26,36,29,33,30,19,23,34,22,33},
{32,36,36,43,28,16,23,38,29,35},
{34,33,34,34,16,13,25,38,32,39},
{21,30,22,27,2,9,22,34,29,27},
{8,25,9,8,0,0,11,12,6,9},
{16,15,13,14,0,14,11,11,16,24},
{27,19,22,24,0,23,25,14,26,31},
{28,26,23,26,4,33,28,11,30,25},
{31,26,17,15,17,30,28,11,34,26},
{29,28,19,13,22,26,23,10,31,25},
{29,25,15,15,23,26,26,10,31,19},
{21,25,16,13,27,34,25,13,17,16},
{9,29,18,8,25,23,18,20,7,8},
{7,29,19,20,24,18,13,24,7,15},
{15,34,23,24,27,13,20,28,14,25},
{21,37,24,30,29,9,18,30,18,27},
{24,36,28,28,29,8,18,35,23,29},
{26,33,34,35,28,6,19,38,29,34},
{31,30,35,27,16,8,21,35,28,39},
{26,25,31,28,2,6,22,31,27,28},
{17,23,20,11,0,0,18,6,12,19},
{24,13,12,9,0,14,19,10,18,31},
{28,17,19,18,4,27,28,10,25,32},
{29,20,18,20,16,30,30,10,31,32},
{32,16,17,16,21,21,29,9,35,26},
{29,17,16,13,23,19,25,2,30,19},
{24,14,17,10,30,26,24,0,28,16},
{20,17,14,21,28,16,26,3,16,14},
{7,25,14,17,20,13,10,14,5,6},
{5,28,13,24,31,19,4,18,3,6},
{13,32,20,30,33,18,14,28,15,23},
{21,36,27,28,27,15,7,33,19,27},
{22,30,31,31,30,15,8,36,24,28},
{26,30,32,33,28,11,8,31,29,33},
{27,30,38,30,16,5,6,32,27,33},
{34,24,37,23,1,0,6,16,21,34},
{23,21,22,10,1,0,5,0,15,21},
{27,14,4,0,0,16,23,3,13,32},
{29,14,17,0,12,24,30,10,22,32},
{33,14,13,8,17,25,31,9,28,33},
{31,12,12,8,23,22,28,2,34,21},
{29,13,11,8,30,21,26,5,34,18},
{23,13,10,10,25,28,29,3,29,16},
{18,15,15,13,18,17,23,12,17,13},
{6,27,12,19,21,25,16,17,6,10},
{5,28,18,27,31,26,15,25,13,11},
{12,35,20,32,34,23,12,26,25,22},
{20,33,26,30,32,23,20,34,23,28},
{21,31,30,33,31,22,20,31,20,29},
{24,30,36,34,28,12,13,29,29,30},
{27,24,38,31,17,13,13,26,22,34},
{34,21,26,20,1,5,6,4,21,34},
{30,18,6,5,0,0,0,0,7,27},
{28,9,3,0,12,16,28,0,0,34},
{33,9,5,0,16,23,31,0,8,31},
{33,9,3,0,21,24,33,0,21,33},
{31,11,3,1,33,24,27,0,31,29},
{25,13,3,10,25,23,31,3,36,23},
{22,10,3,20,25,36,32,6,35,21},
{18,20,5,27,18,30,21,17,33,18},
{6,26,13,27,23,30,22,24,26,5},
{5,28,19,31,31,34,18,27,29,11},
{12,34,30,32,33,40,19,31,27,25},
{20,29,32,32,31,41,21,31,24,29},
{21,31,33,39,31,36,20,28,25,25},
{24,24,37,37,29,27,19,26,24,31},
{28,24,28,21,15,18,13,17,18,34},
{34,21,18,11,0,14,8,0,4,34},
{30,18,0,0,0,4,5,0,2,33},
{29,11,3,4,16,15,31,0,0,25},
{34,10,4,4,18,28,31,0,12,30},
{33,10,3,7,33,25,34,0,16,33},
{29,8,0,10,30,28,31,0,29,28},
{23,10,2,14,18,28,31,6,34,22},
{22,14,2,18,14,22,32,12,36,21},
{18,20,11,26,11,20,28,23,33,19},
{6,26,28,32,24,21,22,28,35,17},
{5,29,27,34,30,25,19,26,33,24},
{12,32,30,33,33,37,22,31,28,28},
{20,27,34,35,35,36,28,28,27,27},
{21,30,35,27,35,36,32,28,30,29},
{25,24,32,26,33,36,31,21,25,33},
{28,24,19,25,19,35,27,4,15,35},
{32,21,6,8,5,23,20,0,10,32},
{32,18,0,2,6,11,10,0,0,32},
{34,10,0,4,17,11,31,0,13,2},
{34,8,3,4,30,13,35,0,21,14},
{32,8,3,7,36,7,33,0,26,23},
{26,8,3,8,34,4,27,6,26,24},
{24,14,6,9,24,4,26,9,30,26},
{22,16,15,9,17,7,27,22,32,26},
{18,20,25,12,17,5,21,28,27,23},
{6,24,30,9,24,7,4,25,17,30},
{5,29,31,18,30,26,2,30,18,29},
{12,33,31,24,34,35,17,28,24,27},
{20,26,34,28,37,31,18,28,27,29},
{21,25,28,40,36,27,24,26,30,31},
{25,24,19,39,32,34,30,21,31,31},
{28,24,10,29,19,35,30,0,28,33},
{32,19,0,22,13,33,29,0,15,33},
{28,18,0,7,9,17,19,0,11,30},
{34,8,0,5,18,15,33,0,23,7},
{34,8,0,6,30,9,35,0,26,14},
{33,9,3,6,30,6,32,3,31,17},
{25,11,6,6,28,6,29,9,29,14},
{23,14,12,6,19,8,27,15,25,16},
{22,16,29,10,18,4,21,27,22,17},
{18,20,30,9,15,4,12,24,17,27},
{6,28,29,7,24,15,3,22,11,17},
{5,28,27,13,33,19,1,28,13,12},
{12,32,25,22,39,19,10,28,14,23},
{20,26,22,26,34,24,20,28,22,29},
{23,25,17,30,33,29,22,24,25,26},
{25,24,10,35,29,33,30,9,27,30},
{28,24,0,37,20,31,30,0,30,32},
{32,19,0,37,14,33,31,0,30,32},
{25,18,0,24,13,31,29,0,18,27},
{34,8,0,9,18,15,31,0,28,7},
{34,8,3,20,18,10,34,3,30,9},
{30,9,6,18,18,13,36,9,35,9},
{25,12,14,14,16,13,29,11,28,9},
{23,16,21,14,16,10,23,25,19,10},
{22,16,30,13,13,10,20,25,15,9},
{18,22,29,18,17,16,13,21,14,12},
{6,28,23,10,30,15,6,29,8,6},
{5,27,27,19,36,11,4,28,12,8},
{12,32,22,16,37,21,12,27,14,21},
{22,21,16,18,35,30,23,27,18,26},
{23,25,9,25,32,30,24,20,20,25},
{25,24,9,32,30,30,33,4,26,29},
{27,21,8,37,18,31,33,0,29,32},
{27,18,8,39,8,34,34,0,31,30},
{21,18,5,32,8,31,34,0,30,18},
{30,8,0,24,14,23,29,0,31,10},
{34,9,6,24,15,19,37,6,33,10},
{32,12,14,22,12,17,36,11,34,16},
{26,12,21,15,12,14,27,19,24,15},
{24,16,25,17,12,21,25,24,18,13},
{24,16,28,16,13,18,23,24,13,15},
{19,22,27,24,14,14,20,30,12,14},
{7,27,24,5,28,12,9,29,9,9},
{7,27,19,14,37,18,9,26,15,12},
{15,32,18,17,36,22,17,29,18,22},
{22,21,14,20,34,27,20,26,17,25},
{24,25,14,28,29,25,24,20,21,25},
{23,24,8,31,29,29,28,0,26,28},
{23,19,8,37,21,31,33,0,30,30},
{27,18,9,37,20,34,33,0,31,28},
{18,18,10,32,14,29,31,0,30,16},
{20,8,6,22,9,29,28,3,32,13},
{34,11,15,24,9,24,36,11,36,21},
{29,12,21,32,9,22,37,12,31,21},
{27,14,28,24,9,23,26,22,24,18},
{24,16,29,16,9,16,19,23,16,22},
{23,17,30,11,17,11,19,23,16,20},
{22,21,25,14,18,17,20,31,13,23},
{8,25,24,8,24,14,13,28,9,11},
{13,27,27,15,33,19,10,27,13,14},
{20,27,21,24,30,27,18,28,18,21},
{23,21,22,27,30,26,22,20,25,24},
{19,25,16,29,30,24,23,4,25,27},
{23,23,19,33,26,31,30,0,27,30},
{28,19,16,37,21,34,30,0,29,30},
{23,18,20,32,17,32,33,0,30,18},
{15,18,10,24,18,11,20,0,19,16},
{12,10,14,24,4,20,12,7,20,12},
{28,17,26,35,4,40,31,12,38,22},
{33,17,33,33,4,34,36,19,27,27},
{27,19,35,29,4,28,29,25,25,18},
{27,20,32,29,4,28,27,23,23,24},
{25,26,33,23,13,21,24,30,21,24},
{25,25,28,23,14,18,23,29,22,25},
{22,25,28,23,20,18,16,29,20,27},
{18,22,25,24,32,27,19,29,17,19},
{22,27,25,26,31,29,21,26,17,21},
{20,25,21,28,27,27,26,20,20,26},
{22,29,16,29,29,29,28,4,24,28},
{28,29,21,37,26,31,25,0,27,28},
{23,24,21,30,18,32,30,0,30,24},
{15,23,24,18,15,18,24,0,26,16},
{5,23,15,5,12,6,7,0,11,9},
{2,14,20,16,0,18,5,8,8,2},
{12,18,35,30,0,23,12,15,20,14},
{23,18,38,36,0,40,31,18,35,24},
{34,20,36,36,0,37,35,22,35,32},
{33,26,36,31,0,26,34,32,33,25},
{32,27,36,28,9,23,34,31,32,24},
{29,26,36,26,10,23,30,29,27,22},
{28,24,36,26,23,27,26,29,25,25},
{19,22,39,22,31,30,24,29,21,21},
{20,28,38,25,33,28,22,22,21,23},
{24,25,37,32,27,26,24,7,27,26},
{27,30,34,32,29,31,26,0,30,24},
{22,30,33,27,27,29,30,0,28,17},
{15,25,33,17,14,10,23,0,23,16},
{5,24,32,3,11,4,7,0,11,9},
{1,24,17,0,8,1,1,0,1,2},
{0,19,29,10,0,10,0,6,1,1},
{0,24,26,12,0,14,0,15,4,0},
{2,19,26,11,0,15,4,18,6,5},
{2,20,26,15,0,11,5,16,12,6},
{13,22,26,16,0,18,10,19,17,22},
{20,24,23,20,8,20,18,20,21,17},
{21,22,23,25,16,23,22,26,27,20},
{27,21,23,28,26,32,31,27,29,25},
{29,23,23,28,34,32,32,26,28,27},
{20,28,24,19,30,27,16,22,20,12},
{12,28,24,7,28,13,14,4,16,3},
{2,29,24,5,29,4,3,0,10,2},
{1,28,28,2,28,1,1,0,1,1},
{0,23,23,0,19,0,0,0,0,0},
{0,27,24,0,12,0,0,0,0,0},
{0,22,16,0,11,0,0,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
