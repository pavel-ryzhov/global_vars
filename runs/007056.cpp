#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {-0.00319,-0.00153,0.00233,0.00859,-0.14440,-0.18344,-0.22579,0.11029,0.17006,0.10806,-0.02984,-0.12046,-0.09342,-0.17066,-0.42839,-0.21610,-0.05610,-0.13404,-0.00510,0.10105,0.03422,-0.27119,-0.18441,0.15436,0.21847,-0.08319,0.14764,0.35117,0.32197,0.21107,-0.14328,-0.42955,-0.44432,-0.55191,-0.01714,0.01172,0.10033,0.20359,-0.04427,-0.19540,-0.01923,0.15309,-0.04271,0.11182,-0.30484,-0.13563,0.04888,-0.20743,-0.03271,-0.22392,-0.33106,-0.08813,-0.04166,0.14262,0.10520,0.09529,0.13077,0.06250,0.05261,0.23790,0.10614,0.02493,-0.41504,-0.19934,-0.37073,0.02952,-0.03310,-0.12070,-0.00350,0.25939,0.01669,0.05710,0.09894,0.09520,0.00779,0.00168,-0.19792,0.17025,0.28674,0.18818,-0.03037,-0.16873,0.12201,0.03107,-0.02051,0.11256,0.34613,0.35135,0.16872,0.10369,0.03663,0.08909,-0.06310,0.02767,-0.07644,0.16451,0.24142,0.37539,0.08751,-0.31716,-0.06368,0.17927,0.20397,0.70138,0.62707,0.57554,0.11415,0.11757,0.03645,0.09378,-0.06906,-0.07233,0.00847,0.24103,0.10186,0.27267,0.08199,-0.44672,-0.39253,0.12832,0.37982,0.67851,0.62284,0.50736,-0.00776,0.12002,0.03594,0.02913,0.06449,-0.05521,-0.24681,-0.32011,0.14788,0.14945,0.05946,-0.11002,-0.36520,-0.27979,-0.06662,0.26456,0.20465,0.14069,-0.01671,0.11328,0.03592,0.03071,-0.12575,-0.24487,-0.39808,-0.33037,-0.06564,0.28146,0.34187,-0.00654,-0.13193,-0.09873,-0.04980,-0.10707,-0.08854,-0.17835,-0.01894,0.00316,0.03497,0.03043,-0.13171,-0.54559,-0.12627,-0.16730,-0.16990,0.21344,0.29893,0.18700,0.03797,0.18508,-0.16462,-0.14217,-0.16405,-0.25008,-0.14422,-0.00106,-0.01923,-0.02501,-0.19248,-0.23669,-0.39977,-0.23267,0.02015,0.21780,0.16911,0.10712,0.43365,0.28464,0.02359,0.04458,-0.16232,-0.00901,-0.24370,-0.00203,-0.01952,-0.02427,-0.19354,-0.23921,-0.42666,-0.40721,-0.41534,0.13034,-0.18033,-0.11726,0.13002,0.29033,-0.00469,0.05206,0.01322,-0.03438,-0.17049,-0.00086,-0.02329,0.03002,-0.18342,-0.06470,-0.17038,-0.26900,-0.38761,-0.07304,-0.20334,-0.39960,-0.15772,0.11304,-0.02115,-0.05409,0.00618,-0.06711,-0.13422,-0.01862,-0.02369,0.03614,-0.08855,0.02639,0.12783,-0.02483,-0.41147,-0.24780,-0.38107,-0.46560,-0.24905,0.09506,0.07205,0.01224,0.04318,-0.13657,-0.09746,-0.02236,0.09383,0.04269,-0.02184,0.29180,0.56680,0.19851,0.04864,-0.34855,-0.23796,-0.27538,-0.27223,-0.06744,0.14139,-0.11102,0.21496,-0.08436,-0.12923,0.12585,0.09971,0.19059,0.04081,0.36604,0.48451,0.37087,0.16514,-0.17435,-0.04842,-0.17674,-0.01248,0.16347,0.22126,-0.03570,0.02469,-0.16435,-0.17786,0.09489,0.00148,0.24059,0.18519,0.23530,0.15128,0.42010,-0.16784,0.00097,-0.09429,-0.12901,-0.01253,0.11554,0.09059,-0.07928,-0.19258,-0.16211,-0.03120,0.19284,0.00211,0.01636,0.20924,0.09756,-0.14366,0.29768,0.10391,0.15253,-0.08341,-0.18699,-0.26105,-0.43402,-0.00980,-0.17272,-0.06263,0.19046,-0.03170,-0.00057,0.46226,};
float weights_input_1[] = {0.00055,-0.01014,-0.01239,0.00626,0.05464,0.20174,0.13437,0.08752,0.00851,0.13641,0.03431,-0.06587,-0.00724,0.17361,0.08572,-0.04540,0.00445,0.00409,0.00068,-0.02289,-0.00434,0.03873,0.18812,0.08048,0.12767,0.01280,0.19498,0.12724,0.05881,-0.11240,0.00846,0.10630,0.12895,-0.03409,-0.03276,-0.00177,-0.01111,-0.00439,0.02613,0.05872,0.05839,0.14930,0.03745,0.15043,0.30432,0.26783,0.12901,-0.02648,0.00526,0.05526,0.10816,-0.03310,-0.02775,-0.05025,0.01418,0.02404,0.03448,0.01844,0.03678,0.00619,-0.12003,0.13951,0.24235,0.17519,0.10322,0.06172,-0.04699,0.12955,0.04605,-0.06865,-0.00111,-0.01354,-0.00951,0.02390,-0.02081,0.04816,0.02734,0.11815,0.08149,0.01957,-0.00984,0.00243,-0.01155,0.13009,0.03807,0.00837,-0.01306,-0.03588,-0.02438,-0.01274,-0.01332,-0.00690,0.01107,0.09624,0.03351,0.15247,0.10271,-0.20286,-0.26859,0.04543,0.12077,0.23023,0.08136,0.05291,0.03930,-0.05110,-0.06080,-0.01563,-0.01584,-0.01912,-0.01923,0.00729,-0.06418,0.02304,-0.17188,-0.27609,-0.14995,0.06945,0.02435,0.11682,-0.05950,0.09830,0.02485,-0.04909,-0.06459,-0.01641,-0.01377,-0.02056,-0.02243,-0.04581,-0.14060,-0.26891,-0.27270,-0.41779,-0.18406,-0.04083,-0.14022,0.01223,-0.07226,0.10650,0.06421,-0.05524,-0.06476,-0.02920,-0.01440,-0.02266,-0.03569,-0.07002,-0.31151,-0.21294,-0.12522,-0.27007,-0.26245,-0.08703,0.05839,0.13546,0.05554,0.09472,0.04571,-0.08742,-0.05862,-0.03247,-0.01572,-0.02098,-0.03710,-0.21317,-0.15737,-0.14627,-0.24557,-0.21099,-0.14571,0.08902,-0.02929,0.04358,-0.07828,-0.02964,-0.13533,-0.09343,-0.05899,-0.03003,-0.03235,-0.03867,-0.13258,-0.24569,-0.21840,-0.16484,-0.08654,-0.01785,0.29905,0.34157,0.17808,0.00550,-0.29298,-0.25582,-0.32366,-0.13094,-0.07786,-0.02294,-0.02794,-0.06579,-0.17032,-0.29953,-0.03078,-0.17931,0.02904,0.06336,0.32795,0.39046,0.11681,-0.20902,-0.45360,-0.40992,-0.32701,-0.16415,-0.08935,-0.02497,-0.05817,-0.10937,-0.20699,-0.34607,-0.28371,-0.27979,0.10304,0.07114,0.41943,0.29997,-0.13890,-0.37409,-0.44847,-0.43778,-0.30325,-0.14265,-0.05838,0.00117,-0.05622,-0.07412,-0.17942,-0.33946,-0.23107,-0.14529,0.16300,0.21349,0.20308,0.10703,-0.16748,-0.32632,-0.39187,-0.26433,-0.22724,-0.06267,0.02895,0.01702,-0.01232,-0.07766,-0.16423,-0.28909,0.00860,0.08582,0.32127,0.16424,0.01222,-0.01679,-0.08659,-0.18324,-0.18167,-0.05131,0.06178,0.11204,0.02375,0.03645,-0.01348,-0.07334,-0.12679,-0.14256,0.21416,0.17542,0.08210,0.05535,0.06593,0.10176,-0.11200,-0.10648,0.05285,0.08176,0.04001,0.10599,0.00369,-0.01277,-0.00146,-0.05420,-0.01210,-0.04354,0.09532,-0.05715,0.00448,0.03086,-0.12634,-0.15588,-0.02825,0.13237,0.20475,0.16719,0.18568,0.03580,0.00437,-0.01706,0.00043,0.00215,0.07615,0.06548,0.00712,-0.01671,-0.08832,-0.29101,-0.28780,-0.11111,0.05158,0.18375,0.18725,0.25553,0.15039,0.01748,0.00412,0.00097,0.02006,};
float weights_input_2[] = {0.00104,-0.01540,-0.01944,-0.03574,-0.04358,0.04381,0.02226,-0.00877,-0.06753,-0.02346,0.01810,-0.04593,0.05885,0.12382,0.06256,-0.01739,-0.00302,0.01235,-0.00089,-0.02115,-0.05176,0.01331,0.00666,-0.00382,0.03505,-0.04543,0.02208,-0.00409,-0.02472,-0.06556,-0.02351,0.07432,0.12554,-0.03169,-0.00263,-0.01151,-0.00513,-0.02779,-0.01540,0.05606,0.05116,0.00171,-0.02050,-0.13678,0.07806,0.18413,0.11898,0.09223,-0.02174,0.08924,0.18281,0.01202,0.00138,-0.03099,0.00772,-0.00310,-0.02290,0.06473,0.07188,-0.00170,-0.18886,-0.08109,0.07848,0.18282,0.17844,0.08885,-0.05191,0.18402,0.05643,-0.01075,-0.00184,-0.00174,-0.00443,-0.00476,-0.02255,0.09888,0.15243,0.12936,0.00374,-0.03450,0.00919,0.11555,0.05467,0.12386,0.05709,0.08506,0.06287,-0.00883,-0.00733,-0.00222,-0.01060,-0.02090,0.00806,0.13910,0.18709,0.11864,0.11396,-0.06060,-0.06699,0.07107,0.18518,0.13555,0.08247,0.09989,0.12265,0.02072,-0.02209,-0.01387,-0.01212,-0.03904,-0.01529,0.06842,0.06711,0.09592,-0.00830,-0.12809,-0.08909,-0.02441,0.09016,0.03911,-0.02031,0.14615,0.10593,0.01154,-0.04558,-0.00667,-0.01325,-0.04292,-0.05656,0.03021,0.00829,0.04897,-0.10078,-0.14438,-0.26032,-0.20863,-0.14962,0.00608,0.00516,0.08289,0.13883,-0.01536,-0.04196,-0.02233,-0.01203,-0.04406,-0.04365,0.00307,-0.02698,0.13630,0.19658,-0.16499,-0.33318,-0.20254,-0.00873,0.11521,0.05712,0.08418,0.07618,-0.06238,-0.04976,-0.03720,-0.01422,-0.04513,-0.04510,-0.04456,0.13200,0.15171,0.20930,-0.07608,-0.22150,-0.04429,0.14956,0.24273,-0.00291,0.03798,-0.06906,-0.09195,-0.06268,-0.03618,-0.01951,-0.05233,-0.04187,-0.11800,-0.11464,0.21551,0.15978,0.15655,0.36866,0.52393,0.53789,0.15458,-0.23320,-0.17826,-0.26077,-0.14418,-0.08102,-0.03711,-0.01779,-0.04613,-0.00049,-0.01537,0.02798,0.00018,0.02962,0.19004,0.47042,0.64765,0.40151,-0.08258,-0.37911,-0.31871,-0.26885,-0.14875,-0.10549,-0.03932,-0.01569,-0.03107,0.01502,-0.07076,-0.10167,-0.20491,0.02013,0.17824,0.54320,0.56502,0.17513,-0.17150,-0.28029,-0.19803,-0.08797,-0.09852,-0.09287,-0.02345,-0.01172,-0.05007,-0.03733,-0.16925,-0.11038,-0.20817,-0.01789,0.16830,0.38439,0.38409,0.11725,-0.12872,-0.21681,-0.11123,-0.10415,-0.09226,-0.03197,-0.01107,-0.00029,-0.05939,-0.11256,-0.23788,-0.13683,-0.19293,-0.08845,-0.08746,0.09437,0.11162,0.09588,-0.12293,-0.21720,-0.15962,0.00087,0.01962,-0.02298,0.03241,-0.00719,-0.06507,-0.10306,-0.12166,0.11410,-0.03934,-0.20528,-0.22576,0.08047,0.10184,-0.02749,-0.09448,-0.01537,-0.09440,-0.02998,0.04650,-0.03036,-0.00046,0.00146,-0.09143,-0.03223,-0.11355,-0.05182,-0.09979,-0.20027,-0.20164,-0.19721,-0.13690,-0.10808,0.09186,0.12545,0.10969,0.14704,-0.03762,0.00785,-0.02862,-0.00097,-0.00221,0.04493,-0.01271,-0.04514,-0.06229,-0.11968,-0.33518,-0.26620,-0.20147,0.05324,0.32823,0.23177,0.25683,0.18071,-0.00935,0.00813,0.00118,-0.12861,};
float weights_input_3[] = {0.00089,0.05809,0.05608,-0.04065,0.14157,0.50102,0.49602,0.39389,0.09479,0.09192,-0.03816,-0.04130,0.11638,0.26156,0.33813,0.01495,-0.03887,0.00573,0.00211,0.03198,0.03586,0.09779,0.31353,0.35656,0.30714,0.00162,0.25736,0.11259,0.01750,-0.08403,0.11287,0.40550,0.48084,0.10235,0.00837,-0.05880,-0.02370,-0.02889,0.09742,0.10126,0.20228,0.42573,0.19075,0.30887,0.03550,0.16002,0.27655,0.07419,0.19806,0.24646,-0.00447,-0.03435,0.02315,-0.07183,-0.01984,-0.05668,0.03380,-0.02710,0.10424,-0.01827,0.06751,0.25692,0.41182,0.10796,0.24086,0.15936,0.21402,-0.02023,-0.13003,-0.14788,-0.03233,-0.03182,-0.02503,-0.05680,0.01322,-0.02745,-0.12672,-0.06477,0.13156,-0.01043,0.05258,0.12312,0.01719,0.15531,-0.00421,-0.21413,-0.32981,-0.18802,-0.03966,-0.03479,-0.02945,-0.06901,-0.02390,-0.09063,-0.22555,-0.05790,-0.18116,-0.17283,-0.33109,0.15060,0.08442,0.08412,-0.05714,-0.22961,-0.26694,-0.12081,-0.04191,-0.03530,-0.03407,-0.01666,-0.03641,-0.19759,-0.34492,-0.41159,-0.41325,-0.40426,-0.06339,0.29906,0.13708,0.00874,-0.09036,-0.11059,-0.13955,-0.11142,-0.04545,-0.04065,-0.03448,-0.01754,0.01119,-0.22893,-0.42992,-0.53763,-0.61700,-0.63810,-0.23131,0.20770,0.03270,-0.01030,0.11870,0.26646,-0.13109,-0.06426,-0.04313,-0.04267,-0.03485,-0.02530,0.02592,-0.17265,-0.42356,-0.37403,-0.33583,-0.29250,-0.14881,0.07832,0.05866,0.05584,0.32721,0.39556,-0.19636,-0.05938,-0.04535,-0.04685,-0.03399,-0.02511,0.02376,-0.19651,-0.27493,-0.31823,-0.60730,-0.24082,-0.13204,0.10464,-0.13439,-0.04666,0.10417,-0.04229,-0.04302,-0.08577,-0.05048,-0.04629,-0.03562,-0.02495,-0.06946,-0.32974,-0.42424,-0.75257,-0.71810,-0.64777,-0.33798,-0.16354,-0.26262,-0.20626,0.03564,-0.15199,-0.12423,0.03096,-0.08256,-0.04378,-0.03081,-0.06694,-0.12688,-0.49440,-0.48209,-0.77476,-0.49741,-0.26923,0.05885,0.04757,-0.15502,-0.20628,-0.06251,-0.16348,-0.11385,0.14924,-0.03936,-0.04682,-0.01146,-0.06619,-0.14393,-0.23003,-0.27748,-0.34963,-0.03462,-0.13141,0.17332,0.21479,-0.19333,-0.29240,-0.14077,-0.22070,-0.14300,0.13075,-0.06140,-0.02648,-0.00540,-0.00491,0.09248,0.07201,0.15567,0.03788,0.13309,0.04408,0.02273,0.02942,-0.12585,-0.28659,-0.12179,-0.17312,0.01572,0.21081,-0.04016,-0.01655,-0.02877,0.00841,0.18230,0.16139,0.33766,0.29923,0.27149,0.16800,0.09794,-0.02678,0.10942,0.03364,0.08187,0.11029,0.24897,0.07386,-0.03869,-0.03082,-0.02524,-0.00404,0.20374,0.37069,0.42581,0.20550,0.02958,0.07411,0.03720,0.37312,0.12438,0.13260,0.21313,0.31357,0.02809,-0.02842,0.03257,-0.02865,0.00024,-0.01809,0.18624,0.44338,0.59430,0.16366,0.04345,0.08705,0.12383,0.29633,0.21802,-0.06092,0.34763,0.16975,-0.03447,0.00922,0.00150,-0.08974,0.00083,0.00351,0.03718,0.22021,0.27276,0.27240,0.28463,-0.00866,-0.11125,0.15917,-0.10441,-0.16660,0.00117,0.06661,-0.03440,0.03418,0.00178,-0.00029,0.15890,};
float weights_input_4[] = {-0.00138,0.00268,0.00143,-0.16430,-0.26718,-0.34979,-0.34580,-0.29471,-0.17553,-0.06233,0.06431,-0.00664,0.06020,-0.16958,-0.26413,-0.25497,-0.06722,0.00558,-0.00039,-0.02308,-0.08811,-0.02399,-0.14824,-0.22341,-0.29569,-0.22282,-0.08977,-0.04864,-0.00296,-0.00272,-0.18091,-0.07426,-0.19116,-0.22422,-0.04464,-0.04871,-0.02335,-0.07561,-0.03769,-0.03284,-0.07467,-0.27545,-0.02121,-0.24747,-0.32382,-0.14501,-0.09348,0.01046,-0.11414,-0.11973,-0.26989,-0.13626,-0.01295,-0.07227,-0.02480,-0.05610,-0.04075,-0.03157,-0.01120,-0.07798,-0.08998,-0.07087,-0.06328,0.02397,0.20699,0.08639,-0.02110,-0.11575,-0.18193,-0.08864,-0.01150,-0.01881,-0.02387,-0.05680,0.00420,-0.05865,0.09083,-0.00750,-0.05825,-0.13518,0.03682,0.30065,0.24249,0.09728,0.09368,-0.00942,-0.03322,-0.10044,-0.03535,-0.01696,-0.01888,-0.05285,0.00354,-0.10307,0.00019,0.00292,-0.11620,-0.09086,0.09767,0.53937,0.26510,-0.02555,0.14484,0.08473,-0.02437,-0.07206,-0.03391,-0.02793,-0.01947,-0.05140,0.00404,-0.05245,-0.01252,-0.11202,-0.21229,-0.26958,-0.00197,0.34130,0.17348,-0.02197,0.09059,0.07840,0.01372,-0.03706,-0.02713,-0.02695,-0.02005,-0.04849,-0.03196,-0.00894,0.00994,0.01781,-0.09315,-0.24409,-0.03818,0.16202,0.00313,-0.01906,-0.02419,-0.00657,-0.01155,-0.06061,-0.02704,-0.05220,-0.01890,-0.04750,0.01125,-0.01495,0.12426,0.06586,0.02067,-0.02508,0.14207,0.10360,-0.10972,-0.04457,0.01109,0.02577,-0.12921,-0.06224,-0.06326,-0.04375,-0.01999,-0.04858,0.01294,0.10876,0.16102,0.11374,-0.02967,-0.06869,-0.01366,0.03170,0.09480,0.08142,-0.01544,0.00494,-0.07513,-0.07304,-0.06427,-0.04202,-0.02569,-0.05450,0.02175,0.03353,0.02141,0.00855,-0.08711,-0.10969,-0.15965,0.03031,0.11850,0.01500,0.02489,0.12935,-0.06833,-0.04999,-0.06297,-0.08131,-0.02253,-0.04523,0.08388,0.07463,-0.05039,-0.07870,-0.13414,-0.11435,-0.07613,0.06292,0.26956,0.05414,0.06270,0.17552,-0.04599,0.01413,-0.03333,-0.07943,-0.00960,-0.01810,0.11194,0.08641,-0.03010,-0.14271,-0.18660,-0.11299,-0.02513,0.17275,0.41109,0.16762,0.07290,0.19743,0.05131,0.06266,-0.04852,-0.05706,-0.00199,-0.03319,0.13805,0.13538,0.02369,-0.14274,-0.19753,-0.13427,-0.02539,0.22809,0.34832,0.18052,0.20089,0.06625,-0.01558,-0.01223,-0.06341,-0.02744,-0.00538,-0.03365,0.09764,0.09173,-0.06322,-0.28776,-0.41891,-0.24060,-0.03013,0.11930,0.29192,0.17047,0.07197,-0.13778,-0.14665,-0.07397,-0.05103,-0.06670,-0.02182,-0.05234,0.06035,0.10008,-0.10900,-0.27818,-0.28319,-0.23720,-0.09551,0.21035,0.21570,0.16395,-0.01045,-0.11603,-0.13362,-0.08165,0.00041,-0.01629,-0.00112,-0.06841,0.03207,0.06998,-0.01378,-0.13433,-0.14881,-0.17655,-0.06258,0.10666,0.12663,-0.08456,0.11765,0.07085,0.02390,-0.00129,0.01028,-0.07557,0.00080,-0.01203,-0.03960,-0.06211,0.00157,0.00589,0.11289,0.01457,-0.13754,0.07049,0.19375,0.25413,0.19966,0.16512,0.14039,-0.01268,0.01305,-0.00062,-0.05679,};
float weights_input_5[] = {-0.00133,-0.01277,-0.01078,-0.13457,-0.25045,-0.54088,-0.43000,-0.73515,-0.44572,-0.21353,0.20134,0.22821,-0.07195,-0.36075,-0.45892,-0.35166,0.12007,-0.00801,-0.00140,-0.07727,-0.01641,-0.01031,-0.07035,-0.09102,-0.67613,-0.44440,-0.36080,-0.24544,-0.07957,-0.13833,-0.18909,-0.06624,-0.12206,-0.24389,0.04277,0.00416,-0.06647,-0.05840,-0.03228,-0.08686,0.11923,-0.02416,-0.43472,-0.41409,-0.46621,-0.36486,-0.43677,-0.26864,-0.25921,0.00779,0.11969,0.13264,0.12393,-0.06593,-0.06512,0.01285,-0.09781,-0.06816,0.01842,-0.21529,-0.48958,-0.24746,-0.20853,-0.27376,0.19873,-0.08025,-0.36786,-0.19590,0.10428,0.14837,0.12158,-0.07695,-0.06603,0.01325,-0.01241,-0.09371,0.28227,-0.24111,-0.25824,-0.09547,0.23136,0.48126,0.32858,0.13583,0.05364,0.04486,0.33110,0.06275,0.00691,-0.07583,-0.03075,0.01321,0.00145,-0.08348,0.04585,-0.20177,-0.29855,-0.21128,0.20618,0.58856,0.07439,-0.13431,0.13841,0.19612,-0.06108,-0.14489,-0.19004,-0.10459,-0.03210,0.00484,-0.00698,-0.06671,-0.12482,-0.47572,-0.39536,-0.34567,0.40765,0.57773,0.28773,0.02509,0.13788,0.06916,-0.15464,-0.14544,-0.16789,-0.10503,-0.03183,0.03632,-0.09861,-0.20756,0.04536,-0.01881,-0.02162,0.03901,0.63073,0.53295,0.28107,0.30242,0.12321,-0.19639,-0.24326,-0.36612,-0.17985,-0.12752,-0.03125,0.03402,0.00975,-0.15045,-0.06519,-0.38209,-0.04713,0.41123,0.66364,0.56850,0.23472,0.14578,-0.05656,-0.40027,-0.45845,-0.30935,-0.17877,-0.07654,-0.03331,0.03562,0.00543,-0.03562,0.03461,0.04842,0.20780,0.43624,0.33293,0.14510,0.32785,0.05750,-0.17805,-0.18664,-0.45442,-0.08476,-0.11161,-0.07375,-0.03687,0.03134,0.01346,0.10146,0.43910,0.34814,0.41857,0.32406,0.01400,0.16486,0.36106,0.29727,0.17868,0.23975,-0.09127,-0.12146,0.06905,-0.07795,-0.03323,0.03822,0.05126,0.09073,0.41601,0.79732,0.43717,-0.09885,-0.03614,0.21266,0.30409,-0.00525,0.24037,0.25585,0.11990,-0.04714,0.11195,-0.07522,-0.03353,0.02229,0.10461,-0.04101,0.13423,0.33044,-0.06451,-0.13688,0.05291,0.14659,0.04473,-0.23254,0.17282,0.20924,0.14507,0.00178,0.11364,-0.03880,-0.03207,0.00533,0.15092,-0.05483,0.04941,0.10013,-0.18617,-0.16362,-0.12483,0.07436,-0.16320,-0.29602,0.14902,0.16982,0.05273,-0.05533,0.11731,0.00440,-0.05706,0.01659,0.22873,0.26791,0.02579,-0.00556,-0.17549,-0.28602,-0.20730,-0.19604,-0.23480,-0.25466,0.13274,0.02621,0.04439,0.12815,0.13175,-0.10195,-0.05714,-0.06112,0.15108,0.11943,-0.10377,-0.14425,-0.02306,0.13226,0.15120,0.20897,-0.05500,-0.02196,-0.00608,0.09099,0.32925,0.29846,0.06335,-0.06063,-0.00133,-0.03899,0.10501,0.23100,-0.14759,-0.01958,-0.06786,-0.09532,0.05010,0.22104,0.24832,0.13347,0.18610,0.39999,0.32075,0.28478,0.00749,-0.04636,0.00024,-0.03275,-0.04191,-0.07912,-0.04710,-0.23943,-0.01865,0.01287,0.12266,0.24745,0.54144,0.71192,0.55447,0.33245,0.21374,-0.00081,0.00513,-0.00081,0.17510,};
float weights_input_6[] = {0.00352,-0.00792,-0.00819,-0.06938,0.03073,0.04680,0.18763,0.16932,-0.04765,-0.12819,-0.27455,-0.08929,0.21609,0.40333,0.33296,0.45877,0.00724,0.06700,0.00345,-0.05786,-0.10053,0.01087,0.00109,-0.26808,-0.32977,0.26437,-0.06831,-0.22490,-0.11928,-0.05016,0.14130,0.22425,0.29956,0.65287,-0.02680,-0.02725,-0.04975,-0.15605,-0.04574,-0.01174,-0.04234,-0.39429,-0.05448,0.00601,0.32185,0.19868,0.00500,0.05910,-0.05386,0.02433,0.34630,0.17419,-0.04712,-0.14526,-0.06563,-0.08687,-0.07432,-0.10595,-0.10984,-0.06937,0.19153,0.17706,0.14073,0.18828,0.04608,-0.54115,-0.19275,0.07348,0.08421,-0.35093,-0.14036,-0.08560,-0.05095,-0.08894,-0.05681,0.16690,0.26987,0.06899,-0.07156,0.08035,-0.05753,-0.06711,-0.46154,-0.64269,-0.30585,-0.07144,-0.46674,-0.47167,-0.42461,-0.10629,-0.02403,-0.07376,0.03682,0.04429,0.10274,0.13500,-0.00446,-0.18251,-0.24438,0.07685,-0.45114,-0.70649,-0.56120,-0.92073,-0.82783,-0.69591,-0.36323,-0.12885,-0.02339,-0.07921,0.03743,0.06987,0.23479,0.31927,0.06059,-0.12412,-0.39179,0.27081,0.07904,-0.25524,-0.40624,-0.77743,-0.84510,-0.55902,-0.29346,-0.12382,-0.02562,-0.05105,-0.01607,-0.02083,0.19530,0.30081,-0.18255,0.03943,0.21571,0.35089,0.62794,0.25172,0.25064,-0.09334,-0.25690,-0.25918,-0.28860,-0.25226,-0.02619,-0.06332,0.01163,0.01782,0.27582,0.50003,0.16841,-0.15598,-0.23223,-0.07049,0.20994,0.53621,0.19704,0.35969,0.40928,0.20891,-0.23530,-0.18849,-0.02437,-0.06262,0.00267,0.02667,0.18734,0.17647,0.22348,0.09163,-0.03542,-0.04998,-0.12505,-0.01622,0.40070,0.32996,0.43365,0.41695,-0.06614,-0.16339,0.08507,0.04182,0.03055,-0.18701,-0.11304,-0.12560,-0.05231,0.11855,0.24000,0.21642,-0.05892,-0.06528,0.14978,0.09613,0.42185,0.37939,0.12997,-0.11619,0.08413,0.02261,-0.06337,-0.23099,-0.32883,-0.34186,0.12229,-0.04398,0.29400,0.22744,-0.05131,-0.07113,0.06739,0.00413,0.20586,0.20427,0.05781,-0.11929,0.09593,-0.02887,-0.10622,-0.29796,-0.36932,-0.37720,0.03006,-0.32118,-0.05401,0.09617,-0.15124,0.00820,0.10176,-0.00392,0.05917,0.20091,0.00871,-0.07207,0.09231,-0.00233,-0.06047,-0.15583,-0.30808,-0.28204,0.22978,-0.06341,0.09649,0.13765,-0.07116,-0.14926,-0.18875,0.01841,0.03698,0.19137,0.02234,0.06455,-0.05548,-0.00581,-0.06382,-0.31685,-0.32806,-0.37819,-0.13967,0.32281,0.24723,0.28343,0.13208,0.15551,-0.07309,0.28799,-0.10565,-0.04492,0.16306,-0.02943,-0.05506,-0.11999,-0.05863,-0.30710,-0.35626,-0.21544,-0.27178,0.06710,0.10684,0.03943,0.02535,-0.17586,-0.15435,0.20682,0.01661,-0.01806,0.12965,-0.05407,-0.00067,-0.19203,-0.25040,-0.26236,0.11634,-0.22089,0.11224,0.01331,0.15090,0.07959,-0.24973,-0.17564,-0.01696,-0.01457,-0.07717,0.09136,0.02525,-0.12857,-0.00168,-0.00482,-0.23097,0.06163,0.41560,0.03162,0.11681,-0.02480,-0.06864,-0.00195,-0.08000,0.14070,-0.13779,0.11369,-0.14497,-0.18326,0.02407,0.00100,-0.15787,};
float weights_input_7[] = {0.00088,0.00061,-0.00115,-0.02426,0.11679,0.09713,0.16716,0.02624,-0.06506,-0.10204,0.00616,-0.00967,0.16043,0.11997,0.06890,0.05589,0.09773,0.07967,0.00085,-0.04852,-0.01796,0.14747,0.07817,0.01155,0.00789,0.02929,-0.03258,-0.07443,-0.00008,0.04848,0.01317,0.32862,0.26419,0.07583,0.05625,0.01993,-0.04862,-0.10132,0.00804,0.09922,0.04442,-0.19412,0.08676,-0.20787,-0.04459,0.06916,-0.02533,0.07529,-0.07259,0.18685,0.17987,0.09446,0.06862,-0.06282,-0.06340,-0.05023,-0.09273,-0.00518,-0.00108,-0.19807,-0.10408,-0.11374,0.08349,0.12162,0.16346,0.05227,-0.00153,0.18110,0.18025,0.06683,0.05038,-0.01111,-0.04935,-0.05006,-0.01451,-0.08002,-0.03137,-0.27763,-0.28386,-0.15814,0.01707,0.09223,-0.00404,0.13849,0.21511,0.17155,0.07558,-0.00857,0.00065,-0.03233,-0.05272,-0.04049,-0.00158,-0.09409,-0.09538,-0.31255,-0.24780,-0.03961,0.11044,0.25840,0.21207,0.12466,0.22128,0.11131,0.02841,-0.05687,-0.01919,-0.05212,-0.05131,-0.03972,0.00407,-0.00236,-0.11156,-0.22524,-0.14378,-0.15977,-0.00946,0.06739,0.18043,0.13896,0.23270,0.00536,-0.06253,-0.06677,-0.02020,-0.05360,-0.05130,-0.03995,-0.08344,-0.02928,-0.10388,0.08270,-0.11703,-0.21711,-0.24002,-0.10318,0.09169,0.10126,-0.02995,-0.13705,-0.12599,-0.08806,-0.01792,-0.06301,-0.05316,-0.04313,0.00186,0.00924,0.06398,0.07814,0.07622,-0.15544,-0.13712,-0.05462,0.06732,-0.05156,-0.10688,-0.08565,-0.20349,-0.12468,-0.07837,-0.06810,-0.05316,-0.04098,0.00731,0.18230,0.16751,0.15393,0.05818,-0.12055,-0.08343,0.00113,0.11154,-0.00625,-0.09661,-0.04823,-0.07927,-0.13811,-0.07726,-0.06923,-0.09291,-0.08263,0.01581,0.10229,0.13016,0.19747,-0.05058,-0.11570,-0.03619,0.14447,-0.01527,-0.05527,-0.07757,-0.05829,-0.10939,-0.10111,-0.08802,-0.12565,-0.08848,-0.06541,0.11639,0.25023,0.20539,0.16118,-0.09022,0.01446,0.14726,0.22432,0.19135,0.01041,-0.16084,-0.05006,-0.10200,-0.03556,-0.06556,-0.12616,-0.08071,-0.02631,0.15331,0.25177,0.15141,0.00630,0.04417,0.17641,0.30347,0.40619,0.34124,0.07754,-0.11393,0.05426,0.06840,0.07557,-0.04469,-0.09993,-0.06753,-0.05719,0.09483,0.16670,0.03908,-0.08475,0.08670,0.15578,0.29310,0.34542,0.27661,0.10967,0.00907,-0.06935,-0.04378,-0.03311,-0.08439,-0.07162,-0.01672,-0.06550,-0.02577,-0.08015,-0.25400,-0.33852,-0.31670,-0.10126,0.06323,0.10835,0.22500,0.06800,-0.14605,-0.26410,-0.20948,-0.07877,-0.08202,-0.12441,-0.04996,-0.08055,-0.06993,-0.15487,-0.23351,-0.40448,-0.31542,-0.23389,-0.08841,0.03966,-0.03154,-0.07181,-0.21766,-0.28796,-0.19376,-0.06527,-0.01791,-0.03325,-0.00068,-0.10936,-0.06780,-0.12476,-0.24990,-0.28309,-0.30577,-0.31092,-0.30356,-0.16959,-0.15301,-0.22328,-0.04643,0.03090,0.01920,-0.03573,0.01240,-0.09137,-0.00163,-0.01280,-0.07578,-0.16518,-0.23679,-0.27361,-0.18551,-0.22996,-0.28112,-0.18449,-0.08373,0.12376,0.06633,0.12193,0.14605,-0.01868,0.01590,0.00026,-0.14688,};
float weights_input_8[] = {-0.00045,0.00007,-0.00222,0.14650,0.19453,0.34215,0.33380,0.40355,0.30171,0.10468,-0.04714,-0.01344,-0.12923,0.02031,0.18005,0.19703,0.03769,-0.02107,-0.00093,0.04641,0.07033,-0.06385,0.04537,0.34301,0.32998,0.36693,0.06785,0.07595,-0.01649,-0.07738,0.07731,-0.15614,0.04308,0.06774,0.04567,0.03714,0.04908,0.10232,0.01842,-0.04546,0.14029,0.46437,0.07538,0.20750,0.19148,0.01969,0.03575,-0.12635,0.03939,0.03837,0.23589,0.06727,0.00545,0.09072,0.04851,0.05604,0.06818,-0.00269,0.16946,0.22566,0.15154,-0.00488,-0.12313,-0.09645,-0.38920,-0.13891,0.00166,0.13554,0.24394,0.09596,0.00270,0.03057,0.04712,0.05814,-0.00055,0.08739,-0.05584,0.14680,0.23833,0.23076,-0.01988,-0.36486,-0.28595,-0.17278,0.02005,0.10590,0.16239,0.13389,0.06361,0.03529,0.04375,0.05643,-0.03337,0.14104,0.10800,0.15736,0.16783,0.05384,-0.11278,-0.69678,-0.29822,0.11197,0.09211,0.08800,0.18716,0.13820,0.06906,0.05483,0.04524,0.05487,-0.03006,0.01207,-0.00330,0.16004,0.29445,0.18886,0.04176,-0.45467,-0.19492,0.04775,0.08142,0.16247,0.24543,0.06562,0.06589,0.05635,0.04412,0.05289,0.03513,-0.00676,-0.04590,-0.12377,0.11563,0.33360,0.14025,-0.11258,-0.08133,-0.03393,0.03841,0.15390,0.21533,0.07871,0.06335,0.10717,0.04466,0.05343,-0.03167,-0.02221,-0.13099,-0.14150,-0.02982,0.13040,0.05703,-0.06690,0.04030,0.07948,-0.03242,-0.05031,0.19554,0.15132,0.10791,0.10363,0.04523,0.05199,-0.03757,-0.09771,-0.24078,-0.26989,-0.04236,0.09600,0.18408,0.12001,0.05975,0.01515,0.00380,-0.12438,0.02288,0.14901,0.10271,0.10351,0.14280,0.14935,0.06464,0.00748,-0.23088,-0.13840,0.00732,0.18252,0.31734,0.01834,0.08309,0.17275,0.08033,-0.12378,0.02320,0.12535,0.10506,0.14520,0.13502,0.14084,0.00011,-0.09226,-0.11782,-0.11390,0.02693,0.20619,0.15869,-0.12252,-0.25803,0.16072,0.08247,-0.15632,0.05119,0.07606,0.10017,0.14500,0.11693,0.10750,-0.02621,-0.08151,-0.10173,-0.01224,0.05803,0.04317,-0.10092,-0.36894,-0.39086,0.07545,0.05118,-0.23260,-0.09898,-0.01721,0.05358,0.08663,0.10863,0.12406,-0.01201,-0.03227,-0.03990,0.08048,0.07149,0.05028,-0.00672,-0.30938,-0.30160,0.00117,-0.11149,-0.06354,0.03791,0.09265,0.05486,0.02505,0.01848,0.13297,0.05945,0.03925,0.14986,0.27267,0.34221,0.16206,0.03067,-0.16670,-0.19987,0.00996,-0.02402,0.09831,0.18410,0.07707,0.03259,0.07177,0.04594,0.08358,0.10394,0.10770,0.11157,0.23625,0.22982,0.22137,0.15959,-0.12306,-0.06346,-0.11687,-0.04757,-0.00153,0.19627,0.08301,-0.02399,0.02927,-0.00091,0.12687,0.04904,0.14778,0.12905,0.19593,0.10844,0.14371,0.16975,0.00870,-0.05863,0.05317,-0.26262,-0.16507,-0.09455,-0.02375,-0.03131,0.10384,0.00104,0.01671,0.08482,0.11468,0.07932,0.15112,-0.00970,-0.02727,0.20156,-0.10041,-0.37885,-0.51457,-0.31744,-0.36541,-0.26689,-0.01060,-0.03397,0.00074,0.11013,};
float weights_input_9[] = {0.00019,0.03108,0.03132,-0.17839,-0.22686,0.02643,0.04082,0.13775,0.05701,-0.02067,-0.13004,-0.08051,0.13897,0.05941,0.21975,0.11484,-0.12375,-0.00202,-0.00137,0.02484,-0.09467,-0.09650,-0.11366,0.04306,-0.01219,-0.03882,0.09102,-0.02399,-0.09761,-0.08749,-0.04639,-0.04088,0.07290,0.16153,-0.01359,-0.08094,-0.00678,-0.06461,-0.02815,-0.06171,-0.04751,-0.03701,0.08846,0.04451,-0.08361,-0.02380,0.11786,0.12185,0.10823,-0.09847,-0.12848,-0.09366,0.03359,-0.03661,-0.01237,-0.08550,-0.00795,-0.02542,-0.04569,0.01628,0.18081,0.14680,0.19257,0.08402,0.24255,0.07601,0.03569,-0.32260,-0.35996,-0.24299,-0.05726,-0.02439,-0.00577,-0.08507,-0.02420,-0.05147,0.06457,0.03027,0.15024,0.00050,0.06318,0.26200,0.12441,-0.16156,-0.21726,-0.45785,-0.49017,-0.22591,-0.05356,-0.02176,-0.00730,-0.07828,-0.02532,-0.09642,-0.04907,0.10401,-0.01478,-0.05850,-0.09981,0.31028,-0.13919,-0.43666,-0.38126,-0.50241,-0.39219,-0.13783,-0.05100,-0.02439,-0.00588,-0.04940,-0.02618,-0.09188,-0.03493,-0.02813,-0.28078,-0.17048,-0.00145,0.46666,-0.01396,-0.24561,-0.39586,-0.40717,-0.30980,-0.12095,-0.05031,-0.02569,-0.00628,-0.05169,0.00222,-0.06840,-0.09685,-0.09012,-0.21278,-0.14924,0.24732,0.41856,0.14543,-0.12085,-0.10403,-0.10546,-0.23560,-0.07370,-0.04809,-0.02654,-0.00717,-0.06160,-0.00146,-0.09148,0.03676,-0.05618,-0.16684,-0.02652,0.20933,0.20995,-0.00154,0.08900,0.03350,0.12570,-0.12830,0.00098,-0.04457,-0.02596,-0.00620,-0.06171,-0.00396,-0.17227,-0.14129,-0.14467,-0.33529,-0.07500,0.08043,0.00891,-0.06211,0.07329,0.16084,0.03882,0.06383,0.02248,-0.05430,-0.02344,0.00537,-0.04652,-0.05397,-0.35876,-0.52150,-0.76961,-0.63862,-0.35754,-0.18279,-0.22194,-0.15869,-0.18525,0.10272,0.11643,0.09141,0.14062,-0.04198,-0.02014,0.01112,-0.06107,-0.10339,-0.50064,-0.81945,-1.07576,-0.69283,-0.40322,-0.23185,-0.26658,-0.05959,-0.14457,0.08444,0.16381,0.07484,0.17575,-0.02190,-0.02176,0.07863,-0.01039,-0.11770,-0.30625,-0.42249,-0.53139,-0.37372,-0.41517,-0.30294,-0.16457,0.03843,0.02471,0.01570,0.11352,-0.00841,0.16172,-0.03898,0.00134,0.07825,0.02689,0.07545,-0.01867,0.02070,-0.13328,-0.10462,-0.27259,-0.23122,-0.08487,0.10207,-0.01887,-0.00770,0.06682,0.09731,0.17763,-0.04528,0.00424,-0.00580,0.03451,0.14157,0.23641,0.24650,-0.11009,-0.23143,-0.04439,0.11177,0.07326,0.25657,0.14461,0.13402,0.07505,0.09216,0.00214,-0.03733,-0.02419,-0.00565,0.03922,0.16263,0.32682,0.25506,-0.00776,-0.18924,-0.11798,-0.00826,0.13366,0.26688,0.06777,0.06446,0.13844,0.13846,-0.14417,0.00475,-0.00807,0.00141,-0.03553,0.10249,0.13470,0.37666,0.24569,0.23222,0.17021,0.25874,0.28062,0.01128,-0.22864,0.12588,0.19944,-0.04965,-0.06177,0.00407,-0.08344,-0.00107,0.00393,-0.06021,0.13912,0.28377,0.42388,0.43891,0.28710,0.09321,0.17247,0.02521,-0.03039,-0.04605,0.01833,-0.08601,-0.05274,0.00558,-0.00098,0.17508,};
float weights_input_10[] = {0.00106,-0.00994,-0.01347,-0.03175,0.04331,0.13098,0.13119,0.10512,-0.09154,-0.05884,0.01225,-0.00523,0.00884,0.07938,0.02936,-0.04550,0.03121,0.02076,0.00129,-0.06112,-0.00915,0.08692,0.16190,0.01657,0.06971,-0.04526,0.04725,-0.00014,0.00653,-0.08074,-0.00276,0.19291,0.17686,-0.03722,-0.03426,-0.00098,-0.04719,-0.05101,0.03761,0.09798,0.01940,0.03838,-0.03430,-0.12659,0.03212,0.13901,0.09860,0.04383,-0.00305,0.14691,0.13091,-0.02132,0.00447,-0.08069,-0.01893,0.01546,-0.01684,-0.00473,0.02780,-0.13210,-0.24409,-0.17844,0.20304,0.14290,0.17424,0.09115,0.00162,0.24088,0.12387,-0.02978,0.01677,-0.03696,-0.04970,0.01570,0.00443,-0.02810,0.01769,-0.13300,-0.16720,-0.09866,0.04360,0.13878,0.02171,0.19742,0.23215,0.14027,0.05749,-0.01445,-0.00384,-0.04380,-0.05318,-0.02031,0.02529,0.02665,-0.06119,-0.12469,-0.00865,-0.09187,0.00748,0.15180,0.14259,0.16131,0.21462,0.14334,0.09391,-0.04403,-0.03965,-0.05388,-0.05381,-0.03275,-0.01136,-0.02654,-0.16245,-0.16076,-0.12213,-0.13914,-0.05241,0.04658,0.11978,0.07878,0.11299,0.12888,0.02520,-0.04610,-0.04521,-0.05417,-0.05324,-0.03453,-0.07714,-0.08265,-0.18394,-0.11169,-0.25324,-0.26605,-0.32464,-0.15018,-0.08578,0.03529,0.00367,0.02201,0.00912,-0.09219,-0.04385,-0.06170,-0.05131,-0.03590,-0.02709,-0.07030,-0.17806,-0.08782,-0.06895,-0.31314,-0.31418,-0.11543,0.04407,0.07246,0.01809,0.01316,-0.09440,-0.15341,-0.07794,-0.06790,-0.05333,-0.03550,-0.02171,-0.00240,0.03769,-0.05037,-0.10636,-0.27777,-0.33401,-0.05707,0.04313,0.03011,-0.07397,-0.06911,-0.19446,-0.16123,-0.07249,-0.06804,-0.09682,-0.08040,-0.06623,0.01116,0.05690,0.07977,-0.07451,-0.15277,0.02056,0.22864,0.11750,-0.05596,-0.22121,-0.24659,-0.32333,-0.16701,-0.10066,-0.09709,-0.09319,-0.07282,-0.01122,0.10409,0.24959,0.13956,0.04948,0.03989,0.26188,0.42080,0.17928,-0.19430,-0.34272,-0.33833,-0.24661,-0.14938,-0.10599,-0.09847,-0.10713,-0.07265,-0.00030,0.04911,0.10749,0.05152,0.25639,0.28955,0.60447,0.58696,0.13061,-0.28683,-0.29549,-0.19044,-0.03488,-0.05164,-0.07670,-0.06947,-0.10030,-0.08691,-0.05380,-0.04054,0.04165,0.03259,0.19692,0.31127,0.33130,0.32874,0.02999,-0.16124,-0.22081,-0.12244,-0.03430,-0.03462,-0.01576,-0.05022,-0.03544,-0.09289,-0.11607,-0.19275,-0.05696,-0.02874,0.12524,0.02409,0.01677,0.02076,0.08024,-0.05470,-0.14361,-0.10904,0.07092,0.09643,-0.02237,-0.03388,-0.05009,-0.10321,-0.11076,-0.15019,0.09133,0.00678,-0.03288,-0.10403,-0.02504,0.18739,-0.00846,-0.10723,0.05156,-0.02119,0.02610,0.07275,-0.01298,-0.03999,0.00135,-0.10524,-0.01745,-0.08927,-0.06602,-0.11380,-0.11706,-0.16772,-0.17461,-0.01133,0.03542,0.03436,0.19601,0.16324,0.17899,-0.00315,0.01028,-0.06794,-0.00027,0.00365,0.01230,-0.04164,-0.11938,-0.17255,-0.10637,-0.19134,-0.14754,0.06455,0.06759,0.27846,0.31209,0.29856,0.20263,0.00360,0.01053,-0.00093,-0.09943,};
float weights_input_11[] = {0.00072,-0.05567,-0.05668,0.02921,-0.08222,-0.00937,-0.17708,0.01228,-0.14957,-0.25229,-0.24581,-0.07185,0.00667,0.27090,0.34892,0.39422,0.11206,-0.01157,0.00113,-0.07226,-0.02914,-0.02024,-0.15057,-0.21560,-0.17435,-0.04807,-0.23557,-0.14784,-0.01809,-0.05725,0.05413,0.08640,0.13150,0.30246,0.08795,0.04356,-0.01568,-0.01773,-0.08584,-0.12040,-0.36749,-0.26244,-0.28858,-0.00931,0.27071,0.12651,-0.11649,-0.04143,-0.03617,-0.09212,0.04197,-0.05826,0.10717,0.07132,-0.01475,0.05267,-0.03488,-0.16138,-0.34714,-0.03473,-0.03588,0.03270,0.43043,0.13909,-0.30864,-0.44990,-0.14803,0.01973,-0.14341,-0.09339,0.07784,-0.01623,-0.01447,0.05390,0.05381,-0.18643,-0.03602,0.07082,0.02906,0.29148,0.16454,-0.28010,-0.36904,-0.46920,-0.01236,-0.16808,-0.19208,-0.09728,0.00114,-0.01689,-0.01410,0.06235,0.09098,-0.04289,0.14279,0.11801,0.12967,0.30433,0.23233,-0.47648,-0.58848,-0.31029,-0.30271,-0.39226,-0.26945,-0.21455,0.02409,-0.00721,-0.00619,0.00415,0.11649,-0.01313,0.30677,0.28399,0.43315,0.58277,0.42102,0.16129,0.05438,-0.13620,-0.27623,-0.49282,-0.32497,-0.19974,0.03128,-0.05870,-0.00496,0.00444,0.05970,0.00967,0.28451,0.51588,0.26272,0.45392,0.28551,0.06603,0.12551,0.09955,-0.01770,-0.19091,-0.27813,-0.27192,0.02210,0.00770,-0.00689,0.00989,0.07592,0.07533,0.16664,0.11151,-0.10366,-0.05562,0.10376,0.19731,0.12916,-0.12851,-0.32239,-0.21774,-0.06013,-0.21954,0.04310,0.01103,-0.00472,0.01162,0.07803,0.12016,0.04403,0.03612,0.09073,-0.14621,-0.02480,-0.22100,-0.31739,-0.73012,-0.16894,0.11239,-0.03819,-0.15465,0.08271,0.00799,-0.00635,0.01072,0.09006,0.42314,0.61675,0.26579,0.20227,-0.08662,-0.28675,-0.42639,-0.66783,-0.47268,-0.06351,-0.03446,0.09027,-0.16914,0.11446,0.01960,-0.00751,0.00328,0.05900,0.47908,0.78212,0.75745,0.36757,-0.14739,-0.62063,-0.61557,-0.40740,-0.00856,0.18840,-0.06592,0.20724,-0.10390,0.14716,0.02237,0.01791,0.02341,-0.00338,0.14363,0.48876,0.53964,0.38105,0.19719,-0.37965,-0.41278,-0.02440,-0.02420,0.04136,-0.02203,0.02596,-0.01995,0.18895,-0.00370,0.00843,0.05336,-0.00369,0.00751,0.29950,0.18436,0.19890,0.33048,-0.24056,-0.21837,-0.04430,0.03027,-0.02687,-0.03455,0.11105,0.08969,0.06791,-0.01829,-0.02400,0.04135,-0.07279,0.02192,-0.13823,-0.08852,0.09899,0.18790,-0.09740,-0.05605,-0.25784,-0.03469,0.11652,0.22339,0.04324,0.05003,0.06170,-0.01346,-0.01359,0.04628,-0.11285,-0.16112,-0.04539,-0.02094,0.24913,0.34385,0.01453,-0.18192,0.02173,-0.28088,0.05287,0.16168,0.28064,0.14894,-0.02014,-0.02201,-0.00115,0.01663,-0.11739,-0.28778,-0.12306,-0.23791,0.43626,0.21494,0.24070,0.18229,0.06736,0.13800,0.01629,0.20189,0.21532,-0.02928,-0.00343,0.03996,0.00016,0.03147,-0.08006,0.00154,0.16523,-0.03320,-0.09266,0.19413,0.38990,0.35548,0.02876,0.03338,-0.05881,0.08239,-0.10749,-0.06132,-0.00123,-0.00030,-0.18736,};
float weights_input_12[] = {0.00068,0.00151,0.00252,0.02887,0.23522,0.26339,0.40828,0.21766,0.11799,-0.09133,-0.07621,-0.18770,0.03050,-0.02151,-0.01209,0.06255,0.05364,0.05474,0.00071,0.02937,-0.03285,0.03537,0.12428,0.43169,0.33979,0.23789,0.01251,-0.01454,-0.07786,0.09881,0.05532,0.08880,0.17779,0.03202,0.07778,-0.00644,0.02704,-0.04292,-0.00238,0.10090,0.29910,0.14791,0.24132,-0.20461,-0.09467,0.01578,0.08138,0.22408,0.07602,0.29321,0.27733,0.19204,-0.00686,-0.05228,0.00528,-0.07192,0.00262,0.21320,0.26693,0.05468,0.12935,-0.07926,-0.22611,0.06994,0.09151,0.27709,0.13631,0.18581,0.23513,0.09149,-0.02624,0.02179,0.03004,-0.07328,0.00362,0.14724,-0.03725,-0.14331,-0.20134,-0.37111,-0.19078,-0.12017,-0.00277,0.18926,0.04092,0.22826,0.09280,-0.04464,-0.02018,0.01241,0.02461,-0.05575,-0.04119,-0.02648,-0.09158,-0.28980,-0.39045,-0.08514,0.03146,-0.14289,0.21362,0.17294,0.10268,0.03320,0.04906,0.05850,-0.01408,-0.00174,0.02079,-0.05488,-0.04451,0.01617,-0.13233,-0.17506,-0.14893,-0.19285,-0.15903,-0.48395,0.10310,0.20134,0.08806,-0.10760,-0.03923,0.02278,-0.02024,0.01315,0.02022,-0.05667,-0.04082,0.00348,-0.09243,-0.11687,0.04634,0.07171,-0.21224,-0.27017,0.24000,-0.04339,-0.05393,-0.17232,-0.09219,0.03060,-0.01154,-0.00795,0.01996,-0.07144,-0.05372,-0.14212,0.21485,0.26819,0.54862,0.37517,0.04594,-0.17601,-0.17212,-0.13132,-0.09607,-0.19852,-0.16576,0.00422,-0.01746,-0.01083,0.01883,-0.07036,-0.06557,-0.05776,0.14232,0.27743,0.49453,0.49411,0.25296,0.16532,0.16370,0.40115,0.10132,-0.15396,-0.03642,0.00336,-0.04197,0.00318,0.01180,-0.07652,0.04040,-0.15435,-0.38187,0.10105,0.09667,0.35705,0.32637,0.17908,0.59526,0.52195,0.23151,0.13494,0.18085,0.11384,-0.01415,0.00171,0.01176,-0.02305,0.16654,-0.05061,-0.51267,-0.50495,-0.35441,0.47258,0.39460,0.20821,0.26742,0.45886,0.08532,0.29719,0.20764,0.25168,0.00384,-0.00009,-0.00210,0.00750,0.27060,0.23980,-0.09966,-0.44344,-0.31809,0.08087,0.00681,0.05520,0.11536,0.46631,0.42676,0.51879,0.52896,0.34164,-0.05674,0.00636,0.01235,-0.09533,0.17776,0.33872,0.04416,-0.21055,-0.22992,-0.25432,0.14877,-0.01346,0.06005,0.27733,0.32854,0.38147,0.31091,0.14558,-0.04662,0.01898,0.04719,-0.09465,0.07409,0.06546,-0.05355,-0.26458,-0.48378,-0.32431,0.01189,-0.07573,0.13714,0.24312,0.02103,-0.15882,0.06367,-0.07043,-0.03341,0.02806,0.02544,-0.06872,0.02740,0.06776,-0.23081,-0.47286,-0.52599,-0.41609,-0.27548,-0.31078,-0.17448,0.15878,-0.24208,-0.32189,-0.30006,-0.18707,0.01215,0.02729,-0.00007,-0.05175,-0.06796,0.04953,-0.22079,0.03099,-0.50355,-0.33710,-0.25093,-0.31004,-0.36816,-0.27580,-0.21746,-0.33653,-0.41468,-0.07491,-0.00943,-0.03033,0.00093,-0.05150,-0.07533,-0.19949,-0.28837,-0.14806,-0.11112,-0.34890,-0.48794,-0.49665,-0.45016,-0.35559,-0.33397,-0.41011,-0.22093,-0.05378,-0.00292,0.00099,0.07485,};
float weights_input_13[] = {0.00276,0.05690,0.05354,-0.01057,0.16451,0.21117,0.24579,0.11539,0.00959,0.14069,0.09048,0.00932,-0.05448,-0.06299,-0.03074,-0.21993,-0.00617,0.00618,0.00267,0.03915,0.07681,0.10431,0.35184,0.22487,0.27107,-0.02281,0.27243,0.21620,0.16252,-0.02572,0.06696,0.32228,0.22217,-0.12536,-0.01020,-0.02535,-0.01328,0.02032,0.10882,0.11460,0.19825,0.43507,0.23339,0.24169,0.04357,0.12305,0.18257,0.07085,0.23036,0.28732,-0.01623,-0.05738,-0.00539,-0.05853,-0.00598,-0.01716,0.04033,0.03013,0.09840,0.06241,0.03268,0.19093,0.27611,0.03601,0.29047,0.27468,0.33337,0.11628,0.04841,-0.02176,-0.00561,-0.02178,-0.01523,-0.01698,0.02398,-0.07916,-0.10849,-0.08736,0.01502,-0.16704,0.06428,0.16633,0.15378,0.41648,0.23355,0.10741,0.05494,-0.02487,-0.01963,-0.02517,-0.01950,-0.03213,0.00070,-0.15482,-0.27497,-0.10676,-0.25066,-0.22567,-0.20175,0.31515,0.31583,0.28771,0.20962,0.24145,0.03907,-0.00840,-0.04645,-0.02651,-0.02278,0.01964,-0.02004,-0.14228,-0.33631,-0.43970,-0.53828,-0.47839,-0.09366,0.21538,0.09297,0.16555,0.20426,0.17665,0.00537,-0.03136,-0.05031,-0.03087,-0.02357,0.02021,0.02242,-0.21972,-0.42558,-0.60527,-0.53173,-0.70105,-0.37115,0.03562,-0.15095,-0.05875,0.03496,0.27464,-0.06389,-0.03340,-0.04792,-0.02987,-0.02194,0.01382,0.04036,-0.15121,-0.49252,-0.58116,-0.35730,-0.20247,-0.02909,0.09481,0.00364,-0.11348,0.17605,0.17014,-0.25459,-0.15439,-0.05185,-0.03437,-0.02080,0.01258,0.04037,-0.13111,-0.26222,-0.31032,-0.60030,-0.07040,0.12074,0.38174,-0.04581,-0.13382,-0.19734,-0.25182,-0.19739,-0.14986,-0.04826,-0.03352,-0.13278,-0.09475,-0.15914,-0.17539,-0.14644,-0.52410,-0.55118,-0.46152,-0.22094,-0.04384,-0.30096,-0.18226,-0.13889,-0.23987,-0.24452,-0.07668,-0.06743,-0.03178,-0.12415,-0.12748,-0.19609,-0.30292,-0.13895,-0.42676,-0.24614,-0.15854,0.01035,0.01024,-0.21374,-0.23759,-0.18485,-0.21292,-0.26344,0.03036,-0.02364,-0.03617,-0.13423,-0.15472,-0.18271,-0.10854,-0.15080,-0.20660,0.03886,-0.01520,0.15190,0.10270,-0.24499,-0.33367,-0.24813,-0.31312,-0.29261,0.00804,-0.00628,-0.00012,-0.13057,-0.12072,-0.01881,0.02055,0.07913,0.09351,0.13731,0.09313,-0.00338,-0.04521,-0.20820,-0.34245,-0.17555,-0.28247,-0.18324,0.07549,0.02383,0.00786,-0.01702,-0.10486,0.09039,0.17894,0.33133,0.37423,0.34792,0.19533,-0.04289,-0.13649,-0.05377,-0.12532,0.00991,-0.06459,0.09464,0.14728,0.00945,-0.02095,-0.01696,-0.00565,0.08939,0.18523,0.22607,0.23684,0.19849,0.23922,-0.01553,0.28901,-0.04701,0.14133,0.07818,0.11615,-0.02737,0.08780,0.04035,-0.01846,0.00059,0.02395,0.18517,0.32423,0.28492,0.07465,-0.01228,0.08857,-0.00203,0.11002,0.24302,-0.03281,0.22191,0.09973,0.11180,0.08696,0.00388,-0.04589,0.00003,-0.01527,0.06298,0.10907,-0.00078,0.07826,0.14170,0.02482,-0.17707,0.10122,-0.03551,-0.08521,0.08049,0.20848,0.10522,0.07130,0.00328,0.00147,0.14270,};
float weights_input_14[] = {-0.00172,-0.00281,-0.00231,-0.03574,-0.21574,-0.14855,-0.19675,-0.01460,0.17520,0.27858,0.29233,0.33801,-0.05541,-0.31827,-0.23744,-0.38468,-0.31090,-0.06541,-0.00044,0.09627,-0.04404,-0.12849,-0.13616,-0.10772,0.12225,-0.30994,-0.04118,0.11433,-0.03390,-0.18081,-0.16577,-0.40525,-0.53223,-0.36878,-0.17063,-0.06422,0.09658,0.11011,-0.01973,0.07737,-0.14976,0.13952,-0.12913,-0.09737,-0.00061,0.01605,0.17933,0.07530,0.03531,-0.18527,-0.31070,-0.34935,-0.21840,0.06253,0.11664,0.01258,0.08875,0.11371,0.16555,-0.09517,-0.22497,-0.26420,0.05319,-0.08459,-0.13377,0.23858,0.31034,-0.11605,-0.18550,0.10316,-0.09163,0.10472,0.09657,0.01283,0.02257,0.17321,-0.27041,0.16515,-0.03491,0.01095,-0.03636,-0.01644,0.24244,0.25771,0.24134,-0.00049,-0.00458,0.19131,0.17221,0.15320,0.01331,-0.00388,0.01411,0.14887,0.05915,0.05439,0.15066,0.05453,-0.03805,-0.12238,0.20795,0.26765,0.14910,0.06675,0.22405,0.39599,0.38681,0.16997,0.01697,-0.00504,0.02675,0.02588,0.05775,0.08795,0.03421,0.10754,-0.34036,-0.36384,-0.22088,-0.20178,-0.11640,0.25471,0.35705,0.18745,0.22481,0.16786,0.01439,-0.08843,0.11339,0.28866,0.17234,0.10306,0.08168,-0.22217,-0.63564,-0.45842,-0.78944,-0.62199,-0.34567,0.11633,0.41799,0.31484,0.23197,0.32128,0.01460,-0.07197,-0.03574,0.26673,0.32862,0.35157,-0.03702,-0.38835,-0.51558,-0.62186,-0.62516,-0.48621,-0.03779,0.18822,0.35220,0.26920,0.19972,0.15053,0.01597,-0.07162,-0.03035,0.31707,0.18103,0.11743,-0.01117,-0.23975,-0.51154,-0.37957,-0.30327,-0.20400,-0.00518,-0.00118,0.18000,0.04439,0.11811,0.13323,0.01298,-0.07137,-0.00865,0.25417,-0.05928,0.12227,-0.01952,-0.02418,0.06118,0.21170,0.17852,-0.31009,-0.22709,-0.22888,-0.25122,-0.15230,-0.09037,0.10314,0.01412,-0.06660,0.01652,0.11717,0.03911,-0.09498,0.10701,0.04550,0.12792,0.18868,-0.10117,-0.31216,-0.15679,-0.32113,-0.42851,-0.20987,-0.09908,0.10438,-0.02049,0.00240,0.00187,0.13622,0.03218,0.05770,0.20387,0.30282,0.22068,0.08558,-0.00452,-0.18202,-0.07418,-0.19248,-0.23501,-0.20650,-0.09811,0.06338,-0.01947,-0.00679,-0.02865,-0.02337,-0.16542,0.22575,0.16653,0.11268,0.12644,-0.06116,0.17503,0.15968,-0.02374,-0.05273,-0.14713,-0.04354,-0.01503,-0.09719,0.10325,-0.00796,-0.07432,-0.28881,-0.06345,0.27913,0.42144,0.14375,0.07080,0.00289,0.26042,-0.06402,-0.05174,-0.18878,-0.07693,0.02572,-0.17223,0.21403,0.09764,0.07462,-0.05800,-0.01404,0.21239,0.39250,0.31399,-0.01395,-0.07958,-0.01254,0.31313,0.02838,0.17108,-0.18627,-0.17671,-0.17057,-0.22335,0.09996,-0.00101,0.10653,0.09308,-0.00785,0.26389,0.24755,0.25595,0.11952,0.02573,0.11100,0.19001,0.18336,0.03986,-0.15088,0.00694,-0.26810,-0.01335,0.09345,-0.00009,0.03647,0.20800,0.18674,0.19621,0.29372,0.00902,-0.04636,0.05363,0.04485,0.01721,0.00402,0.10659,0.06455,0.16160,0.08736,-0.01480,-0.00135,-0.02973,};
float weights_input_15[] = {0.00103,0.00609,0.00498,0.13975,0.33704,-0.07804,0.09498,-0.28440,0.07088,0.23274,0.27573,0.46146,0.02081,0.02297,0.18957,0.21004,0.20481,0.11005,0.00258,-0.02284,0.04995,0.04726,0.13748,-0.03832,-0.26056,0.06854,-0.12185,0.03521,0.07591,0.32729,0.29948,0.19590,0.17788,0.55615,0.21442,0.04244,-0.02904,-0.12618,-0.01824,0.05913,-0.07778,-0.18045,0.06301,-0.26131,0.09470,-0.03552,-0.11732,0.16851,0.03238,0.02467,0.28701,0.29798,0.15160,0.00648,-0.11421,-0.09889,-0.05082,0.05845,-0.05990,-0.19745,0.00101,-0.04928,-0.01559,0.06658,0.15230,-0.03904,0.22008,0.04202,0.06220,0.19436,0.13074,0.02199,-0.03114,-0.09932,0.00057,0.05896,0.04147,-0.14783,-0.56782,-0.09394,0.08316,0.13351,-0.01916,0.04610,0.21086,0.17744,0.18588,0.03010,0.07377,-0.01408,-0.01202,-0.01225,0.04946,0.04997,0.19949,-0.32800,-0.35074,-0.30084,0.09372,0.05990,0.11114,-0.03691,-0.08796,-0.27689,-0.11619,-0.11578,0.08590,-0.01061,-0.00692,-0.00053,0.14852,0.33378,0.15831,-0.15301,0.01463,-0.46208,-0.37245,-0.25694,-0.13296,-0.38573,-0.28341,-0.31954,-0.15819,-0.05960,0.18113,-0.00890,-0.00606,0.01995,0.18385,0.51210,0.67258,0.44877,0.35851,-0.17145,-0.34527,-0.25698,-0.04838,-0.17449,-0.18401,-0.31434,0.28417,0.28192,0.19674,0.00059,-0.00660,0.02730,0.16817,0.57113,0.92465,0.74603,0.14408,-0.19228,-0.54926,-0.51617,-0.19590,-0.18059,0.04237,0.10611,0.45979,0.52518,0.20363,0.05827,-0.00580,0.02860,0.16827,0.58185,0.32297,0.23012,0.47225,0.13651,-0.29467,-0.33198,-0.24389,-0.34949,-0.10619,0.12949,0.36105,0.46222,0.27544,0.06424,-0.00737,0.02799,0.20986,0.31206,0.18933,0.37755,0.49776,0.32340,0.29220,0.15710,-0.42366,-0.41514,-0.25925,0.02226,0.18663,-0.06639,0.27067,0.06706,-0.00774,0.03118,0.18939,0.07845,0.17228,0.45499,0.64741,0.32266,0.27320,-0.03518,-0.18375,-0.17673,-0.17891,0.14607,-0.01649,-0.20182,0.16585,0.06431,-0.00640,0.01648,0.17720,-0.00307,-0.01582,0.25732,0.38025,0.02776,-0.09489,-0.01364,0.01250,0.00204,0.00351,0.13134,-0.01052,-0.25663,0.08373,0.05022,-0.01359,-0.01568,0.03197,-0.23224,-0.27819,0.13109,0.45515,-0.12510,0.12892,0.17388,0.10500,-0.06590,0.05339,-0.05171,-0.20533,-0.30456,-0.02913,0.02958,-0.02977,-0.01603,-0.00796,-0.34761,-0.50885,0.05351,0.19145,0.06952,0.10696,0.28462,0.05913,-0.03415,-0.16246,-0.14050,-0.55314,-0.13159,-0.00818,-0.04724,-0.03217,-0.06812,-0.14214,-0.55882,-0.54810,-0.17559,0.12075,0.25100,0.25462,0.10838,0.03988,-0.01392,-0.35904,-0.51210,-0.31656,-0.08492,0.09776,-0.03015,-0.00019,-0.06717,-0.12440,-0.38810,-0.43601,-0.19936,0.36410,0.16936,0.07004,-0.08381,-0.25451,-0.18646,-0.43662,-0.37731,-0.24288,0.01006,-0.00578,-0.05249,-0.00159,-0.01605,-0.09042,-0.17390,-0.16070,-0.21161,-0.04075,0.18901,0.33560,-0.17083,-0.04754,-0.00598,-0.29363,-0.22531,-0.12555,-0.18882,-0.00170,-0.00000,-0.41741,};
float weights_hidden_0[] = {0.27132,-0.63354,-1.19403,-0.90244,-0.54751,-2.48093,-2.17871,-0.41433,0.89960,-0.63837,-0.42060,3.33657,-2.38863,-0.52230,3.36370,2.78479,-0.10068,};
float weights_hidden_1[] = {-1.32573,1.67569,0.96959,1.56987,1.73162,1.25845,1.19023,0.78276,-2.99457,1.95638,1.17589,-1.31115,-1.59075,1.65033,-0.40491,-1.29957,0.97402,};
float weights_hidden_2[] = {1.31987,2.30097,1.49636,1.34355,-1.04929,-0.83389,-1.60953,-0.98748,0.54811,-0.97189,1.46483,-0.94965,-1.95513,1.38870,2.57572,-1.82288,0.82719,};
float weights_hidden_3[] = {1.65966,-1.49875,-2.01360,2.92183,0.24220,1.38756,-1.99356,-0.80604,0.34732,1.06026,-1.17207,-2.16223,1.14225,2.83148,-1.34160,-1.58460,-0.11298,};
float weights_hidden_4[] = {-1.34096,-1.32870,1.42219,-2.03547,2.04669,1.66821,-0.15277,2.59400,-2.41584,-1.10730,1.03804,-0.12571,1.26318,-1.77604,0.03014,0.87313,-0.42069,};
float weights_hidden_5[] = {-0.52255,-0.83757,-0.62985,1.30876,-0.32798,-1.96734,3.45253,-0.63356,0.80466,3.60259,-0.83012,1.71573,-0.00664,-0.91233,-1.21873,-1.78873,-0.35378,};
float weights_hidden_6[] = {-3.27392,-0.55234,-1.20222,-2.15726,-0.16167,2.43696,2.79432,-1.17993,0.04401,-0.81921,-1.15527,2.20901,-1.78287,-1.20688,-1.56581,2.54630,-0.70077,};
float weights_hidden_7[] = {-1.65830,1.46630,0.72227,1.33802,-1.37078,-2.52888,0.76701,1.32802,0.44171,-1.11486,1.50503,-1.23396,2.14720,1.47128,-1.64032,1.37048,1.08858,};
float weights_hidden_8[] = {2.70058,-0.40024,-0.15709,-2.03411,-0.59305,2.59926,-2.16540,-0.32194,1.63943,-1.85020,-0.43724,1.83769,-0.25638,-1.28855,-1.68292,-2.66862,-0.92593,};
float weights_hidden_9[] = {2.20924,-0.19788,0.58258,-1.36794,0.01729,-1.57340,-0.14153,-0.39822,0.78645,-0.06188,-1.19545,-3.39809,3.40664,-1.64324,1.85610,1.58182,-0.20122,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 0; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = cc_segmenter_.GetNumOfSegments(im);

		if (num_of_segments > kMaxNumOfDigits) {
			num_of_segments = nn_segmenter_.GetNumOfSegments(im);
		}


		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


