#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{2,20,0,22,0,26,2,53,1,2},
{2,20,14,27,0,29,2,70,1,2},
{9,23,24,43,5,40,8,60,15,13},
{29,23,33,51,7,63,29,65,23,40},
{46,34,47,61,18,60,42,68,46,57},
{52,45,63,60,34,56,47,68,55,57},
{52,54,64,74,53,61,51,68,55,54},
{52,61,63,74,48,77,48,61,67,62},
{58,67,67,71,42,78,47,73,73,66},
{61,64,67,82,47,71,59,70,74,75},
{64,60,65,82,46,71,59,70,62,73},
{58,70,50,71,48,71,59,71,58,55},
{30,63,26,62,51,70,34,71,46,35},
{14,57,18,45,39,68,21,71,21,15},
{2,57,8,37,22,64,14,71,12,13},
{2,57,0,19,22,21,10,69,11,2},
{8,23,20,33,0,26,8,44,10,23},
{24,38,33,46,0,29,31,49,26,38},
{47,38,58,55,7,60,38,55,54,48},
{51,39,61,53,14,58,47,55,54,51},
{50,54,56,55,32,43,49,55,57,46},
{57,56,58,54,53,46,45,55,56,50},
{53,62,57,61,49,63,42,55,53,57},
{44,67,57,61,43,63,47,55,59,52},
{48,72,57,59,52,60,48,67,46,57},
{46,75,64,61,44,60,46,70,50,57},
{49,70,67,64,50,60,49,78,58,61},
{52,71,65,73,61,62,55,78,60,70},
{64,71,73,80,58,61,57,72,65,71},
{51,58,69,80,47,63,52,73,64,55},
{30,56,36,31,25,56,36,72,50,51},
{9,50,6,13,17,10,8,57,2,36},
{21,31,18,39,0,26,22,30,24,39},
{51,31,45,50,3,36,38,32,48,57},
{52,35,45,50,23,62,51,36,55,53},
{55,43,42,42,27,61,49,27,64,50},
{57,49,44,39,55,49,45,22,55,53},
{57,51,44,38,54,48,42,23,52,49},
{53,50,43,39,45,57,48,27,47,32},
{21,55,52,34,41,48,37,33,19,16},
{24,71,52,48,47,48,31,49,16,31},
{38,67,57,51,46,33,48,60,22,50},
{41,66,55,56,60,32,48,63,33,54},
{49,71,59,50,60,25,36,73,38,58},
{51,71,64,68,58,25,35,77,50,66},
{63,57,71,50,43,25,41,72,66,72},
{52,51,52,42,18,22,40,65,52,66},
{26,39,23,19,17,0,23,13,33,39},
{45,29,37,32,0,27,34,23,30,56},
{52,33,42,43,23,56,50,21,49,56},
{53,34,42,44,36,64,52,21,57,59},
{58,38,38,39,41,54,48,20,61,58},
{57,39,40,35,51,45,42,19,56,39},
{54,38,40,34,51,52,47,19,46,31},
{45,37,37,41,56,50,52,19,36,28},
{11,42,32,43,48,44,23,44,19,14},
{15,58,37,48,57,44,20,46,13,16},
{31,58,44,57,60,33,40,49,24,50},
{41,69,56,62,61,32,28,61,39,54},
{41,69,60,51,59,31,28,71,45,56},
{51,61,63,50,56,28,32,67,58,65},
{51,55,72,42,45,22,29,58,52,61},
{64,41,67,41,18,14,26,34,49,67},
{48,35,36,21,18,0,24,12,34,40},
{51,23,21,7,12,21,48,5,30,56},
{59,29,38,7,31,49,52,15,44,60},
{63,28,29,30,38,51,53,15,57,61},
{58,29,22,30,52,46,53,4,53,47},
{55,26,23,34,50,50,49,8,61,37},
{48,24,22,48,48,56,57,4,59,29},
{39,42,26,40,46,45,53,29,39,38},
{10,50,23,47,41,48,34,35,29,23},
{14,58,31,59,56,53,24,46,26,27},
{31,60,46,61,52,59,28,50,46,50},
{39,66,54,59,68,58,36,67,43,58},
{40,68,60,47,69,37,34,61,51,59},
{48,61,64,52,61,30,32,56,59,54},
{51,41,69,52,39,20,13,51,43,69},
{64,38,51,36,18,9,12,9,41,68},
{60,32,17,7,13,7,0,6,16,50},
{53,19,10,0,29,38,52,0,8,64},
{64,19,12,15,40,47,54,0,29,57},
{61,19,11,19,58,50,59,0,46,57},
{58,21,14,28,60,52,55,0,60,62},
{49,23,13,46,49,53,59,13,64,45},
{47,24,13,51,40,69,65,15,63,41},
{39,43,16,53,45,57,52,38,64,41},
{10,49,34,59,48,48,43,46,60,28},
{14,58,51,57,38,54,50,53,50,45},
{31,61,59,63,55,71,51,59,55,51},
{39,64,58,64,76,80,56,57,56,54},
{44,68,65,60,69,80,46,56,54,48},
{47,47,63,59,51,62,45,51,52,62},
{53,41,53,29,36,49,35,26,40,69},
{63,35,41,15,17,23,25,6,14,58},
{59,32,5,2,18,9,5,0,0,53},
{58,14,1,7,40,23,54,0,18,23},
{64,14,10,7,58,41,56,0,36,62},
{61,14,10,9,68,33,62,0,49,46},
{51,19,9,14,75,35,66,15,60,50},
{49,25,9,24,70,32,66,15,64,50},
{43,35,18,40,50,39,55,38,68,47},
{39,43,39,56,38,31,46,50,59,41},
{10,55,55,58,55,32,30,52,61,47},
{14,58,55,57,54,51,25,55,56,59},
{30,62,60,63,59,59,42,51,56,56},
{39,61,67,61,80,63,44,55,53,53},
{44,58,69,72,83,54,51,53,63,67},
{49,47,48,69,73,70,59,39,51,59},
{53,41,36,50,56,65,63,9,40,59},
{61,33,23,31,49,60,59,0,29,53},
{53,29,0,9,37,27,33,0,10,51},
{63,14,0,6,25,21,56,0,29,14},
{64,14,0,7,48,22,62,0,51,36},
{61,14,16,7,55,22,67,10,54,41},
{51,21,18,16,55,21,67,18,53,34},
{45,34,28,17,46,10,52,24,56,35},
{43,35,35,16,35,7,42,50,49,35},
{40,43,62,12,32,7,24,43,43,59},
{10,57,62,27,52,32,7,41,28,38},
{14,59,66,34,46,43,1,50,30,29},
{30,61,60,37,58,55,21,55,33,44},
{43,52,60,57,77,51,36,53,45,57},
{45,47,43,63,67,58,42,47,42,55},
{49,47,34,63,59,68,59,27,47,53},
{53,41,22,70,47,63,63,6,55,53},
{62,30,0,62,40,62,62,0,51,53},
{51,29,0,38,34,48,52,0,37,49},
{64,14,7,11,36,19,58,0,53,14},
{64,15,9,24,39,13,75,10,57,16},
{57,15,13,24,41,14,73,18,62,15},
{51,32,30,22,36,13,56,24,58,31},
{44,34,33,22,36,9,44,49,45,35},
{43,35,58,18,37,9,39,51,36,42},
{40,46,57,39,43,20,33,39,34,33},
{10,57,49,36,64,32,13,52,23,10},
{14,58,53,45,58,28,9,55,26,23},
{34,55,50,45,66,45,28,53,37,52},
{45,48,32,44,75,56,44,53,26,50},
{45,47,28,48,59,56,47,42,32,48},
{49,47,21,57,52,55,68,4,48,51},
{52,38,15,68,42,61,70,0,50,53},
{52,29,15,70,29,55,64,0,55,50},
{47,28,15,60,28,51,63,0,55,36},
{59,18,10,47,22,49,57,10,55,24},
{63,19,15,49,23,46,75,15,70,28},
{61,31,35,47,21,34,66,24,66,30},
{53,32,36,41,21,30,56,39,54,27},
{45,34,55,43,19,40,49,50,38,24},
{45,35,56,43,21,38,40,41,27,35},
{40,52,57,46,30,26,36,52,23,38},
{11,56,52,27,48,26,17,55,13,25},
{18,52,46,36,61,45,12,52,26,23},
{38,55,40,37,66,46,30,56,35,47},
{45,41,38,51,78,52,41,52,38,47},
{48,47,38,53,59,53,50,29,48,43},
{45,44,28,59,54,52,66,0,45,49},
{50,37,28,68,48,54,62,0,52,51},
{50,33,32,65,37,55,64,0,55,49},
{31,32,30,59,34,46,54,0,48,30},
{31,19,30,49,6,50,46,18,64,29},
{63,29,40,52,8,54,76,24,73,36},
{57,31,49,61,8,61,68,39,55,41},
{54,32,55,51,8,52,50,52,49,31},
{53,34,64,46,8,41,45,40,35,44},
{44,39,62,33,16,32,40,51,20,42},
{42,51,57,36,17,40,40,57,34,44},
{20,46,57,37,40,37,22,57,26,21},
{31,52,55,44,56,54,18,53,16,25},
{45,51,53,48,55,54,35,54,43,40},
{46,43,49,53,56,46,49,33,49,44},
{42,47,39,55,56,43,53,2,53,47},
{42,42,43,54,47,54,60,0,49,51},
{51,37,38,62,34,55,55,0,46,49},
{44,32,41,59,29,50,53,0,48,32},
{24,32,25,25,27,11,35,0,30,25},
{9,41,49,43,0,48,26,18,31,3},
{31,47,53,69,0,67,51,36,60,41},
{58,47,65,68,0,72,68,45,68,54},
{61,48,66,59,0,70,63,45,64,56},
{56,54,63,46,0,63,59,53,54,51},
{59,54,63,48,8,45,57,54,50,49},
{56,45,61,48,9,46,52,56,44,45},
{45,48,64,48,43,42,45,56,41,50},
{49,47,65,51,57,48,53,56,44,55},
{39,54,65,45,57,43,49,53,46,45},
{43,54,64,53,53,54,47,32,47,46},
{50,60,57,61,55,54,53,0,43,47},
{51,60,60,62,48,54,56,0,48,45},
{39,52,60,32,31,23,46,0,48,30},
{22,48,58,16,23,16,24,0,23,24},
{8,45,29,1,21,0,7,0,9,17},
{0,44,40,18,0,16,0,19,6,6},
{2,47,45,42,0,34,16,39,16,11},
{3,54,51,34,0,34,20,39,20,7},
{15,54,51,47,0,39,35,42,45,29},
{46,55,54,65,0,59,60,36,54,61},
{63,46,54,66,9,62,75,53,55,56},
{57,46,56,61,23,54,60,53,62,52},
{52,46,57,55,46,55,56,53,62,50},
{50,49,57,60,55,54,60,48,44,50},
{52,54,53,33,51,53,51,36,47,45},
{46,57,53,33,50,34,53,15,41,33},
{25,58,50,16,51,2,30,1,31,25},
{3,61,62,5,50,1,4,0,15,3},
{2,55,47,0,37,0,2,0,1,2},
{2,53,44,0,24,0,2,0,0,0},
{0,44,35,0,23,0,0,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
