#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 0.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{2,0,0,3,0,5,1,17,1,1},
{2,0,6,6,0,6,1,27,1,1},
{2,5,6,8,0,18,1,23,1,1},
{3,5,7,11,0,23,1,24,6,5},
{12,5,12,22,3,23,10,25,12,15},
{19,5,19,24,9,18,15,18,18,21},
{22,10,15,28,9,20,18,18,18,22},
{19,15,17,28,14,27,18,18,23,22},
{21,18,16,27,15,28,18,22,25,24},
{24,21,20,32,15,28,18,20,26,27},
{25,16,21,26,17,28,19,21,23,28},
{14,19,14,26,17,27,21,21,18,15},
{5,29,11,14,15,23,9,21,15,3},
{3,27,9,12,10,24,9,23,7,3},
{2,27,6,12,1,24,5,29,7,2},
{0,23,0,8,1,10,2,21,4,0},
{2,6,0,9,0,5,1,18,1,1},
{3,7,8,14,0,7,1,20,7,4},
{15,12,13,22,0,17,9,22,13,18},
{18,15,20,23,0,22,13,23,17,22},
{19,16,18,25,6,24,20,23,19,20},
{23,18,18,23,9,22,20,23,20,18},
{19,20,18,21,15,29,20,23,18,19},
{15,22,18,23,15,25,14,23,18,20},
{15,25,18,24,20,24,16,23,17,22},
{15,27,23,27,21,24,19,31,20,21},
{19,33,21,27,17,28,19,31,21,25},
{24,30,23,30,21,30,19,31,21,29},
{24,29,23,32,19,30,20,31,22,26},
{10,28,19,28,11,29,19,31,20,21},
{4,27,10,17,1,27,7,32,11,11},
{2,16,3,1,0,8,1,25,4,8},
{2,6,6,9,0,5,1,14,1,6},
{15,9,18,16,0,9,10,16,13,21},
{20,10,18,19,0,22,17,17,20,25},
{19,11,16,16,3,24,20,17,22,13},
{22,13,15,17,15,18,20,16,22,18},
{20,16,15,14,15,16,16,16,21,17},
{19,28,14,11,16,24,18,16,19,15},
{12,27,9,10,21,19,17,14,13,11},
{9,28,18,12,18,19,14,22,9,17},
{11,33,20,17,18,18,15,22,10,18},
{15,28,24,20,20,12,13,22,9,21},
{17,30,20,27,21,14,14,26,13,25},
{24,29,26,33,19,13,14,30,19,28},
{26,25,21,23,11,10,15,30,23,32},
{13,21,15,18,1,7,12,27,23,20},
{4,16,7,6,0,0,4,7,5,2},
{8,7,11,6,0,6,6,10,9,16},
{20,10,18,18,0,13,17,13,18,24},
{21,15,18,20,3,23,21,10,20,20},
{22,19,13,10,14,23,21,10,26,19},
{20,22,15,8,15,18,17,9,23,17},
{20,21,13,12,16,16,17,9,24,9},
{13,17,14,8,18,23,17,9,10,6},
{8,18,16,7,17,16,15,14,8,6},
{7,22,13,13,17,12,10,17,6,15},
{7,29,15,15,20,8,11,20,6,16},
{12,31,16,23,21,6,10,22,11,19},
{15,30,19,22,20,4,8,27,15,22},
{18,28,24,26,19,3,11,30,20,28},
{23,21,24,17,11,4,12,27,21,32},
{19,16,19,18,1,3,12,24,20,22},
{9,14,13,5,0,0,7,1,5,11},
{17,5,8,3,0,6,11,9,12,23},
{21,8,14,10,3,17,21,9,19,25},
{22,14,13,12,13,22,22,9,22,25},
{23,10,13,10,14,16,21,8,26,19},
{20,9,12,8,16,13,17,1,23,10},
{16,8,15,5,19,17,17,0,18,6},
{12,10,13,12,19,10,18,0,8,4},
{7,16,12,12,15,9,11,8,6,4},
{6,22,8,16,24,14,6,11,2,6},
{6,27,14,20,24,13,8,21,6,15},
{12,30,19,22,20,10,6,26,12,19},
{13,23,22,25,21,10,7,28,17,20},
{18,22,22,25,19,7,6,23,21,27},
{19,21,27,20,11,2,3,24,19,26},
{26,15,25,14,1,0,3,11,14,27},
{16,13,14,4,1,0,0,0,7,13},
{20,5,3,0,0,7,15,2,6,23},
{22,5,12,0,9,16,22,9,16,25},
{25,5,9,6,14,18,23,8,20,26},
{22,4,10,6,16,16,19,1,25,13},
{20,5,9,6,19,16,18,1,25,9},
{15,6,8,7,19,22,21,0,21,6},
{11,10,13,12,12,13,18,11,9,6},
{6,21,11,17,16,18,11,11,7,10},
{6,22,12,21,24,21,9,18,10,12},
{5,30,15,23,26,20,6,19,17,14},
{11,24,18,24,25,20,11,26,16,20},
{12,24,21,26,23,17,11,23,14,21},
{16,22,25,21,20,7,7,21,21,22},
{19,15,26,18,12,7,7,19,14,26},
{26,13,18,11,1,2,3,0,14,26},
{22,11,5,1,0,0,0,0,5,19},
{21,2,2,0,9,9,21,0,0,27},
{25,2,4,1,13,15,23,0,8,24},
{25,2,2,1,14,16,25,0,15,26},
{22,2,2,2,22,16,18,0,23,22},
{17,5,2,12,19,15,23,0,27,16},
{14,4,2,16,17,25,24,3,26,13},
{11,15,3,24,12,19,17,11,24,10},
{6,19,8,24,18,21,16,17,17,4},
{6,22,14,22,24,24,12,19,21,12},
{5,26,22,25,24,31,15,23,20,17},
{11,23,22,24,24,32,16,23,17,21},
{12,24,23,28,23,29,16,20,18,16},
{16,16,26,27,21,20,14,19,15,23},
{20,15,20,10,11,16,9,10,11,26},
{26,13,13,6,0,8,4,0,4,26},
{22,11,0,0,0,1,0,0,1,25},
{22,2,2,0,13,6,23,0,0,17},
{26,0,3,1,15,19,23,0,6,22},
{25,0,2,6,21,14,26,0,9,25},
{20,0,0,8,23,19,23,0,21,20},
{15,3,1,14,11,19,24,3,25,14},
{14,11,1,16,10,14,25,11,27,13},
{11,15,7,18,7,14,19,17,24,10},
{6,19,21,22,19,16,14,20,26,9},
{6,20,20,25,22,19,11,18,26,18},
{5,26,20,26,24,28,14,23,22,19},
{11,22,24,27,27,28,21,20,22,18},
{12,23,25,23,27,29,24,20,23,20},
{17,16,22,21,25,28,23,18,19,25},
{20,15,12,18,15,27,20,0,7,27},
{24,13,7,8,5,17,16,0,5,25},
{24,11,0,3,5,6,4,0,0,24},
{26,0,0,0,14,7,23,0,5,0},
{26,0,2,0,19,8,26,0,14,12},
{24,0,2,6,28,3,25,0,18,15},
{18,0,2,7,25,3,20,3,18,16},
{16,10,4,8,19,2,20,6,20,17},
{14,11,11,8,11,6,20,16,23,17},
{11,15,19,11,15,4,14,20,19,14},
{6,17,22,8,18,3,4,17,15,21},
{6,20,21,9,22,21,3,22,16,21},
{5,27,22,17,25,26,10,20,17,19},
{11,21,24,22,29,22,12,20,21,20},
{12,18,19,31,27,19,18,19,23,23},
{17,16,11,34,24,27,23,18,23,24},
{20,15,7,25,14,27,22,0,21,26},
{24,12,0,17,10,25,21,0,8,26},
{21,11,0,6,6,14,15,0,4,23},
{26,0,0,0,12,8,25,0,15,0},
{26,0,0,2,20,3,26,0,19,4},
{25,1,2,2,21,2,25,3,24,7},
{17,3,5,2,20,2,22,6,21,5},
{15,10,9,2,13,3,20,14,17,7},
{14,11,21,2,9,1,14,20,14,8},
{11,15,22,0,11,1,6,16,7,19},
{6,18,20,5,16,10,2,14,9,16},
{6,21,18,6,23,13,0,20,9,10},
{5,26,17,11,27,10,5,20,8,13},
{11,21,14,19,26,15,13,20,15,20},
{14,18,10,22,25,21,14,18,18,19},
{17,16,7,27,22,26,22,7,20,23},
{20,15,0,30,13,24,22,0,23,25},
{24,12,0,28,9,25,22,0,23,25},
{18,11,0,20,8,25,21,0,11,20},
{26,0,0,2,13,7,24,0,20,0},
{26,0,2,9,12,2,26,3,22,2},
{23,1,5,10,13,4,28,6,26,2},
{17,7,10,7,11,4,22,8,20,2},
{15,10,16,7,11,3,15,18,13,4},
{14,11,22,4,10,3,13,17,7,4},
{11,17,20,4,14,9,8,13,4,6},
{6,18,15,5,22,10,5,21,6,5},
{6,20,17,11,27,6,3,20,8,7},
{5,26,13,6,28,12,7,19,5,11},
{13,16,9,11,27,22,16,19,12,16},
{14,18,4,18,24,22,16,17,15,17},
{17,16,4,25,22,24,25,0,19,22},
{19,13,5,30,14,24,25,0,22,25},
{20,11,5,31,6,25,25,0,24,23},
{14,11,4,24,6,25,25,0,23,10},
{22,0,0,15,9,17,22,0,24,3},
{26,1,5,15,11,14,29,6,25,3},
{24,7,10,14,8,11,28,8,25,9},
{18,7,16,9,8,9,20,17,18,8},
{16,10,19,11,8,13,18,17,11,6},
{16,11,20,10,8,11,17,16,5,9},
{11,17,18,12,10,6,12,22,4,8},
{6,17,15,2,22,6,6,21,8,7},
{7,20,11,8,29,11,6,18,11,11},
{7,26,10,8,28,13,10,21,10,12},
{13,16,7,13,26,18,13,19,10,16},
{15,18,7,21,22,16,15,17,15,17},
{16,16,5,24,22,23,20,0,19,21},
{16,12,5,29,15,24,25,0,23,23},
{20,11,7,29,14,25,25,0,24,21},
{10,11,10,21,9,22,21,0,22,8},
{11,0,5,15,4,21,19,3,24,4},
{26,3,11,17,4,17,28,8,27,12},
{22,7,16,23,4,17,29,9,23,12},
{19,7,21,17,4,16,20,19,18,9},
{16,10,20,10,4,9,13,16,9,14},
{15,11,20,6,10,5,13,15,9,12},
{14,16,16,3,12,9,13,23,5,14},
{7,17,15,7,18,8,11,20,8,9},
{12,20,18,9,25,12,7,19,10,13},
{11,21,15,14,20,18,11,20,11,12},
{14,16,16,20,23,17,15,17,19,15},
{11,18,14,22,23,18,14,0,19,20},
{16,16,17,27,19,24,23,0,21,23},
{21,12,15,29,13,25,23,0,22,23},
{16,11,18,24,10,24,25,0,22,10},
{7,11,11,13,11,7,11,0,11,8},
{5,2,10,20,0,12,5,7,11,4},
{19,11,23,28,0,30,22,9,29,14},
{25,11,26,26,0,25,28,17,20,18},
{19,11,26,22,0,21,21,18,18,9},
{19,13,22,19,0,21,20,15,17,15},
{17,19,24,14,6,12,16,22,13,15},
{16,19,18,14,8,8,15,21,14,16},
{12,17,18,14,14,9,12,21,14,15},
{13,15,18,15,23,18,10,21,11,18},
{13,21,18,17,21,21,13,19,11,12},
{12,19,14,21,21,20,19,17,15,18},
{14,21,13,24,22,22,21,0,19,21},
{21,20,19,28,19,24,19,0,18,20},
{16,16,19,22,10,24,22,0,22,15},
{7,15,21,13,8,12,14,0,19,8},
{2,15,14,1,6,2,2,0,4,3},
{3,10,19,15,0,15,5,8,7,3},
{7,13,28,21,0,16,5,14,11,6},
{14,13,28,26,0,30,21,16,27,16},
{26,13,26,26,0,26,27,14,27,23},
{24,20,26,22,0,17,26,24,24,17},
{23,21,26,18,6,16,26,23,23,15},
{20,20,26,17,8,15,23,21,20,14},
{19,16,26,17,16,17,20,21,16,16},
{11,15,29,14,22,22,18,21,13,12},
{12,21,28,19,21,21,15,18,14,15},
{16,20,27,24,21,21,18,5,18,18},
{19,23,24,25,22,23,20,0,22,15},
{15,22,23,21,20,21,22,0,21,9},
{7,18,23,12,10,4,13,0,14,8},
{2,17,22,1,8,1,1,0,3,3},
{2,17,10,0,6,1,1,0,1,3},
{0,13,21,6,0,8,0,6,0,1},
{0,17,19,9,0,12,0,16,2,0},
{3,13,19,10,0,13,4,15,5,6},
{3,12,19,14,0,10,4,12,10,6},
{9,18,19,15,0,15,7,12,11,20},
{18,18,16,18,7,16,17,13,16,16},
{19,13,16,23,12,17,18,18,21,19},
{20,14,16,23,16,24,23,19,21,17},
{22,17,16,24,23,24,23,19,20,17},
{17,23,17,16,19,20,15,18,14,9},
{9,22,17,4,20,8,12,0,10,2},
{3,21,17,2,21,1,2,0,3,3},
{2,21,19,2,20,1,1,0,1,1},
{0,18,16,0,14,0,0,0,0,0},
{0,19,17,0,9,0,0,0,0,0},
{0,16,9,0,7,0,0,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
