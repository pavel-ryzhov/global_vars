// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={10,15,5,2,7,2,3,4,2,3,3,-2,5,3,1,6,8,9,3,-5,13,0,-1,-6,-8,-5,3,5,4,-4,-5,8,10,5,-2,0,1,2,-1,-3,12,5,9,7,11,1,2,4,12,-2,7,-4,1,1,4,3,4,-2,6,0,1,0,12,2,0,7,-2,-6,9,6,0,3,-4,0,5,2,8,11,9,11,3,1,5,2,9,3,-1,-2,-6,0,-1,-1,1,-5,7,14,14,0,8,5,-1,3,-11,-7,-12,-5,-8,-18,-3,-6,1,18,16,9,1,-1,-2,0,-5,-9,-9,-8,-4,-5,-8,-3,-1,8,11,3,8,-2,-1,2,-4,-13,7,-3,-1,-11,-8,-7,12,5,14,10,11,2,1,-3,-5,-9,4,-9,-5,-2,-6,7,7,4,7,11,14,10,2,-1,10,1,1,-3,-1,-1,4,-3,1,7,8,7,14,11,2,3,2,4,2,10,2,-5,3,-2,-3,-2,3,0,3,-2,14,0,4,-2,-4,2,3,3,6,-3,-1,-7,8,1,-1,1,5,7,2,3,-8,2,-2,-10,1,-8,2,-6,8,5,4,-2,2,6,-2,-2,-5,-8,-2,2,2,3,-3,-3,1,5,-1,-1,-8,-7,-4,-4,-3,-7,-6,-4,3,-2,0,8,12,11,-11,-4,-17,-12,-13,-18,-18,7,-3,9,3,9,7,14,14,23,1,5,-14,-2,-4,2,-3,-2,0,-6,-6,3,3,3,9,1,-6,7,2,9,5,11,1,10,7,3,-4,1,-4,14,4,-7,3,1,-6,-2,15,5,4,1,6,-5,-8,-7,-1,5,-6,3,12,1,-2,7,1,10,2,0,-1,8,-5,-3,3,3,3,4,-3,-3,-9,-1,9,8,-4,-1,0,6,-7,-2,12,1,15,4,-10,-13,1,-8,8,4,-3,6,1,5,-5,-2,10,12,7,4,-1,-1,-9,-6,8,2,-9,-8,-4,-8,-17,-5,5,2,5,-7,0,-7,-4,-5,4,5,-3,2,-7,0,-16,2,6,4,5,1,-6,-12,-1,-10,0,8,4,0,-5,-1,-7,-2,2,-2,3,5,1,-12,-5,-2,3,12,0,1,-2,2,-5,11,1,-2,3,-6,4,-3,-8,4,2,7,-6,5,1,1,-2,5,-8,-14,0,-8,-4,-14,0,0,6,6,-3,8,-1,12,11,3,-6,-10,12,3,-10,-13,-5,-16,2,-9,-5,6,0,3,-1,-6,6,1,4,9,1,-7,-9,2,-4,13,-11,11,-3,8,-4,-2,6,19,9,10,7,15,-2,6,-13,2,3,0,4,5,-7,3,8,14,14,9,16,15,8,1,2,3,4,-4,-6,0,5,2,6,-5,4,2,-1,-2,-4,-7,0,-2,3,3,-3,-1,3,5,-4,7,10,4,8,5,-6,2,-8,-5,-8,-3,5,4,-1,-5,1,1,11,12,4,7,2,0,0,-4,-4,2,2,12,4,2,2,2,1,5,-1,4,0,6,0,8,5,4,-1,5,7,-5,-3,3,-3,-2,-2,-3,-4,-4,-3,1,8,-8,-3,1,1,0,-1,8,-1,6,-3,-2,2,-4,-11,1,-2,-4,-9,-1,2,-3,6,4,1,0,-5,-7,-3,-8,-11,-6,-5,-4,-1,8,5,10,-5,-4,9,0,0,1,-3,-1,-10,-7,-5,-1,5,6,1,4,-3,-3,7,6,4,-5,0,-1,-6,2,2,11,-1,-6,-7,-5,-8,-11,6,2,-1,-2,4,-5,-1,2,10,6,-2,-4,-8,-4,-8,-4,3,1,-3,0,9,3,-1,6,8,-2,-10,-5,-7,-3,-3,-8,2,2,-1,6,10,16,14,3,7,1,0,1,-1,-1,1,4,4,8,1,5,11,7,12,-1,-1,8,2,-1,-1,-2,3,12,13,9,3,10,7,-2,1,1,2,2,-5,1,-1,5,15,21,13,18,12,0,1,-3,-1,3,3,2,5,4,3,12,22,18,27,24,24,11,7,6,-5,9,2,-5,-3,-8,-15,3,4,4,13,12,-9,2,3,-3,10,9,-1,-3,-9,-4,-5,8,-5,1,12,9,8,10,5,1,-2,0,0,11,-7,-2,6,2,-6,3,12,16,12,-3,-3,-10,-7,-3,-2,3,-2,8,-11,-2,-11,12,-3,-8,-3,-11,4,2,8,1,5,4,2,-4,0,3,9,-5,8,-18,-17,-15,-4,-6,-1,3,9,-7,2,18,15,5,2,-12,7,-11,-14,-15,-6,-4,-5,7,-5,-5,1,0,-9,-6,1,1,5,-2,-10,-6,7,-2,9,7,-5,-4,-2,-4,4,7,-8,0,14,-1,-9,-4,1,-2,-15,5,12,-5,0,7,4,8,8,9,10,7,6,-2,-3,-19,-1,-6,-8,0,-9,10,-4,4,12,8,12,0,-2,-10,-10,-8,-9,-6,6,-1,-7,-3,1,9,11,9,8,-7,-2,1,4,1,3,-15,-3,-3,-8,4,-1,10,4,4,20,11,-4,10,8,-1,4,-8,4,1,0,6,-14,-1,1,3,19,12,8,-7,0,-3,-3,-7,-2,-1,0,3,-2,-1,-9,1,19,3,16,0,-10,-2,-10,0,11,-5,9,3,-3,3,-5,-3,11,15,9,1,-7,-5,-11,-8,-4,-10,-9,-2,-7,-1,-6,8,9,11,11,5,-2,-6,-7,1,-8,-11,-1,3,9,0,2,10,7,6,-7,-7,-13,-10,3,-2,-14,-1,0,-4,2,2,-3,13,7,-2,3,-3,-10,-12,-5,-10,-3,8,6,-1,3,5,0,6,2,-2,-9,-9,-12,-3,-3,-9,3,6,0,7,-9,-4,-6,2,-2,-4,-3,0,-6,4,6,3,4,-2,4,7,5,-2,-7,0,2,-3,-5,-1,-2,4,9,1,7,0,7,-4,2,-8,-6,1,-1,1,-4,8,2,5,-4,10,2,5,1,-8,0,-8,-8,-3,-6,2,1,12,4,7,-9,1,-6,7,0,-4,2,-5,-2,2,-1,4,5,6,9,8,7,6,3,-2,0,-1,2,0,4,3,11,13,11,6,-2,3,0,-6,1,5,4,-4,1,4,2,9,2,15,4,4,6,5,3,0,6,9,0,-2,7,-8,-3,0,0,3,0,-2,6,10,7,3,12,15,4,1,8,-5,3,2,11,-1,-9,1,4,5,-8,-4,6,6,3,2,-2,2,-1,3,6,-6,-7,-7,-2,-6,-4,-4,-2,-4,3,1,-4,-11,-10,-1,7,-5,-6,-9,-13,-6,-13,-4,-1,-2,-1,6,-4,-7,-1,9,6,6,9,3,-9,-11,-7,-4,-2,-12,0,0,-3,3,10,2,5,10,16,6,14,5,-2,-2,3,-3,-6,-11,-7,-1,12,9,8,-3,8,1,13,7,0,-4,-4,-8,-6,-8,-1,-5,10,14,9,1,13,5,6,3,-2,5,0,3,7,-1,-1,-5,-4,5,4,-6,1,13,4,3,-4,1,10,3,5,-5,-2,-7,-11,-3,2,-8,7,7,2,6,-1,-4,7,5,1,8,2,-7,-11,-10,-2,1,-3,5,0,7,10,-8,13,10,5,-2,-2,-19,-5,3,7,0,9,3,8,6,5,1,10,6,0,4,-7,-5,3,5,3,-8,-3,0,-8,-6,-7,-5,7,8,2,3,6,1,11,2,8,-1,-5,1,2,2,-1,-13,-1,-4,0,1,5,7,-3,5,-3,-2,-5,1,4,7,2,-7,5,0,2,-12,4,3,0,10,-12,-9,-9,-3,-1,-6,-11,-16,5,-2,-5,-1,-9,4,-3,6,2,4,11,3,5,-7,-5,-3,2,1,-1,-3,-7,-1,3,6,5,-9,5,4,1,-7,-17,-12,4,3,0,3,-1,0,2,4,9,12,-1,4,-1,-8,-4,-3,2,2,6,-4,-1,3,6,-7,18,11,1,-8,1,-1,-6,-9,-1,-6,-1,1,3,6,-3,-4,14,11,3,6,0,-16,-4,-10,4,2,-1,-4,7,-4,5,12,28,23,8,-7,-15,-6,-16,-11,6,8,-7,2,10,-2,-5,19,21,8,-1,7,-3,-15,0,10,-1,21,-4,7,7,-10,0,-7,9,0,-2,-2,-14,-1,0,8,2,-6,-8,-3,-20,-20,-8,13,12,-5,3,-6,1,-4,-4,0,-6,6,-3,-12,1,-2,-17,21,12,4,-3,2,-9,5,-9,-4,6,-5,-4,-14,-14,-16,-20,-10,14,0,-1,1,-3,2,-2,0,4,2,4,-3,-3,-2,-4,2,13,5,0,-5,4,0,3,4,6,0,2,1,-1,4,1,3,9,11,6,5,12,8,7,9,-2,3,2,-1,2,10,-4,5,7,6,1,13,3,3,-4,1,-1,6,-6,-5,4,1,3,3,4,8,16,12,-2,5,-7,2,-7,0,-7,2,0,8,3,1,10,5,13,6,1,5,2,-1,4,8,-4,-3,10,3,-1,6,0,7,12,3,7,4,-2,-2,2,4,-1,1,14,4,0,5,1,2,2,2,3,4,6,-4,3,6,3,4,5,-2,0,7,6,3,11,4,11,10,1,1,-3,3,6,3,-6,0,11,13,1,6,0,0,5,1,6,4,0,-9,-9,-3,-8,6,3,2,12,7,1,7,10,-1,2,2,-2,-2,1,1,1,4,9,9,12,21,11,8,1,2,-4,-3,-2,1,0,-2,7,13,15,15,13,13,7,-11,1,-4,3,-2,6,2,8,3,2,7,13,13,14,8,1,1,0,-3,2,0,6,10,3,-3,0,2,3,10,5,-1,-1,-3,-3,-5,0,8,8,2,-2,-6,-3,4,-1,-3,7,2,2,-3,2,2,4,-5,4,-3,-10,4,0,2,-1,-6,9,-7,-3,-2,-2,-2,6,-9,-9,-4,0,-3,4,3,0,-9,6,-1,-6,0,-5,3,-6,-7,-5,0,3,4,0,-5,-12,-9,8,8,1,-1,5,1,-8,-5,-2,-2,4,-3,-1,-6,-14,2,5,5,-1,5,10,-3,1,-8,-3,4,4,-2,1,-10,-5,1,9,10,10,2,6,-4,1,-1,4,11,3,-9,-6,-7,-7,3,8,6,0,0,2,6,1,-5,14,-3,-2,-6,-3,-11,-3,1,3,-3,1,1,5,9,5,5,8,6,0,0,-1,-1,-1,-3,3,-6,0,0,2,-1,2,5,6,3,2,3,-8,-7,-3,-3,1,0,-6,-4,0,-7,-5,5,4,4,8,-6,-5,-7,-3,6,3,4,-1,-5,-1,-4,-2,7,2,-1,0,-1,-5,-11,1,-3,8,3,2,-11,-7,-2,8,3,-6,-8,-7,-9,0,-3,-3,-1,17,13,3,6,6,-8,0,0,-1,6,2,2,0,-4,8,7,14,5,3,3,-1,5,1,-8,-7,-4,-1,-14,-1,9,7,13,7,18,4,-5,5,4,4,-10,-4,1,6,-9,-1,-7,8,-2,12,1,2,2,-5,-6,6,-5,-5,-8,6,1,6,-1,1,8,0,4,6,-1,2,-3,1,-6,1,-5,-5,-1,-3,8,8,3,-5,2,2,2,13,14,5,-11,-1,-6,-7,0,11,13,15,3,-9,-7,-2,3,13,14,14,1,3,-1,4,1,3,4,-8,-7,-4,-2,1,12,2,12,14,7,-3,7,-9,-2,1,-3,-6,-8,-3,-3,4,-5,4,3,4,11,8,8,1,-2,-4,0,-3,-8,-3,16,14,2,12,2,-12,-3,6,5,10,0,-4,2,2,2,12,18,14,9,4,2,-13,-15,-3,2,2,4,2,1,4,4,10,10,4,4,3,6,-2,-7,-6,8,4,-11,-7,-3,-2,6,19,8,3,2,1,11,-3,-2,1,-6,-2,-6,-4,8,6,0,-1,16,2,-3,0,1,-6,-9,-14,-6,-3,-13,-6,-1,-2,3,9,2,15,2,1,4,-1,6,0,-4,-3,-7,-5,-8,9,5,13,14,6,2,1,1,-1,2,0,-2,-11,-11,-14,9,6,5,13,6,7,1,0,-3,5,-6,6,7,3,-2,-3,0,3,10,10,14,5,-5,-6,-3,1,3,0,5,-1,3,13,1,6,3,23,13,-1,2,-1,6,2,-1,-2,6,-1,6,5,3,-6,6,14,4,7,1,0,1,-6,-4,-7,-1,-1,4,3,0,1,11,7,7,5,0,8,0,-5,0,6,11,8,-4,1,2,-7,9,14,7,0,2,-7,0,4,9,13,3,4,-1,0,-5,-1,13,21,3,12,7,0,-1,-4,2,0,-2,1,-4,-9,1,6,18,9,16,6,-2,6,-1,-5,7,4,-1,-12,-9,1,-1,-3,16,-2,9,11,4,4,6,9,5,-1,9,-8,9,7,1,7,9,4,-10,-4,7,2,3,10,9,-1,-5,1,3,1,7,6,7,9,-6,-9,-3,-2,9,8,2,-5,7,-4,1,-1,-6,-6,-1,-3,-9,-6,-11,-3,-6,-3,-2,-1,-4,-5,-2,9,6,-4,-1,6,-1,0,-1,5,-2,-8,-2,8,5,-3,3,5,-7,2,-7,7,5,-2,-11,-3,-8,-1,-8,-6,2,1,1,-1,-6,1,-1,10,-1,0,-4,1,1,-5,4,0,-6,0,-6,-8,-4,-3,4,12,10,9,9,9,-1,-8,1,-2,-7,-5,-1,-9,-8,-4,8,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf)
			if ((cnt==m-1)||(cnt==m)) {yright[k]=j; lf=false; k++;}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])+10) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '%' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

