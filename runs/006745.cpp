// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={31,24,32,-1,8,9,10,3,-5,-4,8,-7,-2,-4,-14,1,17,16,-6,-2,10,-3,-2,-7,-9,0,4,-10,-9,-9,-16,-3,9,0,3,-3,0,11,-4,-12,-7,6,16,-4,10,2,-3,-3,11,5,-4,-15,-2,0,3,-10,-1,9,5,-9,0,-15,3,-15,11,-4,1,13,26,21,3,6,-7,13,14,-3,7,14,14,22,4,-4,10,7,14,6,-4,-3,-5,3,4,2,-4,0,12,15,21,15,19,0,4,-4,-12,-14,-15,-2,-19,-33,-20,-5,8,33,37,16,-6,-20,-5,-7,-4,-14,-20,-19,-13,-12,-13,-24,-12,7,22,16,-7,-17,-6,1,3,-16,-6,0,-2,-16,-5,-14,23,4,21,13,2,-15,-10,-12,-4,-12,-5,-12,-12,-13,-1,4,4,-15,14,34,13,11,3,-2,7,0,-4,-10,-2,-6,7,-8,2,-2,9,10,11,14,5,20,-1,-5,-3,7,-1,-10,0,-5,-18,-9,16,3,6,7,13,11,5,-3,-5,5,8,0,-1,0,12,-26,-3,-2,4,14,6,16,19,12,-11,13,3,-11,-2,-1,-3,-19,9,10,3,-5,5,9,-1,-3,-12,-3,1,-19,-1,10,-2,-12,16,-2,-6,-6,-25,-14,-5,-11,-16,-10,-7,-7,-2,13,-15,-1,10,21,-13,4,-41,-6,-11,-2,-26,-9,-9,9,29,29,11,26,-8,33,23,9,-24,-4,-6,0,-13,-8,2,-8,-12,-19,-7,23,21,21,4,-11,14,7,11,7,-15,8,-3,7,-2,-13,-20,20,22,-27,1,-9,-4,16,23,3,-6,23,-8,-9,-2,-31,-25,11,-10,-13,14,1,4,25,13,28,12,36,3,26,5,-3,-7,9,-3,4,3,-15,3,13,17,12,8,5,-22,20,-17,-12,4,17,19,28,-4,-11,-1,-16,12,8,-11,12,3,-3,-25,-10,4,18,29,18,9,-7,-23,-22,0,10,-3,-24,-24,-28,-9,-25,-17,16,13,-17,-24,-29,-16,5,-8,5,-9,4,-1,2,-12,-22,-6,22,3,-5,-36,-16,9,-20,-10,16,-4,10,-9,-31,-3,2,16,4,-9,9,-7,-16,-5,6,3,-2,-4,-5,-6,12,15,21,5,-16,-3,-40,-2,-11,-4,14,-10,-5,-6,-7,11,7,14,13,-32,-26,-4,-36,2,-16,12,10,-6,16,7,-2,3,32,35,19,4,-32,10,9,-18,-21,-7,-12,6,17,-1,4,2,21,1,-8,0,-7,6,-3,-11,-23,-13,-2,6,19,-5,15,-3,18,0,12,26,25,19,4,17,31,-2,-12,-17,-6,1,-22,-12,3,1,17,28,60,6,-5,10,3,18,5,14,-5,-2,-16,-12,-6,-13,0,2,-11,-4,-4,-9,6,-16,-15,2,2,-5,-3,-13,-5,-3,-5,-20,-3,16,0,12,1,-6,0,-10,-11,-14,-13,1,0,9,-3,-5,-5,5,-4,-6,1,8,0,-6,-12,-8,-10,-4,6,4,2,8,-4,-7,-5,-1,-6,20,10,10,-2,5,-4,3,-3,7,-3,3,13,11,10,10,-1,8,-4,-5,-13,10,-12,-5,-7,-9,0,13,10,7,30,11,-10,6,-4,-21,-3,2,-8,1,-7,8,3,26,8,7,0,-17,-9,1,-10,-21,-20,-5,-16,-1,2,9,16,9,-8,1,6,6,1,5,3,-14,-3,-5,-5,19,4,5,6,-11,-33,3,24,16,5,0,11,4,-2,-6,-3,5,-18,-7,-13,-16,-39,8,0,-9,2,12,1,3,-8,-6,2,2,-12,-18,-16,-32,-38,13,-7,-5,-14,3,5,11,-2,0,6,-8,-9,-3,-19,-7,-4,20,4,-1,-6,14,30,20,1,11,-3,-10,-5,13,-7,7,14,16,-4,-9,3,13,17,24,-9,-1,2,2,-5,1,-14,7,20,15,17,11,10,7,-2,5,-1,10,8,-1,-13,-9,5,17,33,15,36,18,-20,-17,-19,-1,-9,3,0,-3,-4,-3,16,36,18,88,25,71,30,-18,47,2,8,-15,-8,4,-21,-52,-2,-19,-15,12,17,-30,1,-8,-36,15,4,-32,-2,-14,9,-8,-1,-8,-34,13,18,13,-31,34,28,11,-7,-1,0,-18,5,3,1,-9,-24,21,-5,23,-14,16,-11,-14,-4,-27,-6,-9,-15,-6,-23,-34,33,-12,-37,34,-44,35,25,21,-8,-8,23,-5,-11,11,12,62,30,-3,-35,-20,-42,-15,-31,44,30,24,22,17,33,12,24,21,35,38,-32,-51,-76,9,-39,-4,8,-12,-24,-14,9,-16,15,-2,-18,38,-3,-17,-23,18,-15,34,40,-20,-41,7,5,3,2,-33,-45,43,-8,24,-21,-24,1,10,22,1,20,21,10,5,-5,-1,-4,1,-32,13,-43,-26,-38,14,7,-31,1,4,1,7,51,33,17,45,21,23,-15,-21,-19,-6,-29,21,-12,24,-18,20,20,82,2,35,-30,-11,-24,3,-6,-4,-34,-18,-26,-7,-19,12,-5,-3,59,51,20,-13,-5,23,16,-11,-49,3,12,33,1,-1,-20,24,6,60,25,-11,6,-19,44,14,-12,-15,-2,-5,-46,19,-12,-12,2,48,14,-27,-5,-33,15,11,7,6,4,14,-8,-2,-16,2,-10,72,56,4,-12,-30,6,-30,1,-39,-11,-22,-11,-28,-2,-39,-29,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,65,2,6,36,24,-5,10,-26,-5,-35,-2,-33,-11,11,56,-13,10,-21,14,21,33,15,8,-22,-12,-48,-24,-40,-31,-21,40,28,-1,5,23,-7,0,11,22,-11,-30,7,43,43,-17,-49,10,-11,-18,8,-5,5,30,11,0,-43,22,1,9,-15,6,-37,-15,-41,-54,-6,-45,5,30,-16,1,12,-1,-31,-29,-10,-4,-23,-47,-2,36,3,39,7,14,25,28,-26,19,-4,1,-32,8,-19,1,-5,7,26,-17,-1,10,30,3,-17,-4,22,18,-34,-37,1,-5,57,-11,0,-1,30,-26,20,-3,-3,-7,10,22,33,16,7,19,8,54,13,29,37,-36,-18,9,-57,-1,-16,-22,3,-19,-19,-43,27,9,-10,-29,-45,8,37,-42,-13,3,2,-6,-44,-6,-3,20,-10,-20,-47,-13,-45,1,20,-33,-10,17,-30,-23,-23,17,24,-7,16,22,-54,5,7,29,-27,-29,9,20,-1,5,-5,-7,7,-43,-8,21,-11,35,16,-5,25,-5,0,34,9,12,19,-19,32,24,12,73,20,3,-28,-7,-26,8,19,44,2,22,0,-15,13,20,1,48,33,-1,-10,1,-59,-20,9,17,24,-27,37,-1,8,5,-48,32,33,-1,42,-6,-24,-20,-14,-2,16,-13,-22,3,-14,-3,6,29,12,15,-6,-8,9,-9,-20,-9,-15,-22,-1,-5,-1,-6,22,8,-15,-22,-16,-8,-10,-3,-7,-18,12,-31,-10,-14,-23,19,-22,-2,1,-15,-5,17,4,1,-3,9,-1,-33,-18,-1,-45,-5,38,-1,-26,-8,1,6,-9,-19,-19,-7,3,-30,-43,-14,9,-30,30,33,-17,14,-1,10,12,12,9,39,-4,-23,-27,-15,9,-17,-1,29,1,-4,4,4,-21,5,-15,19,5,1,-40,-28,-23,-31,-33,40,28,3,-28,-13,-15,2,1,7,11,9,22,2,3,-8,-30,30,32,-13,-24,1,-17,20,24,-3,16,11,-4,5,25,29,-28,14,41,16,-10,2,-18,-5,-4,-2,9,7,-8,-3,4,16,-22,11,19,11,13,5,-16,4,-19,-24,-1,14,11,3,-5,14,-24,15,50,50,3,16,30,15,-12,-9,-7,13,0,15,8,8,-11,3,2,11,-2,-4,21,5,-11,-1,-7,6,-4,21,-23,-1,-12,4,1,7,-7,-14,13,5,-9,-2,-17,-20,15,20,-27,29,20,-1,-18,24,29,34,19,20,-8,12,6,-7,-8,1,5,-10,-8,-14,-1,13,1,12,2,13,-15,15,-8,-16,-14,-35,-5,46,29,33,8,12,-4,-21,-12,1,1,-29,-37,-30,-22,4,13,0,0,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,50,28,14,25,17,-1,19,-21,-24,-7,7,-9,-15,-33,3,-4,25,8,-4,-2,-20,-16,0,-3,-32,-11,-2,-45,-10,-18,-22,-4,6,9,1,2,12,23,-1,-19,-9,-34,-11,-38,8,-28,-3,5,29,-16,31,13,-8,-13,13,-34,10,-11,-7,-34,23,-12,0,-29,3,13,17,-6,9,24,-10,1,-28,-4,-6,0,4,-15,35,6,2,13,11,15,20,-11,6,-4,-30,-19,2,-5,10,14,46,34,-26,8,3,24,22,59,37,8,34,0,-5,-34,2,17,3,-12,-15,-53,-20,-11,-11,21,37,-4,-22,4,-14,-19,-8,-34,-1,-63,-18,-8,-9,-30,19,14,-7,20,27,17,8,5,5,7,14,-9,18,3,47,31,37,21,-5,26,17,14,21,1,7,7,3,-25,57,35,35,-14,9,-1,-18,-12,16,19,-1,17,7,6,17,-23,21,23,-9,-25,-28,5,-29,-4,-1,-11,-1,-10,-22,18,-19,13,46,27,22,-3,-2,12,14,-31,-18,-21,3,-7,-17,15,-9,9,28,13,3,-22,-1,-2,9,14,-3,3,4,-2,-9,8,-17,18,0,19,-6,21,6,19,-2,-3,9,-5,-16,-30,-6,7,14,24,48,-11,-29,-11,-20,-22,-10,3,-29,-15,-30,-34,-29,30,-5,-6,19,18,7,-3,10,13,19,-8,-8,9,-3,-8,1,-36,-13,12,32,12,19,-17,-22,-1,-5,-1,2,7,-7,-35,-17,-7,-10,-19,31,13,-3,-6,13,10,2,-3,-24,8,7,0,-7,-11,-2,4,28,4,5,-7,-6,-7,-6,-28,-5,9,3,-4,9,-18,-15,11,13,5,9,-12,14,-2,-17,-2,6,7,12,-24,9,4,3,7,34,17,20,6,3,14,6,3,9,-7,12,9,-4,-15,3,31,29,19,16,9,-2,1,6,-10,-30,-12,15,-4,-13,1,18,32,11,16,26,-10,20,-1,-5,1,-6,-1,-18,-11,11,-5,7,28,-10,3,9,18,0,4,7,-5,-3,9,-26,-1,-1,-3,13,13,-24,-34,-2,9,6,25,28,17,11,-5,1,-19,-7,5,8,-1,5,-18,-23,-35,-10,13,22,6,13,11,2,1,3,10,10,9,-13,-25,2,-17,-1,-10,13,-4,-17,0,-3,6,11,-2,-18,-11,22,-3,8,-7,-7,-10,-16,2,4,11,-7,-1,17,1,12,-23,17,-1,10,-13,-3,-12,-1,2,-18,12,7,-7,5,-6,-19,-19,8,13,0,-4,-5,9,1,-12,-20,-18,-6,-24,-2,-16,3,6,14,0,3,11,1,-1,-2,1,-20,-21,-21,-25,-23,-6,-2,2,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) 
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			
			
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

