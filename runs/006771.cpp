// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={9,14,6,5,10,5,2,5,5,4,0,3,8,4,0,3,9,10,0,-4,10,-1,-2,-5,-1,-4,0,-2,-9,-7,-4,9,11,4,-1,1,2,7,-4,-4,5,6,10,4,6,-4,-5,1,13,-1,-2,-9,-2,0,11,2,1,-1,1,-5,0,1,-1,-3,1,2,-11,3,8,13,7,2,-5,3,10,-1,3,10,6,-2,0,2,4,9,10,4,2,-1,-3,9,6,4,0,-2,12,5,5,1,7,14,2,6,-4,-6,-11,-2,-3,-15,-6,1,8,13,15,12,0,4,1,-9,-4,-14,-12,-9,-5,-10,-11,-2,4,13,18,6,3,-9,-2,-3,-3,-14,4,2,6,-16,-17,-10,9,10,11,21,6,-7,-6,-10,-4,-12,1,-10,-6,-7,-9,2,6,3,4,22,13,5,-5,-10,5,-8,-2,-8,-6,-4,1,-10,2,8,1,16,15,12,-3,4,1,-1,3,7,3,-6,0,-1,-8,-1,4,5,12,1,15,3,11,-1,-3,5,6,6,3,-4,2,-12,9,-2,4,8,4,14,5,4,-5,3,1,-7,4,-7,1,-15,7,6,-3,3,5,11,-3,-5,-4,-1,3,-9,5,6,-8,-4,2,6,-6,-2,-11,-6,-1,-1,-4,-2,-3,-3,2,-9,1,7,11,14,-6,-3,-12,-11,-12,-15,-15,4,-6,2,0,4,12,17,13,24,2,16,-13,-11,-5,15,-14,-7,-7,1,-7,-6,2,10,8,2,-1,4,3,0,8,-2,-10,-17,-2,-4,-3,6,-13,25,5,-8,2,-2,3,-1,22,4,1,4,11,4,-5,-14,-12,14,-5,-6,9,6,1,18,10,19,3,3,6,9,2,-8,-8,14,6,1,-6,-2,-2,2,14,19,1,6,3,-3,0,-3,-1,22,18,5,-5,-8,0,-9,5,5,-4,7,0,0,2,1,-3,15,14,7,-4,-6,-4,-25,7,21,-12,-3,-3,-5,-16,-8,-6,-1,10,-10,-9,-14,3,-6,9,14,2,1,-4,-7,-13,-9,-1,19,4,-10,-15,-15,4,-9,1,15,1,-7,-6,-14,-6,-9,5,5,-2,0,-2,-7,6,3,8,17,-1,-6,-7,-1,2,12,-10,-3,6,-15,3,-4,-3,-7,-3,14,-7,-4,-4,2,3,6,-21,-17,5,-11,-1,-13,11,-5,5,9,-2,3,6,19,22,2,-11,-5,13,-4,-15,-16,6,-13,1,8,-2,-1,1,12,6,-5,-1,4,1,-10,-4,-20,-2,-17,-7,14,-14,10,2,9,-1,-7,1,26,14,5,4,20,-3,-23,-24,-3,-6,-15,1,8,-12,6,7,47,12,7,12,13,6,1,2,1,8,0,-2,4,7,4,6,-5,0,-4,-5,-4,-6,-9,0,0,3,1,3,3,5,3,-6,3,2,-2,2,3,-10,0,-8,-5,-10,-9,3,0,1,-7,1,-1,3,2,2,3,-4,10,-2,-6,-8,-2,-6,8,0,0,2,6,-3,7,3,2,-2,0,-4,0,1,-4,-9,1,1,-3,5,-1,-1,0,-2,-1,-6,-6,-5,1,4,-14,-7,-3,-3,6,7,4,-1,6,-3,-4,0,-8,-7,-3,-6,-8,-15,-7,4,3,14,-2,1,0,-3,-7,-1,-8,-11,-8,-7,-12,-7,6,7,12,3,-6,7,4,4,3,-1,-7,-12,-17,-11,-9,5,8,3,8,-1,-7,7,6,8,-1,2,-3,-4,-4,-2,5,3,-4,-5,-5,-10,-13,6,2,1,2,6,-3,7,-2,6,6,2,0,-10,-10,-6,-8,3,5,-3,-4,7,5,3,2,6,0,-8,-7,-7,-7,-5,-8,6,0,-1,6,8,12,14,1,5,-3,-6,-3,-3,-5,-3,-6,8,14,1,17,11,15,22,1,-3,14,2,5,-1,4,11,10,9,3,-5,8,3,-6,-1,1,6,6,-5,-3,-3,-3,9,11,11,24,12,4,-7,1,3,7,1,8,1,8,-1,14,30,16,31,26,26,13,13,6,-9,1,6,-5,9,4,-1,3,0,-2,9,22,-3,-4,3,1,-4,-9,-17,-9,1,4,-21,-2,-9,-13,8,3,-4,8,3,11,-2,6,-10,13,-19,-20,-2,-20,-10,-11,6,0,-2,-1,17,-12,-3,-5,8,1,0,6,-3,-10,33,6,1,-6,-5,-7,2,14,18,1,7,-12,4,8,14,5,21,-3,14,-24,-9,-17,2,-10,5,-1,13,-1,16,16,7,9,-4,-22,11,-15,-26,-27,-12,-18,-21,-1,-1,-11,-11,-8,1,-14,5,-11,3,-6,-14,-32,1,-24,-3,5,-5,-6,-4,2,10,-7,-6,-16,22,3,-3,-10,-1,2,11,31,12,13,18,-3,4,-4,4,13,14,3,2,-6,-7,-3,11,2,-22,-2,-9,6,10,14,16,12,6,-8,-4,-20,-6,-4,-7,-14,4,-3,-3,-7,1,19,25,9,-6,13,-8,15,6,1,-3,-21,3,-5,4,12,1,-10,6,16,22,11,8,-2,10,1,-6,-20,6,-1,16,2,-4,7,17,7,25,20,4,7,4,-3,-11,-15,-2,-5,22,-11,2,-9,-21,5,11,9,-4,-6,-4,4,-8,-2,13,-1,15,-13,-3,3,11,-3,15,21,-1,3,-11,15,3,10,-6,18,-3,-14,-17,-25,-12,-2,10,12,12,6,3,-1,-6,2,-7,-8,4,8,6,-5,-1,5,6,5,-6,-4,-8,-7,2,-3,-15,-2,-3,-9,-3,1,-2,8,8,-5,2,-2,-5,-9,-6,-13,-4,9,1,0,0,6,-3,-1,3,-1,-6,-6,-7,-4,-8,-18,0,11,3,8,-8,-3,-9,-3,-3,-1,0,-1,-3,-1,1,-6,1,1,9,6,6,-1,-8,-5,1,-2,-4,-2,-5,-1,0,-2,8,5,8,3,3,-5,-7,-4,2,0,-1,5,-1,0,-3,9,-1,0,0,-3,1,-3,-9,-8,-5,-1,4,5,-1,10,-4,-8,-7,2,5,-1,-1,-8,-3,-3,0,7,8,7,10,15,2,3,4,1,9,2,3,1,3,0,10,16,14,9,1,10,1,-5,0,8,9,-5,0,5,-1,10,1,16,9,7,7,4,2,-1,7,8,-1,3,6,-5,-4,-1,3,8,5,1,5,9,10,2,11,16,11,8,7,-2,4,3,14,2,-6,2,5,10,-3,1,7,9,8,5,-3,7,4,8,9,-3,-4,-8,-3,-5,-1,-3,-3,-5,10,6,-5,-6,-9,-2,8,-6,-7,-14,-16,-11,-16,-11,-4,-5,6,13,-5,-4,-2,8,5,3,6,-4,-12,-22,-14,-9,-5,-13,11,9,2,6,17,-1,15,20,26,4,16,3,-4,-4,1,-3,-2,-9,-3,-3,20,17,16,-9,36,11,7,21,2,2,-24,-10,-16,-26,-5,11,30,14,1,11,15,-7,-24,-11,6,5,8,13,3,1,1,1,2,-3,2,26,9,13,18,3,0,-11,-10,1,-7,11,18,-21,-7,-17,-4,8,13,-1,0,-6,3,-14,-1,15,-15,6,-2,-25,-25,4,-8,-1,13,9,-4,25,16,-16,-9,6,-15,8,4,-7,7,-5,-3,0,15,15,-10,24,7,-5,14,6,-2,-22,-7,-17,-17,9,1,-10,-5,52,-6,-8,5,-1,1,0,-6,-13,-8,-3,-9,10,6,13,1,21,-16,-2,-5,-27,-13,-14,8,3,-5,7,-25,11,5,10,-15,-31,-8,17,-10,-21,9,-8,-2,-14,0,-1,-4,18,-28,1,-17,-5,-1,12,-15,-16,-1,-12,-5,-5,1,2,-19,24,2,-14,-3,9,-1,-7,-9,-7,0,-7,5,-7,-3,11,-13,-2,15,-7,9,14,-9,11,-9,-6,14,15,6,15,5,8,4,12,31,10,-3,-32,-1,8,4,-1,12,6,2,-16,-7,21,12,-3,18,37,7,-8,-11,-5,0,7,1,4,-11,39,-11,14,17,-20,8,9,-1,24,-6,-30,-22,32,10,12,-15,-10,-7,-14,-7,-20,21,16,9,4,0,1,-3,0,5,5,0,7,5,1,-2,14,16,-1,-4,-4,-10,-16,-5,-5,-14,-2,-11,-4,-4,-7,-5,0,4,-3,-11,-9,-15,-10,-7,-5,-3,-5,-3,-2,-5,-11,-3,14,17,-8,-8,-5,4,-1,3,-1,-3,11,-4,-7,2,-3,0,40,13,-7,2,-1,0,4,2,7,9,-2,-7,-11,-15,-5,-1,-8,22,-6,-3,3,-1,0,4,-2,6,0,-6,-15,-11,-16,-10,-8,25,3,6,-3,4,0,5,2,10,-6,-4,1,-7,-10,-21,-15,11,15,12,3,8,4,5,21,-6,9,-2,1,4,-2,-18,-9,15,18,9,7,-3,9,4,-1,-5,4,-10,-9,16,5,-3,-15,20,16,20,14,-10,-1,-5,6,1,0,-7,0,0,2,3,-1,12,15,19,4,-5,1,6,-1,10,6,-12,-13,8,1,7,0,-4,9,12,21,-5,-8,0,-4,4,-4,-15,-15,6,-12,6,-7,-3,2,6,2,-7,-6,10,-12,1,-4,-11,-6,-3,-6,-2,7,6,1,11,30,15,10,3,-3,1,-3,-4,-9,-12,-12,3,17,1,-6,6,-6,5,-3,4,10,8,-5,-3,-5,-18,-10,5,4,16,1,3,1,14,-13,-4,10,-14,-10,-9,3,-9,12,3,7,16,23,15,12,9,4,-2,1,0,1,0,0,7,11,13,15,19,13,11,-7,5,-2,3,-6,2,-4,2,-1,0,3,15,13,20,14,9,5,2,-3,2,-2,2,6,-1,-7,-2,10,13,16,7,7,3,3,-5,-3,0,28,2,0,-6,-4,-7,2,-3,-5,3,8,-2,-3,0,2,2,-5,0,1,-6,4,-2,-2,5,-4,3,-5,-5,-6,-2,-8,0,-21,-3,-4,4,-5,-2,3,2,-15,4,1,-4,0,-7,-3,-10,-5,-3,-2,7,-4,-4,-5,-8,-9,8,4,-1,-13,-1,-7,-10,-13,-2,0,6,-7,-11,-8,-12,-2,5,3,-5,-3,0,-9,1,-16,-3,2,0,-8,-5,-8,-7,-1,7,8,6,-6,0,-8,-3,-11,6,1,1,-9,-8,-7,-7,-1,10,6,-2,-2,2,6,-5,-9,10,-9,-2,-6,-5,-13,-5,-1,5,-5,1,-1,9,29,3,-5,6,8,-4,-4,1,-3,-3,-5,5,-4,4,6,10,1,2,1,2,3,-2,-5,-6,-7,-5,-9,3,-4,-4,-4,-2,-9,-3,-3,2,2,4,-10,-7,-9,-7,0,5,2,3,-3,-7,-2,2,7,4,1,-2,-1,-5,-13,-1,-7,8,-3,0,-23,-13,14,2,-15,-8,-14,-11,-25,-4,-5,-5,-3,24,20,8,11,9,-5,1,1,0,3,-1,3,3,-3,9,14,17,8,-4,4,0,2,-2,-1,-10,-5,-2,-21,-8,-10,-8,10,10,3,1,0,6,5,-1,-5,-5,0,-3,-20,-12,-6,1,-7,7,-10,-5,13,-4,-9,1,-12,8,-15,-1,-8,-3,4,-2,13,-5,5,13,8,-1,-8,-2,-7,-6,-12,-16,-8,-8,-9,3,4,-4,11,9,9,16,11,6,-6,0,-5,-4,-7,10,10,22,12,-12,0,-11,18,18,13,13,14,10,6,3,-16,18,11,7,4,-7,-15,-8,13,9,29,19,10,-2,6,-6,-5,-2,-2,3,-9,-12,-12,-7,-10,11,8,9,24,11,23,4,-5,-1,-3,-12,-9,-10,7,17,1,3,5,-9,6,3,6,9,9,-7,1,-5,-5,17,9,23,10,7,3,-10,-14,0,9,11,13,1,0,7,-1,15,19,3,1,2,1,-3,-12,-5,13,1,4,-8,4,-15,1,32,17,0,-3,-6,2,-4,-11,0,-17,-11,-5,-9,-1,-15,7,-2,11,-1,-10,-1,-6,5,-4,-1,-1,4,-18,-13,-8,-3,14,6,3,-8,9,0,-5,-8,-3,9,-9,-4,-16,0,-13,0,10,12,-5,-5,-11,-10,2,-6,7,-7,5,-8,-8,-11,0,-3,4,11,6,7,7,4,1,7,-4,6,7,3,6,-1,0,-1,4,4,12,11,-3,-4,-5,-5,-3,-6,-3,-1,1,5,-1,0,-3,19,9,-3,-4,-1,-2,2,-1,-4,6,-7,4,3,-5,-10,2,20,0,11,3,-2,-1,-6,2,-5,1,3,-6,-3,0,7,5,7,-3,9,-4,8,-2,-7,0,6,5,4,-6,-7,0,1,11,8,3,4,-6,-7,-4,6,7,9,1,4,-5,-6,-5,7,17,15,5,16,13,4,9,8,4,2,2,3,2,-7,1,8,22,3,22,8,-2,8,1,-5,5,4,-1,-10,-11,1,5,9,24,-8,3,13,2,2,4,-3,-3,-7,5,-14,7,1,3,13,13,0,-8,0,7,4,3,14,15,3,-3,3,3,-1,9,8,7,9,-8,-13,-3,0,13,16,6,-5,11,0,1,-7,-4,-8,3,-1,-7,-6,-7,-7,-4,5,6,3,2,-5,-4,9,0,-2,3,10,-1,2,-5,-1,2,-2,-2,8,5,-5,3,-3,-5,4,-9,11,7,0,-7,-3,-8,1,0,-6,0,-9,-5,-1,0,5,-1,2,-3,-10,-14,-5,-3,-5,0,-6,-10,-2,0,-2,-8,-3,0,6,-8,5,1,9,5,-2,-1,-8,-9,-9,-5,-15,-8,-6,2,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool pe=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt<m-6) pe=true;
		}
		
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])-4&&pe) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1&&pe) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3&&pe) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3&&pe) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

