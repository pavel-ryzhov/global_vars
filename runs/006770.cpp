// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={30,21,33,0,5,2,9,0,-2,-9,3,-10,-1,-7,-21,-6,16,17,-11,1,11,-4,-9,-14,-10,-3,3,-17,-10,-8,-21,-10,10,-1,8,-2,3,16,-7,-15,-12,3,19,-5,13,3,-8,-4,12,8,-1,-16,-3,-1,4,-35,4,10,6,-14,1,-20,-2,-18,8,-9,0,12,29,26,8,15,-4,16,19,2,6,13,17,23,3,-9,11,10,19,9,-3,-6,-4,-2,5,3,-3,-5,11,10,18,16,22,7,13,1,-7,-15,-16,-5,-24,-36,-21,-4,7,34,38,19,-3,-21,2,-12,3,-13,-23,-22,-12,-13,-14,-29,-15,6,27,17,-8,-20,-7,0,6,-17,-9,1,-7,-15,-4,-13,26,-1,24,16,3,-16,-13,-15,-3,-11,-10,-13,-13,-10,2,3,5,-20,19,39,12,10,6,-5,8,3,-5,-11,-1,-5,10,-7,3,-5,18,9,6,15,4,-1,4,-2,-2,6,-2,-9,3,-8,-21,-8,21,4,7,8,12,14,8,-2,-2,4,7,5,0,5,15,-29,-6,1,9,15,7,19,26,17,-8,16,6,-6,-1,-2,-6,-22,6,9,4,-2,8,14,4,-4,-13,-2,6,-14,-2,7,-5,-13,13,-9,-11,-7,-22,-35,-4,-12,-15,-13,-10,-12,-5,8,-20,-6,8,23,-13,2,-57,-4,-15,2,-24,-11,-7,9,31,33,23,26,-18,31,29,9,-32,6,-4,-2,-29,-10,-2,-22,-26,-19,-5,25,25,37,16,-3,18,23,11,3,-25,6,-11,-3,6,-15,-18,32,28,-25,13,-13,6,26,39,-15,-8,23,-4,-15,6,-43,-37,15,-8,-17,18,-7,10,35,21,30,14,38,11,24,15,-9,-9,7,-7,18,5,-17,9,29,13,0,2,7,-28,16,-15,-18,4,21,21,44,-8,-3,-1,-16,14,6,-11,14,-1,-9,-31,-4,-2,20,27,16,15,-15,-25,-28,2,14,-1,-32,-24,-36,-23,-43,-23,4,11,-21,-26,-29,-16,11,-14,11,-7,14,9,6,-12,-36,-14,26,-1,-1,-50,-24,5,-20,2,18,-14,18,-5,-31,-5,-4,28,6,-11,13,-3,-26,-5,12,9,-6,-4,-7,4,14,15,41,13,-16,-3,-50,-2,-3,-6,2,-6,11,-2,1,11,9,8,23,-30,-26,2,-48,6,-16,16,14,-6,12,5,-14,5,38,47,31,6,-40,8,9,-16,-27,-7,-6,0,21,-11,-2,-2,21,-3,-18,-8,-17,8,-3,-1,-29,-13,-12,6,17,-19,15,7,20,-10,20,32,25,25,-6,17,27,-8,-38,-15,-24,7,-30,-12,-7,-7,21,40,76,15,0,11,-2,13,-2,13,-6,3,-17,-13,-13,-22,-7,-1,-14,1,-3,-10,5,-23,-20,5,3,-16,-4,-16,6,0,-10,-27,-2,19,-7,5,4,-3,-3,-17,-10,-21,-18,-4,-9,14,-2,-12,-2,10,-7,-9,6,3,7,-5,-9,-7,-13,-3,7,11,-1,13,-3,-2,-2,-6,-7,19,13,11,-1,10,-1,2,0,8,-2,-2,14,18,11,5,-2,11,-1,-6,-8,15,-7,0,0,0,3,16,7,8,33,10,-11,1,-1,-20,0,-1,-9,6,-4,11,-2,33,7,8,-3,-20,-6,0,-17,-20,-27,-2,-19,0,-5,4,5,12,-13,0,1,3,-2,0,-4,-13,-4,-2,-12,18,3,6,3,-10,-38,4,25,15,4,5,12,7,-3,-7,-8,0,-15,-2,-16,-15,-36,11,-1,-8,11,17,6,4,-11,-13,-5,5,-9,-19,-19,-27,-37,18,-12,-6,-13,0,4,12,-1,5,7,3,-10,-6,-20,-6,3,25,3,-6,-5,11,25,17,0,14,2,-13,-10,18,-8,8,11,23,1,-12,8,14,24,35,-6,0,5,5,4,2,-15,14,25,16,22,10,15,4,-3,6,6,13,17,-6,-8,-14,6,12,42,12,43,23,-15,-16,-18,0,-10,2,-1,-6,3,-2,19,45,23,113,42,88,27,-29,48,5,-15,-18,-17,17,-18,-67,-15,-28,-28,9,22,-23,0,-1,-33,10,-11,-51,-9,-13,-4,-9,2,-1,-61,22,31,26,-38,49,15,14,-2,12,5,-39,-16,8,0,-10,-43,30,-12,22,-15,17,-24,1,-11,-20,-11,-4,-26,-7,-32,-17,20,-7,-38,41,-51,28,44,46,7,-11,36,10,0,26,-9,61,37,14,-36,-11,-39,-14,-54,59,17,31,37,26,36,5,17,26,32,37,-31,-54,-77,24,-50,-21,15,-13,-25,-15,-12,-23,12,-21,-15,47,2,-30,-46,15,-24,37,37,-21,-48,4,0,-2,1,-34,-58,60,-17,19,-32,-37,-8,9,25,16,23,34,15,0,4,12,9,14,-61,16,-40,-19,-49,-9,-6,-38,12,23,2,6,58,32,26,42,24,28,-34,-26,-16,-15,-54,18,-25,31,-19,29,17,97,-11,20,-7,-34,5,20,-9,-3,-49,-11,-31,-10,10,5,-16,-8,64,50,25,-12,-6,42,29,-28,-58,8,5,38,8,-12,-21,37,11,79,30,4,13,-8,67,15,-43,-26,-27,-8,-65,22,-17,-23,-5,33,13,-38,-6,-42,6,18,-4,21,19,31,-19,7,-23,1,-13,91,73,-15,7,-35,-7,-15,-12,-44,4,-25,-30,-37,3,-56,-24,8,6,6,2,-3,-13,-6,0,-5,-18,-10,-4,4,-9,-3,-7,4,-5,-8,-10,-10,-15,0,-15,-15,-6,1,-13,-5,5,2,-2,12,-13,4,-14,-3,-9,-6,-19,-6,3,5,-14,2,4,1,1,11,-3,-8,-16,-5,-12,-12,-22,0,-13,-7,-10,-4,-13,-9,-7,5,-5,-2,-1,-9,-3,1,-4,-5,-5,5,6,10,-3,0,-7,9,-12,0,-8,1,1,-2,-4,4,1,8,1,11,-7,-5,-12,2,-2,-5,9,-1,6,-5,13,-1,2,0,-7,3,3,-3,-12,1,-1,2,7,5,2,-4,-12,-13,0,-1,-15,3,-8,5,-7,6,13,10,13,14,9,8,-1,8,3,7,0,3,3,13,2,16,16,24,13,3,8,3,3,10,10,1,-5,6,7,3,4,3,20,5,13,1,8,12,5,11,16,1,3,6,-5,4,-3,5,12,5,1,5,7,16,8,13,14,11,4,5,-8,12,-1,20,6,-16,-6,9,22,7,7,11,15,14,7,-5,9,6,0,5,-5,-10,-18,-3,-5,-3,1,-1,-5,10,-2,-1,-2,5,6,12,-12,-11,-24,-18,-17,-20,-15,-4,-3,-4,7,-1,-2,6,16,15,5,2,-22,-10,-34,-24,-25,-3,-17,3,-7,4,14,29,-1,88,-7,13,37,39,-6,11,-41,-4,-54,5,-42,-22,0,63,-12,5,-46,49,22,24,30,19,-11,-35,-61,-31,-41,-32,-8,41,39,0,12,32,-22,-7,2,17,4,-45,14,28,38,-4,-46,15,-12,-15,-1,4,24,43,14,-1,-44,11,-12,14,-16,13,-54,-22,-38,-47,-7,-44,16,23,-25,4,25,-6,-24,-30,11,13,-20,-48,-1,47,-6,54,14,7,34,11,-33,8,-3,-8,-21,13,-14,30,0,12,21,-18,6,3,57,14,-22,11,25,17,-51,-42,-16,-10,48,-6,-17,14,55,-23,15,-6,-2,-2,13,19,44,11,4,4,-3,67,6,18,40,-47,-13,4,-62,-4,-1,-23,16,-16,-30,-56,32,10,-1,-40,-42,-9,50,-61,-24,14,13,-7,-73,-1,-22,21,-19,-41,-30,-28,-44,-4,49,-30,-21,18,-35,-10,-40,42,31,-6,31,23,-65,16,26,12,-34,-34,-4,23,-10,14,-14,-2,12,-52,-11,28,0,18,31,-18,32,-8,-1,33,8,11,16,-22,39,35,19,80,17,-4,-29,-12,-1,7,20,43,5,3,-3,-12,2,29,0,45,38,2,-1,-14,-70,-11,20,-2,33,-32,54,-16,3,18,-61,37,16,2,43,-21,-23,-29,-13,-3,15,-14,-15,12,-5,-8,-11,34,15,16,-11,-11,18,-2,-23,-10,-16,-19,-6,-6,-6,-5,21,7,-12,-27,-13,-3,-5,-10,-18,-29,9,-36,-15,-19,-34,14,-29,-3,2,-20,-4,20,-5,-4,-10,8,-12,-38,-21,-4,-50,-10,43,-2,-31,-9,0,-1,-16,-26,-32,-6,18,-25,-40,-7,14,-25,41,44,-22,21,-2,7,9,9,18,42,1,-12,-28,-18,10,-22,-8,36,2,-3,5,7,-14,14,-10,18,18,-2,-41,-21,-18,-40,-34,47,37,6,-21,-12,-12,-1,-8,0,12,8,21,-5,-2,-13,-35,35,35,-18,-23,10,-10,17,25,-10,17,10,-7,8,10,24,-31,13,48,19,-11,-3,-19,-4,-13,-5,10,2,-3,10,15,5,-21,8,18,18,16,2,-17,5,-12,-21,-2,17,12,12,-2,15,-15,10,45,61,8,9,29,18,-9,0,-16,4,-5,16,13,5,-16,-2,7,20,7,-9,26,10,-6,-2,-4,-1,-15,16,-32,-10,-17,-3,4,10,-18,-19,16,10,-10,-3,-14,-21,10,21,-28,30,23,-6,-13,27,48,29,24,27,-7,19,9,-12,-11,2,0,-17,-11,-13,-6,22,-2,11,3,14,-16,16,-11,-11,-13,-42,-6,45,34,40,7,17,-1,-8,-11,8,16,-30,-40,-25,-17,3,2,-3,-7,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,52,26,12,29,17,5,19,-21,-22,-7,7,-11,-7,-31,3,-2,29,10,-6,0,-16,-20,-12,-7,-26,-13,-4,-45,-8,-18,-26,0,10,9,-1,-2,12,23,1,-17,-9,-38,-13,-42,8,-24,-3,5,33,-22,29,13,-6,-7,11,-36,10,-13,-11,-30,25,-6,2,-33,1,13,15,-8,11,24,-16,-1,-34,-8,-8,-2,-2,-11,35,8,6,15,9,15,16,-19,4,-8,-32,-21,2,-3,2,16,44,28,-22,8,3,26,20,59,37,6,32,0,-5,-36,4,23,-1,-6,-15,-51,-16,-11,-9,27,47,-10,-22,14,-10,-23,-10,-36,-1,-63,-20,-8,-13,-32,21,10,-13,18,33,19,4,3,5,7,16,-13,18,1,49,33,33,19,-7,20,23,16,21,1,1,3,1,-27,57,37,35,-14,13,3,-18,-16,18,23,5,21,9,0,13,-29,19,29,-3,-17,-26,11,-35,-12,1,-9,3,-12,-22,18,-17,13,52,31,28,-3,-12,6,10,-29,-16,-21,-1,-11,-23,15,-7,11,32,11,-5,-28,-13,-10,7,6,1,3,0,-2,-13,12,-17,16,0,19,-4,23,8,21,0,-5,15,-3,-20,-28,-8,9,14,16,54,-7,-23,-11,-14,-18,-6,3,-29,-15,-32,-36,-33,30,-5,-8,21,24,5,5,16,19,23,-8,-10,15,3,0,3,-46,-15,18,38,10,23,-19,-28,-3,-9,-3,-2,9,-1,-43,-23,-7,-16,-25,37,9,-5,0,11,6,4,1,-30,8,9,6,-7,-17,-4,2,36,6,13,-1,-10,-1,0,-50,-1,11,11,-6,13,-32,-19,9,19,-1,19,-14,22,-6,-19,4,10,5,12,-30,11,0,11,9,38,9,26,0,3,10,4,-11,15,-5,16,3,-14,-17,9,25,29,21,18,17,4,7,12,-6,-34,-12,13,-4,-13,9,22,32,13,10,26,-24,26,-1,-1,-7,-6,-1,-24,-13,15,-1,5,32,-10,-1,13,22,8,8,9,-7,1,3,-24,1,-7,-3,17,19,-28,-44,2,7,2,25,38,9,15,-5,-1,-23,-1,3,8,-1,3,-26,-35,-41,-12,17,24,2,15,17,4,-3,-1,12,12,17,-11,-27,2,-15,1,-38,21,0,-7,4,-11,-6,7,-10,-24,-11,26,-1,10,-7,-9,-10,-14,12,10,13,-15,1,17,1,16,-25,27,5,12,-9,3,-12,-1,2,-18,14,1,-5,9,-4,-23,-21,10,15,-2,-6,-11,3,7,-26,-30,-22,0,-14,10,-20,7,-2,20,-12,-1,-3,-3,-29,2,-17,-24,-21,-21,-31,-25,-18,-10,-6,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool pe=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt<m-6) pe=true;
		}
		
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])-4&&pe) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1&&pe) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3&&pe) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3&&pe) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

