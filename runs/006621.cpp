#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.0571685,-0.107877,-0.0351714,0.449852,-0.0152256,0.83225,-0.25007,0.169322,0.47483,0.0853405,-1.11235,0.264522,0.131358,0.101458,-0.664034,-0.766221,-0.0392911,0.571002,-0.407486,0.396651,0.3196,-0.0732509,-0.624248,0.682317,-0.130401,-0.474285,0.405428,-0.529972,-0.670288,0.277304,-0.34643,0.289309,-0.259335,0.822789,0.237772,1.14071,-0.19892,0.225326,0.0238428,-0.893765,-0.878232,0.413931,-0.190933,0.443373,-0.56079,-1.00791,0.318215,-0.331824,-0.861886,0.222315,0.478209,0.0624012,-0.376824,0.220398,-0.124658,-0.174361,0.445173,0.27757,-1.4576,-0.0152174,-0.367498,-0.958711,0.360769,-0.453009,0.670194,-0.127237,-0.217141,-0.185585,0.526379,-0.388237,-0.226262,0.0932629,0.0305505,0.175902,0.436122,-0.058399,0.504726,-0.156204,-0.528808,-0.450763,0.0639815,-0.020615,-0.107491,-0.221086,-0.286401,0.0537032,-0.168713,0.384894,-0.37602,0.559281,-0.151022,0.0934014,0.320647,0.254206,-0.347055,0.213561,0.412457,0.307454,0.0400927,0.455354,-0.503627,-0.204983,-0.245382,0.377578,-0.35596,-0.0302462,-0.425379,0.573602,0.436105,0.363914,0.559814,0.357742,0.160923,0.533893,-0.221633,-0.057998,0.557253,-0.35725,0.081898,0.103251,0.248049,0.433642,-0.799221,1.16972,-0.527513,0.607591,0.646448,1.26897,0.0415849,0.13202,-1.07756,-0.377785,-0.169571,-0.645069,-1.1546,-0.383927,-1.34978,0.691642,0.170213,0.954585,0.563379,-0.325325,0.275803,0.727465,-0.389748,0.44207,1.74729,-0.934619,-0.417323,-0.583212,-0.4554,0.212768,0.24653,0.0757673,0.771477,0.283244,-0.710691,-0.208135,-0.123657,0.0260675,-0.554549,0.0190927,-0.476975,0.223624,-0.167099,-0.320022,0.947096,0.448361,-0.475023,0.592793,0.280479,0.260563,0.0684663,0.346424,0.0852715,0.107144,0.145828,0.224706,-0.930539,0.654636,-0.473608,-0.410626,0.137979,0.0745215,0.253701,0.0127552,-0.390408,-0.0773168,-0.299731,-0.280139,-0.378979,0.312,-0.418096,-0.25838,-0.125668,0.52565,0.507532,-0.431624,-0.0738459,-0.584669,-0.113591,-0.37881,-0.37056,0.227334,-0.134833,0.194644,-0.0464624,0.570761,-0.763406,-0.0265181,0.49399,-0.581835,0.0312158,-0.0461746,0.00767998,0.506707,-0.143672,0.415098,0.626197,-0.0399812,-0.329553,0.504747,0.495805,-0.735656,0.21644,0.0933704,-0.361341,0.556136,0.019579,0.5369,-0.176274,-0.534688,-0.104153,0.761816,-0.233641,0.156403,-0.060838,0.0229148,-0.518934,0.0602045,-0.0477905,-0.80701,0.65563,-0.0248456,0.147457,0.542568,-0.259514,0.248769,0.397125,-0.138168,0.288123,0.766294,0.502721,0.973294,-0.0157325,-0.0109894,0.615138,-0.320415,-0.0131799,-0.583878,-0.216869,0.325493,-0.711716,-0.0667707,0.469041,-0.0729192,-0.943329,0.266276,-0.0108173,0.182289,-0.253075,0.269626,-0.0814899,0.217591,-0.103659,-0.204845,-0.0377209,0.465378,-0.0985176,0.802563,-0.66383,-0.937509,-0.118639,0.0391152,-0.844207,-0.136981,-0.16307,1.0225,0.183891,0.610291,0.0798047,0.199014,-0.612836,0.276894,-0.485935,-0.190491,0.781436,-1.29021,0.0956528,-0.0945442,-0.263699,-0.355374,0.0982879,-0.587728,1.01486,-0.313464,-0.702283,-0.0443512,0.186335,-0.555747,-0.0826033,-0.167136,-0.296327,-0.269461,0.552163,-0.275426,0.826941,0.300618,-0.5937,0.245184,-0.196396,-0.208899,-0.0538798,-0.0167664,-0.39281,0.405253,-0.304287,0.448506,-0.649493,0.578298,0.0488255,0.197115,-0.956348,0.142795,-0.173498,-0.445822,0.365424,0.429797,-0.314575,-0.614216,-0.125955,0.0546282,-0.0856045,-1.00395,-0.104421,0.468129,-0.314193,-0.307754,-0.117802,-0.393959,-0.332554,-0.52671,0.37034,-0.0380316,-0.153258,0.198997,0.377986,0.191785,-0.0795489,-0.428877,0.571491,-0.474824,0.247212,0.312257,-0.175667,0.680649,-0.246286,-0.161613,0.00269106,0.323681,-0.359897,0.791934,0.525858,-0.514883,-0.535271,0.785013,-0.464023,0.28349,0.81964,0.324831,-0.148252,-0.784664,-0.885121,1.17444,0.0252795,-0.339603,-0.196254,0.222412,-0.588893,-0.655419,0.193436,-0.981038,1.16433,-0.746397,0.566116,0.151643,-0.279133,-0.440321,0.913355,0.675255,0.146486,0.55148,1.01323,0.955836,0.0307988,-0.304393,1.06422,-0.573076,-0.359578,-0.831274,-0.0118829,0.610072,-1.22883,-0.348091,0.563185,-0.70426,-1.33335,-0.277059,0.216404,0.298878,-0.130876,-0.992453,0.64329,-0.750833,0.873879,-0.695886,-0.784871,-0.271904,0.698675,0.013944,0.162597,-0.145774,0.328312,0.202588,0.641148,0.0877477,0.974265,-0.287687,-0.243392,-0.5752,-0.452322,-0.279898,-0.689246,-0.275785,-0.293061,0.274205,-0.42517,0.286263,-0.0804602,0.368011,-0.00340643,-0.0897618,-0.688159,-0.667284,0.266238,-0.0486821,0.350875,0.708775,0.261397,-0.398878,-0.00189341,-0.0973541,-0.248672,-0.572005,0.263807,-0.233656,-0.183931,0.379929,-0.494976,0.432158,-0.503927,-0.308818,0.53741,0.0375351,-0.00673786,0.651357,-0.158921,-0.00152857,0.310686,0.627576,0.208879,1.13846,-1.03081,-0.412326,0.0728858,-0.780037,0.354248,-0.736008,-0.481082,-0.599922,-0.300546,-0.843209,-0.842216,-1.46117,0.772949,-0.508591,-1.22509,-0.036373,-0.32413,0.597489,0.0463104,-0.594027,1.95287,-0.734861,-0.682241,0.896929,1.09905,0.689439,0.390848,-0.145218,0.149021,0.536949,0.219481,-0.125454,-0.14604,-0.139217,0.140243,-0.89404,-0.649837,0.225867,-0.0978309,0.0138836,0.16668,-0.45347,-0.0105524,0.469902,-0.213383,-0.0943335,0.314051,0.522614,0.372706,-0.243782,0.199238,0.138395,0.114017,-0.553232,0.0431253,0.359602,-0.26449,-0.444929,-0.00926381,-0.0533893,0.411336,-0.106416,0.457456,0.166617,-0.289693,-0.519467,0.149628,0.299719,0.164499,0.0256337,0.432953,0.828368,0.0925796,-0.561668,0.53243,-0.739414,-0.289979,-0.541091,0.494922,0.687517,-0.492575,-0.66021,0.161758,-0.364843,-0.155926,-0.131799,0.0291121,-0.016926,0.042398,-1.77827,0.365623,-0.743369,1.48504,-0.0142724,-0.999529,-0.0363025,1.47936,-0.986757,0.654031,0.85902,0.497698,0.119671,1.3156,-0.345424,1.00035,-0.915046,-0.727202,-1.0107,-0.884325,-1.06984,-0.0843807,-0.18982,-0.0510196,0.625425,-1.12429,1.45363,-0.81522,0.575054,0.156662,-0.219353,-1.98975,0.323881,-1.25583,0.0144944,2.13169,2.23098,0.48428,0.157588,0.591731,0.795283,0.0387517,-1.22531,-1.31906,0.156973,-2.04358,0.610249,0.142296,-0.107081,-1.2055,0.0339956,1.11433,0.0590822,0.933883,0.250357,0.0929408,-1.37458,1.79738,-0.451471,0.0559505,0.742644,-1.17699,-0.0530099,0.0980493,-0.0793412,-0.00400519,0.143777,-0.360663,-0.8035,0.177237,-0.535373,-0.794614,-0.857318,0.81753,-0.840979,-1.30584,0.581356,-0.552136,0.924561,-0.154456,-0.659019,1.99189,-0.000578335,-0.503882,1.04555,0.861822,0.46549,0.10857,0.233098,0.15586,0.645971,1.23281,-1.00278,0.345775,-0.5808,-0.706539,-1.44668,-0.730963,1.57012,-1.13562,-0.598151,-0.383175,-0.654402,0.319006,0.431278,0.432142,1.37997,0.642517,1.151,0.779945,0.0780666,-0.364201,0.586453,0.0412797,-0.679829,0.477305,-0.177797,0.118047,0.375067,0.0997555,0.69582,-0.572668,0.654235,-0.425878,1.01293,0.11158,0.591801,-0.694488,-0.226043,0.356219,-0.232879,-0.0248647,0.224232,-0.0926139,0.0811686,-0.444701,0.211102,0.393852,0.378195,0.312281,0.153382,0.318426,0.155056,0.234796,-0.0741041,0.360997,-0.198528,-0.863157,-0.148088,0.298567,-1.53847,-0.468096,-0.0214923,0.500738,0.849941,0.099161,1.16177,1.71718,-0.907445,0.448167,1.50077,0.36748,-0.487446,0.611409,-0.254949,0.160113,-0.503915,-0.747486,-0.529334,-1.16164,-1.04411,0.441704,0.547627,0.509163,0.790049,-1.01827,0.731179,-0.444799,0.315638,-0.332684,0.765138,-0.758035,-0.491456,-0.473607,-2.02941,2.0407,0.650745,0.121625,1.1766,0.997257,-0.578571,-0.240725,-0.550505,-0.618535,-0.334775,-1.15022,-0.451214,0.107392,-0.365434,-0.034799,1.52199,1.23656,-1.77817,0.329309,0.180366,0.598326,-1.59681,3.0743,0.0393063,0.358353,0.315332,0.357253,-1.16059,0.274196,-0.791177,-0.689711,-0.598539,0.696698,0.152622,0.129174,-1.0311,0.66798,-0.186078,1.3765,-1.35456,-0.303188,0.603163,-0.530178,1.03407,0.0674142,-0.0896219,0.869165,-0.792691,-0.551157,0.261025,-0.0804105,-0.658993,0.891982,0.261442,0.300317,0.268257,-0.0449392,-0.997146,0.913296,-0.24543,-0.935141,-0.602757,0.458735,0.545029,-0.63908,-0.75239,0.350204,-0.528798,0.770744,-1.27329,0.216517,1.02506,-0.712392,1.17472,0.122673,-0.540675,0.354663,-0.110594,-0.295911,-0.378731,0.159704,-0.141982,-0.0324372,0.469864,0.319446,1.17335,-0.0785452,0.138572,-0.639901,0.906178,-0.238379,-0.768314,-0.758148,0.0583578,0.0681788,-0.606972,0.138754,0.131927,0.239247,-0.192067,-0.362475,0.562455,0.371867,1.05018,0.297136,0.130159,0.313423,-0.0730693,0.63739,-0.684735,-0.210518,-0.063621,-0.545543,-0.460505,0.0141344,-0.1518,-0.6371,-0.319825,-0.521352,1.10897,0.0476592,-0.0712957,0.123837,0.260012,-0.620561,0.590733,-0.601192,-0.871044,-0.667981,0.120036,-0.345895,0.651057,-0.134524,0.620733,-0.700105,-0.240232,0.44859,0.831821,1.06899,-0.477391,-0.701538,-0.00628145,-0.141522,0.426877,-0.820395,0.926531,0.384508,-0.991211,0.593849,-2.76821,1.1025,-0.272575,-0.158009,1.29268,1.0173,-1.31086,-0.698951,-0.0396389,0.151592,-0.418832,0.149058,-0.806733,0.0392702,-0.318903,0.709173,1.61125,1.11087,-2.19194,-0.407135,0.516287,1.09798,-0.799724,2.58592,0.312839,-0.0215977,-0.398373,0.592031,-0.132734,-0.00575193,-0.75824,0.0683795,-0.134853,0.528073,0.109193,0.491841,-0.0304061,0.541815,0.305772,0.361845,-0.35322,0.205149,-0.705363,-0.17709,-0.527468,0.437625,0.533963,0.117097,-0.460655,-0.409838,-0.0357314,-0.231705,-0.00244042,0.73607,0.136987,0.783768,-0.509373,0.351055,0.117132,-0.0119792,-0.0223031,0.446201,0.114405,1.00061,-0.230921,0.460498,0.343812,1.55402,0.162794,0.984523,-0.884499,-0.601226,-0.539543,-0.502961,0.218263,0.582591,-0.0851875,0.291784,-0.85601,-0.0700064,-0.00639266,-0.143322,0.141017,0.454202,-0.727223,0.340973,0.810981,-0.0311019,0.0707768,-0.68696,-0.0510082,0.16521,-0.8603,-0.337396,0.161165,-0.448333,-0.246684,-0.412152,-0.583904,-0.0398927,0.279165,-0.65713,0.239073,0.610419,0.753823,-0.0761375,-0.352359,0.363897,0.136411,0.351161,-0.328498,-0.0899756,0.46293,-0.198542,-0.608205,-0.63434,0.999117,-0.535755,-0.195969,-0.00549217,1.39904,-0.185579,-1.02057,-0.812268,0.406914,-0.924881,0.636095,-1.35697,-0.38465,-0.744282,-0.00656467,0.162727,0.680402,-0.0422972,0.959931,0.204579,0.501451,0.43356,0.961734,1.04834,-0.556673,-0.376917,0.431921,-0.426446,0.963508,-0.857335,0.534493,-0.129235,0.207027,0.393226,-0.480948,-0.315318,-0.441175,-0.396893,-0.328096,0.0559133,-0.375611,-0.876342,-0.0818678,-0.291461,-0.297966,0.432245,-0.416525,0.0446669,-0.136496,0.198019,0.224803,0.299249,-0.516074,-0.204756,0.0312463,0.380279,0.294659,0.20623,0.373134,-0.305751,-0.797802,-0.303227,0.382591,-0.0680362,-0.324433,0.308963,1.08297,-0.0245126,-0.600317,0.898726,0.439966,0.176062,0.284988,-0.232228,0.519942,0.668398,-0.953853,0.198025,-1.33477,-0.507195,0.110064,-0.497117,0.0665884,-0.495544,0.423358,-0.129053,-0.0749569,0.145617,-0.0633178,0.427956,-0.79114,0.0855859,1.0196,-0.507716,0.466095,0.429967,0.485631,0.744038,-0.383961,0.193837,0.932486,1.28152,0.590379,0.0324565,-0.288875,-0.2196,-0.621632,0.117179,-0.385578,0.22705,0.169928,-0.407973,-0.295296,-0.0688484,-0.298198,0.0479762,-0.15562,0.0743019,-0.696753,0.163631,0.263501,0.2255,-0.419683,-0.0542232,0.0729236,-0.00678169,-0.464273,-0.112893,0.468224,-0.331837,0.0503332,-0.139886,-0.277162,-0.111659,0.245723,-0.0663001,0.291264,0.331066,0.51891,-0.230481,-0.269422,0.105448,0.478991,0.490287,-0.353876,-0.529603,0.402236,-0.0533115,-0.230969,-1.02816,0.919704,-0.363483,0.305536,0.203547,0.720194,-0.305897,-0.139654,-1.31302,0.0316307,-0.149648,-0.0489969,-1.1929,0.0191306,-0.675772,0.289191,0.378386,0.311817,0.392077,0.162685,0.179429,0.496142,0.347206,0.351011,0.373103,-0.102605,-0.0160127,0.260957,-0.429229,0.549493,-0.63577,0.330288,-0.00114085,1.00506,0.181102,0.572395,-0.285977,0.254216,-0.817759,-0.852826,0.389493,0.220588,-0.405559,0.947954,-0.016912,0.0658183,0.690046,-0.355583,-0.0708952,-0.452438,0.0428251,0.0530572,0.204596,-0.0292353,-0.184618,0.288146,0.174086,0.863663,-1.30577,-0.109466,-0.792096,-0.397885,-0.408797,0.726378,0.272073,-0.543463,-0.0978226,1.51869,-0.52389,-0.464988,0.714387,0.0106064,-0.808601,0.134498,-0.544434,1.27404,0.382548,-0.250204,0.542302,-0.849323,-0.526279,-0.122853,-0.350108,0.2646,-0.645072,1.19313,0.609681,-0.0419546,-0.0814407,0.284021,-0.261077,-0.461481,-0.431304,0.982396,-0.537018,0.12773,0.529872,0.774638,-0.128178,0.0168685,0.183013,0.271252,0.235242,0.332302,-0.943175,0.515032,-0.177322,-0.087327,0.217222,-0.533425,-0.386657,0.360767,-0.433902,0.0380579,-0.206339,-0.0879911,0.125262,-0.604817,0.0647167,-0.441447,0.144253,0.101863,0.00502907,-0.138715,-0.727899,0.106282,0.703235,0.065277,-0.125803,0.420261,0.316741,0.363035,0.00376671,-0.0192355,-0.417447,0.487175,-0.52761,-0.0659583,0.48235,-0.303871,-0.434758,0.312548,-0.201579,0.0186196,0.770484,-0.472855,-0.67554,-0.000536105,0.492826,-0.487664,-0.514283,0.624777,0.0875774,0.44898,0.114421,-0.350241,-0.194694,0.530708,-0.735664,-0.521985,1.08854,-0.500406,-0.192832,0.546303,0.457143,0.678328,0.220404,-0.15265,0.559332,-0.143045,0.0445887,-0.0874564,-0.0919968,-0.62346,-0.26393,0.679248,0.281309,0.0787363,-0.387702,-0.276447,0.303003,-0.772944,0.936603,0.253973,-0.265294,0.115002,-0.269465,0.695195,-0.0667783,-0.349508,0.704184,0.591993,0.912522,0.810109,0.555288,1.3889,0.429036,-0.304795,0.708365,-0.778772,-0.305883,-0.28693,-0.809401,0.222105,-0.118041,0.422634,-0.759037,0.612835,-0.875987,-0.519204,-0.674825,-0.00826017,0.0993981,0.46921,0.504393,0.449575,-1.01725,0.154532,-0.83285,-0.122903,-0.43864,0.241608,-1.03131,-0.0137279,-0.368062,1.07272,0.88391,0.619226,0.427618,0.172454,-0.0902351,-0.240267,-0.40762,1.08957,-0.213359,0.625525,0.367336,0.642704,-1.51606,0.603327,-0.963953,0.172758,0.0299131,0.337685,0.18503,-0.467359,0.335443,0.0826241,-0.666942,0.275944,0.248648,0.11964,-1.01775,0.310543,-0.583535,0.655297,0.43596,-0.148823,0.483455,-0.438654,0.0901321,0.657553,-0.00861746,0.0979409,-0.131252,0.328236,0.416229,0.224711,0.10785,0.205416,0.976921,0.145607,0.799841,0.0760205,-1.22619,-0.807695,0.166597,-0.388276,-0.0801474,0.316835,0.515859,0.089309,0.771964,-0.335672,0.446062,1.26318,-1.22208,0.0732508,1.3936,0.187607,-0.151076,-0.43491,-0.672308,-0.38419,0.0752294,-0.179008,-0.249969,0.242605,0.238512,-1.75553,1.0429,-0.784503,0.825962,-0.0535531,-0.587209,-0.579633,0.15754,0.528599,0.74851,0.298663,0.647855,0.176779,1.49195,-0.417458,0.822689,1.13734,-1.00232,0.221798,1.13181,-0.0143547,-0.501286,-0.867716,-0.638976,-0.0830501,-0.0938166,0.31286,-0.142004,-0.034396,-0.074894,-1.43942,-0.353384,0.299698,-0.459007,0.286204,0.641612,0.128005,0.199188,0.341734,-0.669613,-0.289912,0.535231,-0.167933,-0.811866,0.0418043,-0.158902,0.415257,0.445578,0.0459818,0.202762,-0.152461,-0.390296,0.0241909,0.436758,0.294185,-0.0404157,0.677484,0.35716,0.391793,-0.125307,0.246765,-1.0217,2.31754,-0.224344,-2.1257,1.36583,-0.235694,-1.49785,-0.586202,-0.932339,-0.150287,-2.38073,-1.81199,-2.43389,-0.163683,1.62869,1.65224,1.33958,-1.15293,1.3534,-1.46951,-0.919982,0.764401,1.00835,1.04317,0.536542,-3.02164,-1.6953,-0.218239,0.884713,-1.88373,-1.36803,-1.04325,0.12159,-0.643454,-1.44273,2.78886,-0.496499,1.37606,-1.89087,-1.9948,0.485571,-2.03802,-0.496612,-0.0310631,-1.61179,-1.76872,-1.44924,-0.00460124,2.35053,1.29182,-2.6048,-0.0565666,-0.782095,1.2677,-0.952654,2.54214,-2.73549,0.913594,-2.92573,2.07375,2.19397,-1.45547,-0.654588,-2.0198,1.10258,0.133158,1.35615,-0.185097,-2.49626,-1.42674,0.691269,-1.6187,1.0223,-3.11421,-1.92507,0.17836,1.05281,0.922314,-3.24763,0.123289,1.44197,0.799492,-0.0438896,-2.64662,0.532052,-2.48496,-2.2321,1.36586,-1.25658,0.929168,-0.65754,0.736753,-2.42998,0.503263,0.597883,-2.55322,1.67625,-0.146845,-0.14629,-1.78444,1.20433,-2.63804,2.22404,-1.33543,-0.410499,-0.938292,0.221475,-2.06546,-0.775842,-0.777301,1.54246,0.0572687,-0.187807,0.690271,-0.950201,0.8086,-2.37574,-0.512032,-3.00184,0.0492946,-1.2562,1.59294,1.6081,-2.58208,2.14178,-1.73522,-2.1935,0.627475,-2.12377,-0.66054,-1.11045,-2.05223,1.79651,0.955297,0.140738,-1.82864,-1.5508,1.65881,-1.00427,-1.38359,-0.355103,-0.127929,1.51367,-1.95974,0.635401,-1.87202,-2.38511,-1.97374,1.78366,0.949021,-0.407109,1.11108,1.04933,0.969144,-2.65859,0.243563,0.772137,-3.05299,-1.11428,-2.50192,-0.365681,-2.58242,0.631975,3.01277,-1.86209,-2.41067,-1.86331,0.244771,1.05263,-0.160967,-2.69997,1.52985,-2.22161,-0.498049,-0.928407,-0.906858,0.668823,-0.254721,-0.430857,0.670813,-1.36896,1.1797,-0.111857,-0.0116234,-1.18164,0.14557,0.887656,-1.6891,-0.997275,-2.68181,-2.86476,1.42785,-3.46576,-1.31568,0.25368,0.333857,0.160539,-0.477861,1.05347,0.940666,-1.69682,-0.551834,-0.788449,0.0105569,0.902239,-0.507076,-1.29562,1.55304,0.977836,-2.16902,0.189151,-2.63951,-0.804776,0.94661,0.914565,-1.39227,1.04364,0.553707,-0.527897,-2.04323,0.372269,-2.88421,-1.45125,-2.36224,0.476036,1.477,-0.131171,-1.6295,1.49173,1.15758,-1.83266,1.88151,-1.14247,0.929413,-2.84479,1.29707,-1.02805,0.0361451,-1.79336,0.841788,0.0401951,-1.08833,-1.54605,1.14116,0.816884,-0.436776,-0.617074,-1.32909,-1.92019,0.0362019,0.40425,-1.27642,0.413466,-2.56468,-2.20477,-0.120932,0.0784364,-0.998567,0.577142,0.286014,-1.49142,-0.354585,-1.38019,-2.38303,-1.14423,0.882681,1.29118,1.13738,1.47584,-2.03882,0.156938,-0.198554,0.745514,0.434353,-1.44326,1.13988,-2.90349,-2.56301,1.47797,0.11194,2.56476,-2.5532,-1.5002,-1.43317,2.00207,-3.92924,2.26774,-0.322192,-1.10146,-1.67233,0.196874,-2.3536,-1.23847,1.24218,-1.5383,-1.83546,-0.882178,0.214042,0.586548,1.74377,0.627938,0.789819,0.726568,1.02204,0.669987,0.616251,1.10228,0.375383,0.425506,0.41853};
class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    for (size_t i = 0; i < numbers.size(); ++i) {
      size_t height = numbers[i].size();
      size_t width = numbers[i][0].size();
      if (width > 1.2 * height) { // Bad cut
        vector<string> temp = numbers[i];
        Prune(0, width / 2 + 1, 0, height, &numbers[i]);
        vector<size_t> points;
        FindBestCuttingPoints(numbers[i], true, &points);
        Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
        Prune(width / 2 + 1, width, 0, height, &temp);
        points.clear();
        FindBestCuttingPoints(temp, true, &points);
        Prune(0, temp[0].size(), points[0], points.back(), &temp);
        numbers.insert(numbers.begin() + i + 1, temp);
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
