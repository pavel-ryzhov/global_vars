#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{6,5,0,16,0,21,0,70,1,1},
{8,14,12,27,0,33,6,89,3,5},
{8,14,14,57,2,47,7,82,14,18},
{13,24,39,63,18,73,21,83,28,27},
{39,26,56,85,23,76,43,84,51,58},
{69,46,75,88,38,61,56,59,58,78},
{68,62,75,84,46,73,56,62,68,65},
{62,59,78,93,47,76,52,62,77,75},
{75,75,83,93,53,78,51,77,77,77},
{83,75,89,84,55,73,55,74,93,87},
{90,72,86,85,60,81,88,74,100,100},
{51,72,57,77,62,75,88,70,79,69},
{29,82,38,53,65,81,57,71,46,25},
{11,64,27,53,60,86,52,70,27,25},
{7,79,13,53,53,79,45,86,22,31},
{0,68,0,29,44,57,35,71,13,12},
{14,31,17,27,0,22,19,56,13,13},
{23,39,40,45,0,39,25,76,32,27},
{48,54,62,73,20,63,30,79,46,58},
{64,55,77,88,21,79,55,79,72,77},
{64,71,73,72,31,80,55,78,79,63},
{77,78,77,80,48,64,31,78,68,55},
{69,70,74,80,48,78,52,78,66,52},
{59,79,78,86,55,82,48,78,69,89},
{63,91,82,87,63,78,60,78,70,89},
{62,96,89,93,61,82,59,98,82,93},
{68,101,92,94,64,91,66,104,81,87},
{85,87,93,106,71,92,86,104,88,100},
{89,102,94,114,78,101,80,101,77,100},
{49,82,66,109,68,100,59,107,76,81},
{21,80,40,48,46,90,49,107,51,54},
{10,65,16,19,36,36,7,91,20,44},
{23,43,33,34,0,22,25,40,21,27},
{47,53,71,59,1,58,30,69,64,77},
{70,53,70,69,21,78,55,69,73,73},
{65,45,69,51,48,90,60,65,77,44},
{78,50,72,65,57,66,61,61,89,57},
{73,64,72,72,52,74,50,61,79,65},
{68,83,65,51,53,78,47,60,60,66},
{53,93,65,52,66,66,57,58,40,48},
{38,96,64,49,64,61,59,78,41,53},
{57,106,68,75,66,60,59,78,36,63},
{61,104,84,76,68,59,74,94,39,77},
{64,104,82,90,78,61,58,99,48,88},
{83,103,90,106,83,59,66,109,78,101},
{91,82,92,94,65,54,51,115,85,108},
{58,72,63,68,48,34,48,82,75,78},
{19,54,32,42,33,11,21,22,42,41},
{27,33,62,37,0,26,26,35,25,63},
{70,47,69,54,4,67,55,47,52,61},
{84,70,69,54,47,87,88,44,60,56},
{80,79,71,48,57,86,70,41,78,64},
{76,69,60,53,68,75,64,36,81,78},
{73,79,59,55,51,95,53,36,59,48},
{51,78,53,50,64,88,47,38,34,40},
{38,90,53,51,71,76,56,60,21,33},
{33,92,57,68,65,72,55,64,24,43},
{37,86,60,75,69,53,62,84,32,55},
{56,107,60,71,75,53,69,87,49,62},
{61,99,67,71,77,50,48,103,65,69},
{70,99,88,85,76,37,52,114,74,89},
{83,75,96,73,65,31,47,91,91,117},
{88,55,90,71,38,21,46,72,69,104},
{32,44,49,41,33,11,25,21,52,54},
{62,49,55,13,0,21,33,36,26,66},
{71,41,58,29,9,62,88,35,77,51},
{86,43,62,48,55,78,89,34,81,82},
{79,51,51,42,73,75,70,35,79,78},
{80,46,48,45,54,45,61,17,68,64},
{61,43,51,48,65,79,51,17,67,35},
{50,46,54,58,61,52,58,18,36,30},
{28,77,47,66,60,45,55,59,30,25},
{28,81,49,72,68,61,55,60,21,36},
{36,77,53,80,77,57,52,83,27,61},
{42,88,64,74,74,65,43,90,52,65},
{60,90,81,72,78,45,47,88,71,80},
{69,92,95,71,80,45,47,81,94,83},
{74,75,96,80,55,33,17,73,88,101},
{92,54,90,62,37,11,28,45,56,92},
{66,45,65,31,31,7,8,10,39,73},
{70,17,46,0,28,26,83,2,37,71},
{86,44,56,6,35,62,89,18,60,83},
{87,44,56,29,61,60,85,18,77,94},
{83,36,42,31,72,61,71,1,73,70},
{67,37,39,44,67,83,66,2,79,53},
{60,36,39,58,60,86,72,2,66,41},
{44,53,38,59,52,70,66,34,46,28},
{27,69,35,70,58,71,62,48,34,44},
{27,80,40,78,60,77,53,60,48,49},
{35,82,67,85,74,67,46,66,66,58},
{39,81,70,82,82,65,52,87,69,75},
{59,90,79,72,88,57,52,81,73,81},
{68,93,85,84,79,38,50,69,72,87},
{74,56,90,84,55,39,15,63,67,95},
{85,53,81,48,37,28,23,20,49,97},
{91,44,57,22,31,19,27,10,24,83},
{84,24,36,1,39,24,88,0,23,89},
{87,32,38,9,60,52,90,0,53,79},
{90,32,36,18,74,51,86,0,68,91},
{82,26,14,32,85,59,71,0,80,71},
{66,25,12,53,60,69,68,2,68,49},
{55,37,12,62,54,83,77,18,74,58},
{44,56,25,79,47,71,75,48,63,50},
{16,71,47,79,64,49,75,59,60,50},
{16,79,62,66,54,76,61,78,63,56},
{35,74,74,65,82,75,62,83,72,79},
{39,80,74,67,100,93,62,76,71,75},
{59,91,77,83,105,89,54,76,79,85},
{67,74,80,64,77,56,55,65,64,84},
{76,56,88,52,54,55,45,45,56,96},
{85,45,62,28,37,40,12,10,37,93},
{88,44,40,5,31,23,8,1,1,75},
{86,16,33,24,45,35,90,0,25,85},
{88,24,19,24,67,61,87,0,44,76},
{90,24,19,25,82,53,89,0,61,80},
{66,24,19,34,94,53,81,15,70,76},
{59,30,12,46,60,54,79,18,85,62},
{55,50,15,65,52,50,85,39,82,57},
{33,57,40,71,30,44,74,69,79,38},
{16,70,68,76,64,49,55,77,68,50},
{16,78,78,80,66,76,57,67,81,69},
{35,79,72,82,85,82,59,67,72,77},
{39,79,77,83,110,99,80,78,81,70},
{59,90,78,55,108,107,88,74,75,78},
{71,74,77,63,79,91,92,61,84,86},
{76,56,62,56,62,88,45,17,41,93},
{85,45,42,17,47,60,32,10,27,78},
{85,44,25,3,43,31,16,0,8,74},
{88,16,0,3,41,24,90,0,33,44},
{92,23,18,3,77,34,94,0,46,61},
{75,23,21,25,90,30,100,15,74,54},
{66,29,27,31,86,27,77,18,75,49},
{60,43,38,41,59,24,74,23,84,47},
{55,51,46,37,53,25,69,65,84,54},
{44,57,61,47,55,16,50,77,77,47},
{16,66,80,50,69,23,42,61,60,71},
{16,78,74,54,66,58,40,66,65,80},
{34,80,73,64,85,80,49,77,62,64},
{39,79,72,76,112,73,58,75,67,62},
{59,70,73,105,100,82,63,67,87,74},
{72,74,53,98,80,95,90,60,71,82},
{76,56,42,70,67,91,64,9,55,84},
{85,44,29,51,48,80,64,0,48,75},
{84,44,25,15,40,66,32,0,35,73},
{91,15,0,1,70,28,92,0,50,12},
{92,23,7,5,80,19,94,0,69,36},
{77,29,29,13,79,8,93,19,77,45},
{61,32,44,20,63,8,83,23,68,26},
{59,43,46,34,49,11,69,55,69,25},
{55,52,59,30,46,11,47,76,66,25},
{45,51,89,39,49,27,38,60,46,60},
{27,72,70,44,67,39,33,49,40,52},
{27,79,61,45,67,49,31,68,44,43},
{34,80,59,64,87,42,36,73,36,51},
{39,68,68,72,103,76,57,74,44,63},
{64,70,48,76,91,94,60,61,63,67},
{73,74,42,90,74,91,86,39,69,71},
{76,56,37,95,63,80,64,0,72,75},
{81,44,25,83,46,82,65,0,65,74},
{82,43,0,71,43,73,57,0,60,70},
{92,15,13,20,47,31,92,0,64,8},
{79,23,19,28,52,14,95,19,80,18},
{77,30,26,35,54,15,105,34,87,24},
{62,43,37,25,27,19,73,38,81,25},
{59,45,52,35,27,19,52,71,54,31},
{56,52,76,33,28,34,42,73,37,27},
{45,55,61,41,36,40,37,57,37,48},
{27,72,55,57,78,45,44,68,35,45},
{27,78,58,60,73,35,42,74,44,40},
{34,69,65,48,87,55,49,76,44,62},
{43,61,57,60,97,74,65,71,50,63},
{64,70,47,73,88,95,73,56,49,63},
{73,74,42,78,72,76,87,6,56,73},
{72,46,38,93,59,82,77,0,66,75},
{84,44,28,93,45,77,71,0,68,72},
{67,41,14,89,41,75,72,0,65,63},
{73,15,17,48,42,58,96,15,79,25},
{79,30,29,48,40,41,107,32,89,33},
{75,42,38,54,34,38,99,38,96,31},
{62,43,42,34,30,35,79,56,70,31},
{60,45,68,59,30,48,65,69,44,31},
{57,47,68,60,33,41,56,58,31,49},
{45,57,58,53,39,26,41,80,14,48},
{28,71,63,42,79,35,37,75,20,53},
{28,75,61,49,93,52,35,73,47,38},
{37,69,58,52,103,63,40,75,47,54},
{60,59,59,66,95,74,52,66,53,53},
{66,70,55,74,84,83,61,44,64,67},
{71,74,41,79,84,75,73,0,56,69},
{56,45,41,90,85,76,77,0,65,73},
{69,43,28,92,66,77,73,0,68,70},
{35,41,28,83,58,72,65,0,64,53},
{48,20,27,50,16,72,62,19,99,34},
{79,42,40,56,15,63,109,38,100,45},
{75,42,52,64,8,67,101,39,93,46},
{65,45,63,55,8,55,71,59,55,35},
{60,40,69,55,11,46,59,72,43,45},
{56,46,79,44,42,30,46,63,22,59},
{48,58,69,36,43,40,44,78,20,61},
{33,70,66,48,55,54,40,76,30,41},
{51,75,72,55,68,58,37,72,37,43},
{56,62,66,64,99,70,43,72,48,49},
{62,59,69,69,91,66,53,64,64,50},
{60,70,55,73,84,70,70,6,67,60},
{56,65,56,78,90,67,79,0,51,69},
{71,45,42,90,60,77,70,0,65,70},
{68,42,45,87,48,76,70,0,64,39},
{26,41,43,60,43,48,34,0,50,36},
{38,38,42,63,2,65,41,34,77,32},
{63,57,56,78,2,92,65,39,102,50},
{76,58,78,78,2,72,77,58,85,71},
{65,60,94,62,2,65,83,69,64,44},
{63,53,88,72,5,55,64,58,45,68},
{59,68,93,53,39,66,55,78,34,64},
{65,68,84,57,40,54,53,86,41,46},
{59,67,83,61,62,50,47,76,40,38},
{57,67,85,62,67,63,47,72,54,51},
{59,60,75,67,76,64,53,71,53,60},
{59,59,75,69,88,59,80,54,59,64},
{49,76,68,70,83,76,75,6,61,66},
{65,77,70,85,67,67,79,0,57,64},
{67,59,66,87,56,71,58,0,64,56},
{26,57,65,52,42,47,34,0,61,35},
{14,54,58,36,37,16,18,0,33,20},
{29,45,54,53,0,48,35,26,48,5},
{38,70,91,81,0,77,41,57,74,43},
{48,70,98,91,0,102,61,61,89,70},
{84,74,94,90,0,103,82,70,95,75},
{86,76,90,75,3,79,71,78,73,78},
{81,75,90,74,37,73,75,77,77,53},
{75,58,87,69,36,53,69,84,78,46},
{71,66,87,72,63,60,67,72,77,55},
{44,67,95,69,67,62,71,72,63,61},
{43,71,93,72,76,58,52,58,65,53},
{47,64,95,76,85,62,62,33,46,59},
{65,91,90,81,83,71,78,3,62,65},
{48,94,89,58,68,61,87,3,64,33},
{27,73,82,40,55,45,36,0,50,36},
{13,69,73,27,40,24,16,0,29,20},
{7,68,56,5,35,8,7,0,6,6},
{0,52,63,29,0,21,4,26,5,0},
{2,64,69,40,0,42,10,45,16,10},
{13,68,67,48,0,29,23,63,44,10},
{27,67,67,60,0,22,32,65,61,33},
{33,56,60,67,4,58,24,47,61,59},
{51,56,56,74,35,56,41,46,67,50},
{59,65,53,74,55,66,47,69,70,74},
{63,64,56,63,57,72,60,69,59,65},
{72,58,62,52,64,71,91,62,61,62},
{52,59,65,44,69,50,66,51,48,43},
{24,60,65,20,84,34,57,9,35,19},
{8,75,64,14,85,22,45,3,17,7},
{8,67,58,7,69,4,43,3,12,5},
{1,65,60,5,58,1,33,0,9,5},
{0,63,63,0,52,0,33,0,0,1},
{0,73,60,0,48,0,27,0,0,1}};


    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void data_erase_valid()
{
    int i, j, k;
    bool seq, white_space;
    for (i = 0; i < n; i++)
    {
        seq = false; white_space = false; j = 0;
        while (j < m)
        {
            if (pict[i][j] == '.')
            {
                if (seq)
                {
                    k = j - 1;
                    while (k >= 0)
                    {
                        if ((pict[i][k] == '#') || (pict[i][k] == '%'))
                        {
                            pict[i][k] = '@';
                        }    
                        else
                        {
                            break;
                        }    
                        k--;
                    }    
                        seq = false;
                }    
                white_space = true;
            }    
            if ((pict[i][j] == '%') || (pict[i][j] == '#'))
            {
                if (white_space)
                {
                    seq = true;
                }
            }        
            if (pict[i][j] == '@')
            {
                white_space = false;
                seq = false;
            }        
            j++;
        }    
    }    
    for (j = 0; j < m; j++)
    {
        seq = false; white_space = false; i = 0;
        while (i < n)
        {
            if (pict[i][j] == '.')
            {
                if (seq)
                {
                    k = i - 1;
                    while (k >= 0)
                    {
                        if (pict[k][j] == '%')
                        {
                            pict[k][j] = '.';
                        }    
                        else
                        {
                            break;
                        }    
                        k--;
                    }    
                        seq = false;
                }    
                white_space = true;
            }    
            if (pict[i][j] == '%')
            {
                if (white_space)
                {
                    seq = true;
                }
            }        
            if (pict[i][j] == '@')
            {
                white_space = false;
                seq = false;
            }        
            i++;
        }    
    }    
}       


void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    int mid_v = 0;
    for (i = 0; i < komp; i++)
    {
        mid_v += dim[i][3] - dim[i][1];
    }    
    mid_v = mid_v / komp;
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            if ((dim[i][3] - dim[i][1]) < mid_v/2)
            {
                dim[i][5] = 1;
            }    
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    data_erase_valid();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
