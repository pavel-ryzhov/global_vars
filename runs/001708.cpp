#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#define MAX_HEIGHT 70
#define MAX_WIDTH 400
#define LITTLE_SIZE 16
#define FONTS_NUMBER 1

//------------------------------------------
//----------------perceptron----------------
//------------------------------------------
int perceptron(unsigned char *check, unsigned char *etolon)
{
int i;
unsigned short int answer = 0;


for (i = 0; i < LITTLE_SIZE * LITTLE_SIZE; i++)
    answer += abs(*(check + i) - *(etolon + i));

return (answer);
}

//------------------------------------------
//------------------resize------------------
//------------------------------------------
void resize(unsigned char big_pic[MAX_HEIGHT][MAX_WIDTH], int crop_l, int crop_r, int crop_b, unsigned char little_pic[LITTLE_SIZE][LITTLE_SIZE])
{
int rewrite;
unsigned long int pixel;
int x, y, b_x, b_y;	//little x, y & big x, y
int crop_t = 0;	//t - top
int crop_h, crop_w;	//height width
int i, ii, summ = 0;

  //---------------crop detect------------------
  //left
while (1)
    {
    for (i = 0; i <= crop_b; i++)
        summ += big_pic[i][crop_l];
    if (summ != 0)
        break;
    crop_l++;
    }
  //right
summ = 0;
while (1)
    {
    for (i = 0; i <= crop_b; i++)
        summ += big_pic[i][crop_r];
    if (summ != 0)
        break;
    crop_r--;
    }
  //top
summ = 0;
while (1)
    {
    for (i = crop_l; i <= crop_r; i++)
        summ += big_pic[crop_t][i];
    if (summ != 0)
        break;
    crop_t++;
    }
  //bottom
summ = 0;
while (1)
    {
    for (i = crop_l; i <= crop_r; i++)
        summ += big_pic[crop_b][i];
    if (summ != 0)
        break;
    crop_b--;
    }

  //resize pic
for(y = 0; y < LITTLE_SIZE; y++)
    for(x = 0; x < LITTLE_SIZE; x++)
        {
        rewrite = 1;
        b_y = crop_t + (((1 + crop_b - crop_t) * y) / LITTLE_SIZE);
        ii = crop_t + ((1 + crop_b - crop_t) * (y + 1)) / LITTLE_SIZE;
        do
            {
            b_x = crop_l + (((1 + crop_r - crop_l) * x) / LITTLE_SIZE);
            i = crop_l + ((1 + crop_r - crop_l) * (x + 1)) / LITTLE_SIZE;
            do
                {
                summ = rewrite ? (big_pic[b_y][b_x]) :\
                                 ((summ + big_pic[b_y][b_x]) / 2);
                rewrite = 0;
		b_x++;
                }
            while(b_x < i);
            b_y++;
            }
        while(b_y < ii);

	little_pic[y][x] = summ;
        }
}

//-----------------------------------------
//--------------------input----------------
//-----------------------------------------
int input(unsigned char input_array[MAX_HEIGHT][MAX_WIDTH], long int *width, long int *height,long int an_str_h_summ[4][MAX_WIDTH], char *file_addr)
{
*height = 0;
*width = MAX_WIDTH;
  //0 of all chars in string is '.'
short int top_bottom;
short int one_char;
short int i;
FILE *f_handle;

for (i = 0; i < MAX_WIDTH; i++)			//1:0 1:2 1:3 1:6
    {
    an_str_h_summ[0][i] = 0;
    an_str_h_summ[1][i] = 0;
    an_str_h_summ[2][i] = 0;
    an_str_h_summ[3][i] = 0;
    }


  //can`t open file
if (file_addr && (!(f_handle = fopen(file_addr, "r"))))
    return (-1);

do
    {
    if (*height >= MAX_HEIGHT) break;	//to high
    i = 0;
    top_bottom = 0;
    do
        {
        one_char = file_addr ? getc(f_handle) : getchar();
        if (i >= *width) continue;	//to long
        switch (one_char)
            {
            case '.': input_array[*height][i] = 0; i++; break;
            case '%': input_array[*height][i] = 33; top_bottom = 1; i++; break;
            case '#': input_array[*height][i] = 66; top_bottom = 1;
		      an_str_h_summ[0][i]++;
		      if(i + *height/6 < *width)
		          an_str_h_summ[1][i + *height/6]++;
		      else if(i + *height/3 < MAX_WIDTH) 
		          an_str_h_summ[2][i + *height/3]++;
		      else if(i + *height/2 < MAX_WIDTH)
		          an_str_h_summ[3][i + *height/2]++;
		      i++; break;
            case '@': input_array[*height][i] = 100; top_bottom = 1;
		      an_str_h_summ[0][i] += 8;
		      if(i + *height/6 < *width)
		          an_str_h_summ[1][i + *height/6] += 8;
		      if(i + *height/3 < MAX_WIDTH)
		          an_str_h_summ[2][i + *height/3] += 8;
		      if(i + *height/2 < MAX_WIDTH)
		          an_str_h_summ[3][i + *height/2] += 8;
		      i++; break;
            }
        }
    while (one_char != (int)'\n' & one_char > 0);

    if (!top_bottom)	//all elements is '.'
        continue;

    if (!(*height))	//first line lenght
        *width = i;
    (*height)++;
    }
while (one_char > 0);
return 0;
}


//------------------------------------------
//--------------detect element--------------
//------------------------------------------
int det_element(long int an_str_h_summ[4][MAX_WIDTH], long int width, unsigned int element_index, long int element[3])
{
long int i, ii, min_summ[5] = {0, 0, 0, 0, 0};	//1:0 1:2 1:3 1:6
long int elements[4][2] = {0, 0, 0, 0, 0, 0, 0, 0};	//[*][0] - number, [*][1] - len


element[0] = 0;
  //get min delay
for(ii = 0; ii < 4; ii++)
    {
    min_summ[4] = 0;
    for (i=0; i < width; i++)
        if (an_str_h_summ[ii][i] < 8)
            {
            if (elements[ii][1])
                min_summ[4]++;
            }
        else
            {
            elements[ii][1]++;
            if (min_summ[4] != 0)
                {
                elements[ii][0]++;
                if (elements[ii][0] + 1 == element_index)
                    element[0] = i;
                }
            else if (elements[ii][0] + 1 == element_index)
                    element[1] = i - 1;
            if (min_summ[4] > 0 &&\
               (min_summ[ii] > min_summ[4] || min_summ[ii] == 0))
                min_summ[ii] = min_summ[4];
	    min_summ[4] = 0;
            }
    if (min_summ[ii])
        {
        element[2] = ii;
	break;
        }
    }     

if (ii == 4)
    {
    element[0] = 0;
    element[1] = width - 1;
    element[2] = 0;
    }
else
    {
  //come closer
    while(1)
        {
        if (element[0] - 1 >= 0 &&\
            an_str_h_summ[element[2]][element[0]] >\
            an_str_h_summ[element[2]][element[0] - 1])

            element[0]--;
	else
            break;
        }
    while(1)
        {
        if (element[1] + 1 <= width &&\
            an_str_h_summ[element[2]][element[1]] >\
            an_str_h_summ[element[2]][element[1] + 1])

            element[1]++;
	else
            break;
        }
    }

if (element_index <= elements[element[2]][0] + 1)
    return (elements[element[2]][0] + 1);
return (-1);
}

//------------------------------------------
//---------------------main-----------------
//------------------------------------------
int main(int argc, char **argv)
{
  //str height & width
long int width, height;
  //iterator
long int i, ii, iii;
long int res;
unsigned char e_con;
  //array with input word
unsigned char analog_str[MAX_HEIGHT][MAX_WIDTH];	// letter 1:4 - 1:1
unsigned char little_pic[LITTLE_SIZE][LITTLE_SIZE];

long int an_str_h_summ[4][MAX_WIDTH];	//analog str height summ

long int element[3];	//0 - start pos, 1 - stop pos, 2 - naklon
     //0 - numbet, 1 - perceptron answer
unsigned short int digi_element[2] = {0, 16*16*100};



unsigned char element_fonts[FONTS_NUMBER][10][16][16] = {\
  //font 1
  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0, 94,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,100, 96, 72,  0,  0,  0,  0,  0,100, 95,  0,  0,  0,
  0,  0,100, 96,100,  0,  0,  0,  0,  0,  0,  0,100,100,  0,  0,
  0,100, 90, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,  0,
  3,100, 90, 98,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,  6,
100, 93, 93,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,
100, 96, 93,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 92, 98,100,
100, 96, 96, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0, 89, 96,100,
100, 96, 96,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100, 96,100,
 15, 96, 96,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100, 96,  0,
  0, 98, 96,100,  0,  0,  0,  0,  0,  0,  0,  0,100,100, 96,  0,
  0, 68, 96, 96,100,  0,  0,  0,  0,  0,  0,  0,100,100,  0,  0,
  0,  0, 27, 96,100,  0,  0,  0,  0,  0,  0,100,100, 98,  0,  0,
  0,  0,  0,  0, 96,100,  0,  0,  0,  0,  0,100,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,100,100,100,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,100,  0,  1, 12,
  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100, 20,
  0,  0,  0,  0,  0,  0,100,100,100,100,100,  0,  0,  0, 27,100,
100,  0,  0,  0,  0,100,100,100,100,100,100,100,  7,  0,  0,100,
  0,  0,  0,  0,100,100,100, 60,100,100,100,100, 32,  0,  0, 69,
  0,  0,  0,  0,  0,  0,  0, 87,100,100,100,100,  0, 78,  0, 71,
  0,  0,  0,  0,  0,  0,  0,  0,100, 32, 73, 10, 17, 99, 98, 81,
  0,  0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0, 88, 77, 76,
  0,  0,  0,  0,  0,  0,  0,  8, 99,  0,  0,  0,  0,  0,  0, 21,
  0,  0,  0,  0,  0,  0,  0, 45,100,100, 99, 98,  0,  0,  0,  8,
  0,  0,  0,  0,  0,  0,  0,  1,100,100, 98, 98,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,100, 98,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0, 60, 98, 99,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0, 78,100,100,100,100,  0, 15,  0,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,
  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,100,100,

  0,  0,  0,  0,  0,  0,  0,100,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0, 98, 95, 96, 96, 96, 53,  0,  0,  0,  0,  0,  0,
  0,  0, 87, 95,  0,  0,  9,  0,  0, 83,100,100, 92, 90,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 34,100,100, 96, 68,  0,
 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 82,100, 99, 96,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 91,100, 97,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 99, 99, 98,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 91, 82, 33,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 98, 92,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,100,100, 99, 98,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,100,100,100, 97,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,100,100,100,100,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,100,100,100, 99,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0, 93,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,100,
  0,100,100, 90, 92, 91, 92, 98,100,100, 81, 80, 83,100,100,100,
100,100,100,100,100, 62,  8, 26, 48,100,100,100,100,100,100,100,

  0,  0,  0,  0,  0,  0, 59,100,100,100,  0,  0,  0,  0,  0,  0,
  0,  0, 16,100, 98, 96, 96, 96, 96, 96, 82, 94, 97,  0,  0,  0,
  0,100, 97, 96,  0,  0,  0,  0,  0,  0,100,100, 97, 93, 80,  0,
  0, 98, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,100, 96, 96,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100, 99, 96,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100, 44,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0, 80, 66,  0, 20,  0,  0,  0,
  0,  0,  0,  0,  0, 53,100,100, 99,100,100,100, 61,  0,  0,  0,
  0,  0,  0,  0,  0, 98,  0,  0,  0, 98, 98, 98, 96, 99,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 99,100,100,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100, 98,
 79,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,  0,
  0,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,  0,
100,100,100,100,100,  0,  0,  0,  0, 35,100,100,100,  0,  0,  0,
  0,  0,100, 58,  0, 23,100,  0,100,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 73, 77,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 29,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0, 26, 90, 97,100, 37,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0, 91, 88, 93,100,100,  7,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 92, 88, 72,100,100,100,  9,  0,  0,  0,
  0,  0,  0,  0,  0, 87, 88, 54, 52, 16, 94,100,100,  0,  0,  0,
  0,  0,  0,  0, 67, 67, 40,  0,  0,  0, 68, 93,100,  0,  0,  0,
  0,  0,  0, 71, 69,  0,  0,  0,  0,  0, 67, 96, 92,  0,  0,  0,
  0,  0,  0, 74, 29,  0,  0,  0,  0,  0, 83, 76, 90,  0,  0,  0,
  0,  0, 79,100, 17,  9,  0,  0,  0,  0, 91, 98, 99,  0,  0,  0,
 87, 79, 71, 28, 94, 64, 32,  0,  0, 98, 90, 98,100,  0,  0,  0,
 81, 97,100,100,100,100,100,100,100, 98,100,100,100, 55, 27,100,
  0,  0,  0,  3,  0,  0,  7,  2,  0, 99,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0, 98, 99,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 43,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 92,100,100,  9,  0,  0,

  0,  0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
  0,  0,100,  0,  0, 33, 26,  5,  0,  0,  0,  0, 97,100,100,  0,
  0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,100,100, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0, 96,100,100,100,100, 68,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0, 96,100,100,100,100,100,100,100,100,  0,  0,  0,  0,  0,
  0,  0,  0,  6, 81,100,100,100,100,100,100,100, 40, 64,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100, 98, 98,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 81, 99,100, 23,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 99,100,100,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100, 96,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 92,100, 17,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,  1,  0,
  0,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100, 63,  0,  0,
 32,100,100,100, 84, 73,  0,  0, 53,100,100,  0,  0,  0,  0,  0,
  0,  0,  0, 25,100,  0,100, 72,  0,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0, 12, 30, 30, 30, 30, 30, 95, 77,  0,
  0,  0,  0,  0,  0, 20, 12,  0,  0,  0,  0, 12, 30, 30, 30,  0,
  0,  0,  0,  2, 30, 96, 85, 85, 85,  0,  0,  0, 20, 30, 30,  0,
  0,  0,  2, 30,100, 87, 85,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0, 30,100,100, 85,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  2,100,100, 94,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,100,100,100, 10, 12, 12, 12, 70, 52,  0, 30, 12,  0,  0,  0,
  0,100,100,100, 82, 89, 36, 54, 51, 81, 81, 86, 54, 30, 20,  0,
100,100,100,100,  9, 19, 17,  0,  0,  0,  0, 27, 72,100,100,  0,
100,100,100,100, 81, 20,  0,  0,  0,  0,  0,  0, 82,100,100,  8,
100,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,
  0,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,
  0,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0, 28,100,100, 12,
  0,  0,100,100,100, 85,  0,  0,  0,  0,  0,  0, 94,100,100,  0,
  0,  0,  0, 12,100, 84,  0,  0,  0,  0,  0, 90,100, 84, 12,  0,
  0,  0,  0,  0,  0,  0, 12,100,100,100, 35, 12,  0,  0,  0,  0,

100,100,100,100,100,100, 98, 97, 94, 97, 98,100,100,100,100,100,
100,100,100, 94, 91, 88, 88, 88, 88, 88, 79, 65, 92,100,100,100,
100, 95,  0,  0,  0, 95,100,100,100, 98, 95,  0, 85, 88, 97,100,
100,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 70, 82, 81,  0,
 92,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,100, 82,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 14,100, 98,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  9, 99, 94,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  5,  0, 98, 81,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  3,  7,  0, 89,  9,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  2, 25, 99, 99, 91,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  9, 46, 82,100, 99, 89,  0,  0,  0,  0,  0,
  0,  0,  0,  0, 11, 39, 64,100, 95, 89,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  1, 33, 32,100, 93, 89, 92,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  7, 21, 53, 92, 89, 95,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  9,  7,  0,  0, 75,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  3, 14,  0, 79,  0, 94,  0,  0,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0, 21,  5, 35,  0, 40,  0,  0,  0,  0,  0,
  0,  0,  0, 60, 45, 16,  5,  5,  5,  5,  5,  3,  2,  0,  0,  0,
  0,  0, 72, 78, 80,  0,  0,  0,  0,  0,  0,  0, 11, 78,  1,  0,
  0, 78, 78, 80,  0,  0,  0,  0,  0,  0,  0,  0, 49, 73,  5,  0,
  0, 78, 78, 80, 79,  0,  0,  0,  0,  0,  0,  0, 76, 80,  5,  0,
  0,  0, 78, 80, 80, 79,  0,  0,  0,  0,  0, 76, 80, 67,  0,  0,
  0,  0,  0, 80, 80, 80, 80, 80,  6, 28, 80, 80,  4,  0,  0,  0,
  0,  0,  0,  0,  4, 80, 80, 80, 80, 80, 12, 10,  1,  0,  0,  0,
  0,  0, 12,  8, 78, 78, 72, 69, 70, 72, 72, 78,  5,  8,  0,  0,
  0, 10, 80, 80, 80,  0,  0,  0,  0,  0,  0, 72, 77, 80, 12,  0,
  7, 80, 80, 79,  0,  0,  0,  0,  0,  0,  0,  0, 76, 80, 80,  6,
 80, 80, 80,  5,  0,  0,  0,  0,  0,  0,  0,  0,  5, 40, 63, 80,
 80, 80, 80, 41,  0,  0,  0,  0,  0,  0,  0,  0,  0, 73, 80, 80,
  0, 80, 80, 80,  0,  0,  0,  0,  0,  0,  0,  0,  3, 80, 80,  0,
  0,  0, 49, 80, 80,  4,  2,  7,  9,  9, 10, 12, 70, 80,  0,  0,
  0,  0,  0,  0,  0,  0,  0, 80, 69,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0,100,100,  1,  0,  0,  0,  0,  0,  0,
  0,  0,  0, 80,100, 15, 15, 15, 15, 15, 15, 12, 10,  0,  0,  0,
  0,  0,100,100,  6, 29,  0,  0,  0,  0,  0, 99,100,100,  1,  0,
  0,100,100,100,  0,  0,  0,  0,  0,  0,  0, 67, 95,100,100,  0,
100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0, 93,100,100, 13,
100,100,100, 91,  0,  0,  0,  0,  0,  0,  0,  0, 25,100,100,100,
 93,100,100, 99,  0,  0,  0,  0,  0,  0,  0,  0, 68,100,100,100,
  0, 96,100,100,100,  0,  0,  0,  0,  0,  0,  0,100,100,100, 95,
  0,  0, 93,100,100,100,100,100, 93, 58, 20, 15, 15,100, 94, 93,
  0,  0,  0,  0, 93, 96, 97, 99, 99,  0, 11, 15, 10, 94, 90,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,100,100, 93,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  2, 15, 26, 96, 93,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  6, 15, 54, 94, 93, 46,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  9, 15,100, 95, 93, 17,  0,  0,  0,  0,
  0,  0,  0,  0,  0, 11,100, 81,  0,  0,  0,  0,  0,  0,  0,  0,
  0, 93, 93, 93,100, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
};



if (argc == 1)
    {
    input(analog_str, &width, &height, an_str_h_summ, NULL);

    for(i = 1; i <= 3; i++)
        {
        if (det_element(an_str_h_summ, width, i, element) <= 0) break;
        resize(analog_str, element[0], element[1], height - 1, little_pic);
        digi_element[1] = 16*16*100;
//        output(&little_pic[0][0], LITTLE_SIZE, LITTLE_SIZE, 0);
	for(ii = 0; ii < FONTS_NUMBER; ii++)
            for(iii = 0; iii < 10; iii++)
                {
                res = perceptron(&little_pic[0][0],\
			         &element_fonts[ii][iii][0][0]);
                if (res < digi_element[1])
                    {
                    digi_element[0] = iii;
                    digi_element[1] = res;
                    }
                }
        fprintf(stdout,"%d", digi_element[0]);
        }	 
    fprintf(stdout,"\n");
    }

return 0;
}

