#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<vector>
using namespace std;


void transfStr(char s[])
{
	if( s[strlen(s)-1] == '\n')
			s[strlen(s)-1] = '\0';
}


vector<vector<float> > picture; /*изображение*/

vector<float> v_in; // входной вектор

int neuro_wid = 10;/* число делений по вертикали*/
vector<int> borders;/* границы цифр на изображении*/

vector<vector<vector<float> > > vec_digit;/* вектор эталонов*/
vector<float> v_distance; /* вектор расстояний*/
/*******************/
/* */
/*******************/


void initialize_vector_in(int start, int wd, int lastWd, int ht, int lastHt)
{

	int y=0, x=0;
	float sum = 0;
	while(y<neuro_wid-1)
	{
		x=0;
		while(x<3)
		{
			sum = 0;
			for(int i = x*wd + start; i<x*wd + start+wd; i++)
			{			
				for(int j = y*ht; j<y*ht + ht; j++)
					sum = sum+ picture[j][i];
			}
			sum = sum/(wd*ht);
			v_in.push_back(sum);
			x++;
		}

		sum = 0;
			for(int i = x*wd + start; i<x*wd + start+lastWd; i++)
			{			
				for(int j = y*ht; j<y*ht + ht; j++)
					sum = sum+ picture[j][i];
			}
			sum = sum/(lastWd*ht);
			v_in.push_back(sum);

		y++;
	}


	x=0;
	while(x<3)
		{
			sum = 0;
			for(int i = x*wd + start; i<x*wd + start+wd; i++)
			{			
				for(int j = y*ht; j<y*ht + lastHt; j++)
					sum = sum+ picture[j][i];
			}
			sum = sum/(wd*lastHt);
			v_in.push_back(sum);
			x++;
		}

		sum = 0;
			for(int i = x*wd + start; i<x*wd + start+lastWd; i++)
			{			
				for(int j = y*ht; j<y*ht + lastHt; j++)
					sum = sum+ picture[j][i];
			}
			sum = sum/(lastWd*lastHt);
			v_in.push_back(sum);

}



void read_picture()
{
	char s[100000];
	int k=0, n = 0;
	while(k<5)
	{
		gets(s);
		k++;
	}

	size_t len = 0;
	k = 0;
	while(1)
	{
		gets(s);
		transfStr(s);
		len = strlen(s);
		vector<float> v;
		k = 0;
			for(size_t i=5; i<len-5; i++)
			{
				switch(s[i])
				{
				case '.': k++; v.push_back(0); break;
				case '%': k = 0; v.push_back(0.5); break;
				case '#': k = 0; v.push_back(0.7); break;
				case '@': k = 0; v.push_back(1); break;
				}				
			}

			if(k == len-10)
			{
				n++;
				if(n == 5)
				break;
			}

     picture.push_back(v);

	}

	k=0;
	while(k<4)
	{
		picture.pop_back();
		k++;
	}

}





int check_digit_amount()
{
	int x = 0;
	bool flagDigit = false;
	bool flagBorder = false;
	bool flagPrevious = true;
	size_t len = picture[0].size();
	borders.push_back(0);
	for(size_t j=4; j<len-4; j++)
	{
		flagDigit = false;
		for(size_t i = 0; i<picture.size(); i++)
		{
			if(picture[i][j] == 1.)
			{ flagDigit = true; 
			if(!flagPrevious) borders.push_back(j);
			flagPrevious = true;}
		}
		if(!flagDigit)
		{	//flagBorder = true;
			if(flagPrevious) 
			{x++; flagPrevious = false;
			 borders.push_back(j);}
		}
	}
	borders.push_back(len);
	
	return x+1;

}

void read_picture(FILE*fs)
{
	char s[100000];
	int k=0;
	while(k<5)
	{
		fgets(s,999,fs);
		k++;
	}

	size_t len = 0;
	while(fgets(s,999,fs) != NULL)
	{
		transfStr(s);
		len = strlen(s);
		vector<float> v;
			for(size_t i=5; i<len-5; i++)
			{
				switch(s[i])
				{
				case '.': v.push_back(0); break;
				case '%': v.push_back(0.5); break;
				case '#': v.push_back(0.7); break;
				case '@': v.push_back(1.); break;
				}				
			}
     picture.push_back(v);

	}

	k=0;
	while(k<5)
	{
		picture.pop_back();
		k++;
	}

}


void write_vector_in_file(int answer, char file[])
{
	FILE*fs = fopen("vectors.txt","a");
	fputs(file, fs);
	fprintf(fs, "\n%d\n{ ", answer);
	size_t i=0;
	for(; i<v_in.size()-1; i++)
	{
			fprintf(fs, "%f, ", v_in[i]);
	}
	fprintf(fs, "%f ", v_in[i]);
	fputs("}\n\n", fs);
	fclose(fs);

}

void get_vectors()
{
	char filePath[100] = "001";
	char file[4] = "0";
	int answer = 0;
	

	while(1)
	{
	puts("\nwrite file (q - to exit, w - to save weights in file):");
	gets(filePath);
	if(strcmp(filePath, "q") == 0) break;


	FILE*fs = fopen(filePath,"r");
	if(fs == 0)
	{
		printf("File %s can't be opened!", file);
		continue;
	}
	
	picture.clear();
	read_picture(fs);
	int pictWidth = picture[0].size();
	int pictHeight = picture.size();

	int digit_wd = 0, digit_wdLast = 0, wd = 0, lastWd = 0;

	borders.clear();
	int dg_num = check_digit_amount();
	if(dg_num == 1 && pictWidth>70)
	{ 
	dg_num = 3;
	
	digit_wd = pictWidth/dg_num;
	digit_wdLast = digit_wd + pictWidth%dg_num;
	borders.clear();
	borders.push_back(0);
	borders.push_back(digit_wd);
	borders.push_back(digit_wd);
	borders.push_back(2*digit_wd);
	borders.push_back(2*digit_wd);
	borders.push_back(2*digit_wd+digit_wdLast);
	}

	int ht = pictHeight/neuro_wid;
	int lastHt = ht + pictHeight%neuro_wid;

	int step = 0, start = 0, end = 0;
		while(step < dg_num)
		{
		puts("answer:");
		gets(file);
		answer = atoi(file);

		start = borders[2*step];
		wd = (borders[2*step+1] - start)/4;
		lastWd = wd + (borders[2*step+1] - start)%4;
		initialize_vector_in(start, wd, lastWd, ht, lastHt); 
		
		write_vector_in_file(answer, filePath);

		step++;
		}
	
	}

}

/***************************************/

/********** Vectors-Digits of different fonts **********/

double arr0[][40] = 
{
	{ 0.050000, 0.770000, 0.650000, 0.041667, 0.400000, 1.000000, 0.150000, 0.291667, 0.720000, 1.000000, 0.100000, 0.283333, 0.900000, 1.000000, 0.100000, 0.283333, 0.970000, 1.000000, 0.100000, 0.266667, 1.000000, 1.000000, 0.100000, 0.308333, 1.000000, 1.000000, 0.100000, 0.283333, 1.000000, 1.000000, 0.100000, 0.333333, 0.920000, 1.000000, 0.100000, 0.283333, 0.462857, 0.934286, 0.271429, 0.223810 },
	{ 0.083333, 0.666667, 0.700000, 0.150000, 0.366667, 0.500000, 0.166667, 0.520000, 0.833333, 0.200000, 0.000000, 0.620000, 0.900000, 0.166667, 0.000000, 0.720000, 1.000000, 0.166667, 0.000000, 0.800000, 1.000000, 0.166667, 0.000000, 0.800000, 0.950000, 0.166667, 0.000000, 0.800000, 0.866667, 0.166667, 0.000000, 0.620000, 0.666667, 0.366667, 0.083333, 0.590000, 0.133333, 0.633333, 0.522222, 0.266667 }
};
size_t n0 = 2;

double arr1[][40] = 
{
	{ 0.250000, 0.625000, 0.875000, 0.142857, 0.000000, 0.250000, 1.000000, 0.142857, 0.000000, 0.250000, 1.000000, 0.142857, 0.000000, 0.250000, 1.000000, 0.142857, 0.000000, 0.250000, 1.000000, 0.142857, 0.000000, 0.250000, 1.000000, 0.142857, 0.062500, 0.437500, 1.000000, 0.285714, 0.187500, 0.250000, 0.250000, 0.250000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },//007
	{ 0.083333, 0.533333, 1.000000, 0.350000, 0.283333, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.000000, 0.850000, 1.000000, 0.350000, 0.170000, 0.880000, 1.000000, 0.480000 },//009
	{ 0.000000, 0.500000, 1.000000, 0.166667, 1.000000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.500000, 1.000000, 1.000000, 0.166667, 0.571429, 1.000000, 1.000000, 0.261905 },//019
	{ 0.000000, 0.041667, 0.433333, 0.058333, 0.558333, 0.958333, 0.658333, 0.000000, 0.208333, 0.641667, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.000000, 0.625000, 0.625000, 0.000000, 0.084375, 0.703125, 0.756250, 0.125000 }//020

};
size_t n1 = 4;

double arr2[][40] = 
{
	{ 0.138889, 0.888889, 0.972222, 0.300000, 0.583333, 1.000000, 1.000000, 0.775000, 0.805556, 0.666667, 0.388889, 0.950000, 0.500000, 0.361111, 0.250000, 1.000000, 0.000000, 0.000000, 0.500000, 0.900000, 0.000000, 0.055556, 0.916667, 0.700000, 0.000000, 0.527778, 1.000000, 0.325000, 0.083333, 0.972222, 0.777778, 0.000000, 0.444444, 1.000000, 0.194444, 0.000000, 0.777778, 0.909091, 0.909091, 0.909091 },//003
	{ 0.050000, 0.700000, 1.000000, 0.406250, 0.500000, 0.550000, 0.000000, 0.625000, 0.750000, 0.100000, 0.000000, 0.531250, 0.300000, 0.000000, 0.000000, 0.531250, 0.000000, 0.000000, 0.000000, 0.531250, 0.000000, 0.000000, 0.100000, 0.593750, 0.000000, 0.000000, 0.700000, 0.250000, 0.000000, 0.500000, 0.700000, 0.000000, 0.200000, 0.950000, 0.150000, 0.000000, 0.733333, 0.622222, 0.444444, 0.444444 },//004
	{ 0.000000, 0.500000, 0.625000, 0.125000, 0.250000, 0.000000, 0.000000, 0.625000, 0.500000, 0.000000, 0.000000, 0.750000, 0.750000, 0.500000, 0.000000, 0.750000, 0.625000, 0.375000, 0.000000, 0.875000, 0.000000, 0.000000, 0.250000, 0.500000, 0.000000, 0.000000, 0.625000, 0.125000, 0.000000, 0.125000, 0.375000, 0.000000, 0.000000, 0.500000, 0.000000, 0.125000, 0.583333, 0.541667, 0.500000, 0.708333 },//006
	{ 0.375000, 0.837500, 0.337500, 0.000000, 0.525000, 0.812500, 0.712500, 0.320000, 0.312500, 0.712500, 0.837500, 0.750000, 0.000000, 0.062500, 0.937500, 0.760000, 0.000000, 0.000000, 0.675000, 0.760000, 0.000000, 0.000000, 0.812500, 0.720000, 0.000000, 0.150000, 0.800000, 0.440000, 0.000000, 0.512500, 0.775000, 0.070000, 0.087500, 0.737500, 1.000000, 1.000000, 0.791667, 0.825000, 0.666667, 0.833333 },//014
	{ 0.300000, 0.250000, 0.250000, 0.289583, 0.025000, 0.000000, 0.000000, 0.110417, 0.000000, 0.187500, 0.145833, 0.100000, 0.000000, 0.377083, 0.372917, 0.100000, 0.000000, 0.216667, 0.270833, 0.100000, 0.000000, 0.000000, 0.320833, 0.100000, 0.000000, 0.106250, 0.247917, 0.100000, 0.000000, 0.368750, 0.014583, 0.100000, 0.000000, 0.418750, 0.139583, 0.100000, 0.115972, 0.202778, 0.176389, 0.161111 },//017
	{ 0.000000, 0.000000, 0.083333, 0.551852, 0.000000, 0.188889, 0.944444, 0.600000, 0.027778, 0.772222, 0.383333, 0.322222, 0.122222, 0.261111, 0.666667, 0.074074, 0.000000, 0.250000, 0.372222, 0.000000, 0.000000, 0.522222, 0.000000, 0.000000, 0.327778, 0.250000, 0.000000, 0.000000, 0.522222, 0.000000, 0.000000, 0.000000, 0.927778, 0.344444, 0.000000, 0.414815, 0.272222, 0.451852, 0.368519, 0.449383 }//018

};
size_t n2 = 6;

double arr3[][40] = 
{
	{ 0.050000, 0.800000, 1.000000, 0.281250, 0.500000, 0.500000, 0.050000, 0.562500, 0.650000, 0.050000, 0.000000, 0.500000, 0.000000, 0.000000, 0.000000, 0.531250, 0.000000, 0.000000, 0.300000, 0.593750, 0.000000, 0.100000, 0.750000, 0.625000, 0.000000, 0.000000, 0.000000, 0.625000, 0.000000, 0.000000, 0.000000, 0.500000, 0.800000, 0.000000, 0.000000, 0.531250, 0.444444, 0.533333, 0.466667, 0.444444 },//004
	{ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.562500, 0.687500, 0.400000, 0.275000, 0.300000, 0.125000, 0.700000, 0.612500, 0.062500, 0.062500, 0.690000, 0.600000, 0.087500, 0.337500, 0.440000, 0.500000, 0.550000, 0.587500, 0.050000, 0.000000, 0.275000, 0.650000, 0.420000, 0.000000, 0.175000, 0.000000, 0.720000, 0.000000, 0.000000, 0.000000, 0.820000, 0.582143, 0.142857, 0.385714, 0.448571 },//008
	{ 0.000000, 0.850000, 1.000000, 0.233333, 0.750000, 1.000000, 1.000000, 0.566667, 0.600000, 0.000000, 0.250000, 0.833333, 0.250000, 0.000000, 0.250000, 0.833333, 0.000000, 0.000000, 0.250000, 0.833333, 0.000000, 0.000000, 0.250000, 0.500000, 0.000000, 0.000000, 0.850000, 0.166667, 0.000000, 0.750000, 1.000000, 0.566667, 0.000000, 0.000000, 0.750000, 0.833333, 0.264286, 0.192857, 0.178571, 0.623810 },//019
	{ 0.000000, 0.850000, 1.000000, 0.233333, 0.350000, 1.000000, 1.000000, 0.566667, 0.600000, 0.000000, 0.250000, 0.833333, 0.250000, 0.000000, 0.250000, 0.833333, 0.000000, 0.000000, 0.250000, 0.833333, 0.000000, 0.000000, 0.250000, 0.566667, 0.000000, 0.000000, 0.350000, 0.500000, 0.000000, 0.250000, 1.000000, 0.166667, 0.000000, 0.750000, 1.000000, 0.833333, 0.231250, 0.168750, 0.250000, 0.691667 }//023

};
size_t n3 = 4;

double arr4[][40] = 
{
	{ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.482143, 0.396429, 0.000000, 0.000000, 0.685714, 0.410714, 0.000000, 0.000000, 0.764286, 0.535714, 0.178571, 0.060714, 0.753572, 0.757143, 0.214286, 0.300000, 0.464286, 0.671429, 0.214286, 0.539286, 0.210714, 0.671429, 0.214286, 0.703571, 0.750000, 0.917857, 0.739286, 0.000000, 0.014286, 0.640000, 0.392857 },//002
	{ 0.000000, 0.000000, 0.125000, 0.200000, 0.000000, 0.000000, 0.500000, 0.200000, 0.000000, 0.000000, 0.750000, 0.200000, 0.000000, 0.250000, 0.625000, 0.200000, 0.000000, 0.250000, 0.500000, 0.200000, 0.000000, 0.250000, 0.500000, 0.200000, 0.250000, 0.000000, 0.500000, 0.200000, 0.250000, 0.000000, 0.500000, 0.200000, 0.625000, 0.500000, 0.750000, 0.600000, 0.000000, 0.041667, 0.583333, 0.300000 },//006
	{ 0.000000, 0.023810, 0.357143, 0.000000, 0.000000, 0.357143, 0.214286, 0.000000, 0.000000, 0.638095, 0.104762, 0.112500, 0.095238, 0.590476, 0.700000, 0.087500, 0.366667, 0.328571, 0.957143, 0.087500, 0.652381, 0.214286, 0.957143, 0.087500, 0.900000, 0.604762, 0.985714, 0.704167, 1.000000, 1.000000, 1.000000, 0.654167, 0.580952, 0.690476, 1.000000, 0.195833, 0.000000, 0.071429, 0.796825, 0.034722 },//011
	{ 0.000000, 0.366667, 0.866667, 0.000000, 0.000000, 0.533333, 0.666667, 0.000000, 0.000000, 0.866667, 0.200000, 0.000000, 0.166667, 0.833333, 0.700000, 0.000000, 0.366667, 0.533333, 0.833333, 0.100000, 0.700000, 0.200000, 0.833333, 0.220000, 0.833333, 0.583333, 0.916667, 0.850000, 0.000000, 0.000000, 0.700000, 0.100000, 0.000000, 0.000000, 0.700000, 0.100000, 0.000000, 0.000000, 0.400000, 0.000000 },//012
	{ 0.000000, 0.000000, 0.212500, 0.500000, 0.000000, 0.000000, 0.387500, 0.514286, 0.000000, 0.062500, 0.837500, 0.528571, 0.000000, 0.437500, 0.837500, 0.528571, 0.062500, 0.775000, 0.937500, 0.528571, 0.300000, 0.762500, 0.687500, 0.528571, 0.612500, 0.775000, 0.812500, 0.707143, 0.775000, 0.500000, 0.500000, 0.550000, 0.962500, 1.000000, 1.000000, 0.885714, 0.000000, 0.000000, 0.625000, 0.604762 },//014
	{ 0.000000, 0.000000, 0.000000, 0.516667, 0.000000, 0.000000, 0.333333, 0.583333, 0.000000, 0.000000, 0.616667, 0.533333, 0.000000, 0.083333, 0.483333, 0.533333, 0.000000, 0.533333, 0.200000, 0.533333, 0.083333, 0.616667, 0.000000, 0.533333, 0.366667, 0.333333, 0.000000, 0.533333, 0.783333, 0.500000, 0.500000, 0.766667, 0.000000, 0.000000, 0.000000, 0.533333, 0.000000, 0.000000, 0.000000, 0.533333 }//022

};
size_t n4 = 6;

double arr5[][40] = 
{
	{ 0.250000, 0.750000, 0.750000, 0.613636, 0.444444, 1.000000, 1.000000, 0.818182, 0.500000, 0.944444, 0.750000, 0.613636, 0.555556, 0.666667, 0.000000, 0.000000, 0.666667, 0.888889, 0.972222, 0.318182, 0.694444, 1.000000, 1.000000, 0.750000, 0.416667, 0.472222, 0.333333, 0.954545, 0.000000, 0.000000, 0.111111, 1.000000, 0.527778, 0.277778, 0.138889, 0.954545, 0.505050, 0.848485, 0.808081, 0.545455 },//003
	{ 0.333333, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.400000, 0.333333, 0.000000, 0.000000, 0.000000, 0.500000, 0.500000, 0.500000, 0.000000, 0.166667, 0.000000, 0.000000, 0.500000, 0.000000, 0.000000, 0.000000, 0.400000, 0.000000, 0.000000, 0.000000, 0.400000, 0.833333, 0.000000, 0.000000, 0.400000, 0.833333, 0.166667, 0.000000, 0.300000, 0.166667, 0.666667, 0.500000, 0.300000 },//005
	{ 0.500000, 1.000000, 1.000000, 0.857143, 0.541667, 0.250000, 0.250000, 0.178571, 0.500000, 0.000000, 0.000000, 0.000000, 0.750000, 0.750000, 0.625000, 0.035714, 0.250000, 0.291667, 0.750000, 0.607143, 0.000000, 0.000000, 0.041667, 0.928571, 0.000000, 0.000000, 0.000000, 0.857143, 0.000000, 0.000000, 0.000000, 0.821429, 0.000000, 0.000000, 0.250000, 0.607143, 0.309524, 0.380952, 0.500000, 0.061224 },//007
	{ 0.000000, 0.000000, 0.000000, 0.425000, 0.000000, 0.812500, 0.562500, 0.500000, 0.000000, 0.612500, 0.437500, 0.000000, 0.062500, 0.362500, 0.000000, 0.000000, 0.125000, 0.375000, 0.000000, 0.000000, 0.150000, 0.812500, 0.687500, 0.375000, 0.275000, 0.300000, 0.062500, 0.862500, 0.337500, 0.125000, 0.000000, 0.875000, 0.000000, 0.000000, 0.000000, 0.900000, 0.639286, 0.142857, 0.353571, 0.457143 },//008
	{ 0.000000, 0.437500, 0.500000, 0.392857, 0.062500, 0.300000, 0.000000, 0.000000, 0.150000, 0.175000, 0.000000, 0.000000, 0.375000, 0.687500, 0.837500, 0.285714, 0.175000, 0.000000, 0.675000, 0.742857, 0.000000, 0.000000, 0.675000, 0.964286, 0.550000, 0.000000, 0.675000, 1.000000, 0.375000, 0.000000, 0.675000, 1.000000, 0.175000, 0.000000, 0.675000, 1.000000, 0.328571, 0.178571, 0.721429, 0.718367 },//010
	{ 0.166667, 0.287037, 0.166667, 0.007576, 0.231481, 0.907407, 0.600000, 0.601515, 0.225926, 0.785185, 0.000000, 0.269697, 0.137037, 0.707407, 0.000000, 0.000000, 0.137037, 0.812963, 0.661111, 0.230303, 0.018519, 0.483333, 0.668519, 0.806061, 0.000000, 0.000000, 0.135185, 0.936364, 0.722222, 0.018519, 0.087037, 0.856061, 0.607407, 0.325926, 0.674074, 0.700000, 0.093056, 0.547222, 0.544444, 0.098864 },//015
	{ 0.000000, 0.705556, 1.000000, 0.795238, 0.000000, 0.577778, 0.522222, 0.000000, 0.027778, 0.494444, 0.522222, 0.000000, 0.150000, 0.427778, 0.466667, 0.000000, 0.272222, 0.605556, 0.438889, 0.000000, 0.027778, 0.455556, 0.472222, 0.390476, 0.000000, 0.000000, 0.000000, 0.447619, 0.000000, 0.000000, 0.000000, 0.357143, 0.000000, 0.000000, 0.000000, 0.242857, 0.358333, 0.263889, 0.273611, 0.404762 },//016
	{ 0.000000, 0.522222, 0.666667, 0.685714, 0.372222, 0.916667, 0.872222, 0.438095, 0.150000, 0.911111, 0.027778, 0.000000, 0.138889, 0.900000, 0.550000, 0.000000, 0.316667, 1.000000, 1.000000, 0.071429, 0.083333, 0.111111, 0.833333, 0.023810, 0.000000, 0.250000, 0.483333, 0.000000, 0.000000, 0.638889, 0.027778, 0.000000, 0.272222, 0.361111, 0.000000, 0.366667, 0.512963, 0.009259, 0.103704, 0.485714 },//018
	{ 0.000000, 0.300000, 1.000000, 1.000000, 0.000000, 0.800000, 0.625000, 0.500000, 0.300000, 0.875000, 0.375000, 0.000000, 0.800000, 1.000000, 1.000000, 0.500000, 0.000000, 0.000000, 0.375000, 0.870000, 0.000000, 0.000000, 0.000000, 0.600000, 0.000000, 0.000000, 0.000000, 0.420000, 0.000000, 0.000000, 0.000000, 0.340000, 0.000000, 0.000000, 0.000000, 0.440000, 0.950000, 0.783333, 0.666667, 0.400000 }//022

};
size_t n5 = 9;

double arr6[][40] = 
{
	{ 0.000000, 0.000000, 0.333333, 0.300000, 0.000000, 0.500000, 0.333333, 0.000000, 0.333333, 0.166667, 0.000000, 0.000000, 0.500000, 0.000000, 0.000000, 0.000000, 0.666667, 0.500000, 0.500000, 0.400000, 0.833333, 0.000000, 0.000000, 0.500000, 0.666667, 0.000000, 0.000000, 0.400000, 0.500000, 0.000000, 0.000000, 0.400000, 0.500000, 0.000000, 0.000000, 0.400000, 0.000000, 0.666667, 0.500000, 0.400000 },//005
	{ 0.000000, 0.420000, 0.650000, 0.258333, 0.070000, 0.950000, 0.300000, 0.366667, 0.400000, 1.000000, 0.300000, 0.000000, 0.620000, 1.000000, 0.300000, 0.000000, 0.740000, 1.000000, 0.550000, 0.225000, 0.900000, 1.000000, 0.450000, 0.350000, 0.900000, 1.000000, 0.300000, 0.241667, 0.900000, 1.000000, 0.300000, 0.225000, 0.740000, 1.000000, 0.300000, 0.225000, 0.305714, 0.914286, 0.411429, 0.295238 },//010
	{ 0.000000, 0.000000, 0.244444, 0.000000, 0.000000, 0.111111, 0.522222, 0.000000, 0.000000, 0.555556, 0.111111, 0.000000, 0.111111, 0.677778, 0.000000, 0.000000, 0.483333, 0.383333, 0.194444, 0.138889, 0.805556, 0.372222, 0.927778, 0.761111, 0.938889, 0.288889, 0.788889, 0.983333, 1.000000, 0.316667, 0.316667, 1.000000, 0.983333, 0.538889, 0.150000, 0.972222, 0.522222, 0.935185, 0.509259, 0.324074 },//011
	{ 0.033333, 0.866667, 0.566667, 0.000000, 0.380000, 1.000000, 0.313333, 0.000000, 0.780000, 1.000000, 0.633333, 0.388889, 0.980000, 1.000000, 1.000000, 0.955556, 1.000000, 0.880000, 0.746667, 1.000000, 1.000000, 0.846667, 0.446667, 1.000000, 0.846667, 1.000000, 0.693333, 0.900000, 0.326667, 1.000000, 1.000000, 0.538889, 0.000000, 0.233333, 0.313333, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },//013
	{ 0.000000, 0.000000, 0.000000, 0.680000, 0.000000, 0.000000, 0.350000, 0.500000, 0.000000, 0.250000, 1.000000, 0.140000, 0.000000, 0.350000, 0.850000, 0.000000, 0.000000, 0.850000, 0.750000, 0.000000, 0.250000, 1.000000, 0.250000, 0.000000, 0.250000, 1.000000, 0.750000, 0.700000, 0.350000, 1.000000, 0.750000, 0.640000, 0.750000, 0.750000, 0.000000, 0.480000, 0.350000, 0.728571, 0.285714, 0.462857 }//019
};
size_t n6 = 5;

double arr7[][40] = 
{
	{ 1.000000, 1.000000, 1.000000, 1.000000, 0.500000, 0.500000, 0.500000, 0.666667, 0.000000, 0.000000, 0.000000, 0.416667, 0.000000, 0.000000, 0.166667, 0.416667, 0.000000, 0.000000, 0.500000, 0.250000, 0.000000, 0.000000, 0.833333, 0.083333, 0.000000, 0.166667, 0.833333, 0.000000, 0.000000, 0.500000, 0.500000, 0.000000, 0.000000, 0.666667, 0.333333, 0.000000, 0.000000, 0.933333, 0.066667, 0.000000 },//001
	{ 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.750000, 0.000000, 0.000000, 0.000000, 0.500000, 0.000000, 0.000000, 0.250000, 0.375000, 0.000000, 0.000000, 0.700000, 0.125000, 0.000000, 0.050000, 0.800000, 0.000000, 0.000000, 0.300000, 0.500000, 0.000000, 0.000000, 0.550000, 0.300000, 0.000000, 0.000000, 0.750000, 0.050000, 0.000000, 0.000000, 0.733333, 0.000000, 0.000000 },//004
	{ 0.500000, 0.500000, 0.500000, 0.500000, 0.666667, 0.500000, 0.500000, 0.700000, 0.333333, 0.000000, 0.000000, 0.200000, 0.000000, 0.000000, 0.000000, 0.300000, 0.000000, 0.000000, 0.500000, 0.100000, 0.000000, 0.000000, 0.666667, 0.000000, 0.000000, 0.000000, 0.500000, 0.000000, 0.000000, 0.333333, 0.333333, 0.000000, 0.000000, 0.500000, 0.166667, 0.000000, 0.000000, 0.666667, 0.000000, 0.000000 },//005
	{ 1.000000, 1.000000, 1.000000, 0.833333, 0.444444, 0.333333, 0.333333, 0.544444, 0.166667, 0.000000, 0.000000, 0.277778, 0.000000, 0.000000, 0.222222, 0.111111, 0.000000, 0.000000, 0.477778, 0.000000, 0.000000, 0.388889, 0.411111, 0.000000, 0.055556, 0.888889, 0.188889, 0.000000, 0.388889, 1.000000, 0.166667, 0.000000, 0.655556, 1.000000, 0.166667, 0.000000, 0.660000, 0.966667, 0.133333, 0.000000 },//009
	{ 1.000000, 1.000000, 1.000000, 0.920000, 1.000000, 1.000000, 1.000000, 0.720000, 0.500000, 0.500000, 0.837500, 0.540000, 0.000000, 0.125000, 0.800000, 0.420000, 0.000000, 0.400000, 0.800000, 0.220000, 0.000000, 0.650000, 0.837500, 0.100000, 0.000000, 0.837500, 0.775000, 0.000000, 0.150000, 0.837500, 0.650000, 0.000000, 0.500000, 0.837500, 0.400000, 0.000000, 0.250000, 0.791667, 0.225000, 0.000000 },//014
	//{ 0.722222, 0.666667, 0.666667, 0.666667, 0.788889, 0.666667, 0.666667, 0.677778, 0.400000, 0.000000, 0.027778, 0.383333, 0.000000, 0.000000, 0.372222, 0.150000, 0.000000, 0.000000, 0.566667, 0.000000, 0.000000, 0.066667, 0.611111, 0.000000, 0.000000, 0.316667, 0.427778, 0.000000, 0.000000, 0.538889, 0.261111, 0.000000, 0.000000, 0.705556, 0.161111, 0.000000, 0.000000, 0.864583, 0.052083, 0.000000 },//020
	//{ 0.533333, 1.000000, 1.000000, 0.962500, 0.750000, 0.500000, 0.500000, 0.712500, 0.200000, 0.000000, 0.000000, 0.525000, 0.000000, 0.000000, 0.083333, 0.487500, 0.000000, 0.000000, 0.200000, 0.375000, 0.000000, 0.000000, 0.500000, 0.150000, 0.000000, 0.000000, 0.650000, 0.062500, 0.000000, 0.000000, 0.700000, 0.000000, 0.000000, 0.166667, 0.533333, 0.000000, 0.000000, 0.411111, 0.300000, 0.000000 },//021
	{ 0.000000, 0.850000, 1.000000, 1.000000, 0.250000, 1.000000, 1.000000, 1.000000, 0.350000, 0.350000, 0.000000, 0.280000, 0.600000, 0.000000, 0.000000, 0.400000, 0.000000, 0.000000, 0.000000, 0.400000, 0.000000, 0.000000, 0.000000, 0.280000, 0.000000, 0.000000, 0.000000, 0.400000, 0.000000, 0.000000, 0.000000, 0.400000, 0.000000, 0.000000, 0.000000, 0.280000, 0.000000, 0.000000, 0.293750, 0.252500 }//023

};
size_t n7 = 6;

double arr8[][40] = 
{
	{ 0.000000, 0.000000, 0.635714, 0.000000, 0.000000, 0.275000, 0.528571, 0.000000, 0.203571, 0.757143, 0.632143, 0.203571, 0.596429, 0.357143, 0.260714, 0.596429, 0.692857, 0.342857, 0.103571, 0.525000, 0.267857, 0.935714, 0.767857, 0.210714, 0.346429, 0.667857, 0.892857, 0.442857, 0.753572, 0.185714, 0.160714, 0.867857, 0.771429, 0.071429, 0.000000, 0.721429, 0.450000, 0.432857, 0.332857, 0.524286 },//002
	{ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.562500, 0.562500, 0.340000, 0.250000, 0.300000, 0.000000, 0.520000, 0.525000, 0.125000, 0.000000, 0.440000, 0.625000, 0.275000, 0.000000, 0.440000, 0.400000, 0.937500, 0.275000, 0.390000, 0.000000, 0.775000, 1.000000, 0.300000, 0.062500, 0.587500, 0.500000, 0.840000, 0.525000, 0.150000, 0.000000, 0.720000, 0.446429, 0.221429, 0.160714, 0.460000 },//008
	{ 0.000000, 0.000000, 0.083333, 0.328571, 0.000000, 0.466667, 0.605556, 0.890476, 0.261111, 0.583333, 0.427778, 0.842857, 0.650000, 0.650000, 0.250000, 0.642857, 0.694444, 0.972222, 0.650000, 0.214286, 0.272222, 1.000000, 1.000000, 0.357143, 0.000000, 0.700000, 1.000000, 0.890476, 0.250000, 0.594444, 0.438889, 0.985714, 0.650000, 0.450000, 0.150000, 0.842857, 0.679630, 0.842593, 0.362963, 0.177778 },//011
	{ 0.000000, 0.666667, 0.533333, 0.000000, 0.333333, 0.916667, 0.500000, 0.462500, 0.500000, 0.500000, 0.000000, 0.425000, 0.366667, 0.366667, 0.000000, 0.500000, 0.533333, 0.783333, 0.083333, 0.525000, 1.000000, 0.733333, 1.000000, 0.525000, 1.000000, 0.166667, 0.083333, 0.712500, 1.000000, 0.166667, 0.200000, 0.575000, 1.000000, 0.166667, 0.483333, 0.600000, 0.272222, 0.400000, 0.194444, 0.166667 },//012
	{ 0.020833, 0.716667, 0.904167, 0.125000, 0.425000, 0.512500, 0.125000, 0.487500, 0.400000, 0.366667, 0.000000, 0.391667, 0.400000, 0.412500, 0.020833, 0.383333, 0.425000, 0.187500, 0.350000, 0.412500, 0.212500, 0.245833, 0.662500, 0.187500, 0.125000, 0.758333, 0.133333, 0.433333, 0.487500, 0.266667, 0.320833, 0.508333, 0.425000, 0.000000, 0.450000, 0.329167, 0.371875, 0.226042, 0.495833, 0.355208 },//016
	{ 0.268750, 0.250000, 0.250000, 0.320833, 0.114583, 0.000000, 0.000000, 0.020833, 0.100000, 0.087500, 0.212500, 0.000000, 0.100000, 0.318750, 0.389583, 0.000000, 0.100000, 0.333333, 0.316667, 0.000000, 0.100000, 0.283333, 0.383333, 0.000000, 0.100000, 0.314583, 0.397917, 0.000000, 0.100000, 0.283333, 0.270833, 0.000000, 0.100000, 0.320833, 0.333333, 0.000000, 0.168750, 0.149306, 0.211806, 0.108333 },//017
	{ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.661111, 0.900000, 1.000000, 0.194444, 1.000000, 0.422222, 0.690476, 0.272222, 0.761111, 0.083333, 0.519048, 0.055556, 0.938889, 0.527778, 0.095238, 0.000000, 0.816667, 0.472222, 0.000000, 0.000000, 0.727778, 0.550000, 0.000000, 0.250000, 0.622222, 0.816667, 0.000000, 0.538889, 0.055556, 0.716667, 0.000000, 0.464815, 0.374074, 0.124074, 0.326984 },//018
	{ 0.250000, 0.700000, 0.700000, 0.187500, 0.816667, 0.083333, 0.083333, 0.612500, 0.900000, 0.083333, 0.000000, 0.600000, 0.866667, 0.533333, 0.333333, 0.500000, 0.333333, 1.000000, 0.666667, 0.062500, 0.083333, 0.783333, 0.950000, 0.187500, 0.666667, 0.166667, 0.666667, 0.650000, 0.816667, 0.000000, 0.083333, 0.812500, 0.866667, 0.000000, 0.000000, 0.750000, 0.500000, 0.555556, 0.377778, 0.325000 },//022
	{ 0.250000, 1.000000, 1.000000, 0.166667, 0.850000, 0.250000, 0.250000, 0.566667, 0.850000, 0.000000, 0.000000, 0.733333, 0.750000, 0.000000, 0.000000, 0.733333, 0.850000, 0.000000, 0.000000, 0.733333, 1.000000, 0.350000, 0.250000, 0.566667, 0.850000, 0.850000, 0.750000, 0.233333, 0.350000, 1.000000, 0.750000, 0.000000, 0.000000, 0.850000, 1.000000, 0.166667, 0.656250, 0.243750, 0.406250, 0.637500 }//023

};
size_t n8 = 9;

double arr9[][40] = 
{
	{ 0.125000, 0.875000, 0.875000, 0.000000, 0.625000, 0.625000, 0.625000, 0.500000, 0.750000, 0.000000, 0.000000, 0.625000, 0.750000, 0.000000, 0.000000, 0.750000, 0.750000, 0.000000, 0.000000, 0.750000, 0.875000, 0.125000, 0.125000, 1.000000, 0.375000, 1.000000, 1.000000, 0.875000, 0.000000, 0.500000, 0.250000, 0.750000, 0.375000, 0.000000, 0.000000, 0.750000, 0.600000, 0.650000, 0.650000, 0.300000 },//001
	{ 0.125000, 0.625000, 0.625000, 0.000000, 0.625000, 0.000000, 0.125000, 0.375000, 0.625000, 0.000000, 0.000000, 0.500000, 0.750000, 0.000000, 0.000000, 0.625000, 0.750000, 0.000000, 0.000000, 0.750000, 0.750000, 0.000000, 0.000000, 1.000000, 0.250000, 0.750000, 0.500000, 0.750000, 0.000000, 0.000000, 0.000000, 0.750000, 0.250000, 0.000000, 0.000000, 0.500000, 0.583333, 0.291667, 0.208333, 0.291667 },//006
	{ 0.000000, 0.000000, 0.000000, 0.000000, 0.146667, 0.846667, 1.000000, 0.404762, 0.726667, 1.000000, 1.000000, 0.900000, 0.926667, 0.946667, 0.480000, 1.000000, 0.926667, 0.960000, 0.333333, 1.000000, 0.780000, 1.000000, 0.866667, 0.961905, 0.266667, 0.980000, 1.000000, 0.842857, 0.000000, 0.033333, 0.946667, 0.604762, 0.000000, 0.393333, 1.000000, 0.280952, 0.000000, 0.580000, 0.746667, 0.023810 },//013
	{ 0.000000, 0.436667, 0.493333, 0.306061, 0.395000, 0.950000, 0.923333, 0.733333, 0.636667, 0.346667, 0.148333, 0.856061, 0.720000, 0.150000, 0.000000, 0.781818, 0.593333, 0.280000, 0.086667, 0.866667, 0.391667, 0.745000, 0.740000, 0.942424, 0.016667, 0.208333, 0.191667, 0.954545, 0.000000, 0.000000, 0.061667, 0.871212, 0.000000, 0.000000, 0.103333, 0.884849, 0.000000, 0.000000, 0.155000, 0.678409 },//015
	{ 0.304545, 0.250000, 0.250000, 0.315385, 0.027273, 0.000000, 0.000000, 0.019231, 0.000000, 0.113636, 0.231818, 0.000000, 0.000000, 0.365909, 0.452273, 0.000000, 0.000000, 0.345455, 0.336364, 0.000000, 0.000000, 0.327273, 0.395455, 0.000000, 0.000000, 0.368182, 0.665909, 0.000000, 0.000000, 0.038636, 0.370455, 0.000000, 0.000000, 0.327273, 0.350000, 0.000000, 0.118939, 0.162879, 0.202273, 0.106410 }//017

};
size_t n9 = 5;

/***************************************/
int get_answer(vector<float> v)
{
int max = 0;
	for(size_t i = 0; i<v.size(); i++)
	{
		if(v[i] >= v[max])
			max = i;
	}

	return max;

}


float get_distance(vector<float> vec_etalon, vector<float> vec_in)
{
	float r = 0, dif = 0;
	for(size_t i=0; i<vec_in.size(); i++)
	{
		dif = (vec_in[i] - vec_etalon[i])*(vec_in[i] - vec_etalon[i]);
		if(dif > 0.15)
			r++;
	}
	return r;
}



void number_recognition()
{
	
	int answer = 0;
	
	picture.clear();
	read_picture();
	int pictWidth = picture[0].size();
	int pictHeight = picture.size();

	int digit_wd = 0, digit_wdLast = 0, wd = 0, lastWd = 0;

	borders.clear();
	int dg_num = check_digit_amount();
	if(dg_num == 1 && pictWidth>70)
	{ 
	dg_num = 3;

	digit_wd = pictWidth/dg_num;
	digit_wdLast = digit_wd + pictWidth%dg_num;

	borders.clear();
	borders.push_back(0);
	borders.push_back(digit_wd);
	borders.push_back(digit_wd);
	borders.push_back(2*digit_wd);
	borders.push_back(2*digit_wd);
	borders.push_back(2*digit_wd+digit_wdLast);
	}

	int ht = pictHeight/neuro_wid;
	int lastHt = ht + pictHeight%neuro_wid;

	int step = 0, start = 0, end = 0;
		while(step < dg_num)
		{

		start = borders[2*step];
		wd = (borders[2*step+1] - start)/4;
		lastWd = wd + (borders[2*step+1] - start)%4;
	
		v_in.clear();
		initialize_vector_in(start, wd, lastWd, ht, lastHt); 
		
		v_distance.clear();
		v_distance.resize(10, 0.);
		/*найти расстояние до всех цифр*/
		for(size_t i=0; i<vec_digit.size(); i++){
			for(size_t j=0; j<vec_digit[i].size(); j++)
			{
				float r = get_distance(vec_digit[i][j], v_in);
				v_distance[i] = v_distance[i] + 10000/(1+r*r);
			}
		}
		/*выбрать максимум*/
			
			answer = get_answer(v_distance);
			printf("%d", answer);
			
		step++;
		}
	
	

}
/***************************************/

void initialize_vec_digit()
{
		vec_digit.resize(10);

		size_t i=0, j=0;
		for(i=0; i<n0; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr0[i][j]);

			vec_digit[0].push_back(v);
		}

		for(i=0; i<n1; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr1[i][j]);

			vec_digit[1].push_back(v);
		}

		for(i=0; i<n2; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr2[i][j]);

			vec_digit[2].push_back(v);
		}

		for(i=0; i<n3; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr3[i][j]);

			vec_digit[3].push_back(v);
		}

		for(i=0; i<n4; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr4[i][j]);

			vec_digit[4].push_back(v);
		}

		for(i=0; i<n5; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr5[i][j]);

			vec_digit[5].push_back(v);
		}

		for(i=0; i<n6; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr6[i][j]);

			vec_digit[6].push_back(v);
		}

		for(i=0; i<n7; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr7[i][j]);

			vec_digit[7].push_back(v);
		}
		
		for(i=0; i<n8; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr8[i][j]);

			vec_digit[8].push_back(v);
		}

		for(i=0; i<n9; i++)
		{
			vector<float> v;
			for(j=0; j<40; j++)	
				v.push_back((float)arr9[i][j]);

			vec_digit[9].push_back(v);
		}
}


/***************************************/

int main()
{
	
	//get_vectors();

	initialize_vec_digit();

	number_recognition();

	return 0;
}
