#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{3,16,2,28,0,34,2,64,0,1},
{4,24,18,42,0,41,4,100,3,5},
{25,25,27,63,5,70,18,86,27,11},
{42,37,52,72,12,90,34,91,39,53},
{57,58,70,90,26,89,51,94,66,81},
{78,67,82,89,44,82,62,94,77,81},
{76,68,84,100,66,80,58,94,79,68},
{68,71,73,100,58,98,56,85,85,79},
{75,94,87,97,63,99,76,100,92,82},
{85,92,91,109,71,94,82,98,97,98},
{91,85,88,108,71,98,96,98,92,107},
{76,98,69,103,76,98,90,100,87,74},
{39,92,36,69,71,97,67,100,65,48},
{25,74,30,55,61,93,53,101,34,23},
{4,72,11,47,27,88,39,101,19,18},
{3,72,0,21,21,60,29,99,14,1},
{25,40,39,41,0,34,18,60,22,40},
{34,54,62,63,0,42,36,68,40,53},
{63,56,80,80,12,83,51,75,76,80},
{75,59,78,72,20,83,62,74,77,75},
{72,74,75,77,43,78,58,73,86,70},
{78,78,78,76,69,74,62,73,78,70},
{71,88,66,76,59,88,57,73,70,70},
{67,91,68,82,65,88,65,73,71,72},
{62,103,77,81,73,86,66,88,68,76},
{64,107,86,82,73,89,66,92,71,75},
{70,98,92,87,74,93,73,104,87,81},
{74,101,93,106,86,94,87,105,86,99},
{92,101,98,109,82,93,84,99,88,94},
{68,77,95,112,67,94,65,102,92,97},
{41,71,43,52,31,78,52,100,62,78},
{25,64,19,20,18,23,20,82,11,68},
{35,36,55,56,0,36,28,42,33,70},
{77,49,69,69,9,68,56,47,69,81},
{77,51,66,63,26,82,86,50,83,60},
{82,68,67,55,39,85,80,43,91,72},
{80,73,71,62,68,75,69,36,85,79},
{82,80,71,52,61,71,63,39,74,74},
{69,78,59,48,70,76,59,47,64,42},
{39,85,68,49,67,64,58,54,38,28},
{34,106,77,67,71,61,54,73,37,49},
{59,91,77,69,72,46,60,87,40,73},
{65,84,74,80,81,50,74,92,57,76},
{65,98,81,76,86,41,55,101,61,88},
{70,101,88,94,82,41,53,105,71,87},
{87,75,92,74,64,36,53,100,93,106},
{68,66,91,68,23,35,52,91,70,106},
{41,52,43,31,18,15,29,15,41,59},
{56,55,65,50,0,38,42,39,39,80},
{78,60,62,60,26,76,86,38,77,66},
{86,64,68,64,47,84,87,38,89,83},
{82,69,64,53,68,81,71,38,88,81},
{84,64,66,52,60,74,67,35,86,61},
{78,63,66,49,72,74,62,34,69,51},
{58,50,54,61,70,71,67,37,43,37},
{32,58,46,66,69,55,44,69,27,25},
{24,79,59,68,76,56,46,72,22,24},
{45,85,62,76,79,43,60,74,32,70},
{52,86,75,80,88,46,54,85,60,73},
{62,95,84,75,91,43,53,97,73,84},
{70,93,87,72,87,40,57,99,80,83},
{71,75,93,66,71,38,39,82,79,102},
{92,54,92,62,23,20,37,51,74,92},
{67,49,75,32,18,4,27,14,43,70},
{77,32,40,9,17,46,79,8,42,87},
{87,59,52,19,35,71,87,30,67,84},
{91,60,47,47,53,66,89,30,83,86},
{87,41,45,47,67,67,75,6,81,65},
{75,41,42,58,74,75,71,9,89,57},
{70,42,42,72,63,86,75,8,81,50},
{51,58,37,57,57,62,68,38,59,49},
{27,64,37,66,61,72,58,47,40,37},
{23,77,47,77,72,77,51,60,52,41},
{44,88,66,77,92,83,48,68,65,69},
{50,84,71,81,94,69,56,95,64,74},
{61,96,85,65,98,59,52,85,72,87},
{68,93,89,74,91,47,52,78,78,84},
{70,57,94,69,56,32,16,72,71,97},
{87,50,89,44,22,30,19,10,49,97},
{91,45,62,21,15,10,20,7,33,86},
{87,33,29,5,32,51,86,0,16,98},
{93,39,33,27,52,67,91,0,48,83},
{90,40,31,28,72,62,90,0,75,83},
{85,37,19,48,81,67,79,0,87,84},
{74,35,16,65,64,69,83,20,86,65},
{64,42,16,73,53,86,85,24,86,63},
{51,56,38,67,47,67,74,51,84,50},
{16,65,50,71,62,63,63,60,75,40},
{12,76,72,66,52,71,68,69,67,64},
{44,90,80,77,91,92,71,82,72,70},
{49,84,80,88,102,104,79,79,77,76},
{62,96,90,86,98,105,62,79,72,73},
{67,75,88,78,80,81,62,77,77,83},
{74,57,89,49,55,73,60,41,64,97},
{87,46,59,22,21,39,44,7,25,87},
{88,45,42,1,17,30,5,0,0,78},
{88,26,16,17,52,36,88,0,39,32},
{93,32,13,17,81,54,92,0,64,75},
{81,33,13,18,95,41,94,0,68,65},
{75,34,21,22,89,42,94,23,71,66},
{70,37,21,34,83,39,88,24,90,65},
{64,53,24,57,57,53,78,51,91,59},
{40,56,54,78,36,39,58,67,72,47},
{16,69,78,79,66,44,44,69,79,57},
{12,80,78,73,67,60,38,78,72,78},
{43,87,83,75,97,84,54,71,74,78},
{49,80,89,90,106,98,69,79,82,64},
{62,84,91,94,110,88,81,79,83,92},
{73,75,73,92,93,96,92,56,77,76},
{74,57,55,74,74,89,75,8,61,82},
{87,45,38,42,55,81,65,0,49,78},
{86,45,17,8,41,50,35,0,22,76},
{93,26,0,9,50,26,92,0,56,41},
{93,32,9,9,86,35,94,0,72,49},
{81,33,27,13,81,28,94,15,74,59},
{71,36,29,17,67,25,87,27,74,43},
{69,48,37,28,58,24,78,34,83,42},
{64,53,43,26,42,19,58,67,75,42},
{52,55,88,42,38,19,38,54,59,62},
{27,75,87,43,68,45,25,52,37,56},
{23,83,88,50,63,52,20,71,41,49},
{43,87,77,57,96,68,36,79,47,53},
{50,69,69,71,103,75,59,79,68,74},
{67,72,55,86,97,87,64,69,62,80},
{72,75,45,88,91,88,86,30,72,65},
{74,57,39,94,73,89,71,7,78,78},
{82,45,15,91,53,87,72,0,76,78},
{85,43,0,71,41,74,67,0,59,74},
{92,26,15,27,59,37,94,0,73,21},
{93,33,17,36,62,26,109,15,82,30},
{82,35,24,36,61,27,104,27,85,28},
{72,48,37,28,54,25,81,34,81,47},
{68,48,44,35,54,24,64,67,60,51},
{64,53,79,32,53,25,54,66,46,50},
{52,60,79,43,58,37,52,50,43,46},
{27,75,60,56,89,44,39,72,28,22},
{23,82,64,65,81,33,35,79,36,40},
{43,76,60,65,108,55,47,80,44,72},
{57,63,56,57,106,77,70,77,47,68},
{67,72,41,68,88,84,73,59,54,72},
{72,75,36,74,84,83,87,2,68,66},
{69,52,27,96,65,84,80,0,73,78},
{85,45,27,98,46,79,83,0,78,75},
{75,40,12,95,41,79,80,0,78,67},
{71,26,17,66,43,69,89,15,79,37},
{93,34,28,67,34,66,109,20,97,43},
{78,47,43,68,32,54,95,34,90,42},
{73,48,45,55,39,53,83,59,73,41},
{69,48,76,64,36,66,74,64,52,41},
{65,53,76,62,33,61,56,50,48,56},
{53,65,67,61,42,42,50,73,28,51},
{29,76,64,46,69,38,38,77,18,39},
{31,75,68,55,85,56,34,77,32,36},
{52,76,57,55,109,69,44,80,43,63},
{65,57,57,59,106,76,61,69,57,57},
{68,72,60,72,82,81,63,45,66,67},
{68,71,55,78,78,76,85,0,62,67},
{71,46,52,96,71,76,71,0,76,76},
{76,43,44,94,54,79,81,0,78,72},
{45,40,38,90,51,75,68,0,72,61},
{47,27,36,71,15,72,54,24,92,43},
{92,46,50,70,15,78,110,34,98,51},
{83,47,58,72,15,79,100,53,76,51},
{74,48,82,64,15,69,73,67,68,42},
{72,48,87,68,15,67,66,50,49,64},
{66,59,88,54,24,55,57,74,40,64},
{63,66,69,53,26,57,55,80,52,59},
{38,63,70,50,54,50,43,80,44,33},
{44,75,76,61,76,61,39,80,31,34},
{62,70,73,63,94,73,52,79,54,53},
{67,57,71,62,83,68,69,49,66,55},
{63,72,65,77,78,71,82,1,72,72},
{61,70,70,86,70,72,86,0,64,66},
{77,46,49,91,57,79,66,0,71,73},
{52,41,54,87,42,74,66,0,72,46},
{34,40,52,38,37,42,42,0,48,42},
{30,53,58,69,0,71,31,31,53,17},
{47,63,76,91,0,92,60,50,79,57},
{71,64,97,88,0,96,83,58,99,77},
{81,65,89,84,0,92,79,59,87,66},
{80,71,85,67,2,79,85,74,74,72},
{84,71,85,70,11,67,75,78,68,69},
{76,60,78,66,13,66,70,80,61,57},
{67,66,81,67,58,64,66,80,63,66},
{63,67,90,69,77,65,64,79,58,70},
{50,72,89,64,95,61,65,71,59,72},
{56,72,90,71,74,69,67,46,67,58},
{73,85,80,89,77,79,83,0,65,70},
{77,86,80,89,72,75,89,0,71,56},
{49,61,82,50,55,49,56,0,70,45},
{26,58,79,32,30,35,33,0,45,42},
{20,57,58,13,25,20,15,0,24,37},
{0,68,59,27,0,21,0,30,6,8},
{4,70,76,60,0,41,14,53,23,16},
{5,77,73,55,0,50,24,61,33,13},
{32,77,73,80,1,47,48,53,69,41},
{58,77,77,88,3,78,70,45,69,93},
{91,65,77,90,21,81,89,76,87,90},
{80,71,70,85,32,75,66,78,81,66},
{71,71,71,88,61,80,66,80,82,73},
{78,74,83,83,78,79,86,70,66,74},
{70,72,77,58,85,64,74,55,72,69},
{76,74,77,41,76,52,86,16,65,37},
{34,73,73,21,80,31,59,0,40,43},
{5,89,83,6,78,1,31,0,27,6},
{4,84,75,0,63,0,24,0,5,4},
{4,82,63,0,44,0,24,0,0,3},
{0,77,58,0,40,0,20,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
