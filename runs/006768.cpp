// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={29,20,32,-1,4,3,10,1,-1,-10,2,-11,-2,-8,-22,-7,15,16,-12,2,12,-3,-8,-15,-11,-4,2,-18,-11,-9,-22,-11,9,-2,9,-1,4,15,-8,-16,-13,2,18,-6,12,2,-9,-5,11,9,0,-15,-4,-2,3,-36,3,9,5,-15,0,-21,-3,-19,9,-8,1,11,28,25,7,14,-5,15,18,1,5,12,16,22,4,-8,10,9,18,8,-4,-7,-5,-3,4,2,-4,-6,10,9,19,17,21,6,14,2,-6,-14,-15,-4,-23,-35,-20,-3,8,33,39,20,-2,-20,3,-13,2,-14,-24,-23,-13,-14,-15,-28,-14,7,28,18,-7,-19,-8,-1,5,-18,-10,0,-8,-16,-5,-14,27,0,25,17,4,-17,-14,-16,-4,-12,-11,-14,-14,-11,1,2,6,-19,20,40,13,9,5,-6,7,2,-6,-12,-2,-6,9,-8,4,-4,17,10,7,14,3,-2,3,-3,-3,5,-3,-10,2,-9,-20,-7,20,5,8,9,11,13,7,-3,-3,3,6,4,-1,4,16,-28,-7,0,8,16,8,20,25,16,-9,15,5,-7,0,-1,-5,-23,5,8,3,-3,9,15,5,-3,-12,-1,7,-13,-1,8,-6,-14,12,-10,-10,-6,-21,-34,-3,-11,-14,-12,-9,-11,-4,9,-21,-7,7,20,-12,3,-58,-7,-14,-1,-25,-18,-12,6,36,38,20,29,-19,26,28,10,-35,3,-5,-7,-30,-19,-11,-23,-21,-18,-8,24,20,34,17,-8,9,20,8,-2,-26,5,-14,4,-1,-20,-25,27,23,-26,8,-14,1,21,34,-16,-5,24,-3,-12,1,-42,-40,14,-13,-16,15,-8,7,32,18,31,15,43,2,21,12,-10,-10,6,-12,13,0,-20,4,22,14,7,7,2,-33,13,-16,-19,5,24,16,39,-11,-8,-4,-15,17,7,-14,17,-4,-8,-32,-5,1,25,24,13,14,-16,-24,-21,7,15,2,-33,-31,-43,-14,-34,-18,9,10,-20,-25,-30,-17,18,-9,10,-6,15,4,3,-9,-29,-9,27,-2,0,-47,-23,2,-23,1,19,-9,19,-4,-32,-2,3,27,5,-12,16,0,-27,-8,9,10,-7,-5,-8,-3,19,16,36,12,-17,-2,-45,1,-4,-7,1,-3,8,-3,2,14,16,13,22,-27,-25,-1,-47,9,-15,13,11,-5,7,6,-9,2,37,44,30,7,-39,11,10,-15,-24,-6,-3,5,24,-2,1,-1,18,2,-11,-5,-14,11,-4,-2,-28,-14,-3,13,14,-16,12,2,15,-7,19,35,28,24,1,22,32,-5,-37,-14,-27,0,-33,-17,-14,-10,18,41,75,15,0,11,-2,13,-2,13,-6,3,-17,-13,-13,-22,-7,-1,-14,1,-3,-10,5,-23,-20,5,3,-16,-4,-16,6,0,-10,-27,-2,19,-7,5,4,-3,-3,-17,-10,-21,-18,-4,-9,14,-2,-12,-2,10,-7,-9,6,3,7,-5,-9,-7,-13,-3,7,11,-1,13,-3,-2,-2,-6,-7,19,13,11,-1,10,-1,2,0,8,-2,-2,14,18,11,5,-2,11,-1,-6,-8,15,-7,0,0,0,3,16,7,8,33,10,-11,1,-1,-20,0,-1,-9,6,-4,11,-2,33,7,8,-3,-20,-6,0,-17,-20,-27,-2,-19,0,-5,4,5,12,-13,0,1,3,-2,0,-4,-13,-4,-2,-12,18,3,6,3,-10,-38,4,25,15,4,5,12,7,-3,-7,-8,0,-15,-2,-16,-15,-36,11,-1,-8,11,17,6,4,-11,-13,-5,5,-9,-19,-19,-27,-37,18,-12,-6,-13,0,4,12,-1,5,7,3,-10,-6,-20,-6,3,25,3,-6,-5,11,25,17,0,14,2,-13,-10,18,-8,8,11,23,1,-12,8,14,24,35,-6,0,5,5,4,2,-15,14,25,16,22,10,15,4,-3,6,6,13,17,-6,-8,-14,6,12,42,12,43,23,-15,-16,-18,0,-10,2,-1,-6,3,-2,19,45,23,110,37,83,30,-20,47,2,-12,-15,-14,14,-23,-58,-10,-27,-23,16,11,-38,-3,-10,-32,11,-4,-42,-8,-14,9,-6,5,-12,-46,13,20,23,-29,46,16,13,-5,-1,6,-28,-1,5,-3,-19,-36,21,-9,27,-20,10,-21,0,-24,-31,-14,3,-19,-6,-35,-10,19,-12,-41,38,-56,41,33,39,0,-20,35,5,-5,21,4,64,32,1,-37,-22,-50,-29,-47,62,30,18,24,21,35,14,22,27,29,44,-34,-61,-88,25,-37,-6,14,-20,-22,-14,13,-16,21,-12,-18,54,11,-15,-29,22,-17,34,34,-18,-47,5,-1,-3,8,-35,-59,57,-12,24,-25,-30,-9,14,16,5,22,25,4,1,3,7,-4,11,-52,5,-51,-28,-46,8,1,-29,7,12,3,5,63,27,17,43,11,27,-29,-27,-19,-8,-33,29,-12,24,-18,30,22,92,-10,35,-14,-27,6,21,-26,6,-46,-10,-28,-15,13,12,-13,-7,65,61,20,-19,-9,41,20,-19,-57,5,8,33,5,-5,-20,34,10,82,25,-3,2,-5,60,26,-30,-11,-14,-7,-52,19,-12,-24,0,38,-4,-33,-3,-47,11,25,-3,22,10,18,-20,-2,-26,8,-14,84,82,4,6,-40,-8,-14,-7,-47,5,-26,-29,-34,-14,-53,-27,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,87,-4,18,36,30,-9,10,-38,-3,-53,4,-37,-17,3,52,-19,10,-39,48,25,21,29,18,-6,-28,-56,-30,-32,-27,-11,42,34,-3,7,31,-27,-12,3,16,-1,-46,17,35,43,-1,-43,14,-13,-18,-2,5,17,38,15,-2,-39,12,-9,15,-23,12,-59,-23,-43,-52,-8,-45,15,24,-18,3,30,-9,-25,-31,8,14,-15,-53,-2,46,-5,51,17,16,39,14,-32,5,-6,-9,-22,16,-17,27,3,11,20,-19,5,0,56,19,-27,8,24,20,-52,-45,-19,-11,51,-9,-16,11,56,-24,20,-11,-3,-1,14,18,35,16,3,11,0,62,5,15,39,-50,-8,1,-59,-1,-2,-22,19,-15,-27,-47,35,5,0,-35,-37,-10,49,-60,-23,19,12,-6,-64,8,-17,20,-16,-42,-29,-25,-43,-3,46,-35,-28,11,-38,-13,-35,41,28,-9,26,20,-58,15,27,13,-31,-35,-7,22,-5,17,-11,-1,13,-51,-12,27,1,25,32,-15,31,-13,-2,36,13,4,11,-21,38,34,20,79,16,-5,-22,-13,-4,4,25,50,6,0,-4,-13,-1,26,1,48,41,-1,2,-13,-61,-6,19,-1,36,-31,49,-13,4,19,-62,36,21,1,48,-16,-26,-32,-14,-8,10,-21,-18,11,-14,-13,-16,34,17,18,-7,-7,16,-6,-23,-10,-14,-17,-2,-2,-2,-3,17,9,-14,-25,-15,-5,-7,-10,-16,-25,11,-32,-17,-21,-30,18,-27,-1,0,-20,-4,20,-3,-4,-6,12,-8,-40,-23,-4,-48,-8,43,-4,-35,-11,2,3,-14,-24,-30,-6,14,-27,-40,-9,14,-27,39,38,-20,19,2,7,13,9,16,40,1,-12,-24,-20,8,-22,-6,30,2,-1,3,9,-18,14,-14,22,18,0,-37,-25,-20,-38,-34,43,35,8,-21,-10,-14,-3,-4,2,10,8,21,-5,-2,-15,-37,33,37,-12,-23,6,-16,15,23,-8,19,12,-5,4,10,24,-31,17,50,21,-13,-7,-21,-2,-9,-3,10,2,-3,6,15,9,-21,12,20,14,8,0,-15,5,-14,-21,-2,15,8,10,0,19,-17,12,45,55,2,13,29,18,-9,0,-14,6,-5,18,13,9,-14,0,3,14,3,-9,26,8,-8,-4,-10,-1,-17,16,-30,-8,-17,1,0,10,-18,-19,16,10,-12,-5,-20,-23,14,19,-24,30,23,-4,-17,27,44,29,24,29,-9,15,3,-10,-7,2,4,-17,-13,-15,-10,22,2,15,3,16,-14,22,-5,-5,-7,-40,-6,43,36,36,5,15,1,-12,-11,4,16,-28,-40,-23,-19,3,6,1,-7,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,52,26,12,29,17,5,19,-21,-22,-7,7,-11,-7,-31,3,-2,29,10,-6,0,-16,-20,-12,-7,-26,-13,-4,-45,-8,-18,-26,0,10,9,-1,-2,12,23,1,-17,-9,-38,-13,-42,8,-24,-3,5,33,-22,29,13,-6,-7,11,-36,10,-13,-11,-30,25,-6,2,-33,1,13,15,-8,11,24,-16,-1,-34,-8,-8,-2,-2,-11,35,8,6,15,9,15,16,-19,4,-8,-32,-21,2,-3,2,16,44,28,-22,8,3,26,20,59,37,6,32,0,-5,-36,4,23,-1,-6,-15,-51,-16,-11,-9,27,47,-10,-22,14,-10,-23,-10,-36,-1,-63,-20,-8,-13,-32,21,10,-13,18,33,19,4,3,5,7,16,-13,18,1,49,33,33,19,-7,20,23,16,21,1,1,3,1,-27,57,37,35,-14,13,3,-18,-16,18,23,5,21,9,0,13,-29,19,29,-3,-17,-26,11,-35,-12,1,-9,3,-12,-22,18,-17,13,52,31,28,-3,-12,6,10,-29,-16,-21,-1,-11,-23,15,-7,11,32,11,-5,-28,-13,-10,7,6,1,3,0,-2,-13,12,-17,16,0,19,-4,23,8,21,0,-5,15,-3,-20,-28,-8,9,14,16,54,-7,-23,-11,-14,-18,-6,3,-29,-15,-32,-36,-33,30,-5,-8,21,24,5,5,16,19,23,-8,-10,15,3,0,3,-46,-15,18,38,10,23,-19,-28,-3,-9,-3,-2,9,-1,-43,-23,-7,-16,-25,37,9,-5,0,11,6,4,1,-30,8,9,6,-7,-17,-4,2,36,6,13,-1,-10,-1,0,-50,-1,11,11,-6,13,-32,-19,9,19,-1,19,-14,22,-6,-19,4,10,5,12,-30,11,0,11,9,38,9,26,0,3,10,4,-11,15,-5,16,3,-14,-17,9,25,29,21,18,17,4,7,12,-6,-34,-12,13,-4,-13,9,22,32,13,10,26,-24,26,-1,-1,-7,-6,-1,-24,-13,15,-1,5,32,-10,-1,13,22,8,8,9,-7,1,3,-24,1,-7,-3,17,19,-28,-44,2,7,2,25,38,9,15,-5,-1,-23,-1,3,8,-1,3,-26,-35,-41,-12,17,24,2,15,17,4,-3,-1,12,12,17,-11,-27,2,-15,1,-38,21,0,-7,4,-11,-6,7,-10,-24,-11,26,-1,10,-7,-9,-10,-14,12,10,13,-15,1,17,1,16,-25,27,5,12,-9,3,-12,-1,2,-18,14,1,-5,9,-4,-23,-21,10,15,-2,-6,-11,3,7,-26,-30,-22,0,-14,10,-20,7,-2,20,-12,-1,-3,-3,-29,2,-17,-24,-21,-21,-31,-25,-18,-10,-6,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool pe=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt<m-6) pe=true;
		}
		
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])-4&&pe) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1&&pe) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3&&pe) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3&&pe) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

