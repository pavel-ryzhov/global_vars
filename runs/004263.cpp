#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <math.h>

#include <vector>
#include <algorithm>
using namespace std;

// ungodly 64k source restriction implies no comments no asserts and packed source, gentlemen!

float spread = 1.0f;

#define F float
#define I int
#define V void

#define Im Image
#define R return
#define Vi virtual
#define LP PlainLayer
#define Px pixel
#define NN NNetwork
#define Cr Cr 

I blobSize = 47836;
I numChunks = 12;

const char* chunks[12] = {
	"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",
};

typedef const char cchar;
typedef unsigned I uint;
typedef unsigned char byte;

template <typename P> P* ptrOffset(P* ptr, I offset)
{
	R (P*)((uint)ptr + offset);
}				 

template <typename P> V doPtrOffset(P*& ptr, I offset)
{
	ptr = ptrOffset(ptr, offset);
}

template <typename T> T& ptrReadNext(V*& ptr)
{	
	T& result = *(T*)ptr;
	doPtrOffset(ptr, sizeof(T));
	R result;
}

bool isWhitespace(char c)
{
	R c == '\0' || c == 10 || c == 13;
}

class Im
{
private:
	I width;
	I height;
public:
	Im();
	Im(I _width, I _height);
	~Im();
	
	I W();
	I H();
	F& Px(I x, I y);
	F* pixels;
	V clear();	
};

Im::Im(I _width, I _height):
	width(_width),
	height(_height),
	pixels(new F[width*height])
{
	clear();
}

F charToColor(char c)
{
	switch (c)
	{
		case '@':
			R 0.f;
		case '#':
			R 0.33f;
		case '%':
			R 0.66f;
		case '.':
			R 1.f;
	}
}

Im::Im():
	width(0),
	height(0),
	pixels(NULL)
{
	char buf[256];
	for (height = 0; !feof(stdin); ++height)
	{
		buf[0] = 0;
		gets(buf);
		if (!width)
		{
			width = strlen(&buf[0]);
			pixels = new F[width*100];
		}

		int x = 0;
		for (cchar* c = buf; *c != 10 && *c != 13 && *c != 0; ++c)
			pixel(x++, height) = charToColor(*c);
	}
	--height;
}

Im::~Im()
{
	delete[] pixels;
}

I Im::W()
{
	R width;
}

I Im::H()
{
	R height;
}

F& Im::Px(I x, I y)
{
	R pixels[x+width*y];
}

V Im::clear()
{
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
			Px(x, y) = 1.f;
}

I clamp(I x, I min, I max)
{
	if (x < min) R min;
	if (x > max) R max;
	R x;
}

Im* Cr(Im* img, I x1, I y1, I x2, I y2)
{
	clamp(x1, 0, img->W());
	clamp(x2, 0, img->W());
	clamp(y1, 0, img->H());
	clamp(y2, 0, img->H());

	Im* result = new Im(x2-x1, y2-y1);
	for (I x = x1; x < x2; ++x)
		for (I y = y1; y < y2; ++y)
			result->Px(x-x1, y-y1) = img->Px(x, y);
	R result;
}

Im* Cr(Im* img)
{
	I minX = img->W();
	I minY = img->H();
	I maxX = 0;
	I maxY = 0;

	for (I x = 0; x < img->W(); ++x)
		for (I y = 0; y < img->H(); ++y)
			if (img->Px(x, y) != 1.f)
			{
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
			}

	R Cr(img, minX, minY, maxX+1, maxY+1);
}

Im* resample(Im* input, I width, I height)
{	
	Im* result = new Im(width, height);
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
		{
			F normX = x * 1.f / width;
			F normY = y * 1.f / height;
			I nearestX = I(normX * input->W());
			I nearestY = I(normY * input->H());
			result->Px(x, y) = input->Px(nearestX, nearestY);		
		}
		
	R result;
}

V copyCentered(Im* inner, Im* outer, bool clear)
{
	I origX = (outer->W() - inner->W()) / 2;
	I origY = (outer->H() - inner->H()) / 2;

	if (clear) outer->clear();

	for (I x = 0; x < inner->W(); ++x)
		for (I y = 0; y < inner->H(); ++y)
			outer->Px(x+origX, y+origY) = inner->Px(x, y);
}

I markChunk(Im* input, I chunk, Im* chunkMap, I x, I y)
{
	if (!(
		x >= 0 && y >= 0 &&
		x < input->W() && y < input->H() &&
		input->Px(x, y) != 1.f &&
		chunkMap->Px(x, y) == 1
		))
		R 0;

	chunkMap->Px(x, y) = F(chunk);
	R
		markChunk(input, chunk, chunkMap, x-1, y-1) +
		markChunk(input, chunk, chunkMap, x-1, y) +
		markChunk(input, chunk, chunkMap, x-1, y+1) +
		
		markChunk(input, chunk, chunkMap, x, y-1) +
		markChunk(input, chunk, chunkMap, x, y+1) +
		
		markChunk(input, chunk, chunkMap, x+1, y-1) +
		markChunk(input, chunk, chunkMap, x+1, y) +
		markChunk(input, chunk, chunkMap, x+1, y+1) +
		1;		
}

Im* bestChunks(Im* input)
{
	I width = input->W();
	I height = input->H();

	Im* result = new Im(width, height);
	result->clear();
	Im* chunkMap = new Im(width, height);
	chunkMap->clear();
	
	vector<I> bestChunks;
	I bestPixels = 1;
	I currentChunk = 2;
	
	for (I x = 0; x < width; ++x)
		for (I y = 0; y < height; ++y)
			if (chunkMap->Px(x, y) == 1 && input->Px(x, y) != 1.f)
			{
				I numPixels = markChunk(input, currentChunk, chunkMap, x, y);
				
				F ratio = numPixels * 1.f / bestPixels;
				const F minRatio = 0.5f, maxRatio = 1.5f;
				
				if (ratio > minRatio && ratio < maxRatio)
					bestChunks.push_back(currentChunk);
				else if (ratio > maxRatio)
				{
					bestPixels = numPixels;
					bestChunks.clear();
					bestChunks.push_back(currentChunk);
				}
				
				++currentChunk;
			}
			
	for (I i = 0; i < bestChunks.size(); ++i)
	{
		for (I x = 0; x < width; ++x)
			for (I y = 0; y < height; ++y)
				if (chunkMap->Px(x, y) == bestChunks[i])
					result->Px(x, y) = input->Px(x, y);
	}
	
	delete chunkMap;
	R result;
}

Im* prepareSample(Im* input, I size, bool clean)
{
	Im* cleaned = (clean)? bestChunks(input): input;
	Im* trimmed = Cr(cleaned);
	
	I bigH = size;
	I bigW = (trimmed->W() * 1.f / trimmed->H()) * bigH;
	if (bigW > size)
		bigW = size;	
	Im* resampled = resample(trimmed, bigW, bigH);
	
	Im* sample = new Im(size, size);
	copyCentered(resampled, sample, true);
	
	if (clean) delete cleaned;
	delete trimmed;
	delete resampled;
	
	R sample;
}			   

I findSplitPoint(F* vals, I start, I end, F biasWeight)
{
	biasWeight *= 1.f;
	
	F minVal = 1e20f;
	I minIndex;

	I middle = (start + end) / 2;
	F range = (end - start) * 0.2f;

	for (I i = middle-range; i < middle+range; ++i)
	{
		F weighedValue = vals[i] + (1.f * abs(i - middle) / (end-start)) * biasWeight;
		if (weighedValue < minVal)
		{
			minVal = weighedValue;
			minIndex = i;
		}
	}

	R minIndex;
}

V splitDigits(Im* input, Im* digits3[3], Im* digits2[2])
{
	Im* trimmed = Cr(input);

	F* pixByCol = new F[trimmed->W()];
	for (I x = 0; x < trimmed->W(); ++x)
	{
		F count = 0;
		for (I y = 0; y < trimmed->H(); ++y)
			count+= 1.f - trimmed->Px(x, y);
		pixByCol[x] = count;
	}

	I splitX0 = findSplitPoint(pixByCol, 0, trimmed->W(), trimmed->H());
	I splitX1 = findSplitPoint(pixByCol, 0, trimmed->W()*0.66f, trimmed->H());
	I splitX2 = findSplitPoint(pixByCol, trimmed->W()*0.33f, trimmed->W(), trimmed->H());

	Im* spaceDigits3[3];
	spaceDigits3[0] = Cr(trimmed, 0, 0, splitX1, trimmed->H());
	spaceDigits3[1] = Cr(trimmed, splitX1, 0, splitX2, trimmed->H());
	spaceDigits3[2] = Cr(trimmed, splitX2, 0, trimmed->W(), trimmed->H());
	
	Im* spaceDigits2[2];
	spaceDigits2[0] = Cr(trimmed, 0, 0, splitX0, trimmed->H());
	spaceDigits2[1] = Cr(trimmed, splitX0, 0, trimmed->W(), trimmed->H());
	
	for (I i = 0; i < 3; ++i)
	{
		digits3[i] = Cr(spaceDigits3[i]);
		delete spaceDigits3[i];
	}
	
	for (I i = 0; i < 2; ++i)
	{
		digits2[i] = Cr(spaceDigits2[i]);
		delete spaceDigits2[i];
	}
	
	delete trimmed;
	delete[] pixByCol;
}

struct Block
{
	union
	{
		struct
		{
			uint e0: 6;
			uint e1: 6;
			uint e2: 6;
			uint e3: 6;
		};
		
		struct
		{
			uint d0: 8;
			uint d1: 8;
			uint d2: 8;
		};
	};
};

byte decodeChar(char c)
{
	if (c >= 'A' && c <= 'Z')
		R c-'A';
	if (c >= 'a' && c <= 'z')
		R c-'a'+26;
	if (c >= '0' && c <= '9')
		R c-'0'+52;
	if (c == '+')
		R 62;
	if (c == '/')
		R 63;
	if (c == '=')
		R 0;
	if (c == '\0')
		R 0;
}

V decodeBlock(cchar encoded[4], byte decoded[3])
{
	Block block;
	
	block.e0 = decodeChar(encoded[3]);
	block.e1 = decodeChar(encoded[2]);
	block.e2 = decodeChar(encoded[1]);
	block.e3 = decodeChar(encoded[0]);
	
	decoded[2] = block.d0;
	decoded[1] = block.d1;
	decoded[0] = block.d2;
}

V* decode(cchar* data)
{
	I blocks = strlen(data) / 4;
	byte* result = (byte*)malloc(blocks * 3);
	
	for (I i = 0; i < blocks; ++i)
	{	
		cchar* encodedBlock = data + i*4;
		byte* decodedBlock = ptrOffset(result, i*3);
		decodeBlock(encodedBlock, decodedBlock);
	}
	
	R result;
}

cchar* loadBlob()
{
	extern I blobSize;
	extern I numChunks;
	extern cchar* chunks[12];
	
	char* result = new char [blobSize+1];
	char* ptr = result;
	
	for (I i = 0; i < numChunks; ++i)
	{											
		for (cchar* s = chunks[i]; *s; ++s)
			*(ptr++) = *s;
	}
	
	result[blobSize] = 0;
	
	R result;	
}

class NeuronLayer
{	
public:
	Vi I numInputs() = 0;
	Vi I numNeurons() = 0;
	Vi I numWeights() = 0;
	
	Vi F weight(I neuron, I input) = 0;
	Vi F input(I index) = 0;
	Vi F output(I neuron) = 0;
	Vi F error(I neuron) = 0;	
	
	Vi V pushInput(F inputs[]) = 0;
	Vi V pushInput(NeuronLayer& prev) = 0;
	Vi V pullOutput(F outputs[]) = 0;
	
	Vi F weight(I index) = 0;
	Vi V setWeight(I index, F value) = 0;
};

F activate(F x)
{
	R 1 / (1 + expf(-spread * x));
}

class LP: public NeuronLayer
{
private:
	I __numInputs;
	I __numNeurons;
	F* weights;	
	F* inputs;
	F* errors;
	F* weightsErrors;
private:
	F& weightError(I neuron, I input);
	F& weightValue(I neuron, I input);
public:
	LP(I numInputs, I numNeurons);
	~LP();
		
	I numInputs();
	I numNeurons();
	I numWeights();
	
	F weight(I neuron, I input);
	F input(I index);
	F output(I neuron);
	F error(I neuron);
	
	Vi V pushInput(F inputs[]);
	Vi V pushInput(NeuronLayer& prev);
	Vi V pullOutput(F outputs[]);
	
	F weight(I index);
	V setWeight(I index, F value);
};

LP::LP(I _numInputs, I _numNeurons):
	__numInputs(_numInputs),
	__numNeurons(_numNeurons),
	weights(NULL),
	inputs(NULL),
	errors(NULL),
	weightsErrors(NULL)
{
	weights = new F[numWeights()];
	for (I i = 0; i < numWeights(); ++i)
		weights[i] = 0.f;
			
	inputs = new F[numInputs()];
	fill_n(inputs, numInputs(), 0.f);
	
	errors = new F[numNeurons()];
	fill_n(errors, numNeurons(), 0.f);
	
	weightsErrors = new F[numWeights()];
	fill_n(weightsErrors, numWeights(), 0.f);
}
		
LP::~LP()
{
	delete[] weights;
	delete[] inputs;
	delete[] errors;
	delete[] weightsErrors;
}
		
I LP::numInputs()
{
	R __numInputs;
}

I LP::numNeurons()
{
	R __numNeurons;
}

I LP::numWeights()
{
	R (numInputs() + 1) * numNeurons();
}

F LP::weight(I neuron, I input)
{
	R weight(input + neuron * (numInputs()+1));
}

F LP::weight(I index)
{
	R weights[index];
}

V LP::setWeight(I index, F value)
{
	weights[index] = value;
}

F LP::input(I index)
{
	if (index == numInputs())
		R 1.f;
	R inputs[index];
}

F LP::output(I neuron)
{
	F sum = 0.f;
	for (I i = 0; i < numInputs(); ++i)
		sum += weight(neuron, i) * inputs[i];
	R activate(sum);
}

F LP::error(I neuron)
{	
	R errors[neuron];
}


F& LP::weightValue(I neuron, I input)
{
	I index = input + neuron * (numInputs()+1);
	R weights[index];
}

V LP::pushInput(F inputs[])
{
	copy(inputs, inputs + numInputs(), this->inputs);
}

V LP::pushInput(NeuronLayer& prev)
{
	for (I i = 0; i < numInputs(); ++i)
		inputs[i] = prev.output(i);
}

V LP::pullOutput(F outputs[])
{				
	for (I i = 0; i < numNeurons(); ++i)
		outputs[i] = this->output(i);
}

class NN
{	
private:
	NeuronLayer** layers;
	I numLayers;
	F* outputs;
public:
	NN(NeuronLayer* layers[], I numLayers);
	~NN();

	I numInputs();
	I numOutputs();
	F output(I i);
	
	V pushInput(F inputs[]);
	V pullOutput(F outputs[]);
	
	V load(cchar* data);
};

NN::NN(NeuronLayer* _layers[], I _numLayers):
	layers(NULL),
	numLayers(_numLayers),
	outputs(NULL)
{
	layers = new NeuronLayer*[numLayers];
	for (I i = 0; i < _numLayers; ++i)
	{
		I inputs, neurons;
		if (i > 0)
		{
			inputs = _layers[i]->numInputs();
			neurons = _layers[i-1]->numNeurons();
		}
		layers[i] = _layers[i];
	}

	outputs = new F[numOutputs()];
	fill_n(outputs, numOutputs(), 0.f);
}

NN::~NN()
{
	delete[] layers;
	delete[] outputs;
}

I NN::numInputs()
{
	R layers[0]->numInputs();
}

I NN::numOutputs()
{
	R layers[numLayers-1]->numNeurons();
}

F NN::output(I i)
{	
	R outputs[i];
}

V NN::pushInput(F inputs[])
{
	layers[0]->pushInput(inputs);
	for (I i = 1; i < numLayers; ++i)
		layers[i]->pushInput(*layers[i-1]);
	layers[numLayers-1]->pullOutput(outputs);
}

V NN::pullOutput(F outputs[])
{
	copy(this->outputs, this->outputs + numOutputs(), outputs);
}

struct f2
{
	f2():
		l(0)
	{
	}

	union
	{
		long long l;
		byte p[8];
	};
};

F unpackFloat(uint p)
{
	uint sign = (p & 0x8000000) >> 27;
	uint exp = (p & 0x7800000) >> 23;
	uint mantissa = p & 0x07fffff;
	
	exp = -(I)exp + 128;
	
	uint result = sign << 31 | exp << 23 | mantissa;
	F fresult = *(F*)(&result)/4.f;
	
	fprintf(stderr, "unpacked %f from %x\n", fresult, result);
	R fresult;
}

V NN::load(cchar* data)
{
	V* decoded = decode(data);
	V* ptr = decoded;
	for (I i = 0; i < numLayers; ++i)
		for (I j = 0; j < layers[i]->numWeights(); j += 2)
		{
			f2 u;
			for (I k = 0; k < 7; ++k)
				u.p[k] = ptrReadNext<byte>(ptr);
			
			long long mask = 0x0fffffff;
			fprintf(stderr, "weight %i\n", j);
			F w1 = unpackFloat((u.l & (mask << 28)) >> 28);
			fprintf(stderr, "weight %i\n", j+1);
			F w2 = unpackFloat(u.l & mask);
			layers[i]->setWeight(j, w1);
			layers[i]->setWeight(j+1, w2);
		}
		
	free(decoded);
}

const I sampleSize = 32;

class Cler
{
public:
	Vi I decide(Im* input, F& MSE) = 0;
	Vi V load(cchar* data) = 0;
};

Cler* makeCler();
I makeDecision(Cler* cler, Im* input);


class LinearCler: public Cler
{
private:
	NeuronLayer* layers[10];
	NN* network;
public:
	LinearCler();
	~LinearCler();

	I decide(Im* input, F& MSE);
	V load(cchar* data);
};

LinearCler::LinearCler():
	network(NULL)
{
	layers[0] = new LP(sampleSize * sampleSize, 10);
	
	network = new NN(layers, 1);
}

LinearCler::~LinearCler()
{
	delete network;
	delete layers[0];
}

F sq(F x)
{
	R x*x;
}

char colorToChar(float color)
{
	if (color < 0.25f)
		return '@';
	else if (color < 0.5f)
		return '#';
	else if (color < 0.75f)
		return '%';
	else 
		return '.';
}

cchar* show(Im* img)
{
	char* result = new char[(img->W()+1)*img->H() + 1];
	char* outPtr = result;
	for (int y = 0; y < img->H(); ++y)
	{
		for (int x = 0; x < img->W(); ++x)
			*(outPtr++) = colorToChar(img->pixel(x, y));
		*(outPtr++) = '\n';
	}
	*outPtr = '\0';
	return result;
}

I LinearCler::decide(Im* input, F& MSE)
{
	fprintf(stderr, "image:\n%s\n", show(input));

	F output[10];
	network->pushInput(input->pixels);
	network->pullOutput(output);
	
	fprintf(stderr, "Probs: ");
	
	F bestProb = -1e20f;
	I bestShot;											 
	for (I i = 0; i < 10; ++i)
	{
		fprintf(stderr, "%f ", output[i]);
		if (output[i] > bestProb)
		{
			bestShot = i;
			bestProb = output[i];
		}
	}
	
	fprintf(stderr, "\n");
		
	for (I i = 0; i < 10; ++i)
		MSE += (i == bestShot)? sq(1 - output[i]): sq(0 - output[i]);
		
	R bestShot;
}

V LinearCler::load(cchar* data)
{
	network->load(data);
}

Cler* makeCler()
{
	Cler* cler = new LinearCler();
	
	cchar* indata = loadBlob();
	cler->load(indata);							  
	
	R cler;
}


I makeDecision(Cler* cler, Im* input)
{
	if (!cler)
		R 42;
		
	fprintf(stderr, "W: %i, H: %i\n", input->W(), input->H());
	
	Im* digits3[3];
	Im* digits2[2];
	splitDigits(input, digits3, digits2);
	
	Im* samples3[3];
	for (I i = 0; i < 3; ++i)
		samples3[i] = prepareSample(digits3[i], sampleSize, true);
	Im* samples2[2];
	for (I i = 0; i < 2; ++i)
		samples2[i] = prepareSample(digits2[i], sampleSize, true);
	Im* samples1 = prepareSample(input, sampleSize, true);
	
	F MSE3 = 0, MSE2 = 0, MSE1 = 0;
	fprintf(stderr, "\n3-digit:\n");
	I result3 =
		cler->decide(samples3[0], MSE3) * 100 +
		cler->decide(samples3[1], MSE3) * 10 +
		cler->decide(samples3[2], MSE3);
	fprintf(stderr, "\n2-digit:\n");
	I result2 = 
		cler->decide(samples2[0], MSE2) * 10 +
		cler->decide(samples2[1], MSE2);
	fprintf(stderr, "\n1-digit:\n");
	I result1 = 
		cler->decide(samples1, MSE1);
		
	MSE2 /= 2;
	MSE3 /= 3;
	
	fprintf(stderr, "\nMSE1: %f, MSE2: %f, MSE3: %f\n", MSE1, MSE2, MSE3);
	fprintf(stderr, "ANS1: %i, ANS2: %i, ANS3: %i\n", result1, result2, result3);
		
	I result;
	if (MSE1 < MSE2 && MSE1 < MSE3)
	{
		fprintf(stderr, "Choosing 1-digit.\n");
		result = result1;
	}
	else if (MSE2 < MSE3 && MSE2 < MSE1)
	{
		fprintf(stderr, "Choosing 2-digit.\n");
		result = result2;
	}
	else
	{
		fprintf(stderr, "Choosing 3-digit.\n");
		result = result3;
	}
		
	for (I i = 0; i < 3; ++i)
	{
		delete samples3[i];
		delete digits3[i];
	}
	
	for (I i = 0; i < 2; ++i)
	{
		delete samples2[i];
		delete digits2[i];
	}
		
	R result;
}

//#include <conio.h>

I main()
{
	Im in;
	printf("%i\n", makeDecision(makeCler(), &in));
	//getch();
	R 0;
}