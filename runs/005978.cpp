#include <fstream>
#include <string>
#include <vector>
#include <iostream>
#include <math.h>

typedef std::vector< std::vector <int> > Lines;
const unsigned int DOT = 0;
const unsigned int PERC = 85;
const unsigned int SHARP = 170;
const unsigned int AT = 255;
const unsigned int FEAT = 20;
const unsigned int LABELS = 10;

void convert_cut (Lines &ln, std::string &str);
void extract_feat (Lines &ln, unsigned int start, unsigned int end, double *dig_feat);
void feat_small_digit (Lines &ln, unsigned int start, unsigned int end, unsigned int top, unsigned int bot, unsigned int height, unsigned int width, double *dig_feat);
void feat_big_digit (Lines &ln, unsigned int start, unsigned int end, unsigned int top, unsigned int bot, unsigned int height, unsigned int width, double *dig_feat);
void find_top_bot (Lines &ln, unsigned int start, unsigned int end, unsigned int &top, unsigned int &bot);
int recognize_SVM (double *dig_feat);
void recognize_KNN (double *dig_feat, int k, double *result);

int main () {
	//char *file = "018";
	//std::ifstream read;
	//read.open (file);
	Lines ln;
	unsigned int num = 0;
	/*while (!read.eof ()) {
		++num;
		std::string str;
		getline (read, str);
		if (num <= 5) continue;
		convert_cut (ln, str);
	}
	read.close ();*/
	std::string str;
	do {
		++num;
		getline (std::cin, str);
		if (num <= 5) continue;
		convert_cut (ln, str);
	}
	while (str.size () > 0);
	for (num = 0; num < 5; ++num) ln.pop_back ();
	
	int height = ln.size ();
	int width = ln[0].size ();
	
	std::vector<int> ln_sum;
	for (int j = 0; j < width; ++j) {
		unsigned int sum = 0;
		Lines::iterator ptr = ln.begin();
		for (; ptr != ln.end (); ++ptr)
			sum += (*ptr)[j];
		ln_sum.push_back (sum);
	}
	
	// positions of digits
	unsigned int start[] = {0, 0, 0};
	unsigned int end[] = {0, 0, width-1};
		
	// FIRST END, SECOND START
	// these are needed to find digit separation
	unsigned int fsep = width/3;
	unsigned int step = fsep/3 + 1, pos = 0;
	int min = AT*height;
	bool done = false;
	for (unsigned int j = fsep-step; j < fsep + step; ++j) {
		if (!ln_sum[j]) {
			end[0] = j-1;
			while (!ln_sum[++j]) {}
			start[1] = j;
			done = true;
			break;
		}
		if (ln_sum[j] < min) {
			min = ln_sum[j];
			pos = j;
		}
	}
	if (!done) {
		end[0] = pos;
		start[1] = pos+1;
	}
	
	// SECOND
	unsigned int ssep = (width-start[1])/2;
	step = ssep/3 + 1;
	ssep = start[1] + ssep - 1;
	min = AT*height;
	pos = 0;
	done = false;
	for (unsigned int j = ssep-step; j < ssep+step; ++j) {
		if (!ln_sum[j]) {
			end[1] = j-1;
			while (!ln_sum[++j]) {}
			start[2] = j;
			done = true;
			break;
		}
		if (ln_sum[j] < min) {
			min = ln_sum[j];
			pos = j;
		}
	}
	if (!done) {
		end[1] = pos;
		start[2] = pos+1;
	}
	//////////////////////////////////////////////////////////////
	/*
	for (int i = 0; i < height; ++i) {
		for (unsigned int j = start[0]; j <= end[0]; ++j)
			std::cout << (float)ln[i][j]/255*3;
		std::cout << '\n';
	}
	std::cout << '\n';
	for (int i = 0; i < height; ++i) {
		for (unsigned int j = start[1]; j <= end[1]; ++j)
			std::cout << (float)ln[i][j]/255*3;
		std::cout << '\n';
	}
	std::cout << '\n';
	for (int i = 0; i < height; ++i) {
		for (unsigned int j = start[2]; j <= end[2]; ++j)
			std::cout << (float)ln[i][j]/255*3;
		std::cout << '\n';
	}
	*/
	//////////////////////////////////////////////////////////////
	double dig_feat[FEAT] = {0};
	extract_feat (ln, start[0], end[0], dig_feat);
	//int out = recognize_SVM (dig_feat);
	//std::cout << "~~~~~~~~~~~~ TADA~~~~!!!!!!! predicted " << out << '\n';
	double result[LABELS] = {0};
	recognize_KNN (dig_feat, 5, result);
	double max = -1;
	int predicted = 0;
	for (int i = 0; i < LABELS; ++i) {
		//std::cout << "result at " << i << " is " << result[i] << '\n';
		if (result[i] > max) {
			max = result[i];
			predicted = i;
		}
	}
	//std::cout << "~~~~~~~~~~~~ KNN~~~~!!!!!!! predicted " << predicted << '\n';
	std::cout << predicted;
	double dig_feat2[FEAT] = {0};
	extract_feat (ln, start[1], end[1], dig_feat2);
	//out = recognize_SVM (dig_feat2);
	//std::cout << "~~~~~~~~~~~~ TADA~~~~!!!!!!! predicted " << out << '\n';
	double result2[LABELS] = {0};
	recognize_KNN (dig_feat2, 5, result2);
	max = -1;
	predicted = 0;
	for (int i = 0; i < LABELS; ++i)
		if (result2[i] > max) {
			max = result2[i];
			predicted = i;
		}
	//std::cout << "~~~~~~~~~~~~ KNN~~~~!!!!!!! predicted " << predicted << '\n';
	std::cout << predicted;
	
	double dig_feat3[FEAT] = {0};
	extract_feat (ln, start[2], end[2], dig_feat3);
	//out = recognize_SVM (dig_feat3);
	//std::cout << "~~~~~~~~~~~~ TADA~~~~!!!!!!! predicted " << out << '\n';
	double result3[LABELS] = {0};
	recognize_KNN (dig_feat3, 5, result3);
	max = -1;
	predicted = 0;
	for (int i = 0; i < LABELS; ++i)
		if (result3[i] > max) {
			max = result3[i];
			predicted = i;
		}
	//std::cout << "~~~~~~~~~~~~ KNN~~~~!!!!!!! predicted " << predicted << '\n';
	std::cout << predicted << '\n';
	return 0;
}

void convert_cut (Lines &ln, std::string &str) {
	if (!str.size ()) return;
	std::vector <int> line;
	std::string::iterator ptr = str.begin ();
	unsigned int i = 0;
	for (; ptr != str.end (); ++ptr) {
		if (i >= 5 && i < str.size () - 5) {
			int val = DOT;
			if (*ptr == '%') val = PERC;
			else if (*ptr == '#') val = SHARP;
			else if (*ptr == '@') val = AT;
			line.push_back (val);
		}
		++i;
	}
	ln.push_back (line);
}

void extract_feat (Lines &ln, unsigned int start, unsigned int end, double *dig_feat) {
	unsigned int top = 0, bot = ln.size ()-1;
	find_top_bot (ln, start, end, top, bot);
	unsigned int height = bot - top + 1, width = end - start + 1;
	std::cout << "height " << height << " width " << width << '\n';
	
	// ADD FIRST ROW same in both cases
	int sum = 0;
	for (unsigned int j = start; j <= end; ++j) {
		std::cout << (float)ln[top][j]/255*3;
		sum += ln[top][j];
	}
	dig_feat[0] = (double)sum/width;
	std::cout << '\n';
	
	if (height < 30) feat_small_digit (ln, start, end, top, bot, height, width, dig_feat);
	else feat_big_digit (ln, start, end, top, bot, height, width, dig_feat);
}

void feat_small_digit (Lines &ln, unsigned int start, unsigned int end, unsigned int top, unsigned int bot, unsigned int height, unsigned int width, double *dig_feat) {
	// Remove every other line
	unsigned int pos = 1;
	unsigned int added = 1;
	int every = 1, more = 0, more_step = 0;
	if (height < FEAT) {
		pos += (height-FEAT)/2;
		dig_feat[pos++] = dig_feat[0];
		dig_feat[0] = 0;
	}
	else if (height > FEAT) {
		every = height/(height - FEAT)+1; // good
		// + 2 because we skip the first one and might skip the last one
		more = height - FEAT - height/every + 1 + (bot % every == 0);
		more_step = more/3;
	}

	int skipped = 0;
	int toskip = height - FEAT;
	double sum = 0;
	for (unsigned int i = top+1; i < bot && added < FEAT-1; ++i) {
		skipped = skipped % every + 1;
		if (toskip > 0 && more > 0 && !(added % 5)) {
			//std::cout << i-top << " ~~~\n";
			++i;
			--more;
			--toskip;
			//for (int sk = 0; sk < more_step && i < bot && more > 0; ++sk, ++i, --more, --toskip) {}//{std::cout << i-top << " ~~~\n";}
		}
		if (toskip > 0 && skipped == every) {
			//std::cout << i-top << " ---\n"; 
			skipped = skipped % every + 1;
			++i;
			--toskip;
		}
		++added;
		//std::cout << added << " ^^^\n";
		sum = 0;
		for (unsigned int j = start; j <= end; ++j) {
				std::cout << (float)ln[i][j]/255*3;
				sum += ln[i][j];
			}
		dig_feat[pos++] = (double)sum/width;
		std::cout << '\n';
	}
	sum = 0;
	for (unsigned int j = start; j <= end; ++j) {
		std::cout << (float)ln[bot][j]/255*3;
		sum += ln[bot][j];
	}
	dig_feat[pos++] = (double)sum/width;
	std::cout << '\n';
	std::cout << "height " << ++added << '\n';
	std::cout << "****\n";
}

void feat_big_digit (Lines &ln, unsigned int start, unsigned int end, unsigned int top, unsigned int bot, unsigned int height, unsigned int width, double *dig_feat) {
	// Add every other line
	// Precondition: height >= 30
	unsigned int pos = 1;
	unsigned int added = 1;
	int every = (height-2)/(FEAT-2)+1,
		more = FEAT - 2 - height/every + 2,// why +2?
		more_add = (height-2)/more;

	int toadd = 0;
	double sum = 0;
	for (unsigned int i = top+1; i < bot && added < FEAT-1; ++i) {
		toadd = toadd % every + 1;
		if (more > 0 && (i-top)%more_add == 1) {
			//std::cout << more << " here\n";
			sum = 0;
			for (unsigned int j = start; j <= end; ++j) {
				std::cout << (float)ln[i][j]/255*3;
				sum += ln[i][j];
			}
			dig_feat[pos++] = (double)sum/width;
			std::cout << '\n';
			++i;
			//toadd = toadd % every + 1;
			++added;
			--more;
		}
		if (toadd != 1) continue;
		++added;
		sum = 0;
		for (unsigned int j = start; j <= end; ++j) {
			std::cout << (float)ln[i][j]/255*3;
			sum += ln[i][j];
		}
		dig_feat[pos++] = (double)sum/width;
		std::cout << '\n';
	}
	// Add the left out
	for (int i = 1; height > FEAT && added < FEAT-1; ++i) {
		++added;
		sum = 0;
		for (unsigned int j = start; j <= end; ++j) {
			std::cout << (float)ln[bot-i][j]/255*3;
			sum += ln[bot-i][j];
		}
		dig_feat[pos++] = (double)sum/width;
		std::cout << '\n';
	}
	++added;
	// add the last row
	sum = 0;
	for (unsigned int j = start; j <= end; ++j) {
		std::cout << (float)ln[bot][j]/255*3;
		sum += ln[bot][j];
	}
	dig_feat[pos] = (double)sum/width;
	std::cout << '\n';
	std::cout << "height " << added << '\n';
	std::cout << "****\n";
}

void find_top_bot (Lines &ln, unsigned int start, unsigned int end, unsigned int &top, unsigned int &bot) {
	// find hor start
	Lines::iterator ptr = ln.begin ();
	bool skip  = true;
	for (; ptr != ln.end () && skip; ++ptr) {
		std::vector <int>::iterator in_ptr = ptr->begin () + start;
		for (; in_ptr != ptr->begin () + end + 1; ++in_ptr)
			if (*in_ptr) {
				skip = false;
				break;
			}
		if (skip) ++top;
	}
	
	// find hor end
	ptr = ln.begin () + bot;
	skip  = true;
	for (; ptr != ln.begin () && skip; --ptr) {
		std::vector <int>::iterator in_ptr = ptr->begin () + start;
		for (; in_ptr != ptr->begin () + end + 1; ++in_ptr)
			if (*in_ptr) {
				skip = false;
				break;
			}
		if (skip) --bot;
	}
}

double bqplinone[] = {0.317624849066460, 0.543705949532504, -1.46555305717926, -1.75878394091241,
					-1.48458628382430, 4.78827608929587, 1.96330672134978, 9.61292597341172,
					1.92186523186335, 5.49848070071429, 2.05344227207237, 0.211766046949833,
					0.250942954032785, 0.746933629995395, 5.95673769926666, -0.727383851680084,
					0.551976984707683, 1.33949710153518, 0.138918166062064, -1.31791987050967,
					-0.359165022836814, -0.0990518739762782, -0.399308795586715, 0.359889688565267,
					-0.318896066213559, 10.8931594729504, 2.27367312661191, 1.27416861012352,
					6.82307589888987, 2.90859267792732, 1.32691337725846, 2.13729525864424,
					1.16692746453937, 4.15521561141565, 0.357256966971306, 9.63114008848006,
					1.25005551562308, -2.06649159219375, 2.36848348988966, 0.760189908704148,
					1.11994413577093, 2.15656623175853, -1.67481486365169, -0.312283668845044,
					1.92147219068702};

double wqplinone[] = {0.012226288,0.004362466,-0.019914284,-0.001987613,-0.04994093,0.020173159,-0.036600482,0.076631833,-0.10227263,-0.00035862,-0.053824118,0.050071488,-0.023002269,0.099875255,0.063425648,-0.059945498,0.013098284,0.030029583,0.017753133,-0.028248533,
0.015117371,-0.016529789,0.024779335,0.002322122,-0.003425327,-0.016289037,0.002909209,0.005284538,0.000333327,0.014579345,0.002093919,0.002770686,0.012061793,0.026731438,0.000199019,-0.01456407,-8.82E-05,-0.014910701,-0.000994627,-0.026319671,
0.01577794,-0.039946466,-0.035488094,0.041666604,0.066193214,-0.134602813,-0.030515908,0.062185472,0.063426863,-0.036117871,-0.05100388,0.169550038,-0.139287207,0.102413351,0.161922988,-0.1832828,-0.021146499,-0.011306688,0.044436212,-0.009272844,
0.010594748,0.004773906,0.021100064,0.024556225,0.008980925,0.01621168,0.010258009,0.025236319,-0.010780944,0.000107625,-0.020849863,7.57E-05,-0.030434323,-0.015823304,-0.007660913,0.015686484,0.006441061,0.012169174,-0.020380766,0.003430566,
-0.018947384,0.040470547,-0.048360018,0.028496213,0.081956445,-0.018276423,0.007294623,0.014391686,-0.005104595,-0.036581425,-0.02380317,0.017043584,-0.005006528,0.027563837,0.037116994,-0.046142108,0.005531285,0.001091465,-0.055492208,0.040743277,
0.006297757,0.002654313,0.010057533,-0.010125931,0.053375568,0.03264615,0.005932249,-0.036206061,0.013056028,-0.049914077,-0.01069882,-0.016229339,0.03218514,-0.024486396,0.012918088,-0.032443402,0.019146069,-0.007101327,-0.021228493,-0.003516979,
-0.024611135,-0.006096984,-0.012769657,0.00397314,-0.000666007,-0.020714556,-0.000944013,0.017977321,-0.001514312,0.006996464,0.006679617,0.004462046,-0.01129313,0.00706197,0.004255273,0.001852713,0.003027872,-0.002099276,0.003171732,0.016947904,
0.244123631,-0.131787329,0.014065885,0.122514367,0.094521175,-0.187774361,0.205808011,-0.020241132,-0.072289421,0.151519037,-0.257484309,-0.147362119,-0.077372749,0.163212741,0.306319607,-0.189487393,-0.058977969,-0.097743548,0.143646649,-0.264765394,
-0.002553769,-0.01456985,0.025881984,-0.002870613,0.000170749,-0.001236891,0.001951676,-0.016895122,-0.029347605,0.007853544,-0.020183855,-0.053641462,0.024253394,0.055550407,0.016715892,-0.007116282,0.013668316,-0.006479237,0.012377478,0.00026462,
-0.019897384,-0.027291834,0.033317443,0.006987264,-0.016479421,-0.001238388,-0.000433983,0.018770291,0.000419242,-0.020795271,-0.022676034,-0.00749974,0.042317576,0.04982461,-0.015359162,-0.055969999,0.019681906,-0.031587222,-0.009211546,0.002693471,
-0.020093255,-0.02277946,0.019335687,0.017924802,0.037972052,0.011786562,0.009109877,-0.006685082,0.010346882,-0.017295731,-0.005278616,0.003078861,0.015191418,0.002031298,-0.013034069,-0.039780722,0.004166343,-0.034091725,-0.019964568,0.021250882,
0.001288742,0.001099326,0.006143917,0.005779733,0.006182224,0.00397574,0.004920944,0.001912699,-0.006378712,-0.005874036,-0.00401457,-0.005807429,-0.014615123,-0.004115785,-0.00653804,0.001520013,0.004837065,0.003939307,0.005530388,0.003283652,
-0.014585666,0.005239667,5.40E-05,0.015335921,0.027172831,-0.008797437,0.034923482,-0.014829124,-0.011588349,-0.00371477,-0.000656527,-0.013331533,0.032145872,-0.003517834,0.001777188,-0.036562526,0.017878111,-0.042844822,-0.008576109,0.019937977,
-0.005033319,0.00023437,0.008749115,0.007651388,0.010108192,0.008897733,0.004776313,-9.19E-05,-0.002827787,-0.016860729,-0.006348058,-0.008545015,-0.003601836,-0.009344665,0.004147022,-0.009990564,0.004662856,-0.008288652,0.005220012,0.00871944,
-0.026422791,-0.003730899,-0.022215035,-0.003312874,0.008952757,-0.027036592,0.013988804,0.035904674,-0.024677901,-0.007528112,0.025836668,0.007007368,-0.010502369,0.023328424,-0.002187098,-0.006402544,-0.006206576,-0.015004642,0.002039194,-0.000281818,
-0.009908527,-0.016579073,0.025209339,0.045396063,0.009932813,0.033747482,0.017128189,-0.057383425,-0.026077139,0.049478637,-0.046722679,0.005229841,-0.003583682,0.008350522,0.035991591,-0.031162503,-0.030226698,-0.072528704,0.020002316,0.02386331,
-0.003463664,-0.009702054,0.012581968,0.005255201,0.006513338,0.001792954,0.018648328,-0.019072598,-0.008776625,-0.012031851,-0.009553773,-0.012112008,0.003721059,0.002760793,-0.002804373,0.002377612,0.024208372,-0.007729354,-0.000346343,0.007307098,
-0.041471277,0.001885484,-0.01029202,-0.016768514,0.013955596,0.026385711,-0.014789977,0.021703061,0.004440234,-0.018244764,-0.043459748,0.001262486,0.011674627,-0.016782307,-0.04191598,0.021042149,-0.00129807,0.004229369,0.0165739,0.038414889,
-0.002081226,0.008939897,0.002722896,0.005058122,0.012642778,0.009619204,0.005685373,0.003728269,-0.002830371,-0.008184402,-0.008563389,-0.003161843,-0.014942066,-0.007549964,-0.009623542,0.006849902,0.002197062,0.002097244,0.000357291,0.00593007,
-0.031523683,3.75E-02,-0.040404573,0.005744063,0.050719032,-0.033029235,-8.87E-06,-0.022712618,-0.000256654,-0.048709817,0.007553435,-2.47E-02,0.0270117,-0.021010253,-0.019504602,0.049358657,-0.030692708,0.013270724,0.005121058,0.050554816,
-0.005696699,0.008106302,-4.35E-03,0.006582828,0.007215959,0.010346586,0.004806964,-0.001136185,0.003592266,-0.020899982,-0.008391557,-0.005744993,-8.09E-04,-0.012021843,0.003534488,0.006739105,0.000609212,-0.004728072,0.002528916,0.011674753,
-0.011721886,0.002516914,-0.010587895,-0.001666341,0.009021142,-0.007709467,0.003334483,0.006063916,-0.006862788,-0.004883651,-0.004374152,0.001266708,-0.007713562,-0.004559843,-0.004237593,0.019566591,-0.001027136,-0.001566685,0.012980839,0.011975187,
-0.01725494,-0.004483247,-0.016777122,0.021108379,0.003852685,0.015890571,0.007879545,-0.014674844,-0.001414302,-0.011083172,-0.022804814,0.001708715,-0.019613793,-0.016595734,0.003464506,0.017557794,-0.00558328,0.006181142,0.009860757,0.025699564,
-0.010740712,2.13E-03,-0.002838301,0.002234158,0.001047054,0.001427434,0.001829483,-0.006349317,-0.006965597,-0.009165414,-0.013685395,-0.014035721,0.004724471,0.000437302,0.002088026,0.015031963,0.004520573,0.000829119,0.01061314,0.011895478,
0.007918857,0.006864682,7.13E-03,0.006075712,0.006091099,0.000198596,-0.004872563,0.007173298,-0.003055037,-0.003738918,-0.003157195,-0.006991849,-0.017573498,-5.41E-03,-0.002864029,0.009413676,0.005642001,0.000785708,0.003818445,-0.001541911,
-0.013570402,0.030396254,-0.019272214,-0.02447969,0.050145648,-0.08526653,0.033496249,-0.046091606,-0.091845022,-0.061243865,0.089158683,-0.09289345,0.056529719,-0.059733644,7.35E-02,-0.002016996,0.07921782,-0.059874607,0.007185655,0.01045797,
0.001081642,-0.001144895,0.026640995,0.006051672,0.016501036,0.008235006,-0.005133979,-6.36E-06,-0.012409884,-0.022481367,0.001569012,-0.021200772,-0.009113954,-0.018790524,-0.000692535,0.00249387,0.033250454,-0.010829317,-0.009727974,0.002814638,
-0.023108696,-0.005294286,-0.014866926,0.004166911,-0.04270759,-0.006635919,0.012444088,0.015537164,-0.017223109,0.01050495,0.003666519,0.00501284,-0.02812209,0.003026569,0.004697836,0.0229911,0.013444805,0.014690593,0.013137213,0.012179475,
0.00278931,-0.072436794,0.056706727,-0.011402128,0.051227567,-0.130320887,0.099880642,-0.060126956,-0.02590202,-0.041857508,0.023987438,-0.065527425,-0.09674177,0.079664263,-0.07210502,0.025605611,0.066246126,0.008545523,0.051171637,0.026577296,
-0.003633239,-0.003803881,0.004489586,0.00693254,0.00208211,-0.008513876,-0.0150323,-0.004058369,-0.013502264,-0.013839639,-0.014262369,-0.027727619,0.014868373,0.000698792,0.008417401,0.016891158,0.016739323,0.005253432,0.006839576,0.00048362,
-0.017033406,0.003550452,-0.014281066,-0.003824924,-0.014669973,-0.004554211,0.01242724,0.001831514,0.0054754,-0.008181476,0.001872605,0.0044519,0.014997278,0.008082204,-0.003857356,-0.009158859,-0.005337599,-0.002974256,-0.006096577,0.011081543,
-0.011419712,-0.019381372,-0.022928034,-0.001772605,0.013351568,0.027239871,0.023490615,-0.019072778,0.020568057,-0.014480926,-0.006551492,-0.001609354,0.024242074,0.001921627,-0.002704576,0.000429764,-0.008360757,-0.01276988,-0.01910718,-0.005448288,
-0.006208655,-0.00430298,-0.005670915,-0.004788877,-0.003055404,-0.01281247,0.000386144,0.000266662,0.003741735,0.003274729,0.00306724,0.005914063,0.009960088,0.003737255,0.00171199,-0.001459437,-0.004487949,-0.003845029,-2.43E-03,0.000250458,
-0.019401958,-0.00506906,-0.007011481,-0.002997588,-0.057375619,-0.022054988,0.011431916,-0.024078936,0.01248836,-0.02789245,0.01818723,-0.007314103,0.036676758,0.028433432,-0.001122726,-0.021164007,-0.002398633,0.015603369,-2.88E-03,2.17E-04,
-0.007196146,-0.012551318,-0.004438417,-0.011886942,-0.019328592,-0.011715856,0.003106159,-0.010444498,0.001859903,0.003942987,0.016776562,-0.011034831,0.023059719,1.60E-02,0.007223278,-0.013215045,-0.003364246,-0.002796822,0.00538316,2.53E-03,
0.025115796,0.001927014,0.040968602,-0.033574701,0.024748847,0.051959317,-0.006727927,-0.026476238,-0.000742376,-0.014702031,-0.002647087,-0.044025414,-0.017959396,-3.82E-02,2.91E-02,-0.016469804,0.037258701,0.005744346,-0.031690286,-0.052659269,
-0.018156519,-0.00296251,-0.005288514,-0.013005749,-0.017673668,-0.0210868,0.004905161,0.019251329,-0.002200299,0.031339168,-0.003838193,1.01E-02,-0.024686558,0.003841155,-2.89E-02,0.01676199,-0.009178749,0.005812213,0.033501591,0.012979947,
0.007761913,-0.040497032,0.047862478,-0.011924077,-0.037949033,0.026933921,-0.035517989,0.046801974,-0.006155196,0.035071817,-0.047786804,-0.005404146,-1.19E-02,0.008253988,-0.060418067,0.039774628,0.027000534,-0.006604585,0.025405502,-0.002149474,
-0.003269632,-0.000803045,0.021830817,-0.019382635,-0.020733759,0.002997237,-0.017522705,-0.003769047,-0.021700525,0.000146301,-0.016582957,-0.018943172,0.005722847,0.028942598,0.007986788,0.019048751,0.015849085,0.011254778,0.015435371,-0.012011788,
-0.013414999,-0.005482518,-0.006661409,-0.005235761,-0.004375068,-0.011269999,0.001250126,0.002967773,0.001118511,0.015047555,0.005617028,0.003897545,-0.002192658,0.004020961,0.002634859,0.005866746,-0.00516796,-0.003903161,0.00273014,0.006700103,
-0.042177402,0.074175996,-0.292230021,0.324304776,-0.28120997,0.046943143,-0.094357832,0.172406583,-0.024955406,0.138120857,-0.065286326,-0.065587221,-0.187837098,0.310460968,-0.258930473,0.232156872,0.099930103,-0.248798289,0.076739589,-0.003271053,
-0.010287028,-0.016295078,0.004068636,-0.022865624,-0.013929193,-0.020002959,-0.007701809,-0.002561046,-0.032950264,0.048278888,-0.023432896,-0.0231423,0.01081141,0.039399802,0.002900273,0.023767621,-0.007900387,0.014084475,0.03226461,-0.009128619,
0.02471031,-0.006532753,0.023850993,0.002843111,-0.001706458,-0.000912461,0.001002332,-0.038906341,-0.000303127,0.020409429,-0.021428261,-0.009359473,0.006800704,0.018128594,0.014717073,-0.027083977,-0.007874286,0.003881367,0.002509674,-0.006883675,
0.011310154,-0.000205251,0.007483462,0.005481255,8.69E-05,0.009680721,-0.003425742,-0.015904516,-0.011678207,-0.005733266,-0.004715594,-0.009419977,0.010973002,0.002502162,0.000121253,-0.001049024,0.007892752,0.0037972,-0.001592507,-0.005758955,
-0.01120756,-0.009150191,0.020179314,-0.038413571,-0.011576502,-0.032613863,-0.00901052,0.00942555,0.001411509,-0.026768404,0.011905116,-0.054893641,0.013004989,0.076403358,0.027298471,0.015445358,0.009193979,0.002389576,0.023601853,-0.009878049};

int recognize_SVM (double *dig_feat) {
	std::cout << sizeof (wqplinone)/sizeof(double) << '\n';
    int predic[LABELS] = {0};
	int predicted = 0;
    unsigned int posit = 0;
    for (unsigned int let = 0; let < LABELS-1; ++let) {
        for (unsigned int sec = let+1; sec < LABELS; ++sec) {
			double pr = 0;
			for (unsigned int i = 0; i < FEAT; ++i) pr += dig_feat[i]*wqplinone[posit*FEAT+i];
            pr += bqplinone[posit];
            if (pr >= 0) ++predic[let];
            else ++predic[sec];
			++posit;
        }
    }
	int max = 0;
    for (int i = 0; i < LABELS; ++i) {
		if (predic[i] > max) {
			predicted = i;
			max = predic[i];
		}
		std::cout << "vote for " << i << " is " << predic[i] << '\n';
	}
	return predicted;
}

double data[] = {160.5555556,170,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,132.2222222,170,160.5555556,0,
85,75,70,50,50,65,45,45,65,60,55,55,65,70,70,50,55,75,60,95,0,
62.33333333,141.6666667,164.3333333,119,147.3333333,136,90.66666667,124.6666667,136,158.6666667,153,124.6666667,102,124.6666667,136,107.6666667,113.3333333,136,141.6666667,62.33333333,0,
107.6666667,141.6666667,96.33333333,96.33333333,85,79.33333333,79.33333333,96.33333333,96.33333333,96.33333333,96.33333333,96.33333333,96.33333333,79.33333333,79.33333333,85,96.33333333,96.33333333,141.6666667,107.6666667,0,
113.3333333,113.3333333,85,42.5,85,85,85,85,85,85,85,85,85,85,85,85,42.5,85,113.3333333,113.3333333,0,
89.47368421,93.94736842,102.8947368,107.3684211,116.3157895,120.7894737,129.7368421,116.3157895,116.3157895,125.2631579,125.2631579,116.3157895,116.3157895,129.7368421,120.7894737,116.3157895,107.3684211,102.8947368,93.94736842,89.47368421,0,
70.83333333,42.5,66.11111111,75.55555556,108.6111111,51.94444444,66.11111111,70.83333333,70.83333333,75.55555556,94.44444444,103.8888889,108.6111111,118.0555556,146.3888889,188.8888889,179.4444444,146.3888889,118.0555556,80.27777778,0,
72.25,140.25,148.75,165.75,170,178.5,178.5,174.25,182.75,191.25,191.25,182.75,174.25,170,170,157.25,165.75,131.75,114.75,72.25,0,
77.27272727,154.5454545,170,170,123.6363636,92.72727273,92.72727273,108.1818182,92.72727273,100.4545455,92.72727273,69.54545455,69.54545455,85,100.4545455,100.4545455,139.0909091,123.6363636,123.6363636,61.81818182,0,
19.61538462,71.92307692,124.2307692,117.6923077,104.6153846,91.53846154,91.53846154,58.84615385,39.23076923,45.76923077,45.76923077,45.76923077,52.30769231,65.38461538,71.92307692,58.84615385,71.92307692,65.38461538,124.2307692,78.46153846,0,
78.46153846,52.30769231,71.92307692,78.46153846,71.92307692,98.07692308,124.2307692,117.6923077,111.1538462,111.1538462,111.1538462,111.1538462,117.6923077,124.2307692,98.07692308,65.38461538,65.38461538,71.92307692,52.30769231,85,0,
74.375,122.1875,154.0625,148.75,132.8125,132.8125,132.8125,132.8125,154.0625,148.75,132.8125,122.1875,148.75,148.75,132.8125,132.8125,127.5,154.0625,122.1875,74.375,0,
204,25.5,25.5,25.5,25.5,59.5,51,68,59.5,68,59.5,68,68,68,51,59.5,25.5,25.5,38.25,191.25,0,
42.5,77.91666667,113.3333333,120.4166667,120.4166667,106.25,106.25,120.4166667,113.3333333,106.25,92.08333333,106.25,113.3333333,92.08333333,85,92.08333333,56.66666667,113.3333333,85,0,0,
89.72222222,99.16666667,132.2222222,80.27777778,118.0555556,103.8888889,89.72222222,113.3333333,122.7777778,122.7777778,122.7777778,122.7777778,89.72222222,103.8888889,94.44444444,70.83333333,80.27777778,94.44444444,127.5,99.16666667,0,
91.07142857,157.8571429,109.2857143,103.2142857,85,103.2142857,97.14285714,103.2142857,103.2142857,103.2142857,103.2142857,103.2142857,103.2142857,97.14285714,103.2142857,85,103.2142857,109.2857143,145.7142857,91.07142857,0,
91.07142857,72.85714286,66.78571429,66.78571429,78.92857143,91.07142857,91.07142857,103.2142857,103.2142857,103.2142857,103.2142857,103.2142857,103.2142857,103.2142857,91.07142857,78.92857143,66.78571429,66.78571429,66.78571429,78.92857143,0,
39.23076923,137.3076923,98.07692308,117.6923077,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,98.07692308,117.6923077,58.84615385,0,
56.66666667,56.66666667,113.3333333,113.3333333,170,170,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,113.3333333,1,
54.09090909,123.6363636,154.5454545,85,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,61.81818182,77.27272727,77.27272727,200.9090909,1,
85,180.625,180.625,159.375,95.625,74.375,95.625,95.625,95.625,95.625,95.625,95.625,95.625,95.625,95.625,95.625,95.625,74.375,74.375,74.375,1,
42.5,70.83333333,92.08333333,155.8333333,155.8333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,70.83333333,240.8333333,240.8333333,1,
51,153,153,68,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,1,
24.28571429,97.14285714,194.2857143,194.2857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,151.7857143,163.9285714,1,
26.15384615,58.84615385,85,85,117.6923077,143.8461538,143.8461538,104.6153846,104.6153846,104.6153846,104.6153846,78.46153846,91.53846154,91.53846154,91.53846154,91.53846154,85,85,163.4615385,45.76923077,1,
62.63157895,111.8421053,165.5263158,143.1578947,120.7894737,120.7894737,120.7894737,129.7368421,138.6842105,138.6842105,138.6842105,138.6842105,129.7368421,120.7894737,120.7894737,120.7894737,120.7894737,120.7894737,205.7894737,183.4210526,1,
51,93.5,102,110.5,136,127.5,127.5,93.5,110.5,85,85,85,68,42.5,42.5,51,68,51,51,25.5,1,
28.33333333,42.5,56.66666667,99.16666667,127.5,99.16666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,14.16666667,1,
38.63636364,139.0909091,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,54.09090909,224.0909091,1,
56.66666667,106.25,155.8333333,155.8333333,170,148.75,106.25,106.25,106.25,106.25,106.25,120.4166667,134.5833333,113.3333333,113.3333333,134.5833333,113.3333333,113.3333333,120.4166667,56.66666667,1,
204,25.5,25.5,25.5,25.5,42.5,55.25,46.75,34,34,34,34,34,34,34,34,25.5,25.5,38.25,191.25,1,
56.66666667,63.75,85,99.16666667,127.5,42.5,35.41666667,28.33333333,28.33333333,49.58333333,28.33333333,28.33333333,42.5,35.41666667,56.66666667,49.58333333,70.83333333,63.75,92.08333333,14.16666667,1,
30.90909091,92.72727273,131.3636364,154.5454545,170,85,85,85,85,85,85,85,85,85,85,85,85,69.54545455,115.9090909,185.4545455,1,
37.77777778,66.11111111,94.44444444,141.6666667,179.4444444,160.5555556,103.8888889,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,47.22222222,1,
28.33333333,85,134.5833333,49.58333333,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,49.58333333,212.5,1,
63.75,95.625,95.625,127.5,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,63.75,95.625,191.25,255,1,
212.5,170,116.875,116.875,116.875,116.875,53.125,74.375,42.5,74.375,63.75,74.375,42.5,63.75,42.5,42.5,63.75,42.5,170,212.5,2,
79.33333333,164.3333333,113.3333333,79.33333333,62.33333333,68,62.33333333,45.33333333,34,34,34,11.33333333,17,17,39.66666667,34,51,215.3333333,221,22.66666667,2,
98.07692308,163.4615385,98.07692308,85,111.1538462,150.3846154,137.3076923,52.30769231,58.84615385,26.15384615,65.38461538,85,71.92307692,58.84615385,65.38461538,58.84615385,196.1538462,241.9230769,228.8461538,189.6153846,2,
133.5714286,194.2857143,109.2857143,72.85714286,60.71428571,54.64285714,60.71428571,54.64285714,54.64285714,54.64285714,48.57142857,66.78571429,66.78571429,66.78571429,66.78571429,48.57142857,48.57142857,54.64285714,236.7857143,236.7857143,2,
85,115.9090909,92.72727273,92.72727273,85,54.09090909,85,69.54545455,77.27272727,131.3636364,100.4545455,30.90909091,30.90909091,46.36363636,46.36363636,46.36363636,38.63636364,15.45454545,123.6363636,216.3636364,2,
102,93.5,85,106.25,102,106.25,119,123.25,144.5,119,119,131.75,119,119,131.75,123.25,119,119,119,233.75,2,
60,105,45,105,80,115,75,55,40,50,90,115,100,65,65,65,70,105,150,75,2,
80.75,153,178.5,199.75,136,127.5,110.5,110.5,110.5,102,93.5,97.75,97.75,93.5,182.75,187,187,195.5,221,204,2,
115.9090909,216.3636364,208.6363636,177.7272727,115.9090909,54.09090909,46.36363636,46.36363636,46.36363636,46.36363636,46.36363636,46.36363636,61.81818182,61.81818182,38.63636364,61.81818182,177.7272727,224.0909091,216.3636364,123.6363636,2,
77.91666667,141.6666667,70.83333333,70.83333333,70.83333333,92.08333333,92.08333333,113.3333333,155.8333333,70.83333333,42.5,42.5,42.5,28.33333333,14.16666667,56.66666667,56.66666667,92.08333333,184.1666667,92.08333333,2,
98.07692308,78.46153846,78.46153846,78.46153846,130.7692308,111.1538462,111.1538462,45.76923077,52.30769231,39.23076923,26.15384615,13.07692308,19.61538462,19.61538462,19.61538462,45.76923077,39.23076923,26.15384615,228.8461538,228.8461538,2,
91.07142857,157.8571429,182.1428571,170,163.9285714,170,145.7142857,151.7857143,115.3571429,85,66.78571429,72.85714286,72.85714286,72.85714286,103.2142857,194.2857143,206.4285714,188.2142857,182.1428571,133.5714286,2,
204,25.5,25.5,25.5,25.5,76.5,68,68,46.75,46.75,42.5,42.5,51,55.25,42.5,114.75,25.5,25.5,38.25,191.25,2,
0,48.04347826,70.2173913,81.30434783,55.43478261,48.04347826,40.65217391,22.17391304,7.391304348,18.47826087,18.47826087,25.86956522,25.86956522,18.47826087,29.56521739,103.4782609,162.6086957,173.6956522,129.3478261,14.7826087,2,
95.625,100.9375,154.0625,127.5,127.5,127.5,132.8125,148.75,138.125,132.8125,74.375,53.125,79.6875,79.6875,42.5,69.0625,79.6875,217.8125,228.4375,212.5,2,
102,147.3333333,107.6666667,79.33333333,113.3333333,79.33333333,56.66666667,51,51,62.33333333,73.66666667,73.66666667,68,56.66666667,68,56.66666667,45.33333333,51,215.3333333,226.6666667,2,
103.2142857,66.78571429,72.85714286,54.64285714,85,121.4285714,115.3571429,97.14285714,54.64285714,42.5,42.5,42.5,30.35714286,36.42857143,48.57142857,60.71428571,60.71428571,72.85714286,218.5714286,242.8571429,2,
58.84615385,58.84615385,117.6923077,117.6923077,78.46153846,78.46153846,39.23076923,39.23076923,39.23076923,39.23076923,39.23076923,39.23076923,39.23076923,39.23076923,39.23076923,78.46153846,78.46153846,196.1538462,39.23076923,215.7692308,2,
170,180.625,127.5,127.5,127.5,127.5,53.125,85,63.75,85,85,63.75,42.5,74.375,116.875,116.875,116.875,116.875,170,170,3,
96.33333333,102,96.33333333,85,79.33333333,68,62.33333333,34,39.66666667,147.3333333,79.33333333,56.66666667,62.33333333,51,68,56.66666667,56.66666667,79.33333333,96.33333333,119,3,
176.0714286,200.3571429,157.8571429,85,48.57142857,48.57142857,30.35714286,42.5,97.14285714,103.2142857,85,54.64285714,42.5,66.78571429,109.2857143,133.5714286,121.4285714,163.9285714,103.2142857,18.21428571,3,
115.3571429,206.4285714,133.5714286,72.85714286,42.5,42.5,60.71428571,54.64285714,91.07142857,109.2857143,66.78571429,42.5,42.5,42.5,42.5,54.64285714,78.92857143,115.3571429,188.2142857,115.3571429,3,
148.75,85,42.5,49.58333333,42.5,56.66666667,120.4166667,35.41666667,49.58333333,14.16666667,49.58333333,49.58333333,49.58333333,49.58333333,35.41666667,42.5,42.5,63.75,120.4166667,120.4166667,3,
97.14285714,117.3809524,113.3333333,113.3333333,101.1904762,109.2857143,105.2380952,89.04761905,80.95238095,72.85714286,76.9047619,105.2380952,117.3809524,113.3333333,113.3333333,113.3333333,137.6190476,133.5714286,109.2857143,117.3809524,3,
59.5,59.5,51,76.5,102,25.5,42.5,102,153,136,102,76.5,76.5,42.5,51,119,119,51,68,51,3,
95,145,195,140,120,110,105,105,105,145,190,145,150,145,135,135,135,145,170,115,3,
108.1818182,177.7272727,224.0909091,162.2727273,38.63636364,61.81818182,61.81818182,46.36363636,46.36363636,61.81818182,77.27272727,131.3636364,100.4545455,69.54545455,69.54545455,77.27272727,123.6363636,115.9090909,115.9090909,100.4545455,3,
104.6153846,111.1538462,78.46153846,58.84615385,65.38461538,78.46153846,98.07692308,85,32.69230769,71.92307692,65.38461538,39.23076923,71.92307692,117.6923077,111.1538462,85,58.84615385,58.84615385,58.84615385,45.76923077,3,
106.25,99.16666667,77.91666667,127.5,99.16666667,63.75,49.58333333,42.5,49.58333333,141.6666667,70.83333333,63.75,77.91666667,56.66666667,56.66666667,99.16666667,127.5,113.3333333,99.16666667,99.16666667,3,
69.0625,132.8125,154.0625,143.4375,143.4375,122.1875,111.5625,79.6875,85,116.875,90.3125,122.1875,148.75,159.375,154.0625,154.0625,170,170,138.125,69.0625,3,
204,25.5,25.5,25.5,25.5,68,42.5,76.5,46.75,42.5,55.25,46.75,42.5,59.5,63.75,76.5,25.5,25.5,38.25,191.25,3,
73.91304348,110.8695652,99.7826087,40.65217391,18.47826087,22.17391304,88.69565217,103.4782609,77.60869565,29.56521739,22.17391304,18.47826087,22.17391304,25.86956522,25.86956522,36.95652174,29.56521739,40.65217391,48.04347826,29.56521739,3,
95.625,100.9375,164.6875,111.5625,100.9375,106.25,143.4375,79.6875,95.625,69.0625,95.625,69.0625,69.0625,90.3125,116.875,116.875,127.5,122.1875,164.6875,116.875,3,
103.2142857,151.7857143,121.4285714,103.2142857,103.2142857,42.5,60.71428571,48.57142857,97.14285714,103.2142857,54.64285714,60.71428571,42.5,30.35714286,72.85714286,109.2857143,85,109.2857143,170,85,3,
97.14285714,85,78.92857143,91.07142857,97.14285714,91.07142857,30.35714286,36.42857143,36.42857143,85,30.35714286,30.35714286,60.71428571,103.2142857,109.2857143,121.4285714,97.14285714,72.85714286,66.78571429,109.2857143,3,
69.54545455,92.72727273,115.9090909,115.9090909,69.54545455,46.36363636,46.36363636,46.36363636,46.36363636,92.72727273,92.72727273,69.54545455,69.54545455,46.36363636,46.36363636,46.36363636,69.54545455,162.2727273,139.0909091,115.9090909,3,
66.11111111,37.77777778,37.77777778,66.11111111,37.77777778,37.77777778,132.2222222,103.8888889,103.8888889,132.2222222,122.7777778,103.8888889,113.3333333,151.1111111,226.6666667,47.22222222,66.11111111,66.11111111,66.11111111,66.11111111,4,
26.5625,31.875,37.1875,58.4375,63.75,47.8125,47.8125,53.125,63.75,53.125,53.125,53.125,53.125,223.125,228.4375,37.1875,37.1875,37.1875,58.4375,127.5,4,
30.35714286,30.35714286,48.57142857,78.92857143,72.85714286,36.42857143,54.64285714,78.92857143,97.14285714,72.85714286,145.7142857,218.5714286,176.0714286,139.6428571,66.78571429,42.5,54.64285714,30.35714286,24.28571429,18.21428571,4,
45,50,65,70,75,85,75,70,60,70,70,75,225,225,35,35,35,35,35,35,4,
0,7.083333333,35.41666667,42.5,49.58333333,63.75,49.58333333,70.83333333,63.75,70.83333333,70.83333333,49.58333333,70.83333333,113.3333333,240.8333333,35.41666667,35.41666667,35.41666667,35.41666667,35.41666667,4,
8.095238095,28.33333333,40.47619048,52.61904762,60.71428571,72.85714286,85,97.14285714,117.3809524,121.4285714,125.4761905,117.3809524,133.5714286,125.4761905,125.4761905,234.7619048,113.3333333,113.3333333,117.3809524,121.4285714,4,
32.69230769,39.23076923,19.61538462,19.61538462,13.07692308,104.6153846,104.6153846,124.2307692,170,163.4615385,104.6153846,65.38461538,65.38461538,65.38461538,65.38461538,78.46153846,78.46153846,111.1538462,117.6923077,39.23076923,4,
8.5,38.25,68,76.5,89.25,119,123.25,110.5,148.75,170,187,233.75,238,229.5,212.5,106.25,106.25,106.25,97.75,55.25,4,
17,59.5,85,68,51,127.5,93.5,119,110.5,85,68,110.5,178.5,212.5,153,34,34,17,34,25.5,4,
6.538461538,39.23076923,52.30769231,39.23076923,52.30769231,52.30769231,52.30769231,52.30769231,58.84615385,58.84615385,58.84615385,58.84615385,91.53846154,183.0769231,111.1538462,39.23076923,26.15384615,26.15384615,26.15384615,19.61538462,4,
22.66666667,39.66666667,45.33333333,56.66666667,56.66666667,56.66666667,45.33333333,56.66666667,56.66666667,45.33333333,56.66666667,56.66666667,62.33333333,62.33333333,232.3333333,45.33333333,45.33333333,39.66666667,39.66666667,124.6666667,4,
54.64285714,78.92857143,97.14285714,78.92857143,85,127.5,170,182.1428571,163.9285714,151.7857143,230.7142857,224.6428571,200.3571429,103.2142857,85,103.2142857,103.2142857,97.14285714,103.2142857,60.71428571,4,
204,25.5,25.5,25.5,25.5,46.75,51,46.75,68,68,55.25,68,114.75,46.75,46.75,46.75,25.5,25.5,38.25,191.25,4,
0,28.33333333,42.5,42.5,61.38888889,66.11111111,56.66666667,47.22222222,66.11111111,80.27777778,160.5555556,207.7777778,122.7777778,33.05555556,28.33333333,28.33333333,47.22222222,28.33333333,33.05555556,0,4,
47.22222222,61.38888889,51.94444444,51.94444444,70.83333333,75.55555556,113.3333333,99.16666667,94.44444444,103.8888889,80.27777778,80.27777778,94.44444444,203.0555556,188.8888889,94.44444444,66.11111111,51.94444444,70.83333333,113.3333333,4,
45.33333333,62.33333333,68,90.66666667,85,102,85,102,102,85,85,102,102,238,238,56.66666667,56.66666667,56.66666667,56.66666667,56.66666667,4,
28.33333333,34,39.66666667,62.33333333,56.66666667,56.66666667,56.66666667,56.66666667,68,51,68,68,51,68,232.3333333,39.66666667,39.66666667,39.66666667,39.66666667,141.6666667,4,
39.23076923,39.23076923,39.23076923,58.84615385,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,78.46153846,235.3846154,39.23076923,235.3846154,39.23076923,39.23076923,39.23076923,39.23076923,58.84615385,4,
212.5,116.875,53.125,42.5,53.125,53.125,74.375,74.375,212.5,106.25,53.125,53.125,53.125,53.125,127.5,127.5,127.5,127.5,180.625,170,5,
26.15384615,209.2307692,209.2307692,52.30769231,45.76923077,45.76923077,6.538461538,71.92307692,117.6923077,137.3076923,85,58.84615385,58.84615385,65.38461538,71.92307692,45.76923077,39.23076923,65.38461538,65.38461538,124.2307692,5,
139.6428571,157.8571429,115.3571429,91.07142857,66.78571429,48.57142857,30.35714286,85,145.7142857,133.5714286,133.5714286,85,60.71428571,66.78571429,91.07142857,127.5,121.4285714,151.7857143,139.6428571,78.92857143,5,
206.4285714,206.4285714,42.5,42.5,42.5,42.5,42.5,139.6428571,182.1428571,72.85714286,54.64285714,42.5,54.64285714,54.64285714,42.5,42.5,85,109.2857143,182.1428571,115.3571429,5,
127.5,70.83333333,14.16666667,21.25,56.66666667,127.5,63.75,35.41666667,42.5,42.5,28.33333333,35.41666667,35.41666667,28.33333333,14.16666667,49.58333333,42.5,49.58333333,92.08333333,92.08333333,5,
147.6315789,13.42105263,22.36842105,22.36842105,107.3684211,98.42105263,85,98.42105263,102.8947368,134.2105263,134.2105263,129.7368421,134.2105263,116.3157895,116.3157895,120.7894737,102.8947368,93.94736842,93.94736842,93.94736842,5,
5.3125,26.5625,132.8125,90.3125,95.625,90.3125,85,85,58.4375,47.8125,74.375,95.625,69.0625,85,106.25,116.875,37.1875,74.375,122.1875,85,5,
17,85,187,181.3333333,187,187,28.33333333,73.66666667,158.6666667,209.6666667,209.6666667,164.3333333,136,124.6666667,124.6666667,130.3333333,130.3333333,130.3333333,158.6666667,130.3333333,5,
185.4545455,185.4545455,185.4545455,139.0909091,77.27272727,46.36363636,46.36363636,46.36363636,77.27272727,77.27272727,61.81818182,85,100.4545455,85,54.09090909,61.81818182,100.4545455,139.0909091,170,146.8181818,5,
30.90909091,46.36363636,131.3636364,123.6363636,54.09090909,7.727272727,23.18181818,92.72727273,139.0909091,92.72727273,77.27272727,46.36363636,77.27272727,115.9090909,100.4545455,85,69.54545455,38.63636364,77.27272727,38.63636364,5,
7.083333333,141.6666667,155.8333333,162.9166667,21.25,28.33333333,28.33333333,28.33333333,92.08333333,92.08333333,63.75,63.75,49.58333333,63.75,63.75,77.91666667,106.25,113.3333333,92.08333333,106.25,5,
147.3333333,141.6666667,136,119,73.66666667,141.6666667,187,198.3333333,96.33333333,130.3333333,147.3333333,130.3333333,130.3333333,147.3333333,119,124.6666667,113.3333333,102,107.6666667,68,5,
204,25.5,25.5,25.5,25.5,89.25,46.75,38.25,34,80.75,59.5,46.75,34,68,59.5,76.5,25.5,25.5,38.25,191.25,5,
136.9444444,136.9444444,80.27777778,42.5,33.05555556,66.11111111,103.8888889,122.7777778,47.22222222,47.22222222,28.33333333,28.33333333,18.88888889,18.88888889,28.33333333,37.77777778,28.33333333,51.94444444,56.66666667,37.77777778,5,
42.5,42.5,188.2142857,109.2857143,115.3571429,78.92857143,30.35714286,97.14285714,97.14285714,163.9285714,97.14285714,72.85714286,42.5,85,91.07142857,121.4285714,121.4285714,121.4285714,151.7857143,127.5,5,
182.1428571,182.1428571,30.35714286,48.57142857,48.57142857,48.57142857,133.5714286,176.0714286,121.4285714,103.2142857,48.57142857,30.35714286,30.35714286,30.35714286,85,109.2857143,72.85714286,97.14285714,170,97.14285714,5,
54.64285714,151.7857143,139.6428571,30.35714286,18.21428571,18.21428571,18.21428571,121.4285714,91.07142857,103.2142857,72.85714286,60.71428571,54.64285714,103.2142857,121.4285714,127.5,66.78571429,91.07142857,85,103.2142857,5,
162.2727273,46.36363636,185.4545455,23.18181818,69.54545455,69.54545455,69.54545455,139.0909091,46.36363636,46.36363636,46.36363636,46.36363636,46.36363636,69.54545455,46.36363636,115.9090909,162.2727273,139.0909091,92.72727273,0,5,
191.25,170,127.5,127.5,127.5,127.5,74.375,74.375,74.375,233.75,191.25,127.5,127.5,127.5,127.5,127.5,127.5,127.5,170,170,6,
95.625,79.6875,63.75,69.0625,69.0625,53.125,42.5,53.125,37.1875,122.1875,143.4375,116.875,116.875,100.9375,100.9375,111.5625,85,69.0625,90.3125,90.3125,6,
32.69230769,58.84615385,98.07692308,117.6923077,91.53846154,104.6153846,78.46153846,65.38461538,71.92307692,137.3076923,183.0769231,130.7692308,130.7692308,143.8461538,176.5384615,156.9230769,104.6153846,91.53846154,124.2307692,98.07692308,6,
90.66666667,124.6666667,79.33333333,39.66666667,39.66666667,56.66666667,39.66666667,119,192.6666667,124.6666667,90.66666667,96.33333333,79.33333333,79.33333333,79.33333333,113.3333333,102,124.6666667,153,90.66666667,6,
38.63636364,46.36363636,30.90909091,54.09090909,30.90909091,54.09090909,46.36363636,54.09090909,30.90909091,146.8181818,170,77.27272727,92.72727273,38.63636364,30.90909091,30.90909091,108.1818182,108.1818182,131.3636364,92.72727273,6,
98.42105263,93.94736842,102.8947368,98.42105263,102.8947368,107.3684211,116.3157895,178.9473684,143.1578947,120.7894737,116.3157895,125.2631579,125.2631579,129.7368421,120.7894737,111.8421053,107.3684211,111.8421053,102.8947368,93.94736842,6,
21.25,42.5,42.5,42.5,42.5,42.5,77.91666667,134.5833333,191.25,127.5,148.75,113.3333333,155.8333333,155.8333333,134.5833333,134.5833333,141.6666667,134.5833333,177.0833333,77.91666667,6,
55,100,70,80,75,95,140,200,205,200,210,200,210,195,190,210,180,160,150,95,6,
34,85,85,85,76.5,76.5,76.5,76.5,59.5,110.5,93.5,102,93.5,119,76.5,110.5,119,187,170,119,6,
70.83333333,42.5,42.5,35.41666667,21.25,14.16666667,35.41666667,127.5,155.8333333,134.5833333,120.4166667,77.91666667,106.25,77.91666667,63.75,70.83333333,63.75,70.83333333,106.25,113.3333333,6,
45.76923077,65.38461538,52.30769231,39.23076923,52.30769231,32.69230769,65.38461538,124.2307692,130.7692308,117.6923077,124.2307692,117.6923077,130.7692308,130.7692308,104.6153846,104.6153846,104.6153846,78.46153846,85,91.53846154,6,
74.375,95.625,100.9375,79.6875,79.6875,148.75,175.3125,191.25,154.0625,138.125,132.8125,138.125,138.125,148.75,148.75,154.0625,175.3125,185.9375,164.6875,95.625,6,
204,25.5,25.5,25.5,25.5,72.25,63.75,68,38.25,93.5,80.75,76.5,55.25,68,59.5,68,25.5,25.5,38.25,191.25,6,
28.33333333,63.75,63.75,35.41666667,49.58333333,56.66666667,42.5,56.66666667,28.33333333,49.58333333,14.16666667,49.58333333,99.16666667,205.4166667,113.3333333,113.3333333,70.83333333,99.16666667,113.3333333,70.83333333,6,
85,100.9375,143.4375,138.125,100.9375,69.0625,132.8125,122.1875,180.625,132.8125,106.25,106.25,122.1875,111.5625,79.6875,122.1875,85,106.25,111.5625,79.6875,6,
115.3571429,151.7857143,103.2142857,85,109.2857143,48.57142857,30.35714286,133.5714286,188.2142857,133.5714286,121.4285714,97.14285714,85,72.85714286,72.85714286,109.2857143,97.14285714,121.4285714,163.9285714,97.14285714,6,
85,73.66666667,85,107.6666667,68,56.66666667,39.66666667,39.66666667,124.6666667,130.3333333,136,124.6666667,90.66666667,90.66666667,79.33333333,85,90.66666667,90.66666667,90.66666667,96.33333333,6,
85,127.5,63.75,42.5,42.5,42.5,42.5,85,127.5,127.5,106.25,85,85,85,85,85,85,85,170,85,6,
244.375,170,116.875,116.875,116.875,74.375,42.5,63.75,42.5,74.375,63.75,42.5,42.5,63.75,74.375,42.5,63.75,42.5,74.375,63.75,7,
6.071428571,224.6428571,218.5714286,48.57142857,36.42857143,24.28571429,30.35714286,12.14285714,42.5,36.42857143,36.42857143,48.57142857,36.42857143,30.35714286,60.71428571,60.71428571,60.71428571,60.71428571,30.35714286,30.35714286,7,
113.3333333,191.25,226.6666667,184.1666667,63.75,49.58333333,49.58333333,92.08333333,120.4166667,106.25,56.66666667,49.58333333,63.75,56.66666667,63.75,77.91666667,92.08333333,92.08333333,77.91666667,28.33333333,7,
226.6666667,226.6666667,28.33333333,56.66666667,39.66666667,56.66666667,39.66666667,56.66666667,39.66666667,51,39.66666667,39.66666667,39.66666667,39.66666667,51,39.66666667,51,39.66666667,51,51,7,
224.0909091,85,38.63636364,54.09090909,15.45454545,38.63636364,30.90909091,30.90909091,54.09090909,30.90909091,30.90909091,38.63636364,15.45454545,54.09090909,30.90909091,15.45454545,54.09090909,30.90909091,30.90909091,54.09090909,7,
242.25,93.5,89.25,85,106.25,93.5,102,102,110.5,110.5,110.5,106.25,119,114.75,114.75,123.25,119,123.25,119,127.5,7,
102,195.5,221,161.5,93.5,34,34,51,34,51,34,51,51,51,51,59.5,59.5,136,93.5,59.5,7,
210,220,215,205,220,60,85,60,80,75,85,80,90,95,110,115,125,115,100,65,7,
51,136,178.5,144.5,76.5,68,68,59.5,85,76.5,42.5,59.5,85,42.5,51,68,51,51,51,25.5,7,
52.30769231,130.7692308,176.5384615,98.07692308,45.76923077,45.76923077,19.61538462,19.61538462,26.15384615,26.15384615,26.15384615,26.15384615,39.23076923,39.23076923,52.30769231,39.23076923,52.30769231,65.38461538,85,45.76923077,7,
209.2307692,209.2307692,189.6153846,19.61538462,13.07692308,52.30769231,6.538461538,6.538461538,6.538461538,6.538461538,26.15384615,6.538461538,32.69230769,13.07692308,26.15384615,52.30769231,58.84615385,71.92307692,52.30769231,52.30769231,7,
170,228.8461538,222.3076923,202.6923077,137.3076923,104.6153846,85,104.6153846,85,196.1538462,202.6923077,176.5384615,137.3076923,98.07692308,98.07692308,111.1538462,111.1538462,111.1538462,104.6153846,78.46153846,7,
204,25.5,25.5,25.5,25.5,119,46.75,46.75,42.5,46.75,46.75,34,46.75,46.75,34,34,25.5,25.5,38.25,191.25,7,
72.85714286,212.5,212.5,54.64285714,30.35714286,36.42857143,36.42857143,42.5,12.14285714,18.21428571,12.14285714,18.21428571,12.14285714,30.35714286,36.42857143,42.5,36.42857143,48.57142857,30.35714286,0,7,
201.875,201.875,47.8125,180.625,47.8125,69.0625,69.0625,37.1875,37.1875,47.8125,31.875,53.125,58.4375,58.4375,53.125,63.75,69.0625,79.6875,79.6875,69.0625,7,
230.7142857,230.7142857,54.64285714,42.5,60.71428571,54.64285714,54.64285714,42.5,54.64285714,42.5,60.71428571,42.5,42.5,60.71428571,42.5,30.35714286,42.5,48.57142857,60.71428571,48.57142857,7,
206.4285714,206.4285714,48.57142857,42.5,36.42857143,30.35714286,30.35714286,12.14285714,30.35714286,24.28571429,24.28571429,36.42857143,48.57142857,60.71428571,42.5,54.64285714,54.64285714,66.78571429,54.64285714,48.57142857,7,
212.5,42.5,212.5,85,63.75,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,42.5,0,7,
170,180.625,127.5,127.5,127.5,127.5,127.5,106.25,148.75,106.25,127.5,106.25,106.25,106.25,106.25,106.25,106.25,106.25,180.625,170,8,
90,85,65,65,80,70,85,90,70,70,80,110,80,70,85,75,85,85,90,95,8,
66.78571429,97.14285714,103.2142857,121.4285714,115.3571429,103.2142857,97.14285714,115.3571429,109.2857143,133.5714286,115.3571429,97.14285714,133.5714286,103.2142857,157.8571429,151.7857143,163.9285714,194.2857143,145.7142857,97.14285714,8,
102,164.3333333,124.6666667,96.33333333,79.33333333,79.33333333,85,113.3333333,153,119,124.6666667,102,90.66666667,113.3333333,113.3333333,107.6666667,113.3333333,136,175.6666667,96.33333333,8,
72.85714286,72.85714286,72.85714286,36.42857143,85,72.85714286,24.28571429,72.85714286,85,127.5,72.85714286,85,36.42857143,60.71428571,72.85714286,60.71428571,60.71428571,97.14285714,121.4285714,97.14285714,8,
97.75,59.5,63.75,72.25,93.5,127.5,170,178.5,191.25,195.5,195.5,199.75,178.5,157.25,136,97.75,59.5,46.75,68,93.5,8,
85,45.76923077,71.92307692,111.1538462,104.6153846,78.46153846,58.84615385,65.38461538,65.38461538,183.0769231,183.0769231,130.7692308,156.9230769,143.8461538,143.8461538,143.8461538,130.7692308,137.3076923,130.7692308,104.6153846,8,
95.625,132.8125,148.75,143.4375,170,185.9375,201.875,175.3125,170,180.625,191.25,212.5,223.125,191.25,185.9375,191.25,148.75,170,164.6875,90.3125,8,
85,153,187,85,34,76.5,110.5,110.5,144.5,144.5,136,93.5,93.5,110.5,127.5,136,102,85,119,85,8,
63.75,70.83333333,77.91666667,56.66666667,85,63.75,70.83333333,99.16666667,85,92.08333333,113.3333333,70.83333333,106.25,77.91666667,56.66666667,77.91666667,63.75,56.66666667,56.66666667,63.75,8,
111.1538462,91.53846154,111.1538462,117.6923077,117.6923077,117.6923077,91.53846154,104.6153846,78.46153846,71.92307692,85,91.53846154,117.6923077,111.1538462,117.6923077,117.6923077,124.2307692,91.53846154,91.53846154,124.2307692,8,
78.92857143,151.7857143,157.8571429,151.7857143,157.8571429,163.9285714,170,163.9285714,139.6428571,115.3571429,133.5714286,163.9285714,151.7857143,182.1428571,139.6428571,157.8571429,157.8571429,151.7857143,157.8571429,91.07142857,8,
204,25.5,25.5,25.5,25.5,59.5,42.5,68,68,42.5,72.25,63.75,63.75,59.5,68,76.5,25.5,25.5,38.25,191.25,8,
0,148.75,191.25,127.5,116.875,85,85,95.625,79.6875,69.0625,63.75,69.0625,69.0625,69.0625,53.125,63.75,74.375,79.6875,31.875,0,8,
13.07692308,45.76923077,45.76923077,32.69230769,104.6153846,124.2307692,124.2307692,98.07692308,91.53846154,130.7692308,104.6153846,124.2307692,111.1538462,124.2307692,71.92307692,78.46153846,91.53846154,98.07692308,91.53846154,130.7692308,8,
103.2142857,157.8571429,133.5714286,103.2142857,85,85,103.2142857,109.2857143,133.5714286,157.8571429,115.3571429,109.2857143,103.2142857,78.92857143,78.92857143,103.2142857,109.2857143,115.3571429,163.9285714,97.14285714,8,
96.33333333,68,62.33333333,56.66666667,68,79.33333333,62.33333333,85,130.3333333,113.3333333,141.6666667,96.33333333,73.66666667,79.33333333,68,56.66666667,56.66666667,62.33333333,79.33333333,102,8,
63.75,170,106.25,85,85,85,106.25,106.25,85,63.75,85,85,106.25,85,85,106.25,85,85,148.75,106.25,8,
191.25,170,127.5,127.5,127.5,127.5,127.5,127.5,127.5,191.25,212.5,53.125,53.125,53.125,127.5,127.5,127.5,127.5,170,170,9,
85,79.6875,74.375,100.9375,79.6875,95.625,111.5625,111.5625,116.875,116.875,154.0625,37.1875,37.1875,42.5,58.4375,42.5,42.5,63.75,69.0625,95.625,9,
26.15384615,111.1538462,137.3076923,163.4615385,130.7692308,98.07692308,91.53846154,104.6153846,104.6153846,104.6153846,170,117.6923077,78.46153846,58.84615385,52.30769231,58.84615385,52.30769231,71.92307692,65.38461538,52.30769231,9,
96.33333333,141.6666667,107.6666667,90.66666667,79.33333333,96.33333333,113.3333333,113.3333333,113.3333333,107.6666667,130.3333333,192.6666667,130.3333333,28.33333333,45.33333333,39.66666667,51,79.33333333,136,102,9,
85,131.3636364,108.1818182,108.1818182,30.90909091,30.90909091,30.90909091,108.1818182,92.72727273,154.5454545,146.8181818,30.90909091,54.09090909,30.90909091,54.09090909,30.90909091,54.09090909,30.90909091,30.90909091,54.09090909,9,
85,93.5,85,102,119,119,114.75,114.75,131.75,127.5,131.75,165.75,182.75,102,106.25,97.75,97.75,106.25,93.5,89.25,9,
102,170,136,119,85,119,119,153,195.5,127.5,25.5,25.5,25.5,25.5,17,42.5,42.5,17,34,25.5,9,
95,150,155,185,200,195,195,200,210,210,215,210,200,175,75,65,80,55,90,65,9,
77.27272727,85,92.72727273,77.27272727,123.6363636,131.3636364,123.6363636,162.2727273,115.9090909,146.8181818,123.6363636,61.81818182,46.36363636,46.36363636,46.36363636,46.36363636,46.36363636,30.90909091,38.63636364,30.90909091,9,
85,155.8333333,99.16666667,70.83333333,77.91666667,63.75,63.75,70.83333333,77.91666667,77.91666667,113.3333333,162.9166667,113.3333333,35.41666667,35.41666667,35.41666667,49.58333333,77.91666667,127.5,85,9,
99.16666667,92.08333333,85,113.3333333,127.5,141.6666667,127.5,127.5,134.5833333,92.08333333,134.5833333,127.5,92.08333333,42.5,42.5,42.5,42.5,42.5,42.5,42.5,9,
97.14285714,157.8571429,133.5714286,170,151.7857143,157.8571429,170,176.0714286,206.4285714,248.9285714,206.4285714,194.2857143,97.14285714,103.2142857,85,91.07142857,78.92857143,78.92857143,85,60.71428571,9,
204,25.5,25.5,25.5,25.5,59.5,51,76.5,68,63.75,63.75,85,46.75,68,51,68,25.5,25.5,38.25,191.25,9,
85,157.8571429,145.7142857,115.3571429,103.2142857,121.4285714,91.07142857,133.5714286,121.4285714,85,24.28571429,30.35714286,12.14285714,30.35714286,36.42857143,24.28571429,24.28571429,66.78571429,85,48.57142857,9,
78.46153846,111.1538462,111.1538462,117.6923077,98.07692308,111.1538462,117.6923077,130.7692308,124.2307692,209.2307692,196.1538462,98.07692308,52.30769231,65.38461538,65.38461538,65.38461538,71.92307692,91.53846154,71.92307692,58.84615385,9,
103.2142857,151.7857143,121.4285714,97.14285714,109.2857143,91.07142857,85,85,115.3571429,103.2142857,139.6428571,176.0714286,121.4285714,48.57142857,60.71428571,103.2142857,103.2142857,103.2142857,139.6428571,103.2142857,9,
85,85,73.66666667,85,85,79.33333333,90.66666667,90.66666667,102,113.3333333,96.33333333,136,39.66666667,28.33333333,45.33333333,90.66666667,90.66666667,90.66666667,73.66666667,79.33333333,9,
85,127.5,106.25,85,127.5,85,85,85,85,85,106.25,148.75,127.5,42.5,42.5,42.5,42.5,63.75,148.75,106.25,9,
74.03225806,68.5483871,63.06451613,57.58064516,85,95.96774194,101.4516129,109.6774194,93.22580645,90.48387097,87.74193548,106.9354839,82.25806452,227.5806452,131.6129032,79.51612903,52.09677419,63.06451613,93.22580645,74.03225806,4,
38.38709677,32.90322581,43.87096774,52.09677419,104.1935484,112.4193548,68.5483871,87.74193548,109.6774194,120.6451613,115.1612903,153.5483871,115.1612903,106.9354839,101.4516129,101.4516129,95.96774194,93.22580645,123.3870968,65.80645161,8,
107.173913,162.6086957,110.8695652,96.08695652,92.39130435,88.69565217,59.13043478,44.34782609,48.04347826,55.43478261,62.82608696,55.43478261,66.52173913,66.52173913,73.91304348,73.91304348,66.52173913,59.13043478,243.9130435,255,2,
214.2,214.2,153,30.6,30.6,30.6,163.2,190.4,112.2,71.4,71.4,61.2,61.2,61.2,54.4,54.4,68,68,85,91.8,5,
51,68,51,51,51,96.33333333,90.66666667,96.33333333,102,113.3333333,243.6666667,85,34,56.66666667,34,11.33333333,22.66666667,39.66666667,17,22.66666667,4,
60.71428571,72.85714286,133.5714286,139.6428571,72.85714286,103.2142857,78.92857143,78.92857143,103.2142857,163.9285714,194.2857143,157.8571429,121.4285714,103.2142857,127.5,139.6428571,133.5714286,115.3571429,109.2857143,133.5714286,8,
71.57894737,93.94736842,98.42105263,143.1578947,183.4210526,125.2631579,102.8947368,85,76.05263158,80.52631579,80.52631579,71.57894737,71.57894737,85,93.94736842,174.4736842,174.4736842,76.05263158,228.1578947,228.1578947,2,
58.15789474,58.15789474,67.10526316,76.05263158,98.42105263,102.8947368,107.3684211,120.7894737,125.2631579,138.6842105,147.6315789,129.7368421,152.1052632,237.1052632,58.15789474,143.1578947,232.6315789,85,98.42105263,98.42105263,4,
240.8333333,236.1111111,240.8333333,217.2222222,217.2222222,70.83333333,89.72222222,66.11111111,75.55555556,89.72222222,85,94.44444444,89.72222222,103.8888889,94.44444444,94.44444444,113.3333333,118.0555556,70.83333333,33.05555556,7,
97.75,165.75,119,91.375,44.625,46.75,51,44.625,123.25,159.375,114.75,99.875,63.75,89.25,91.375,112.625,131.75,133.875,159.375,76.5,5,
26.30952381,95.11904762,167.9761905,194.2857143,135.5952381,95.11904762,99.16666667,117.3809524,115.3571429,117.3809524,196.3095238,137.6190476,93.0952381,70.83333333,48.57142857,72.85714286,56.66666667,78.92857143,58.69047619,36.42857143,9,
138.5185185,81.85185185,56.66666667,59.81481481,59.81481481,56.66666667,44.07407407,125.9259259,72.40740741,28.33333333,31.48148148,31.48148148,15.74074074,15.74074074,28.33333333,44.07407407,44.07407407,78.7037037,135.3703704,100.7407407,5,
92.72727273,113.3333333,74.6969697,64.39393939,72.12121212,66.96969697,82.42424242,95.3030303,72.12121212,69.54545455,110.7575758,100.4545455,90.15151515,72.12121212,77.27272727,64.39393939,54.09090909,79.84848485,133.9393939,110.7575758,8,
78.2,22.1,10.2,10.2,45.9,59.5,47.6,54.4,39.1,49.3,61.2,47.6,37.4,42.5,51,59.5,10.2,13.6,20.4,78.2,8,
78.2,22.1,10.2,10.2,45.9,66.3,54.4,54.4,54.4,49.3,66.3,69.7,25.5,39.1,47.6,54.4,10.2,13.6,20.4,78.2,9,
78.2,22.1,10.2,10.2,45.9,64.6,44.2,44.2,28.9,27.2,30.6,28.9,28.9,30.6,68,85,10.2,13.6,20.4,78.2,2,
142.6785714,194.2857143,160.8928571,100.1785714,103.2142857,81.96428571,85,85,60.71428571,51.60714286,69.82142857,78.92857143,94.10714286,57.67857143,63.75,112.3214286,127.5,115.3571429,60.71428571,30.35714286,8,
113.3333333,210.4761905,198.3333333,85,56.66666667,60.71428571,129.5238095,170,178.0952381,68.80952381,56.66666667,52.61904762,48.57142857,32.38095238,64.76190476,85,76.9047619,89.04761905,64.76190476,32.38095238,5,
31.48148148,75.55555556,107.037037,94.44444444,85,88.14814815,40.92592593,28.33333333,25.18518519,28.33333333,28.33333333,28.33333333,40.92592593,31.48148148,34.62962963,122.7777778,176.2962963,198.3333333,160.5555556,75.55555556,2};

void recognize_KNN (double *dig_feat, int k, double *result) {
	// train set size
	int train_size = sizeof (data)/sizeof(double)/(FEAT+1);
	double* dist = new double[train_size];
	
	// coompute distances
	for (int i = 0; i < train_size; ++i) {
		dist[i] = 0;
		for (int j = 0; j < FEAT; ++j) {
			// check
			double diff = data[i*(FEAT+1)+j]-dig_feat[j];
			dist[i] += diff*diff;
		}
		dist[i] = sqrt (dist[i]);
	}
	double* value = new double[k];
	int* position = new int[k];
	// add first k
	for (int i = 0; i < k; ++i) {
		// add to last
		value[i] = dist[i];
		position[i] = i;
		int prev = i-1;
		// shift so than min is at 0
		while (prev >= 0 && value[prev] > value[prev+1]) {
			double prev_val = value[prev];
			int prev_pos = position[prev];
			value[prev] = value[prev+1];
			position[prev] = position[prev+1];
			value[prev+1] = prev_val;
			position[prev+1] = prev_pos;
			--prev;
		}
	}
	
	// now go throught all of the train set dist
	for (int i = k; i < train_size; ++i) {
		if (dist[i] >= value[k-1]) continue;
		value[k-1] = dist[i];
		position[k-1] = i;
		// shift to the right position
		int prev = k-2;
		// shift so than min is at 0
		while (prev >= 0 && value[prev] > value[prev+1]) {
			double prev_val = value[prev];
			int prev_pos = position[prev];
			value[prev] = value[prev+1];
			position[prev] = position[prev+1];
			value[prev+1] = prev_val;
			position[prev+1] = prev_pos;
			--prev;
		}
	}
	
	for (int i = 0; i < k; ++i) {
		double del = value[i];
		if (!del) del = 1;
		result[(int)data[position[i]*(FEAT+1)+FEAT]] += 1/del;
	}
	delete[] value;
	delete[] position;
	delete[] dist;
}