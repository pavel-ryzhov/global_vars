#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.186695,-0.14687,0.513772,-0.431998,0.222773,0.228217,-0.0697412,-0.190808,0.730488,0.332641,0.16267,-0.0854552,-0.718897,0.325916,-0.606399,0.228572,-0.172856,-0.585159,-0.199632,-0.0494132,-0.0640021,0.245879,-0.43844,0.122512,0.042825,-0.117237,-0.417085,-0.220459,0.279924,-0.148967,0.386001,-0.0563291,0.412139,-0.295557,-0.139675,0.909536,0.277946,-0.241603,1.43217,0.321608,0.18122,-0.335522,-0.789835,-0.233731,-0.256692,0.333132,-1.03707,-0.620931,-0.046875,0.0970601,-0.145289,0.506795,-0.183593,-0.155051,0.368453,-0.100069,-1.04133,-0.275424,-0.409331,-0.0241248,0.233167,0.766665,-0.836754,0.223512,-0.185085,-0.0738933,0.199011,0.216787,-0.0959203,-0.0075021,-0.42776,-0.73906,0.333441,-0.0820242,0.694826,-0.307726,-0.340137,0.677642,0.0329463,-0.258693,-0.261801,0.445914,-0.215759,0.0290898,-0.169211,-0.478164,-0.183101,0.287635,-0.240191,0.682785,0.0576924,-1.28979,0.708316,-0.131417,-0.114539,0.0897377,0.225497,0.286904,-0.0400155,-0.00316711,0.331875,1.11357,-0.866256,-0.181964,-0.3442,-0.143646,0.15978,-0.515421,0.0598167,0.230192,0.373501,0.322252,0.115462,-0.0117873,0.0112247,0.654895,0.0888481,-0.268325,0.168807,-0.73546,-0.0939873,-1.19215,1.36412,-0.38076,0.112196,0.153914,0.547812,0.312541,1.2821,-0.0691688,0.372673,1.4154,-1.01339,0.26164,-0.874647,0.390405,0.0925193,-1.1665,-0.310564,-0.155587,0.60623,0.211857,-0.00482402,0.187223,0.567839,0.406098,-0.249372,-0.328248,0.555164,-1.15889,0.499753,0.254276,0.657789,0.0453238,0.00431318,0.483327,0.0581825,-0.326694,0.990492,0.148126,-0.0382968,-0.779839,-0.576442,0.364523,0.0235327,0.264455,0.572601,-0.503157,-0.13034,-0.128473,-0.401437,0.105068,-0.680123,0.621028,0.196739,0.0452389,-0.468356,-0.00941757,-0.282774,0.695504,0.571508,0.603016,-0.171593,0.12774,0.0202817,0.932172,0.465201,-0.135938,0.878097,-0.0563638,-0.714779,-0.586272,-0.547062,-0.253745,-0.0103043,0.062914,-0.272499,-0.131526,-0.368564,-0.478941,-0.685135,0.571631,-0.665664,0.0965999,0.478046,-0.0944162,-0.468359,-0.340555,-0.409913,1.09892,0.604894,-0.00989235,-0.125547,0.0245438,0.257002,-0.40805,-0.0200349,0.297571,0.624187,0.451392,0.120346,0.194348,-0.35282,0.556795,-0.07853,-0.0588248,-0.206685,-0.0472777,-0.172994,0.181361,0.381841,0.189234,-0.11734,0.527164,-0.26886,-0.280218,-0.549849,0.0164769,0.235791,0.153006,0.300567,-0.3749,-0.31934,-0.0424707,0.240324,-0.121621,0.0314089,0.0199866,0.194481,0.285823,0.255338,-0.0885137,-0.331226,0.329283,0.376844,0.0570118,0.140096,0.371205,-0.210613,-0.175439,0.143312,0.116522,0.224844,0.263811,0.00697499,-0.249712,-0.10775,0.315641,-0.15406,-0.147937,-0.310206,-1.08626,1.8842,-0.671669,0.54156,-0.0148283,0.146357,-0.416455,0.619563,-0.0463305,-0.132331,0.498483,-0.712875,0.302579,-0.806451,0.600894,1.28855,-1.68462,-0.248146,-0.582404,-0.429218,-0.252735,-0.641909,0.294858,0.080694,0.607619,0.387381,-0.487395,0.5583,-0.604562,0.799565,0.810362,-0.989645,0.266236,-0.423536,0.152005,-0.072687,-0.4767,0.190895,0.0917598,-0.596232,-0.415867,0.258107,-0.142074,0.56403,-0.419704,-0.0228208,0.390363,-0.312635,0.209447,-0.283163,0.420303,-0.530389,0.495515,-0.314014,-0.0443538,-0.249712,0.187519,-0.496603,1.28711,0.146047,0.278153,-0.86371,0.400829,-0.446757,-0.21117,0.195959,-0.0445074,0.35937,-0.457594,0.0719033,-0.0250991,0.205739,-0.257156,-0.292393,0.0649993,-1.17146,-0.217257,-0.563051,-0.102235,0.127987,0.533403,0.38907,0.272582,0.166092,0.143169,-0.620976,-0.125089,-0.0890152,-0.495781,-0.16048,-1.07736,-0.589549,0.0903322,0.497945,-0.0784309,-0.266305,-0.082175,-0.964868,0.0722418,0.993307,0.798574,-0.457711,0.523228,-0.561975,0.9822,-0.93073,-0.297809,-0.354967,0.259351,0.402298,0.425368,1.16439,0.459465,0.121527,-0.37953,-1.07425,0.503903,0.502338,-1.41952,-0.207191,0.393308,-0.240933,-0.599423,1.23865,0.304524,-0.775884,-1.20159,-1.15903,0.819447,-0.0947961,-1.41799,-0.179302,0.923112,0.739293,0.866498,0.717954,0.453809,0.459311,0.119652,-1.0491,-0.659795,-0.121042,0.00226937,-0.311658,-1.07254,0.0376245,0.636613,0.425749,0.784143,0.208892,0.943378,-0.759684,-0.612477,0.454443,-0.46501,-0.156877,-0.823681,-0.736201,0.531488,-0.380248,-1.04301,0.74567,0.243689,0.336803,0.369898,0.446622,0.252646,-0.248019,-0.274976,-0.640156,-0.0218978,-0.354659,0.0328932,-0.658575,-0.353197,-0.0102347,0.378854,0.225903,0.690595,0.249953,0.662415,-0.4648,-0.335773,-0.852982,-0.615858,-0.21631,0.0885912,0.575448,0.462908,0.542799,-0.834879,0.555301,0.393659,0.168967,-0.501168,-0.775838,0.0444777,-0.0322382,0.13979,0.746074,0.0741408,-0.480404,0.556205,-0.262747,-0.190024,0.168416,0.125809,-0.466115,-0.0724058,0.243458,-0.120592,-0.567959,0.753447,-1.7082,-0.0786958,0.509309,1.02822,0.803738,-1.06097,-0.252287,1.0708,0.0265061,-0.548182,-0.337536,-1.14286,-0.515591,0.0288539,-0.933243,-0.0533899,1.01514,0.0011283,-0.0329936,0.246422,0.572726,0.975069,0.40409,-0.750813,-0.726723,-0.519114,-0.148966,-0.522483,-0.594491,0.418421,0.0847044,0.211127,-0.498875,0.414875,-0.84001,-0.489387,-0.645949,0.566793,-0.640858,-0.198032,0.247151,-0.12152,-0.190217,0.470811,-0.357065,0.0940025,0.174682,-0.0444846,0.388255,-0.19925,-0.25949,0.0544685,-0.249236,-0.336514,0.0229629,0.008129,-0.0189887,0.833043,-0.133482,-0.168603,0.430223,0.39598,-0.34945,-0.258328,-0.605686,-0.0595784,-0.913814,-0.437035,-0.427355,0.362037,0.473897,0.302807,0.582593,0.361338,-0.352607,-0.375071,-0.418078,-0.21707,-0.497633,-0.307059,0.190312,-0.426275,0.168282,-0.392917,0.18228,0.984283,0.437693,2.35019,-2.04535,-0.482907,0.152377,-0.284708,-0.112109,-0.670629,-0.673628,0.926598,-0.459052,-1.90718,1.14366,0.855701,1.17969,0.155186,-0.860545,1.56277,-0.138242,-0.267862,-0.612506,0.438288,-0.393496,0.178283,-0.23808,-1.51725,-0.484052,0.843084,0.118577,1.45072,-1.54138,0.120762,1.55814,-0.0803588,-1.06697,-1.20147,0.861254,0.971989,1.02679,-0.0249341,2.54497,-0.432164,0.932575,1.0564,-0.626596,-0.334621,-0.832466,-1.28016,0.678917,-0.673198,1.94121,-1.03595,1.07545,0.314291,0.931408,-0.033826,0.312331,0.931321,-0.615351,-3.17169,0.122745,-0.223028,0.143265,0.272802,-1.29833,-0.847434,0.233637,1.63939,1.15558,-0.389519,-0.585544,1.19062,-0.0173352,-0.291144,-0.0340813,-2.24601,-0.342184,0.539327,-0.439561,-0.236912,1.81664,-0.312059,-0.783375,0.154627,0.11448,0.612616,1.29128,-1.07479,-0.834937,-0.479728,0.836626,-1.11991,-0.0926198,1.28997,-0.00145378,-0.0491578,-1.2273,-0.176212,-0.8667,-0.593322,-0.261736,0.979253,-0.433328,-0.602189,0.00432156,0.00840003,1.23378,-0.334359,0.361469,1.03039,0.187798,-0.0139056,0.198342,0.747612,-1.13917,0.778409,0.371928,-0.182915,-0.335203,0.778617,0.12944,-0.0779378,0.842456,-0.280209,-0.0531188,-0.227644,0.850369,0.695841,0.376118,0.258332,0.254847,0.459576,0.723014,-0.892255,-0.0081849,-0.00540412,0.699286,-0.199579,0.117272,-0.425862,0.187912,0.573131,-0.100648,0.187402,0.294045,0.833117,-0.261726,-0.241504,0.216102,0.0120502,-0.0479276,1.69278,-1.36516,-0.632913,-0.227504,-0.702305,0.0595349,0.0629267,0.438952,1.22502,0.725721,-1.28445,0.443439,1.61031,0.331516,0.0447267,-1.53844,0.659034,0.08256,-0.248777,0.867807,0.129271,0.0290942,0.24474,0.169193,-1.86394,-1.04118,0.843316,0.202263,-0.189598,-2.26602,-0.132432,1.72141,0.654647,-0.577047,-0.892124,-0.256495,1.29065,-1.22613,-1.3768,0.0843952,0.237861,1.32037,0.889066,0.690797,-0.833937,2.3162,-0.145459,0.634682,-1.06607,0.434291,-2.4497,0.34414,-0.717513,0.624989,0.324768,2.55363,0.237227,-0.303096,-1.68499,0.344986,-0.132961,0.203512,-0.827124,-0.314938,-1.24703,-0.687735,0.553021,-0.00213383,0.796264,-1.17242,0.478368,0.444898,0.189785,0.207859,-2.401,1.05181,0.511049,-0.124732,0.225799,0.922391,-0.816485,-1.79087,-0.0557991,-1.32862,0.346544,2.35543,-1.04315,-0.108645,1.16126,0.66956,0.112984,-0.40438,-0.136533,-0.595469,-0.646262,-0.939922,0.609222,0.892282,0.860003,-0.495633,0.543996,-0.454426,0.268748,0.136236,-1.26592,0.270865,-0.117696,0.194859,1.1204,0.920763,-0.411913,-0.928806,0.319283,-0.648564,-0.147921,0.782375,-0.956753,0.0398537,0.767407,0.493726,-0.249362,0.425015,0.345459,-0.414665,0.407583,0.607104,-0.0624535,0.46521,-0.140367,0.390307,0.278302,-0.0231408,-1.26871,-0.076359,-0.100389,0.0108241,-0.156997,0.575706,0.579712,0.0112382,0.450933,0.0371906,-0.100998,0.179329,0.505671,-0.125248,-0.112561,-0.437837,0.17103,0.30965,-0.811386,0.29441,0.719193,-1.05398,0.56734,-0.715798,-0.647511,0.50879,-0.157246,0.509304,0.290023,-0.905368,0.480734,-0.0236991,-0.346199,-0.589872,-0.43301,0.763191,1.11722,0.876165,-0.0363429,-0.0159678,-0.0813513,0.176996,-0.426354,-0.372583,-0.0628367,-1.09462,-0.401434,-1.28511,0.0550546,0.926406,1.20409,-0.779709,0.100055,-0.144954,0.960306,-1.63115,-1.77192,-1.31248,0.974448,1.20466,0.0204126,0.924014,-0.882206,2.52594,0.329735,-0.0341098,-0.90758,-0.0753279,-1.94806,-0.34715,-0.323407,0.179206,0.845509,2.59285,-0.476469,-0.361691,0.302168,-0.535051,-0.161289,0.271506,-0.44851,0.2542,0.604322,-0.354458,-0.213805,-0.657599,-0.189396,-0.826522,-0.259507,-0.269066,0.570416,-0.0751939,-0.0437037,0.662763,0.294028,-0.0805541,-0.117678,-0.61125,-0.607111,0.0389937,-0.559357,-0.0687839,-0.660624,0.852131,0.176369,0.670155,0.182615,-0.232583,0.256725,0.321844,-0.891924,0.987478,-0.370486,-0.138368,1.28434,0.890547,1.08771,-0.412412,0.342775,-0.450103,1.54352,0.106594,-0.414771,-0.551301,0.732081,0.445806,0.387468,0.910887,-0.166406,-0.00404154,-0.368069,0.232226,-1.35263,0.23641,-0.28797,1.35163,-0.223609,-0.206059,-1.3082,-0.0799282,0.254016,-0.122678,0.392494,-0.626866,-0.289524,-0.0191723,-0.738454,-0.28217,1.0547,-1.21955,-0.114274,-0.470398,-0.469107,-0.344999,-0.106128,-0.137114,0.527968,0.377994,0.0773881,0.142463,-0.365126,0.121668,0.0921194,0.101475,-0.465717,0.0131524,-0.643614,0.463654,-1.0622,0.71266,1.56873,-1.09199,1.9904,-0.722287,-1.22891,0.0303784,-1.09221,0.21634,0.432883,-1.19336,-0.553973,0.30618,-0.0196205,-0.245988,-0.242662,1.21794,1.81686,-0.0123429,-0.0170226,0.313972,0.115319,0.422118,-0.111649,-0.0406672,-0.0327785,-1.51893,0.226271,0.179429,-0.0152372,0.0287248,0.539899,-0.542803,0.569842,0.432477,-0.044392,0.424567,-0.610769,-0.260358,0.105053,0.00921708,-0.856253,-0.124097,0.116069,-0.315032,0.104723,-0.403408,-0.0745699,-0.0347805,0.024219,-0.0426845,0.150716,0.499479,0.4173,-0.0262001,-0.273767,-0.753851,0.263654,-0.718462,1.59835,-0.220004,-0.5438,-0.0950476,-0.602448,0.954523,0.270235,-0.229656,0.020583,0.744526,-1.74541,1.82515,-0.845012,-0.13773,0.791472,0.193218,-0.182494,-0.643554,-1.62926,-0.985133,-0.197105,0.508449,0.144731,0.411868,0.342165,-0.384037,0.909184,0.288703,0.0253959,-0.343137,0.515981,0.276918,-0.843217,1.21761,-0.0049138,0.0349187,0.298308,0.568855,0.769946,0.357864,-0.763147,-0.101799,1.03612,-0.583626,0.984934,-1.1181,0.0480528,0.0781776,-0.0700168,-0.0105935,0.281774,0.305212,-0.185497,0.559592,-1.46747,-0.741055,0.362467,1.1886,-0.810372,-0.166018,0.00546331,-0.26783,-0.0388208,0.0911609,0.0283039,-0.576077,-0.391093,-0.298259,-0.00512468,-0.118339,-0.259934,-0.461915,0.165925,0.250662,-0.114646,-0.158849,0.25359,0.486007,0.137329,-0.18932,-0.157766,0.447868,-0.272568,-0.122994,-0.412763,-0.0686714,0.312942,0.0372644,-0.226045,0.0106466,-0.0303374,0.209301,0.60134,-0.692121,0.482539,0.499471,-0.36261,-0.1442,-0.903394,-0.148979,-0.205464,0.255492,-1.42049,0.352114,0.110989,0.222854,0.0433089,0.197938,0.135815,-0.309874,0.141397,0.0969086,0.0250897,0.0925523,0.48994,-0.0136066,-0.0777444,-0.947027,0.423606,0.209443,0.685452,-0.6386,0.360045,0.255817,0.234593,0.424204,0.00602811,-0.0253732,0.117932,0.288361,-0.889407,0.586923,-0.951516,0.291441,0.275898,-0.409058,0.522307,-0.0301117,-0.11025,-0.450467,0.650051,0.482394,-0.0535527,-0.0633633,0.298916,-0.959075,0.38728,-0.385363,0.768885,0.391417,0.395987,-0.865384,0.890419,-0.995169,-0.0383081,0.841015,0.149592,-0.492794,-0.954072,0.771707,-0.204908,1.31118,-1.54081,-0.0935954,0.743165,0.141211,-0.552983,-0.616405,-0.540441,-0.39694,0.65922,0.736965,0.623441,0.142893,1.10202,-0.93839,0.287061,-1.00745,0.166226,-0.342947,-0.273556,0.187453,0.303757,0.631362,0.307848,0.381979,0.169283,-0.813296,-0.254534,0.819311,-0.321185,0.0899191,-0.424579,-0.380065,1.13636,-0.114035,-0.494523,-0.094818,-0.179606,-0.633357,0.430504,0.675797,0.334149,0.181088,0.351742,-0.753274,0.406064,0.0997229,-0.718004,-1.02335,-0.72728,-0.396146,-0.0937909,0.516643,-0.734751,-0.231265,0.487467,-0.827302,0.140389,0.779781,0.473963,-0.00485613,0.359011,0.148219,0.0611591,-0.32875,-0.0114439,0.592977,-0.046455,0.588884,-0.242088,0.96198,-0.40954,-0.210453,-0.531811,-0.226813,0.615034,0.434424,-1.31985,-0.265548,-0.128146,-1.04649,-0.243325,0.226261,-1.037,0.336538,0.254284,-0.960895,-0.104275,0.289951,1.1357,0.676388,-0.635747,0.0275775,0.300244,-0.229002,0.227216,-0.133805,-0.373159,0.086348,0.497283,0.504677,0.00624948,-0.64273,0.364923,-0.328905,0.0130658,0.642737,-0.336255,0.0847414,0.364297,-1.10633,-0.62784,1.01821,-0.780667,0.195082,0.179927,-1.25566,0.825243,0.524785,-0.837731,0.654946,-0.237674,-0.0100521,0.856867,-0.743251,0.589404,0.301108,-0.187538,-0.62367,0.923753,1.07846,-0.134337,-0.749271,-0.498067,-1.34553,0.880712,0.789925,-0.0636104,0.6373,-0.0669085,-0.801146,0.349555,0.140628,0.0992853,0.165577,-0.167581,-0.80542,0.0221148,0.462893,-0.197675,0.165731,-0.659598,0.122685,0.774773,-0.149573,0.0640231,-0.0659229,0.233043,-0.598337,0.86571,0.538505,0.518865,-0.357359,0.542379,-0.874822,0.289544,-0.235776,0.690151,-0.0446224,0.0217353,-0.0593605,0.968099,-0.101426,0.158458,0.161334,0.302553,-0.835916,-0.54827,0.125365,-0.199178,0.432953,-0.357919,0.624253,0.280723,0.615073,-0.0169989,0.208815,-0.289984,-0.402589,-0.0094753,0.130985,0.0794072,0.29336,0.132375,0.0150036,0.238072,-0.329582,0.25355,-0.59649,-1.24329,-0.152089,-0.410715,0.973313,-0.840755,-0.117541,0.719688,-1.01917,0.508219,0.3834,1.88659,0.0135621,0.256832,-0.334806,0.284284,0.0307371,0.129479,0.662534,0.300404,0.913917,0.068513,0.87023,-0.535377,-0.623282,-0.0056496,0.328689,-0.0849463,1.40982,-1.10266,-0.312109,-0.57678,-0.672301,-0.465176,1.03979,-1.17687,-0.15156,0.41424,-1.01522,0.862125,0.892484,0.881632,0.385435,0.362433,-0.111714,0.589058,-0.560976,0.392902,0.204664,-0.111378,0.36326,0.368511,1.07794,-0.317073,-0.684252,-0.166226,-0.332495,0.544058,1.16267,-0.906314,-0.308051,0.543454,-0.93264,0.874367,-1.16463,-0.0202952,0.274289,0.0794004,0.136472,-0.332161,0.238332,0.040147,0.853357,-0.570943,0.581543,-0.484609,0.125077,0.296752,-0.224946,-0.240133,0.439153,-0.27656,0.319149,0.304083,0.264264,0.809536,0.25736,0.164851,-0.741521,-0.121334,-2.61538,0.402286,-1.24855,0.618619,-1.62694,-0.198116,-2.72743,0.252668,1.22108,1.28178,2.46881,-3.96712,1.66184,-0.432817,-1.42407,-1.5515,-1.95518,-0.0311408,0.153573,1.62751,-1.42981,-2.72345,-2.2143,-1.27925,1.47594,0.111023,1.6286,2.99538,-2.65029,-1.77359,0.915162,-1.45148,-2.46781,2.1817,-1.28439,0.63711,0.39351,-2.3086,0.874176,-0.945622,-1.32591,1.5351,1.94178,-0.550119,0.845312,-2.71925,-1.70315,1.60269,-1.66767,-2.41455,-1.01739,-1.69403,-2.19078,3.21397,-0.119943,1.42708,-2.23335,0.883775,-0.398739,-1.13147,-0.886332,-1.78198,0.910467,-1.66125,-1.83983,1.41023,-0.0213086,0.0975211,-0.688897,-1.04457,0.303052,-1.19714,-0.376812,-3.6024,0.25933,0.855357,0.539368,-1.77283,1.37519,-0.865134,-1.60981,-1.50113,-2.15404,-2.2638,0.161794,2.80962,-1.42192,1.76371,-0.91641,2.59225,-2.14801,1.12541,0.754667,-1.84439,0.292775,-2.27251,-1.63979,0.641672,-1.88807,1.80899,-0.0931948,0.51764,-0.140824,-0.879752,-2.22684,0.803067,1.28187,-1.35555,-3.89288,-0.0177042,-2.74727,2.43181,-2.83713,-2.59183,0.916319,0.93209,0.697529,-1.65541,1.62126,-1.98456,1.0902,-2.2983,2.25076,-1.26935,-2.83974,-2.02591,1.31813,-1.54324,0.106124,-0.211839,2.18834,1.0293,-1.37594,-1.67628,1.48969,-1.75532,-2.36962,0.954193,-2.27526,0.374412,0.980575,-2.28202,-0.0193586,0.673945,-0.0944363,-1.57039,-1.00781,-1.7492,0.691016,0.230794,0.0392641,1.13263,0.521578,1.83479,-2.36303,0.199995,-0.990965,1.53192,-2.91417,-2.36581,-0.370476,-2.59894,-1.11944,-0.320305,0.757922,-4.14953,2.09038,0.778348,1.34838,-3.14802,0.433867,-0.694582,1.39453,0.0353272,0.374565,-0.904993,-3.05355,-2.17952,0.980882,-0.0277498,-0.54778,-0.735584,-0.663728,0.389757,1.40563,-1.1381,0.0217543,-1.21182,-2.21129,0.0414448,-2.25576,0.750403,-2.54156,1.70522,0.763067,-0.354144,-1.62227,-1.06221,-0.672433,0.807729,0.104352,1.07083,-2.10678,-3.44829,0.489135,1.01337,0.0419262,-1.8141,-0.441692,1.69941,-2.66907,1.62228,0.760133,0.464428,-1.99337,1.45672,-2.07545,-0.266075,0.0313666,-0.204865,0.539212,1.17814,0.47592,0.121201,-1.05294,0.733306,0.304589,-2.58775,-2.32308,-2.24029,-0.510672,-0.22027,-1.12132,-0.341077,-2.47249,-0.511059,-0.625396,0.0419764,0.0453215,0.805896,1.0864,-1.82864,-1.2622,-0.362353,-0.583762,1.89797,-0.163874,0.53205,-1.1926,-0.735699,-2.67763,-0.812083,-0.854852,-0.93042,-1.88494,-0.202857,2.24635,-0.639051,1.5865,-1.80335,0.274218,-3.15725,-1.39806,-2.40344,2.71667,-3.59822,1.23205,-0.260194,1.08645,-1.02123,1.26407,0.0100337,1.52553,0.67194,-1.57127,-0.59721,-0.738225,-0.521541,-2.63599,-0.384306,-1.36341,1.5416,1.34457,-2.47552,1.07868,-1.27937,-1.4541,0.923144,-1.19028,-2.08451,-2.22135,-2.0082,-0.127645,2.15459,-0.544998,-2.73203,-2.54276,0.333032,3.53969,0.874227,0.62977,0.803184,1.04815,0.410119,0.562331,0.597253,0.966223,0.591993,0.616484,0.781674};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] == B : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0] - 1, points.back() + 1, &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }

    // Delete strange pieces
    for (int i = numbers.size() - 1; i >= 0; --i) {
      size_t height = numbers[i].size();
      if (height < 5) {
        numbers.erase(numbers.begin() + i);
      }
    }

  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
