#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.339829,0.464537,0.138272,0.0370386,0.257551,-0.149237,0.370439,-0.0476889,0.174399,-0.230328,-0.0968253,-0.281857,0.418682,0.59953,0.00425003,-0.272279,0.0910347,-0.0208171,0.0451665,-0.235229,-0.544425,-0.310467,0.372319,0.521632,0.427041,-0.559899,0.0481847,-0.528897,-1.11798,0.540835,-0.358126,0.741937,0.191048,-0.189396,0.139055,-0.487158,-0.0356086,0.158313,-0.880633,-0.194793,-0.355907,-0.0604196,-0.201805,0.513266,-0.356537,-0.321212,0.729324,0.785546,-0.802724,-0.372319,-0.191837,-0.271527,0.62354,0.937876,0.210472,-0.509901,-0.60381,-0.337236,-1.29225,1.15648,-0.586913,-0.0686788,0.339324,-0.232271,0.0598723,0.297329,-0.717433,0.136172,-0.386532,-0.4731,-0.394025,0.156834,0.214771,0.116444,0.274786,-0.0107246,0.895636,0.528874,-0.115418,-0.631565,0.108195,0.932868,-0.0284969,0.00697859,0.713819,0.3345,-0.745108,-0.247808,-0.0637791,0.398412,-0.185189,0.460641,0.607685,-0.0227162,0.0478355,-0.269464,0.198514,-0.682381,0.0366363,0.501229,0.00894391,-0.0758643,-0.0651305,0.708223,0.498451,0.580034,-0.449469,-0.106816,0.465488,0.2503,-0.602587,-0.261874,0.860048,0.451172,0.0256105,-0.0679447,0.247484,-0.272272,-1.07562,-0.823328,0.636092,0.407542,0.2505,0.239487,-0.246391,-0.814243,1.46826,-0.446618,0.469974,0.793834,0.342288,-0.255769,0.763553,1.12818,-0.355221,0.137048,-1.22235,0.039507,1.20277,0.168932,-0.969759,-1.50716,0.915187,0.637575,-0.76781,-1.38033,1.22557,0.104582,-1.60367,0.485431,-0.355102,0.164072,0.0522033,-0.343676,0.376998,0.738752,-0.382712,-0.0525266,0.0618807,-0.369427,-0.403786,0.0247828,-0.268544,1.01095,-0.218925,0.135296,1.27623,0.378281,-0.489849,-0.0861207,-0.017606,0.306725,0.260763,-0.0270441,0.134121,-0.324872,-0.203503,0.0377215,-0.861548,0.337939,3.90947e-005,-0.36473,0.409632,-0.479888,-0.552678,0.0476562,-0.251454,-0.242669,-0.723875,-0.31199,-0.790263,0.00429248,-0.506509,0.178229,-0.258241,-0.0140734,0.744497,0.235724,-0.445192,0.00614434,-0.0860285,0.309093,0.0218854,0.112997,-0.0085573,-0.212177,-0.7232,0.0605461,-0.605768,0.874765,0.514162,0.131294,0.195726,-0.0113032,-0.0694157,-0.352379,0.816801,-0.263748,0.37997,-0.0859486,0.983343,0.092847,0.320213,0.0103923,-0.361208,-0.69991,-0.80204,0.348014,0.368623,0.223077,0.0134769,0.391739,-0.054778,0.26284,0.747555,-0.0380153,-0.556224,-0.351631,-0.534196,0.0670037,-0.0690164,0.343479,0.205291,-0.022316,0.577899,0.445354,-0.29735,-0.00303715,-0.100848,-0.307669,-0.015251,-0.274872,0.211121,-0.209768,0.930382,-0.803005,0.158077,-0.027203,-0.085551,-0.020939,0.110777,0.66744,-0.194103,0.208351,0.984667,0.395595,-0.515783,-0.333637,0.149094,0.209224,-0.190537,-0.0269564,0.110846,0.0359946,0.0675493,0.460294,0.280011,-0.416731,0.396761,0.106999,-0.378956,-0.261754,0.16876,0.806485,0.056324,0.881517,-0.106735,-0.507368,0.373252,0.085054,-0.548075,-1.08204,0.267124,0.000660181,-0.501001,-0.649422,1.64625,0.0378305,-0.727881,-0.438045,-0.184809,-0.247926,0.422737,-0.316851,0.0393104,0.14232,-0.368701,0.0306176,-0.313636,-0.627845,-0.254598,0.143542,-0.064804,0.0392701,-0.202132,-0.209402,0.835521,0.0596331,-0.200663,0.0990312,0.00289074,1.0182,-0.270526,-0.569869,0.887343,0.269292,-1.10082,-0.345681,-0.0165283,0.377384,0.24599,-0.490179,0.0671139,-0.220592,-0.47133,-0.617486,0.394772,-0.567486,-0.40658,0.0514872,-0.0409626,-0.109944,-0.188107,-0.315006,-0.558743,-0.31258,-0.284236,0.108214,-0.218436,0.0652809,-0.0490181,0.0444614,-0.207352,-0.159758,-0.445994,-0.373376,-0.689803,0.300546,-0.117308,0.882039,0.602257,0.667699,0.962259,-0.036023,-0.0854368,-1.02933,0.952638,-0.935406,0.00653175,0.500181,0.662018,-0.715811,0.0578091,-1.01859,-0.0781009,-0.0927345,-1.0785,-0.339888,0.193234,0.576636,0.171635,0.407083,0.367137,0.956036,0.903702,0.88219,-1.45221,-0.634585,-0.71444,-0.717166,-1.30076,0.151408,0.328821,0.410709,1.0343,0.821838,-0.896957,0.08736,0.55175,-0.384339,-0.811348,-0.18178,1.04615,-0.562394,1.14036,-0.497725,0.954002,-0.607725,-0.0630449,-1.17424,-0.0301006,0.531652,0.0649908,-0.035716,1.28209,0.485638,-0.0823983,-0.967595,0.340639,-0.505441,-0.429786,-0.402313,0.482741,-0.259541,0.452037,0.609015,-0.456841,0.0765935,0.163714,-0.739976,-0.704706,-0.350033,0.482828,-0.309453,0.471319,-0.133213,0.791816,-0.228625,0.221165,-0.439266,-0.328585,0.919147,-0.565155,-0.532817,0.763029,0.407506,-0.526953,-0.572457,0.871704,0.125241,0.369129,-0.296527,-0.583885,-0.323137,-0.0333357,0.260324,1.03486,0.217402,0.187123,-0.753807,0.371914,0.381573,-0.169391,0.569495,-0.678957,-0.508527,-0.138935,-0.0255533,-0.231969,0.593953,0.104065,0.196139,-0.410985,-0.737846,0.748503,-0.426664,-0.542351,-0.437758,0.306857,0.491839,0.402092,-0.971117,-0.690945,0.0725514,-1.04159,-0.498768,0.00374849,0.400205,-0.549842,0.647814,0.700271,0.880313,-0.51937,0.226551,-1.4806,0.162231,-0.649742,0.795788,-0.316082,0.206213,0.788447,0.274539,-0.28388,-1.33252,-1.55452,-0.889966,-0.0616549,1.52935,0.0620424,0.73126,-0.383498,0.0182507,0.30693,0.352198,-0.279245,-0.390638,-0.370728,-0.27732,-0.380575,0.804556,0.437238,0.624486,-0.0847404,-0.921376,-0.711859,0.200148,-0.672339,0.131912,-0.138385,-0.140495,0.73201,0.0904263,0.331311,-0.118426,-0.441036,0.36559,-0.173048,0.569048,-0.0926641,-0.893908,-0.265838,0.169529,0.206589,0.126579,0.402562,0.283001,-0.768903,0.16662,-0.0273645,0.00732187,-0.756603,0.267512,0.552855,-0.108374,0.208916,-0.0370904,0.828815,0.287937,0.0406587,-0.479873,-0.134007,0.0469158,0.000525434,0.125456,-0.075334,-0.390475,0.282028,-0.205048,0.521712,0.0425144,-0.519209,-0.0243261,0.168084,-0.0463852,0.906286,0.156849,-0.599685,0.548108,-0.105875,-1.07412,-0.455146,-0.250737,0.541976,-0.875414,0.480422,-1.22586,0.952723,0.2113,-0.532001,-0.532931,0.331239,2.11281,-0.919493,-0.245648,1.46261,0.556174,-2.27288,-0.713549,0.908029,1.1365,1.45798,-0.196065,-1.55821,-0.289495,-0.257218,-0.321668,3.3452,-0.00444732,1.5502,0.162666,1.25144,-0.756803,0.0833048,0.20401,-0.327782,-1.01967,-2.80474,-0.994478,0.498244,0.66336,0.27727,-1.42133,-0.556955,-0.283801,-0.108936,-0.881462,0.487461,0.2547,0.228497,0.592711,0.993839,-0.646105,-1.48137,-0.107468,-1.20051,-0.547556,0.485333,1.12247,-0.464842,0.0872692,1.27067,1.039,-0.370409,0.388852,-1.77296,-0.466935,-0.974206,1.07442,-0.138667,0.638277,0.897324,-0.125684,-0.271368,-1.12439,-1.32351,-0.948807,0.0183528,0.857008,0.486678,0.40435,-0.626533,-0.304369,0.641833,0.445276,-0.0723801,0.411576,-0.348628,-0.344883,-0.144996,0.981482,0.497637,0.891599,-0.514389,0.00926095,-0.594055,1.11797,-0.00479986,-0.155798,0.16623,0.0577334,0.446995,0.446052,0.708505,-0.500185,-0.00748134,0.226995,0.49092,0.512186,-0.417082,-2.13672,1.19007,0.623679,-0.5661,-0.219875,-0.32088,0.0637293,0.434829,0.266982,-0.0599877,-0.476485,0.298313,0.194716,0.227066,0.472176,-0.275448,-0.00137436,0.128937,0.474506,0.383913,1.16875,0.172305,-0.749777,0.138036,0.729122,-0.481394,-0.329739,0.733825,0.14026,0.346668,0.400375,0.16958,0.33312,-0.417277,-0.266168,1.01095,-0.149302,0.931713,0.523784,0.295884,-1.03372,0.668027,-0.442212,0.370251,-0.7292,0.184229,-1.69884,-0.115592,0.0676548,-0.32473,-0.385452,0.304191,1.22977,-0.776555,0.170467,1.2876,-0.00869794,-1.7102,-0.607283,0.14912,1.33426,-0.0178868,-1.31246,-1.32512,-0.101963,0.0217611,1.16672,1.41914,-0.479199,2.34017,1.72785,-0.135548,-0.187936,0.322613,-0.0604345,0.235724,0.274696,-1.59547,-1.34451,1.42391,-0.648112,0.128238,-1.30645,-0.841814,-1.60063,-1.69716,-1.10538,2.08515,1.52197,1.569,-0.487693,-0.579252,-0.960752,-1.0103,0.422634,-0.715827,0.836634,-0.892198,1.41525,0.0528648,-0.508651,0.42225,1.65846,0.73421,0.232358,-1.32902,0.0147441,0.61566,0.721342,0.332848,-0.159517,0.0842512,0.0562811,-0.178907,-1.90767,-0.161371,-0.343461,1.52785,-0.299024,1.11974,-1.2705,-0.498436,-0.400165,-0.0666497,0.29486,-0.0142643,0.297754,-0.345085,0.446055,-0.0595271,-0.0188342,0.599957,1.03676,0.529571,0.123386,-1.24156,0.403289,0.57152,0.550382,-0.55714,0.346101,0.589393,0.314557,0.190724,-1.2955,0.212649,-0.276282,0.141875,-0.417655,0.148458,-1.19573,0.0635385,0.940101,-0.322592,0.319962,0.0363181,-0.355566,-0.290824,0.712131,-1.00195,0.213039,0.316795,0.311246,-0.202336,-0.0884612,-0.0400638,0.0941897,0.369785,0.430358,-0.577491,0.622065,0.492021,-0.916446,0.760893,0.532603,-0.782698,0.508072,1.08572,-0.174076,0.194158,-0.342631,-0.264162,0.881625,-0.629292,-0.139836,0.91559,-0.382896,1.07033,-0.233655,-0.249651,0.135788,1.22687,-0.327647,-0.633189,0.0977723,-0.319923,-0.29174,-0.738656,-0.493155,-1.15,0.192627,0.837635,-0.112659,0.369863,0.218444,0.0120137,-0.323427,-0.433615,0.293852,-1.00516,-0.570726,-0.809677,-1.76785,-0.541801,-0.138717,-0.218079,2.01175,-1.12955,-0.403733,1.67731,1.8126,-1.16871,0.579676,-0.169408,0.301245,0.300607,1.1819,0.143365,-0.731854,1.19418,-0.907853,0.0359135,0.0145089,-0.803315,-2.03378,-1.86701,-0.706136,1.79609,1.96186,1.65772,-0.806806,-0.726917,-0.310807,-0.0717614,0.419309,0.224578,0.0231963,-0.737878,0.072535,0.85882,0.522006,-0.456417,-0.0643281,0.768462,-0.407825,0.291181,-0.155537,0.00310302,-0.39001,0.267823,-0.922592,-0.171103,0.437265,0.00826733,-0.5268,-0.1066,-0.264552,0.148897,0.341199,0.00969756,-0.36385,0.222678,0.0658854,-0.541697,0.886174,-0.0456434,0.0783838,0.24436,1.24038,0.622472,-0.235991,0.769387,0.622526,1.35436,-0.737029,-0.358462,-1.17474,-0.326591,0.696066,0.55783,-0.654662,0.383574,0.117412,0.0115147,-0.288917,0.2179,-0.0850659,-0.0258418,-0.501685,0.906338,0.194051,0.124332,0.357516,0.233476,0.304088,0.0126093,-0.668744,0.250537,-0.299978,-0.767698,0.590097,0.519502,0.125119,-0.302941,-0.338251,-0.134787,0.0229018,-0.772237,0.0421559,-0.18769,0.14097,0.237973,-0.22152,0.429363,0.0724367,-0.611612,0.221822,-0.247607,0.547863,-0.489446,-0.624415,-0.802018,1.46722,-0.690848,-0.561507,1.16495,-0.0244143,-0.0297776,-0.263076,-0.688388,0.739322,0.777366,-0.308934,-1.2827,0.826872,-0.0812846,0.95325,-0.174306,0.0126044,-1.72556,0.328223,1.00818,0.0184477,0.98698,0.567127,-0.700803,-0.143032,-0.366946,1.21363,-1.36666,-0.826678,-0.0246501,-0.350399,0.0867023,-0.469809,-0.142722,-0.332819,-0.252374,-0.502752,-0.146757,0.493853,-0.324988,-0.229673,-0.606458,0.276328,-0.223218,0.364264,0.298267,-0.0895298,-0.302644,0.168512,0.164994,0.144886,0.0533882,-0.163541,-0.386668,-0.373879,-0.434286,0.598247,0.16086,0.340051,0.174019,-0.572998,-0.0310369,-0.432929,0.0794151,0.0349464,0.208769,-0.673539,0.765977,-0.487074,-0.76816,-1.25094,-0.00171221,-0.327746,0.500742,-0.249588,0.13642,-0.564292,0.345546,-0.0370092,-0.473479,0.0486527,-0.758145,0.251927,0.545102,-0.256843,-0.332394,-0.168835,0.304217,1.19873,0.391379,0.285205,0.0414309,0.500437,0.225788,-0.06465,0.732616,0.350054,0.71408,-0.318936,-0.104503,-0.417923,1.17449,-0.414506,0.126873,-0.838699,-0.235205,0.00366946,0.631558,-0.726883,-0.395178,-0.44552,0.0053867,0.663186,0.378254,-0.195983,-0.102334,-0.590118,0.384141,0.840267,-0.132137,0.297338,-0.236399,0.161575,0.700368,-0.110744,-0.013286,-0.0406747,0.0578713,0.331619,0.31555,-0.127306,-0.0110762,0.00494218,0.259661,-0.189104,-0.231602,-0.217178,-0.3532,-0.176405,0.471,0.131237,0.108285,-0.299361,-0.070766,0.0214051,-0.218929,0.166932,-0.400115,-0.75777,-0.223432,0.562621,-0.358774,-0.709857,0.444491,0.124081,-0.445726,-0.35341,-0.523681,0.174691,-0.106801,-0.354789,-1.19018,0.501444,0.0218378,1.00683,0.331342,-0.134264,-0.888534,0.422835,0.441966,-0.0450611,0.433904,0.382345,-0.698012,-0.0852477,0.143898,0.838072,-0.158364,-0.0750983,0.205776,0.0480982,0.284032,-0.497592,-0.373643,-0.192229,-0.968797,-0.18369,-1.14273,-0.401338,-0.690549,-0.364281,-0.904753,0.103883,0.12756,-0.00329134,0.842417,0.311153,-0.39463,0.171967,-0.0368158,0.366543,-0.184651,0.746091,-0.0418253,0.467584,-0.910366,0.0864008,0.273133,1.15809,1.01846,-0.713852,0.651326,-0.958172,-1.02159,0.462063,0.169461,-0.945318,0.231873,-0.101804,-0.783877,-0.876299,-0.850875,0.340048,0.29872,0.462833,0.369876,-0.278175,0.515047,0.876317,-0.316909,-0.129934,-0.919839,0.774933,0.103377,0.00104352,-0.0609371,0.240621,0.100559,1.12655,0.430569,0.280058,0.114512,-0.100179,-0.234489,0.0371889,0.451229,-0.68145,0.227052,-0.0954196,-0.603594,-0.95716,0.0859089,0.142563,0.645286,-0.0308213,-0.194079,-0.28213,0.454322,-0.0890267,-0.447286,-0.560318,0.0680866,0.750008,0.0555144,0.172952,0.298135,-0.401153,-0.124437,0.123263,0.187777,0.0262463,-0.648108,-0.120379,0.365198,0.074779,0.481632,0.100144,0.412883,0.0296214,0.199445,-0.629171,-0.22177,-0.258982,0.866243,-0.361811,-0.954245,-1.01809,0.286798,0.0154018,0.27996,-0.273417,-0.405755,-0.0695617,0.0855759,0.180066,0.00734926,0.0540146,0.0949425,-0.563409,0.462993,-0.409674,0.456343,-0.240148,-0.611028,0.224768,-0.904846,-0.241963,-0.41628,-0.394581,-0.643503,-0.119444,-0.535386,-0.312659,0.0652691,0.501357,0.378475,0.0986869,0.291209,0.599571,-0.0698943,-0.125038,-0.509911,0.185463,-0.61066,0.54885,0.336555,0.100663,1.06118,0.439121,0.763941,-0.212687,1.15446,0.0691291,-0.69265,-0.604439,-0.253987,-0.641811,-0.353146,-0.362822,-0.162146,-0.335698,-0.128023,-1.23879,0.737634,-0.301062,-0.181854,-0.190827,0.563993,0.37428,-0.0136616,0.535044,-0.461912,1.31344,1.15494,1.71057,-1.3334,-1.16921,0.643756,0.488016,0.312764,-0.00875888,0.903215,-0.727032,-0.43449,-0.0371453,-0.552137,-0.595244,-0.907896,0.216845,-0.303831,-0.229893,-1.29002,0.57086,-0.231411,0.871891,0.860828,0.476417,-0.746029,0.844718,0.433636,0.27875,0.125033,0.816836,0.103104,0.412789,-0.968788,0.323006,-0.574669,0.267288,0.180103,-0.275832,-0.0171547,-0.771714,-0.0724124,1.04498,-0.188805,-0.474264,-0.0559754,0.498449,-0.71252,-0.52209,-0.878703,0.487986,0.439306,0.845405,0.533255,-0.160779,0.162371,-0.0624075,0.213029,0.0467591,-0.222299,0.129064,-0.142244,-0.0180845,-0.228447,0.561605,0.107338,0.261122,0.516077,0.129127,0.412169,0.683734,-0.555816,-0.411969,0.460719,0.325663,0.12672,0.679094,0.489273,0.133126,0.41414,-1.34103,0.561432,-0.0915902,-1.23161,-0.276378,1.3111,0.283621,0.0640475,-0.546292,-0.141315,0.110204,-0.0696754,1.02228,0.252486,-0.0467574,0.886149,-0.609409,0.490091,-0.305806,0.993508,0.798944,-0.458935,-0.271073,0.312251,0.114284,0.21159,-0.00549272,0.621629,0.405543,0.820467,-1.41599,0.345049,-0.137721,-1.16302,-0.152606,1.27516,0.30249,0.0350478,0.495732,-0.495164,0.455136,1.17115,1.40466,-0.502021,-0.903017,0.843784,-0.545854,0.682825,-0.352318,0.0335616,-0.552947,-0.0670332,0.327204,-0.0213127,-0.395781,-0.124716,-0.182115,0.0592376,-0.331047,-0.844228,0.0919694,-0.0495188,0.270993,0.174448,-0.106225,-0.457054,0.725985,0.470407,0.650695,-0.723233,-0.140887,0.0861368,0.230395,-0.58813,0.78282,0.218307,0.55793,-0.686578,-0.100799,0.414727,-2.9319,-2.23624,2.11866,0.760426,-1.08829,-1.33575,-0.456575,-2.15464,-0.33368,-1.41507,1.5119,0.165091,1.20195,-2.22548,0.395528,-2.23595,0.22341,-1.04184,2.03354,0.461858,1.44048,-2.27094,-0.633179,-1.47229,-0.141996,0.544789,-2.50358,-0.677478,1.33379,-0.54732,-1.21342,2.07044,-0.559572,-0.997569,-0.00885117,-0.15846,-0.762772,1.0936,-0.847185,-1.26961,1.72714,0.44004,-1.25347,-1.38938,0.381703,-1.79299,0.871956,0.655245,-3.01161,-0.286318,-0.105123,-0.607575,-2.97976,0.582994,-0.165992,0.711201,-0.167419,1.03046,1.22014,-1.8181,-2.5052,-1.27733,1.51399,1.45589,0.0197692,-4.2408,0.338051,-1.02464,-0.505387,-0.152213,-2.08651,2.50699,-0.677658,-1.73817,-0.32049,0.0664175,1.81287,2.30829,-0.835788,-0.484509,-1.54194,0.437345,-2.89685,0.915322,1.00663,-2.11915,-1.01342,0.809141,0.559188,-2.33727,-0.296747,0.294575,0.452576,0.632361,-0.80444,0.997599,-3.8976,-0.710118,1.98416,-2.24327,-1.85517,0.259019,0.619086,-0.458406,-1.94428,-1.45877,1.52095,-1.83329,0.27367,-1.43601,-2.19036,1.63222,-1.28268,-0.933537,-1.10038,2.23192,0.458412,-0.0279826,1.03408,0.0537939,-3.22633,2.12065,-1.5664,-1.51327,1.89913,-0.705209,-0.208857,-1.36991,-2.43783,-2.4587,-0.0824224,-1.58658,-0.644423,0.861251,1.97486,0.097055,0.758108,1.07826,-1.03984,1.53972,1.1876,-0.236631,-1.44286,-0.644848,0.0500248,-2.66939,-2.30271,-2.67155,-1.10089,-1.5426,1.37697,-1.3862,-1.23456,1.62779,-0.442283,0.967887,-2.08913,-2.0151,-3.19388,0.703903,1.81357,-1.20801,-2.53769,-1.96504,1.30513,2.0389,0.467064,-2.00208,-0.844455,-0.678756,-1.32332,-0.79608,0.906143,-2.33728,-0.340987,1.79274,0.870449,0.178397,0.480232,1.43677,-3.68841,-0.401796,-1.74348,0.7684,0.742997,-0.665387,-2.84703,-2.06199,0.130839,-0.568663,-0.748935,-2.36104,1.38414,1.1747,-1.76833,-0.677788,0.557143,-0.0484006,-0.47086,-1.35785,0.0335239,-0.0979809,-0.0178653,-0.654246,-3.18262,0.215482,0.937887,1.43311,-0.0266684,0.995173,0.794687,-2.11594,-1.62113,-3.12623,-1.79758,1.48868,1.26311,-2.57685,0.638677,-1.96357,0.779464,0.700573,0.61158,-1.64824,1.23193,-0.335357,-0.858024,-1.80663,0.732692,0.274883,1.6779,-1.72296,2.42027,-1.70907,0.86042,-3.07146,-1.55581,-0.0489488,2.62361,0.935754,0.20813,-1.87647,-2.74016,-2.17093,0.0120837,-2.50371,2.26786,-1.27502,1.25976,2.02647,1.14324,-0.379599,-1.06602,-1.54244,-2.51526,-0.867901,-1.41361,-3.10382,-2.30639,-1.31241,-1.81898,2.80062,-2.61286,3.0435,1.48503,-0.837182,-1.70349,1.73411,-3.0031,-1.99383,-0.0797511,-0.322602,1.64077,0.783917,-1.92159,1.58983,-1.38589,1.24213,-2.41544,2.19848,-2.07407,0.605554,-2.28441,-0.0221772,-2.97154,1.05759,-0.746946,1.59253,-3.6258,1.78374,-1.89829,-1.81302,2.31629,-1.65961,0.572211,-1.17195,0.297139,1.10763,0.875454,0.705379,0.840149,1.0022,0.750815,1.11483,0.611546,0.616095,0.78077};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
