// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={12,15,7,0,11,4,1,-2,-2,-3,1,-4,1,-1,-1,4,8,7,3,-3,9,-6,-3,-10,-4,-7,-3,1,-2,-2,-9,6,10,5,0,-4,-3,0,-1,-11,8,3,9,1,9,-1,2,0,8,0,5,-8,-3,-1,2,-3,2,0,6,-4,-1,-4,10,-6,-2,7,0,-8,11,8,0,1,-8,2,7,4,6,9,9,13,-1,-1,5,0,11,5,1,-6,-8,0,-1,-1,1,-5,5,12,16,2,8,1,3,5,-9,-9,-14,-3,-10,-18,-3,-6,1,18,20,9,-3,-9,-2,-2,-5,-15,-15,-14,-8,-5,-8,-5,-3,4,15,3,2,-8,-5,0,-2,-17,5,-1,1,-11,-8,-5,12,-1,16,10,11,2,-1,-3,-5,-13,0,-13,-5,0,-4,9,5,-2,11,11,14,10,6,1,8,-3,-3,-5,1,-1,4,-7,-5,-1,8,5,14,11,8,5,2,0,-2,8,4,-9,3,-8,-11,-6,3,0,1,-4,14,2,8,-4,-8,2,5,1,2,-5,-3,-11,6,1,1,1,3,13,8,5,-6,6,-2,-14,1,-8,4,-14,6,-1,6,-2,2,6,0,-2,-1,-4,-4,-4,-2,3,-7,-7,3,1,-7,-1,-8,-9,-4,-4,-3,-7,-10,-6,3,-2,-2,4,15,14,-10,-7,-22,-19,-24,-17,-15,6,-6,10,12,14,2,11,11,22,0,4,-15,-1,-5,3,-6,-5,-3,-5,-5,0,0,2,10,4,-5,12,3,10,2,8,-4,7,0,2,-5,-6,-11,15,7,-14,4,2,-9,-3,16,4,3,4,-1,-6,-11,-14,-6,6,-3,4,15,4,-1,10,2,13,7,7,-2,11,-2,-6,2,6,4,7,-2,-4,-10,-2,12,9,-3,0,-5,11,-8,-1,11,4,16,5,-11,-16,2,-7,11,5,-2,1,-2,2,-6,-5,7,19,12,11,-4,-2,-6,-3,9,1,-8,-15,-11,-9,-16,-12,-2,3,4,-12,-5,-10,-1,-2,3,4,-8,1,-8,-1,-15,-5,1,7,2,0,-7,-9,8,-9,3,9,1,1,-6,2,-6,-3,-1,-1,0,8,4,-15,-4,-1,6,11,-3,4,1,3,0,10,-2,-3,4,-11,5,-8,-5,9,1,6,-9,4,2,6,3,6,-11,-13,3,-11,-3,-19,5,-1,1,1,-6,3,-2,13,18,4,-3,-11,13,4,-9,-8,-2,-15,1,-12,-6,5,-1,6,4,-7,3,2,5,6,-4,-6,-6,-1,-5,8,-8,12,-4,11,7,3,5,20,8,9,4,24,3,5,-12,1,2,-1,3,14,-2,6,7,23,13,8,11,10,7,-2,1,2,3,-7,-9,-5,-4,-5,1,-14,-1,-3,-10,-7,-7,-6,-1,-3,2,2,-6,-8,2,-2,-11,0,7,1,7,-4,-9,1,-9,-6,-11,-10,0,-1,0,-8,0,-6,8,3,-3,6,3,-1,-1,-9,-5,-1,-1,11,5,-3,3,3,-2,2,-2,5,1,3,-1,9,8,5,0,2,6,-8,-2,4,4,1,1,0,-1,-7,-2,6,9,-7,-2,-6,2,-1,2,9,2,11,2,3,3,-5,-10,4,-1,-1,-10,-8,5,-2,9,3,4,3,-4,-4,-2,-11,-14,-5,-2,-5,-4,1,8,11,-2,-7,6,3,3,6,0,-2,-13,-2,-6,-4,4,1,6,3,-6,-12,4,11,9,0,3,2,-1,5,-1,8,-2,-13,-4,-8,-11,-20,3,-1,-6,1,7,-6,2,3,5,5,-3,-9,-9,-9,-15,-13,0,-2,-6,-3,4,0,-4,3,5,-3,-13,-12,-8,-6,-2,-7,3,1,-2,5,11,13,11,2,6,0,-1,-4,2,0,4,7,5,5,-2,8,12,6,11,0,-2,9,3,-4,2,-1,6,15,8,6,2,9,8,-3,0,0,3,3,-4,-4,-2,2,14,24,12,21,13,-3,0,-10,-4,-4,2,3,4,1,4,11,27,15,32,25,29,6,-4,9,-10,12,1,-2,-4,-9,-20,4,-3,-3,16,13,-6,1,0,-10,15,12,2,-2,-6,-7,-4,7,0,-16,19,8,9,-3,10,12,1,-11,-7,-2,-6,-13,7,7,-1,-12,15,11,15,-6,0,-9,-14,-6,-3,6,5,1,-14,1,-10,13,-4,-15,6,-18,17,-3,11,0,8,9,13,1,1,10,14,2,15,-23,-20,-20,1,-5,8,8,22,2,3,21,16,6,1,-1,14,-8,-29,-20,-3,-9,-4,6,-8,-10,6,1,-6,-11,-4,0,16,-1,-13,-11,10,1,18,8,-18,-7,-5,-5,-1,4,-13,-5,17,2,-4,-5,-8,-11,-18,14,9,-4,5,18,11,17,13,-6,9,2,7,-1,-2,-26,10,7,-7,-5,4,19,-3,13,27,7,19,1,-3,-3,-21,-17,-14,-7,3,-6,6,-6,4,8,22,6,11,-22,-11,0,7,-10,4,-18,-4,-2,-3,-5,10,3,7,11,21,16,-3,17,17,-4,3,-9,1,6,5,-1,-3,-18,8,4,20,15,7,-4,1,0,0,-8,-3,0,3,-6,1,-14,2,6,24,4,9,-1,-19,-1,-3,-3,10,-4,6,0,2,2,-2,-2,26,18,4,4,-20,-6,-20,-15,-7,-9,-10,-1,0,4,-15,-5,11,11,11,7,2,-4,-5,3,-6,-11,-1,1,9,0,2,6,9,6,-7,-7,-9,-10,3,-6,-12,-5,-2,-8,0,4,-1,11,9,-4,3,-5,-6,-12,-5,-14,-3,6,2,-5,1,7,4,6,6,-4,-7,-11,-8,-7,-9,-15,3,-2,-4,1,-9,-4,-6,0,2,-2,-1,2,-4,2,2,1,2,-4,2,7,5,2,-1,2,6,-5,-3,-5,0,-4,1,-3,7,-4,5,-6,4,-6,-4,-1,3,3,-4,8,2,1,-4,10,4,7,1,-8,0,-2,-2,-1,-2,-2,1,8,6,3,-9,-3,-4,3,-6,-10,0,-7,0,0,3,4,5,8,9,4,7,6,7,0,2,-3,0,2,8,5,13,13,15,6,-4,3,4,-2,5,7,4,-6,-3,4,4,9,4,17,6,8,4,7,7,2,8,11,0,-4,3,-6,1,0,4,3,2,-2,6,10,7,5,16,13,2,-3,4,-7,3,0,13,1,-13,-1,6,9,-6,-2,8,6,1,0,-6,2,-1,1,6,-8,-9,-9,0,-8,-4,-4,0,-6,1,-3,-4,-7,-6,-3,9,-9,-10,-13,-15,-10,-15,-6,-1,-4,-1,6,-4,-5,3,11,10,6,5,-3,-9,-15,-11,-8,-2,-12,2,0,-1,7,14,-4,2,3,9,13,21,0,-5,-11,4,-8,-9,-24,-2,10,19,-8,1,-10,15,12,16,4,-5,-9,-3,-9,-3,-9,0,-2,1,13,4,-12,16,12,-1,6,1,0,-5,2,8,10,-2,-10,-1,2,-1,-15,-4,8,7,10,-7,-2,13,10,4,-12,1,-16,-10,-4,-13,-15,-6,12,-1,1,-8,-7,4,-4,-8,5,-1,-6,-20,-11,-1,6,12,6,-5,8,15,-13,8,-3,-6,-13,3,-14,0,-2,12,5,2,6,13,5,8,2,7,1,-3,-11,-24,8,2,0,8,3,-6,-7,-15,-11,-8,0,6,7,11,0,3,-8,12,-9,23,18,2,12,-7,-5,-2,-20,-6,-5,-3,-12,4,6,-6,10,4,-15,-20,0,-1,14,-11,-6,2,-9,-3,-25,1,2,3,3,-13,-24,-22,-12,-8,-11,-22,-19,10,-7,-12,-6,0,9,0,1,11,1,8,6,16,-16,-12,-4,1,-2,0,-6,-6,4,2,5,12,-16,2,5,-4,-10,-16,-11,9,6,7,-2,6,5,3,5,30,15,-4,1,-6,-9,-11,2,13,7,15,-11,-2,2,7,0,27,14,4,-9,0,-8,-9,-2,10,3,-2,-6,2,1,4,-7,17,14,4,23,-1,-19,-5,-21,-5,-3,-2,-15,4,-7,6,9,30,21,4,-5,-15,0,-18,-9,4,4,-13,10,6,-2,-11,17,19,4,-9,-3,1,-11,0,6,-11,11,-24,-3,-3,-10,4,-11,7,-4,-2,2,-6,-5,-6,2,6,-10,-16,-11,-22,-28,0,19,14,-19,5,-4,-1,-10,-10,-4,0,10,-5,-18,1,0,-31,7,16,4,1,6,-7,3,-7,0,20,-1,0,-14,-8,-10,-18,-22,20,0,-1,1,-9,-6,-8,-2,2,-6,-4,-13,-5,-6,-8,-8,25,9,-2,-15,-10,-8,1,4,2,-4,6,9,3,8,3,-7,25,15,2,-5,10,4,5,11,6,7,2,1,8,16,4,1,17,10,-5,9,5,1,-12,1,-7,8,-4,-11,4,-3,9,-5,6,14,16,14,4,-1,-5,4,-9,2,-3,2,0,2,9,-3,10,11,15,8,1,13,8,1,2,10,2,-5,10,-1,1,10,-12,1,10,-5,3,2,-4,-10,4,-8,-1,1,14,-4,0,3,-3,-2,2,2,-3,4,6,-4,3,2,3,-2,5,-2,14,13,6,-9,9,6,15,12,-1,1,-1,3,2,-5,-8,4,7,-1,-5,6,-2,-2,11,5,8,-2,-4,-13,-15,-7,-10,4,7,2,10,3,3,1,6,-3,4,0,-10,-10,-5,1,13,4,5,9,12,25,19,8,1,2,-12,-7,-10,-3,-10,-10,-7,5,9,13,15,9,9,-5,3,2,5,-6,8,0,0,-1,-6,3,9,9,14,12,9,1,0,-3,-2,-4,2,2,-1,-7,-2,-4,1,6,1,9,-1,-1,-5,-7,0,12,10,8,8,-8,-3,8,7,-7,11,6,6,-7,2,-4,0,-7,10,1,-2,2,4,4,-1,-8,13,3,5,0,-4,-4,6,-5,-7,0,10,3,6,11,8,-7,10,3,-6,-8,-13,-3,-8,-5,-3,-4,3,-2,-2,-5,-14,-11,8,6,-11,-11,-11,-5,-4,-1,-2,4,10,-1,-3,-2,-10,6,3,-3,-11,-7,2,-13,-3,-10,-1,0,-2,-10,3,-6,-5,-3,5,8,4,-2,6,0,3,-3,6,3,-7,-11,-8,-9,-5,3,10,6,-4,-4,6,10,3,-1,16,-9,-6,-8,-3,-13,-5,-1,5,-1,-5,11,9,17,17,3,6,6,-2,8,-3,-3,-1,-1,1,-6,-4,-2,6,3,0,-5,2,1,2,5,-8,-5,-1,-1,-3,-2,-10,-4,2,-5,-9,-1,2,6,6,-4,-3,-3,-3,12,1,-2,-3,-7,-3,-8,-8,3,0,-3,2,-1,-3,-9,1,-1,8,1,4,-15,-13,-4,2,1,-10,-12,-7,-9,-2,-9,-11,3,23,15,7,4,6,-4,2,-2,-9,0,-8,-6,-8,-8,-2,3,18,1,3,11,1,1,3,-14,-9,-6,1,-22,-3,3,-7,7,5,12,10,-5,3,4,-4,-12,-8,-7,-6,-17,5,-15,0,-6,10,3,8,6,-3,-12,4,-3,1,-6,0,-7,8,1,1,-8,0,8,14,-3,8,-7,-7,2,-3,-5,-7,-1,1,6,12,1,-1,6,14,6,15,14,17,-3,-7,-6,-7,-4,9,11,23,9,-11,-3,-4,1,15,22,12,1,11,-5,-6,-11,-1,0,-6,-11,-8,-12,-3,-2,-4,12,14,5,-5,3,-11,-8,-1,-5,2,-14,-13,-3,6,-7,2,3,-4,11,12,10,-3,-6,0,2,3,-8,-1,16,22,10,24,6,-12,7,14,9,14,-6,2,6,4,-6,14,22,16,3,2,-2,-15,-17,-3,-2,4,8,0,-3,10,8,8,4,0,-6,-1,2,-10,-11,-8,2,8,-7,-9,-7,-2,6,27,4,-3,-10,-5,5,-7,0,-1,-6,0,-10,-8,6,10,6,-1,8,-2,-7,4,-1,-4,-3,-6,-2,1,-9,-2,1,-4,-1,7,-4,17,-2,-3,2,-9,-4,2,-4,-9,-13,-3,-10,9,3,19,8,-4,2,-7,-5,-9,-2,-8,-4,-13,-13,-18,21,6,3,16,3,4,-4,-1,8,10,-5,3,4,0,-5,-8,-9,-8,7,15,11,10,-6,-9,-2,2,-2,-5,4,-6,-8,2,0,-1,-12,22,14,2,-1,4,7,-1,-4,-5,7,2,5,6,-2,-5,7,21,3,6,0,3,0,-7,-3,-4,4,2,3,6,-1,-4,8,10,4,4,-1,13,-5,-10,5,9,16,9,-9,0,3,-6,2,21,12,5,5,-8,5,5,10,6,-2,-3,-8,-5,-6,0,16,20,0,11,4,1,-2,-1,1,-11,-11,-4,-9,-12,0,11,21,4,13,7,-1,11,2,-4,8,-3,-4,-17,-12,6,0,2,19,-9,4,10,7,5,9,14,6,2,8,-13,6,10,0,8,8,-9,-17,-1,12,7,12,15,14,6,-4,6,0,4,4,7,8,4,-11,-10,-8,-1,12,11,5,-2,6,1,0,4,-7,-1,2,-4,-12,-5,-6,6,-7,0,-3,-6,-5,-2,-1,8,5,-3,-12,15,-2,3,0,4,-7,-15,-5,9,8,-6,-6,8,-4,3,-16,10,2,1,-10,-2,-11,-4,-7,-5,1,-4,-2,0,-5,-8,-8,11,4,1,-5,0,2,-8,-9,-5,-11,3,-11,-17,-13,-2,-1,9,1,2,4,4,-8,-15,-6,-5,-10,-8,-10,-14,-11,-11,1,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf)
			if ((cnt==m-1)||(cnt==m)) {yright[k]=j; lf=false; k++;}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])+10) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

