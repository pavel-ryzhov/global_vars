#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {-0.00059,-0.00129,0.00105,-0.02726,0.02216,0.01701,0.06350,-0.01793,-0.15696,-0.08714,-0.01748,-0.16206,-0.15479,-0.26384,-0.24104,-0.19829,0.09739,0.00670,-0.00127,-0.02204,0.01384,0.04920,0.10410,0.27890,0.13763,-0.15601,-0.00007,-0.02932,-0.11983,-0.23161,-0.12237,-0.00393,0.00511,-0.23391,0.04990,0.00817,-0.01948,-0.00448,0.03540,-0.00274,0.10992,0.36517,-0.00883,-0.09943,-0.30317,-0.08190,-0.17342,-0.12255,0.05033,0.20704,0.08178,0.03216,0.12175,-0.02818,-0.00226,0.01979,0.00638,-0.01765,0.19376,0.05474,-0.11619,-0.12074,-0.13445,0.00831,0.20999,0.39421,-0.03824,0.13085,0.16773,0.12795,0.12720,-0.01758,-0.01870,0.01834,-0.01842,-0.08912,0.06571,-0.10176,0.01505,-0.21267,-0.05614,0.25971,0.42937,0.45565,0.27717,0.25004,0.31684,0.20846,0.06916,-0.01613,-0.02128,-0.01460,-0.08567,-0.04609,-0.14309,-0.10147,-0.11306,-0.01765,0.07222,0.17841,0.38394,0.33792,0.39646,0.61338,0.43049,0.25245,-0.04031,-0.02432,-0.03798,-0.01526,-0.11182,-0.18291,-0.32627,-0.47046,-0.23018,-0.03232,0.25212,0.09617,0.01714,0.34160,0.45991,0.48653,0.40934,0.22674,-0.09804,-0.04126,-0.03902,-0.01987,-0.12748,-0.30706,-0.45728,-0.39333,-0.08631,-0.02144,0.02036,0.01458,0.02269,0.29594,0.07952,-0.03971,-0.03165,-0.08470,-0.12809,-0.07508,-0.04095,-0.02083,-0.10891,-0.42420,-0.51704,-0.67894,0.01917,0.07070,0.29888,0.53410,0.36226,0.03689,-0.08172,-0.43420,-0.72136,-0.39111,-0.17098,-0.08996,-0.04299,-0.02297,-0.10025,-0.33631,-0.12254,-0.04325,-0.00359,0.12007,0.32806,0.44371,0.37995,0.42177,-0.13981,-0.27263,-0.61036,-0.36093,-0.23308,-0.08660,-0.04545,-0.02671,-0.06660,0.03312,0.19109,0.14561,0.03471,-0.05841,-0.10260,0.15586,0.45454,0.41421,0.05248,-0.07320,-0.24372,-0.13613,-0.25454,-0.12755,-0.03718,-0.00647,0.09374,0.16292,0.35501,0.21017,-0.10447,0.01122,-0.00070,0.39271,0.35795,0.19703,-0.03902,-0.02345,-0.00153,0.00443,-0.18584,-0.12976,-0.03956,0.02577,0.14765,0.08701,0.18292,-0.02002,-0.17697,0.04984,0.28371,0.45426,0.11245,-0.06825,-0.06518,0.00287,0.10381,0.07155,-0.16275,-0.11765,-0.01856,-0.01959,0.11712,0.04944,0.11939,-0.14642,-0.33120,0.01467,0.02993,0.16317,-0.13193,-0.11213,-0.08830,0.01639,0.09136,-0.03516,-0.10790,-0.06153,-0.00845,-0.00698,0.05581,0.17632,0.11818,-0.03891,-0.27261,-0.41392,-0.27020,-0.20796,-0.11789,-0.15005,0.01024,-0.18558,0.24485,0.02062,-0.04879,-0.05051,-0.01835,-0.06479,0.11013,0.21256,0.15744,-0.09571,-0.27442,-0.16024,-0.10881,0.13050,-0.11586,0.12110,0.07056,0.10533,0.15334,0.02467,-0.07400,-0.01552,-0.00145,-0.04828,0.04689,0.21543,0.06100,0.05268,-0.52882,-0.32116,-0.25669,-0.17886,0.02560,0.08961,0.27184,0.30116,0.11306,0.00691,0.00474,-0.02303,0.00183,-0.03940,0.02430,-0.04678,-0.10065,-0.08742,-0.00083,-0.21434,-0.24248,-0.06918,0.16748,0.34590,0.29448,0.11778,0.19476,0.05240,0.00344,-0.00048,0.04501,};
float weights_input_1[] = {0.00126,0.00114,0.00405,0.04746,0.00819,0.10424,0.01293,0.17761,0.14726,0.00518,-0.05323,-0.05753,-0.12837,0.07340,0.11523,0.11107,0.05843,-0.05068,0.00116,-0.00937,0.08385,0.05759,0.05205,-0.00656,-0.08133,0.06477,0.02632,-0.01342,0.03787,-0.04043,0.06911,0.00577,0.08506,0.12788,0.02038,0.03214,-0.00761,0.12495,0.05025,0.01035,-0.04370,0.12955,-0.22237,0.28321,0.23294,-0.08751,0.02921,-0.06822,0.07164,0.03211,0.04605,0.10820,0.04827,0.08384,0.04051,0.12904,-0.04606,-0.04651,-0.06351,0.00160,0.06834,0.04036,0.18031,-0.21327,-0.14738,-0.06135,-0.03318,0.02639,0.08117,0.03660,0.03050,-0.03582,-0.01289,0.12642,-0.04956,-0.08006,-0.11169,-0.09323,0.18514,0.28864,0.23710,-0.25437,-0.18735,-0.17740,-0.12908,-0.04521,-0.07152,0.10127,0.03597,-0.03001,-0.01398,0.08049,-0.05806,-0.02231,-0.13827,0.03431,0.18927,0.21624,0.12117,-0.47593,-0.42090,-0.16245,-0.14101,-0.03909,-0.08579,-0.02764,-0.02890,0.00239,-0.01126,0.07883,-0.09113,-0.15858,-0.14237,-0.08960,0.11487,0.30145,0.27733,-0.04442,-0.06591,-0.06526,-0.04944,-0.01550,-0.07912,-0.10426,-0.03296,-0.01174,-0.00954,0.07868,-0.08940,-0.22579,-0.18229,-0.14001,-0.17754,0.10090,0.38779,0.16731,0.17779,0.05210,0.09434,0.07030,-0.14125,-0.14038,-0.04717,0.02603,-0.00947,0.09070,-0.07603,-0.08634,-0.33776,-0.41917,-0.51094,-0.08891,0.35542,0.30961,0.23427,0.10142,-0.01297,-0.06557,-0.06864,-0.13181,0.02486,0.02949,-0.00692,0.09015,-0.03146,0.02936,-0.28409,-0.45789,-0.48730,-0.10430,0.11194,-0.12781,-0.16087,-0.35972,0.00353,-0.01217,-0.13872,-0.08310,0.05045,0.02616,-0.00253,0.09748,0.01448,0.12457,0.30565,-0.20712,-0.32228,-0.35558,-0.50880,-0.58131,-0.59556,-0.22002,0.11641,-0.09414,-0.11619,-0.05894,0.05969,0.09505,-0.00883,0.08202,-0.12396,0.13796,0.28786,0.43255,0.27275,-0.16335,-0.38257,-0.49179,-0.40827,-0.21608,0.22683,-0.22987,-0.11468,-0.11762,0.04720,0.09187,-0.00620,0.06132,-0.17601,0.02865,0.28645,0.62509,0.54580,0.30094,0.06394,-0.34859,-0.35425,-0.26551,-0.01317,-0.25306,-0.29760,-0.23194,0.06962,0.04839,-0.01725,0.09929,-0.11999,-0.07572,-0.01855,0.34707,0.29752,0.25560,-0.16807,-0.49070,-0.34407,-0.18485,-0.18331,-0.09915,-0.14294,-0.01426,0.16864,0.01331,-0.05443,0.11107,0.00560,0.11905,0.17183,0.46632,0.67444,0.42360,-0.09337,-0.35240,-0.41299,-0.18849,0.13243,0.28506,0.20169,0.17802,0.14458,0.08951,-0.00859,0.10735,0.06427,0.06293,0.27505,0.53612,0.54668,0.48299,0.19689,-0.04885,-0.14316,-0.24447,0.17987,0.31139,0.33741,0.30539,0.01495,-0.04118,-0.00061,0.12278,0.14931,0.16261,0.31412,0.29501,0.41387,0.33350,0.18606,0.14499,0.18438,0.13589,-0.06050,0.08785,0.17559,0.12439,-0.01421,0.07728,-0.00036,0.04847,0.05424,0.23833,0.37733,0.16085,0.06209,0.23575,0.45585,0.26962,-0.02296,-0.18968,0.00585,0.01946,-0.09916,0.05421,-0.00803,0.00211,0.09832,};
float weights_input_2[] = {0.01151,-0.00233,-0.00305,0.04870,0.17384,0.22953,0.15557,0.10734,-0.01862,0.14049,0.07302,-0.00414,0.05035,0.17998,0.12189,0.04844,0.03506,0.01487,0.00854,-0.02745,0.03222,0.05780,0.21971,0.12713,0.17910,0.04195,0.14191,0.12100,0.03713,-0.08873,0.02728,0.13408,0.15651,0.06600,-0.00783,0.02211,-0.05865,-0.05882,0.02357,0.05072,0.09783,0.12867,0.05367,0.06408,0.22487,0.23603,0.03514,-0.11258,-0.03056,0.08123,0.12198,0.02641,0.00823,-0.02527,-0.05098,-0.01680,-0.00061,0.01256,0.07689,0.00442,-0.02796,0.08361,0.26043,0.11980,0.01426,-0.05815,-0.00944,0.09369,0.05182,-0.01046,0.01091,-0.01759,-0.05430,-0.01838,-0.05033,0.04332,0.06025,0.08518,0.04593,0.01868,0.05812,-0.00038,-0.05912,0.04267,0.05730,-0.00676,-0.03755,-0.03343,0.00367,-0.01931,-0.05621,-0.02510,-0.02362,0.08694,0.02275,0.08192,0.03746,-0.09694,-0.14379,0.05169,0.02978,0.15578,0.08542,-0.02230,-0.03655,-0.04678,-0.02216,-0.02097,-0.05981,-0.03529,-0.00064,0.02963,-0.04826,0.00169,-0.11961,-0.16234,-0.09388,0.06660,0.03636,0.18807,0.01968,0.01308,-0.04161,-0.05576,-0.02635,-0.02271,-0.05891,-0.03402,-0.01735,-0.01048,-0.07329,-0.14571,-0.21952,-0.35012,-0.12030,0.00840,0.03758,0.09888,-0.03640,0.02154,-0.02967,-0.02404,-0.01457,-0.01813,-0.02688,-0.00301,-0.01486,-0.02262,-0.18597,-0.22463,-0.28829,-0.36506,-0.25424,-0.06441,0.04952,0.04455,-0.00713,0.02831,-0.01396,-0.03285,-0.02879,-0.02662,-0.02824,-0.00257,-0.01326,-0.11863,-0.16076,-0.20167,-0.35241,-0.29727,-0.13637,0.03547,-0.07548,-0.09859,-0.13431,-0.06063,-0.08560,-0.05574,-0.02504,-0.02875,-0.02475,0.00224,-0.06247,-0.14662,-0.13878,-0.21689,-0.20255,-0.12919,0.23866,0.24006,0.02055,-0.10343,-0.23070,-0.20241,-0.18803,-0.06290,-0.04023,-0.02883,-0.05009,-0.05228,-0.09670,-0.16761,-0.05863,-0.18318,-0.06249,0.03697,0.32338,0.34204,0.06204,-0.15985,-0.29063,-0.27499,-0.17635,-0.11076,-0.05243,-0.03275,-0.06702,-0.07354,-0.12133,-0.21353,-0.23299,-0.18911,-0.00033,0.07380,0.37424,0.29266,-0.08366,-0.26687,-0.32075,-0.29409,-0.17577,-0.07655,-0.02065,-0.00851,-0.06306,-0.04727,-0.10572,-0.19300,-0.16295,-0.08405,0.12989,0.19336,0.24919,0.14047,-0.12309,-0.23774,-0.30037,-0.20511,-0.12882,-0.02612,0.02637,-0.00823,-0.05590,-0.05205,-0.08248,-0.15337,-0.08813,-0.01460,0.15827,0.17812,0.14389,0.03616,-0.05136,-0.13636,-0.13422,-0.06581,0.00232,0.02899,-0.02355,-0.03377,-0.05831,-0.08904,-0.07073,-0.12165,0.01563,0.02698,0.03087,0.07540,0.09159,0.04313,-0.08947,-0.09345,-0.01195,0.03650,0.01151,0.02121,0.00479,-0.02517,0.00484,-0.04116,-0.04594,-0.05756,-0.00504,-0.08725,-0.00731,0.02768,-0.06495,-0.15032,-0.08221,-0.00803,0.13356,0.16062,0.11937,0.01106,0.01765,-0.02547,0.00869,0.01687,0.01251,-0.00330,-0.04485,-0.06210,-0.05362,-0.16838,-0.11701,-0.02972,0.03879,0.09934,0.15284,0.17627,0.11162,-0.00768,0.01616,-0.00009,0.02142,};
float weights_input_3[] = {-0.00102,0.05839,0.05982,-0.00512,0.04442,0.17718,0.24128,0.08811,-0.06513,-0.02013,0.07720,0.05527,0.04397,-0.10551,-0.07069,-0.34758,-0.04634,0.00717,0.00124,0.04892,0.07938,0.08610,0.11319,0.20658,0.13192,-0.14231,-0.00249,-0.00997,-0.14391,-0.11118,-0.08922,0.10422,0.03431,-0.39939,-0.04662,-0.01350,0.01051,0.05472,0.11027,0.11101,0.13463,0.23714,0.13516,-0.08345,-0.29319,-0.04329,0.09697,0.20170,0.06269,0.09614,-0.26349,-0.17571,-0.02509,-0.03724,0.01650,0.00247,0.02551,0.01837,0.14508,-0.07711,-0.19635,-0.17731,-0.07181,-0.05228,0.22060,0.37265,0.15875,0.02521,-0.10511,-0.05226,-0.01337,0.00544,0.01074,0.00262,0.00463,0.00983,-0.09687,-0.10128,-0.07604,-0.27624,0.02144,0.26479,0.30491,0.42740,0.19895,0.05448,0.05799,-0.08489,-0.04265,0.00394,0.00835,-0.01865,-0.03858,-0.11177,-0.20138,-0.17008,-0.24474,-0.21893,0.00050,0.36529,0.57005,0.36244,0.35971,0.27164,0.11416,-0.00782,-0.08620,-0.00867,-0.00332,0.04113,-0.06339,-0.18467,-0.38744,-0.54199,-0.37451,-0.41592,-0.02216,0.04599,0.15251,0.24015,0.35229,0.34007,0.17477,0.01675,-0.09247,-0.01936,-0.00500,0.03993,-0.02898,-0.19147,-0.33259,-0.33091,-0.34239,-0.36875,-0.41476,-0.15023,-0.22783,0.10564,0.14549,0.21372,0.13459,-0.06243,-0.09089,-0.04144,-0.02052,0.02077,-0.00752,-0.15504,-0.16111,-0.13916,0.00888,-0.16307,-0.14780,-0.09304,-0.09411,0.01641,0.38544,0.26719,-0.20043,-0.10112,-0.14968,-0.04713,-0.02218,0.02008,0.00107,0.06717,0.01639,-0.06396,-0.21426,-0.18202,-0.17280,0.06412,0.14330,0.35820,0.08547,-0.08967,-0.17020,-0.16207,-0.15267,-0.04502,-0.02277,0.02197,0.00377,-0.00858,-0.08046,-0.08112,-0.26354,-0.25880,-0.25472,0.00546,0.11730,0.21212,0.07787,-0.01814,-0.27174,-0.16068,-0.18755,-0.09680,0.00072,0.04827,0.11390,-0.04608,-0.00882,-0.08773,-0.11666,-0.05760,0.07681,0.31019,0.20477,0.07166,-0.02387,-0.06775,-0.25130,0.04815,-0.10112,-0.09528,-0.00714,0.06247,0.14647,0.03855,0.05070,-0.05038,-0.01367,0.08207,0.41387,0.58964,0.29012,-0.01411,-0.08523,-0.01935,-0.06006,0.08963,-0.17295,-0.08010,0.01185,0.03414,0.17589,0.08023,0.08298,0.01360,-0.05612,0.05439,0.25357,0.33412,0.23113,-0.00482,-0.01302,-0.00675,-0.01565,0.07492,-0.10621,-0.03823,0.03053,0.04879,0.14028,0.04634,0.06726,0.09142,-0.01656,-0.19483,-0.02378,0.00919,0.26651,-0.03348,-0.06883,-0.15144,0.12334,0.02761,-0.05067,-0.01551,0.01341,0.03819,0.17021,0.09686,0.00912,-0.06011,-0.11942,-0.19728,-0.03828,0.38290,0.12787,0.19312,0.08705,-0.02262,-0.06454,0.03584,0.00528,0.00113,-0.00146,0.04092,0.21943,0.22643,-0.02724,-0.23413,-0.47933,-0.34676,-0.17768,0.12278,0.30710,0.06292,0.27748,0.08756,0.09217,0.06339,0.00430,-0.03121,0.00608,0.00060,0.11359,0.02111,-0.14720,-0.10992,-0.07372,-0.28643,-0.25819,0.09304,0.11701,0.26974,0.27063,0.26728,0.33230,0.13415,0.00177,-0.00077,-0.10728,};
float weights_input_4[] = {-0.00408,-0.06734,-0.07179,-0.00960,-0.20064,-0.13894,-0.25505,-0.08922,0.05869,-0.19046,-0.14965,0.02190,0.08958,0.17294,0.19239,0.38628,0.05293,-0.00896,-0.00344,-0.06638,-0.10010,-0.14441,-0.39861,-0.21496,-0.29239,0.17345,-0.26725,-0.27134,-0.18895,0.03239,-0.04844,-0.22232,-0.10996,0.28066,0.00553,0.05267,-0.00980,-0.01640,-0.16009,-0.09911,-0.19251,-0.45373,-0.18532,-0.20190,0.06274,-0.08364,-0.20112,-0.12367,-0.19236,-0.26001,0.06551,0.09226,0.01054,0.06444,-0.01453,0.04849,-0.05611,0.04115,-0.10833,-0.02740,0.04653,-0.11589,-0.11111,0.00268,-0.34485,-0.44710,-0.44384,-0.15359,-0.00004,-0.02524,0.01077,-0.01032,-0.00673,0.05004,-0.07310,0.07635,0.12353,0.11055,0.04904,0.24125,-0.06018,-0.25832,-0.28224,-0.54714,-0.28962,-0.16331,-0.12316,0.00312,0.02939,-0.00551,-0.00560,0.06809,-0.02772,0.17474,0.27782,0.16243,0.29845,0.27351,0.19457,-0.52748,-0.45539,-0.39949,-0.30919,-0.40366,-0.18151,-0.02879,0.03372,-0.01000,0.00585,0.00449,-0.00208,0.14924,0.40132,0.62284,0.64416,0.55942,0.10036,-0.22957,-0.00314,-0.15205,-0.23189,-0.32510,-0.13097,-0.02610,0.03373,0.00386,0.00766,0.00502,-0.04080,0.18265,0.43266,0.61767,0.44478,0.77561,0.41185,-0.02373,0.38954,0.20994,0.03557,-0.28317,-0.05246,-0.00838,0.02813,0.01188,0.01471,0.01717,-0.07354,0.10514,0.46599,0.61012,0.34871,0.17338,0.04399,-0.00233,0.08811,0.30991,-0.24138,-0.18570,0.26583,0.12958,0.04569,0.01641,0.01379,0.01581,-0.07213,0.14118,0.28238,0.36281,0.64862,0.07855,-0.03927,-0.33178,0.06529,0.02320,0.25794,0.28386,0.30245,0.19799,0.04452,0.01406,0.12192,0.12229,0.13138,0.20445,0.18584,0.47374,0.51595,0.53691,0.32703,0.09906,0.28697,0.04604,0.12237,0.19129,0.29541,0.13814,0.12092,0.02620,0.10747,0.13990,0.17879,0.33652,0.17597,0.46066,0.25120,0.31604,0.04580,-0.04425,0.14979,0.11995,0.16942,0.15310,0.31763,0.01562,0.03992,0.02819,0.12389,0.16524,0.16640,0.11482,0.13818,0.23237,0.07003,0.15880,-0.16222,-0.16931,0.21023,0.27822,0.24938,0.26517,0.32344,0.03772,0.01308,-0.02423,0.11225,0.14939,-0.00109,-0.02390,-0.02428,-0.04363,-0.03957,-0.10954,-0.01744,0.01238,0.23023,0.38004,0.14095,0.29668,0.26936,-0.01286,0.00089,-0.04010,-0.00893,0.11175,-0.16764,-0.23426,-0.44479,-0.46782,-0.43837,-0.17106,0.06390,0.20767,-0.03688,0.14497,-0.07640,0.11702,-0.08705,-0.16822,0.01480,-0.00701,-0.01063,0.00334,-0.15970,-0.20434,-0.28520,-0.40312,-0.31673,-0.33114,-0.04076,-0.37044,0.01214,-0.24696,-0.10117,-0.05578,0.06367,-0.17849,-0.08446,-0.00782,-0.00773,-0.04481,-0.25723,-0.39008,-0.32094,-0.16291,-0.02805,-0.13470,0.00401,-0.09231,-0.38503,0.02497,-0.21219,-0.17374,-0.20554,-0.20174,-0.02426,0.06133,-0.01581,-0.00509,-0.15569,-0.06603,0.01565,-0.15095,-0.15458,0.00205,0.22757,-0.10603,0.01108,0.01664,-0.14119,-0.25496,-0.21070,-0.16795,-0.02285,0.00115,-0.26821,};
float weights_input_5[] = {0.00300,0.02160,0.02439,0.14682,0.41924,0.36729,0.38673,0.32133,0.14249,-0.04848,0.07702,0.03741,0.14217,-0.00575,-0.05115,0.01742,0.10158,0.03329,0.00284,0.00774,0.11246,0.12176,0.30932,0.45284,0.35032,0.16921,0.10369,-0.01078,0.03974,0.09849,0.12029,0.15539,0.16168,-0.06200,0.04609,0.05841,-0.00458,-0.01317,0.02822,0.03987,0.23439,0.47914,0.15523,0.09996,-0.08769,-0.23944,-0.16487,-0.06057,0.10089,0.20870,0.13281,0.21749,0.05092,0.01682,-0.05888,-0.01578,-0.04315,0.01760,0.19716,0.08230,0.11232,0.03492,0.00744,-0.23862,-0.16308,0.07683,0.07048,0.13657,0.23120,0.20307,0.03149,-0.00859,-0.00640,-0.01403,0.00946,-0.09489,-0.06271,-0.26307,-0.15664,-0.16129,-0.03648,-0.24232,-0.15324,0.13402,0.15336,0.20721,0.19381,0.11924,-0.00322,-0.03053,-0.00956,0.02845,-0.06255,-0.22542,-0.11548,-0.24734,-0.33637,-0.06153,0.01822,-0.21341,0.03106,0.24600,0.40692,0.40685,0.11812,0.11008,-0.01074,-0.02764,-0.01494,0.04824,-0.05798,-0.16542,-0.17186,-0.39436,-0.21119,0.07540,0.31542,-0.22116,0.00128,0.35665,0.51404,0.18333,0.05230,0.04205,-0.03651,-0.03390,-0.01585,0.04566,-0.08138,-0.25877,-0.37637,-0.24854,-0.06051,0.16826,0.13315,-0.14657,0.31736,0.16017,0.04926,-0.11526,-0.24219,-0.01481,-0.04830,-0.03192,-0.02347,0.02676,-0.03564,-0.29311,-0.48775,-0.52828,-0.11970,0.28148,0.32382,0.28651,0.31426,-0.19110,-0.13716,-0.50015,-0.61796,-0.20619,-0.05378,-0.03897,-0.02610,0.02449,-0.03857,-0.23141,-0.37069,-0.18300,-0.10866,0.28542,0.43833,0.37395,0.21332,-0.00873,-0.20168,-0.32431,-0.26069,-0.16420,-0.07561,-0.03597,-0.04674,0.00362,-0.03979,-0.05054,0.09041,0.06366,0.03686,-0.00737,0.04763,-0.08760,-0.30292,0.07598,0.14664,0.04546,0.15921,0.04118,-0.06128,-0.03683,-0.03859,0.02488,-0.00103,0.09946,0.12565,0.06719,-0.15185,0.01545,-0.09651,-0.32334,-0.31813,0.17230,0.14962,0.27541,0.19567,0.17423,-0.01430,-0.03903,-0.04256,0.02224,0.04043,0.18949,0.19131,0.01979,-0.15731,-0.11864,-0.24308,-0.30814,-0.22553,0.05235,0.14439,0.15988,0.13706,0.14674,0.01354,-0.03222,-0.03576,0.00742,0.08186,0.24548,0.15958,-0.04409,-0.16465,-0.18718,-0.05754,-0.18391,-0.25822,-0.00203,0.13653,-0.04999,0.14482,0.08754,-0.01304,-0.02361,-0.00809,0.01531,0.09719,0.37161,0.18497,0.02992,-0.13732,-0.02711,0.07165,-0.14116,-0.22709,-0.16659,0.05867,-0.07433,0.11455,0.00468,0.00277,-0.07083,-0.00832,0.02267,0.09613,0.22078,-0.08422,-0.13925,-0.02609,0.20363,-0.01743,-0.04349,-0.37366,-0.07356,-0.19796,-0.13181,-0.00719,0.02796,0.02366,-0.01940,0.00005,0.04124,-0.02286,0.11130,-0.23651,-0.09034,-0.31862,-0.04819,-0.01455,-0.21218,-0.23082,-0.37448,-0.18457,-0.15885,-0.09530,0.04386,-0.00274,0.00819,-0.00135,-0.06083,-0.04359,-0.25246,-0.46307,-0.38295,-0.11555,-0.08361,-0.00016,-0.20700,-0.47839,-0.51058,-0.32538,-0.35343,-0.15577,0.02533,-0.01094,-0.00239,0.30338,};
float weights_input_6[] = {-0.00601,-0.01555,-0.01496,-0.12666,-0.36360,-0.51672,-0.39699,-0.51483,-0.23861,-0.11239,0.17443,0.14481,-0.15274,-0.39785,-0.44138,-0.32630,-0.01975,-0.02938,-0.00579,-0.01469,-0.03730,-0.02567,-0.16366,-0.28938,-0.48193,-0.35633,-0.18521,-0.12793,-0.03639,-0.22977,-0.17091,-0.09524,-0.23941,-0.24575,-0.01373,-0.02793,0.00790,0.01142,-0.02533,0.04474,0.03351,-0.03429,-0.39147,-0.23800,-0.46278,-0.21054,-0.18357,-0.15765,-0.22073,0.00250,0.00512,-0.03281,-0.00888,-0.03328,0.01444,0.00991,-0.05698,-0.02067,0.01313,-0.11458,-0.38321,-0.32642,-0.29015,-0.08972,0.25121,0.04860,-0.29004,-0.10243,-0.00531,0.04711,0.02453,-0.02647,0.00599,0.01240,-0.02818,-0.00948,0.20784,-0.06056,-0.06259,-0.02424,0.22329,0.41849,0.36652,-0.02024,-0.00102,-0.04717,0.14548,-0.01560,-0.03783,-0.02075,0.01368,0.00560,-0.02108,0.01403,-0.05329,0.00309,0.03347,-0.04790,0.08527,0.33972,0.07629,-0.10090,-0.01182,0.04723,-0.10694,-0.16185,-0.12814,-0.05788,0.01011,-0.00026,-0.03965,-0.10411,-0.15105,-0.22178,-0.21278,-0.04876,0.18604,0.35335,0.22400,-0.04438,-0.07357,0.04497,-0.12767,-0.17725,-0.13709,-0.06593,0.01293,0.00340,-0.08651,-0.18107,-0.00758,-0.03682,-0.03044,0.27830,0.41452,0.53300,0.10449,0.33838,0.24112,-0.12435,-0.14978,-0.25450,-0.17461,-0.07955,0.00463,-0.00670,-0.06471,-0.13431,-0.04794,-0.30777,0.01080,0.37448,0.42817,0.51748,0.28082,0.29970,0.17951,-0.11169,-0.30472,-0.21101,-0.16697,-0.05161,0.00655,-0.00569,-0.05600,0.04025,0.03339,-0.09981,0.08586,0.24741,0.03630,0.05578,0.39876,0.13706,0.05684,-0.10711,-0.40320,-0.07714,-0.11161,-0.04880,0.00423,-0.00525,-0.04114,0.15597,0.34811,0.16735,0.15822,0.07375,-0.18882,0.14344,0.47105,0.25601,0.07562,-0.11173,-0.24829,-0.19003,0.00353,-0.05246,0.01360,0.00610,0.01107,0.07687,0.36395,0.48209,0.29172,-0.13347,-0.18776,0.17422,0.36978,0.02615,0.01483,-0.18658,-0.09889,-0.20370,0.01119,-0.05050,0.01719,0.00880,0.03666,-0.07129,0.08926,0.26319,0.18335,0.12099,0.20611,0.25777,0.20105,-0.21244,-0.13866,-0.05161,0.03949,-0.12538,-0.00002,-0.01314,0.01789,-0.00488,0.06129,-0.14172,-0.10520,0.11925,-0.07969,0.05894,-0.08500,0.00261,0.01638,-0.26183,-0.21721,0.10057,0.04145,-0.02003,0.14174,0.02710,0.01494,0.00587,0.06638,0.08823,-0.03920,0.04851,0.12775,-0.19947,-0.31025,-0.20690,-0.06796,-0.23425,-0.09530,-0.00108,0.13271,0.18430,0.19781,0.10225,0.01402,0.00338,0.07380,0.16838,0.17294,0.05411,0.04953,-0.00518,-0.01933,0.23717,0.19625,0.02513,0.16767,0.15538,0.36567,0.24958,0.04814,0.00798,0.00082,0.01453,0.20564,0.24438,0.16068,0.10533,-0.04460,-0.21859,-0.16686,0.09438,0.37720,0.25061,0.24086,0.41740,0.44252,0.18916,0.00343,0.00957,0.00251,0.02246,0.12374,0.19943,0.35329,0.03475,-0.05175,-0.09316,-0.04173,0.12492,0.56297,0.64639,0.63343,0.62129,0.42619,0.11055,0.01680,0.00199,-0.09216,};
float weights_input_7[] = {0.00137,0.05343,0.04836,-0.04420,0.08964,0.33748,0.36716,0.29148,0.04032,0.01796,-0.13142,-0.08023,0.21628,0.34935,0.35043,0.22588,-0.03480,0.01830,0.00305,-0.00688,0.03661,0.06152,0.04376,0.31431,0.29072,0.07120,0.11516,0.08029,-0.02647,-0.08635,0.05347,0.17510,0.30627,0.18075,-0.03777,0.01081,-0.05321,-0.03220,0.03169,-0.04654,0.04034,0.23663,0.32927,0.16509,0.11519,0.18790,0.07385,-0.06678,0.13154,0.01588,0.01448,0.07769,0.09041,0.01680,-0.06748,-0.01769,-0.04100,-0.13870,-0.08347,0.08280,0.29328,0.26730,0.31992,0.15204,0.10099,-0.05684,-0.00188,-0.15967,-0.14695,-0.13513,-0.03319,-0.07276,-0.05142,-0.01876,-0.05425,-0.15201,-0.00637,-0.04000,0.18252,0.02431,0.09408,0.09468,0.00432,-0.17434,-0.13780,-0.30163,-0.37907,-0.15609,-0.06577,-0.08426,-0.05244,-0.01457,-0.03243,-0.23725,-0.14179,0.03366,-0.17922,-0.01019,-0.11823,0.14004,-0.15786,-0.20017,-0.16060,-0.24538,-0.30650,-0.10111,-0.07583,-0.08222,-0.06178,0.03112,-0.06126,-0.16696,-0.18254,-0.12581,-0.24048,-0.13527,0.17400,0.42093,0.12861,-0.02654,-0.02841,-0.29638,-0.27955,-0.11496,-0.08877,-0.09355,-0.06246,0.03053,-0.03672,-0.20760,-0.32885,-0.19919,-0.36385,-0.16957,0.30069,0.48382,0.34324,0.11384,-0.07910,-0.04276,-0.36829,-0.10508,-0.08313,-0.09290,-0.06835,0.00067,-0.00653,-0.17786,-0.27242,-0.32470,-0.34224,-0.11802,0.28018,0.37185,0.16711,0.05167,-0.03461,-0.10782,-0.40770,-0.12486,-0.08373,-0.09592,-0.06933,0.00239,-0.00775,-0.21518,-0.24938,-0.20554,-0.49535,-0.22186,0.15657,0.24109,0.01098,0.01431,0.00614,-0.11643,-0.06373,-0.11588,-0.09041,-0.09652,-0.05520,0.01784,-0.05926,-0.26862,-0.32201,-0.61565,-0.69886,-0.62486,-0.20422,-0.23843,-0.23397,-0.19072,0.20371,0.07696,0.14984,0.14546,-0.10838,-0.10149,-0.04471,0.00962,-0.09330,-0.34551,-0.54102,-0.83095,-0.77470,-0.43071,-0.23538,-0.24687,-0.17975,-0.05374,0.06965,0.15874,0.18240,0.25819,-0.10046,-0.10382,0.05402,0.09743,-0.10263,-0.12914,-0.21307,-0.44383,-0.39268,-0.42233,-0.31012,-0.17692,-0.06329,0.10152,0.02296,0.06622,0.02226,0.24702,-0.07201,-0.04553,0.06438,0.12541,0.10081,0.15065,0.10555,-0.24337,-0.06996,-0.16569,-0.14388,-0.09935,0.00675,0.03741,-0.01415,-0.05650,0.07622,0.17733,-0.12283,-0.03312,-0.05210,0.14415,0.15804,0.36891,0.17453,-0.09651,-0.22687,0.02392,0.11729,0.04122,0.15737,0.14243,0.08229,0.05713,0.06684,-0.08307,-0.14013,-0.15746,-0.05187,0.10735,0.19201,0.31096,0.11029,-0.19056,-0.29591,-0.13858,-0.12052,-0.09367,0.01467,0.00330,-0.08467,0.10952,0.00747,-0.17803,-0.01692,-0.05345,0.00695,-0.00839,0.09891,0.25831,0.29123,0.14093,0.12213,0.13583,0.13848,0.06089,-0.02644,-0.24293,0.15179,0.15899,-0.12893,-0.01951,0.02076,-0.07150,0.00555,-0.01878,-0.12667,0.06023,0.08198,0.33251,0.37175,0.16701,0.07361,0.10257,-0.03957,-0.17625,0.02537,-0.13073,-0.12956,-0.01165,0.01860,-0.00003,0.18892,};
float weights_input_8[] = {-0.00145,0.08312,0.08023,-0.02313,0.04879,0.40483,0.34279,0.31696,0.11464,0.17787,-0.04218,-0.18444,0.01927,0.11926,0.26686,0.14076,-0.07754,0.00687,-0.00085,0.10753,0.01759,-0.05980,0.21099,0.38085,0.40811,0.11532,0.29735,0.26218,0.05259,-0.11761,0.05747,0.18052,0.34733,0.17500,-0.01311,-0.06121,0.02627,0.03868,0.10725,0.00812,0.26028,0.41197,0.33411,0.31979,-0.01384,0.23754,0.30052,0.03417,0.07556,0.11225,-0.01414,-0.03168,-0.03315,-0.06598,0.02768,-0.06198,0.07212,0.01425,0.14032,0.19654,0.20662,0.39737,0.23830,0.27611,0.24868,0.08468,0.15500,-0.13890,-0.08954,-0.08691,-0.06877,0.00458,0.03188,-0.06265,0.03775,0.07346,-0.03442,0.15887,0.14560,-0.12462,-0.17357,0.09080,0.03619,0.09336,-0.09919,-0.22509,-0.26146,-0.11019,-0.10156,0.00654,0.03165,-0.08535,0.03850,-0.01439,-0.08438,0.09649,-0.07294,-0.26388,-0.44706,0.05838,0.06532,0.07646,-0.15260,-0.19352,-0.12269,0.00098,-0.06517,0.00301,0.00931,-0.00673,0.00581,-0.07141,-0.14035,-0.07308,-0.33426,-0.36008,-0.26241,0.21430,0.06482,0.05679,-0.13640,-0.06062,-0.01938,0.07384,-0.05696,0.00902,0.00908,-0.00817,0.08122,-0.07677,-0.24661,-0.44768,-0.41342,-0.37502,-0.12620,0.30269,0.04824,0.15785,0.25433,0.37803,0.06631,0.11742,-0.02854,-0.01026,0.00974,-0.02657,0.06140,-0.06224,-0.30524,-0.15406,-0.04600,-0.00627,-0.26468,-0.02807,-0.13901,0.20165,0.45572,0.46211,0.01350,0.07991,-0.04503,-0.02183,0.00366,-0.02638,0.03617,-0.29842,-0.27769,-0.11837,-0.32660,-0.13021,-0.33569,-0.04581,-0.19765,0.25186,0.43585,0.13447,0.15598,-0.00686,-0.04997,-0.01960,0.00498,-0.03036,-0.07970,-0.49147,-0.75060,-0.64507,-0.47297,-0.28292,0.08666,0.23782,0.23342,0.06259,0.09804,0.04169,0.04964,0.12212,-0.07344,-0.02291,0.00718,-0.06115,-0.15217,-0.69741,-0.85107,-1.06331,-0.40623,0.01540,0.41396,0.41962,0.22253,0.14179,0.02211,-0.01919,-0.03220,0.22706,-0.08583,-0.02292,0.00316,-0.08176,-0.21575,-0.48966,-0.61462,-0.71308,-0.28372,-0.32082,0.03384,0.17837,-0.02518,0.00077,0.00424,-0.18415,-0.08731,0.15191,-0.13137,0.01049,0.02357,-0.03751,-0.07710,-0.14616,-0.10824,-0.25693,0.01973,-0.15457,-0.02885,0.07658,0.03177,-0.12483,-0.06044,-0.10997,-0.01240,0.15077,-0.11115,0.03238,0.02539,-0.00617,0.02662,0.03634,0.14335,0.12931,0.10622,0.10917,0.12624,0.10840,0.24840,-0.00137,-0.06648,0.01125,0.15441,-0.06924,-0.09434,0.02415,0.02589,0.04949,0.09570,0.17505,0.38866,0.14951,-0.24554,-0.19585,-0.02942,0.17566,0.19710,0.18718,0.07026,0.14988,-0.12684,-0.20465,-0.01948,0.02478,0.00156,0.04503,0.17630,0.24422,0.58395,0.31393,-0.01029,0.15102,0.02080,0.04537,-0.04355,-0.26155,0.04890,-0.07129,-0.26759,-0.09741,0.00350,-0.04228,0.00244,0.00297,0.11412,0.25154,0.32870,0.46612,0.32615,0.00037,-0.31206,-0.09725,-0.22357,-0.39623,-0.08177,-0.09260,-0.08905,0.04224,0.00516,0.00144,0.14120,};
float weights_input_9[] = {-0.00348,-0.00745,-0.00241,0.03328,-0.09980,-0.04561,-0.11024,0.00141,0.16631,0.15641,0.06079,0.24075,-0.01530,-0.22848,-0.07523,-0.35957,-0.24689,-0.03113,-0.00181,0.07898,-0.01084,-0.07446,-0.09655,-0.13008,0.00293,-0.14706,-0.18194,-0.08469,-0.17417,-0.08824,-0.11457,-0.21734,-0.28529,-0.31488,-0.14845,-0.03145,0.08014,0.08650,0.00630,0.03642,-0.13314,0.02834,0.05943,-0.10943,0.07061,-0.02908,0.15477,0.10672,0.16149,-0.06520,-0.17912,-0.29208,-0.22204,0.06856,0.08917,-0.00535,0.04351,0.02226,0.07602,-0.11936,-0.25095,-0.25601,0.07759,-0.15027,-0.13324,0.14673,0.33944,0.08066,-0.10662,0.07721,-0.08741,0.14922,0.07877,-0.00478,0.01737,0.08515,-0.24212,0.21275,-0.01976,0.01718,0.01226,-0.10154,0.06544,0.27280,0.33925,0.08871,0.01748,0.12299,0.18857,0.16821,0.04214,-0.00250,0.01141,0.09461,0.09498,0.07439,0.09853,0.03305,0.05360,-0.20767,0.23554,0.39865,0.32899,0.14010,0.23981,0.25340,0.37158,0.18483,0.04625,-0.00321,0.04632,0.12830,-0.03635,0.12456,0.03753,0.00017,-0.20896,-0.38130,-0.15873,-0.14421,0.06299,0.39257,0.33570,0.15554,0.30516,0.19251,0.04796,-0.04722,0.09541,0.35790,0.06317,0.08669,0.04652,-0.24725,-0.53681,-0.60979,-0.77651,-0.49012,-0.21962,0.26793,0.46003,0.32826,0.31992,0.31149,0.05258,-0.01324,0.04063,0.33182,0.25881,0.42977,-0.05438,-0.38091,-0.60359,-0.79631,-0.55135,-0.34836,0.06349,0.37923,0.49740,0.33564,0.29815,0.20880,0.05219,-0.01441,0.04252,0.42993,0.07931,-0.00045,-0.11401,-0.39329,-0.49715,-0.56290,-0.26098,-0.14812,0.03210,0.07532,0.36379,0.10011,0.17210,0.20015,0.05042,-0.01565,0.06433,0.24037,-0.05018,0.15432,-0.04277,-0.09303,0.08539,0.00058,-0.11352,-0.34102,-0.27372,-0.16645,-0.30230,-0.16386,-0.00344,0.17341,0.04731,-0.02059,0.04055,0.14462,0.11074,0.02362,0.09318,0.06543,0.16738,-0.03111,-0.26931,-0.38207,-0.28381,-0.34724,-0.52390,-0.21444,-0.03865,0.18035,-0.02824,-0.04492,0.01513,0.16687,0.06244,0.20430,0.22876,0.23670,0.25447,-0.13414,0.03348,-0.05165,-0.23936,-0.34171,-0.41562,-0.23851,-0.01700,0.09567,-0.03194,-0.05159,-0.06833,0.02275,-0.06119,0.23484,0.13191,0.16190,0.28867,-0.09390,0.20099,0.15729,-0.03305,-0.17307,-0.34505,-0.19050,-0.09961,-0.04581,0.08508,-0.05421,-0.07161,-0.27587,0.00123,0.28030,0.36185,0.20819,0.17288,-0.03068,0.25273,0.02922,-0.03523,-0.10711,-0.13152,-0.04269,-0.22742,0.09152,0.08480,0.00252,-0.06552,-0.08078,0.12833,0.34449,0.40570,0.06577,0.12417,0.01896,0.33343,-0.01430,0.26861,-0.17364,-0.11559,-0.06489,-0.13403,0.08856,-0.00072,0.09174,0.01905,-0.04493,0.14079,0.05206,0.31621,0.04624,-0.00370,0.18240,0.16548,0.23236,-0.07953,-0.24864,0.05100,-0.18343,-0.00534,0.08614,-0.00028,0.03691,0.19594,0.16066,0.02379,0.33335,-0.13393,-0.12239,0.07696,0.06362,-0.07933,-0.16473,-0.03240,0.02019,0.09422,0.08390,-0.00620,-0.00016,0.02253,};
float weights_input_10[] = {-0.00026,0.00894,0.00625,-0.17888,-0.30862,-0.34879,-0.33941,-0.42010,-0.19689,-0.07531,0.00046,0.08283,0.17909,0.05334,0.06833,0.02781,-0.11314,0.00101,-0.00103,-0.05181,-0.10970,-0.01470,-0.23239,-0.50206,-0.46030,-0.18333,-0.18509,-0.22037,-0.19686,-0.10835,0.00632,0.12167,0.02994,0.23758,-0.09673,-0.07059,-0.05922,-0.12347,-0.03999,-0.04493,-0.12536,-0.42179,-0.16725,-0.17829,-0.02572,0.05731,-0.07129,0.11939,-0.15332,-0.09150,0.09865,-0.04107,-0.06437,-0.12973,-0.05831,-0.07092,-0.06704,-0.07040,-0.19349,-0.19172,-0.03007,0.01995,0.06571,0.07946,0.24684,-0.21079,-0.16194,-0.13816,-0.15181,-0.20489,-0.06034,-0.09228,-0.05771,-0.07217,-0.07163,0.03051,0.27784,-0.03639,-0.07202,0.02130,0.01656,0.26189,0.02006,-0.32658,-0.20190,-0.19641,-0.29233,-0.32028,-0.14188,-0.09442,-0.03067,-0.06997,0.04685,0.04326,0.11708,-0.01441,-0.08754,-0.14604,-0.05271,0.40864,-0.17049,-0.52818,-0.37635,-0.61643,-0.62968,-0.45448,-0.16953,-0.12659,-0.03048,-0.06463,0.06430,0.12341,0.16964,0.08389,-0.07508,-0.13963,-0.10394,0.44662,0.20340,-0.36239,-0.45888,-0.64184,-0.64700,-0.37676,-0.08646,-0.12953,-0.03173,-0.03644,0.04938,0.14600,0.36650,0.33421,-0.11860,0.01630,0.22694,0.46824,0.30235,0.03128,0.09548,-0.27274,-0.22893,-0.20422,-0.09818,-0.14157,-0.03182,-0.04726,0.07039,0.22752,0.47791,0.40313,0.00510,-0.10326,-0.08094,0.10952,0.12505,0.30815,0.19637,0.24290,0.21327,0.15061,-0.09048,-0.06789,-0.02995,-0.04521,0.07385,0.31183,0.29275,0.17444,0.14352,-0.08207,-0.17656,-0.15479,0.05998,-0.04311,0.25617,0.23379,0.08324,0.25628,0.05899,-0.06173,-0.00191,-0.01794,0.07518,0.10132,0.08722,-0.00810,-0.03180,0.03279,-0.19724,-0.10865,-0.08187,-0.14860,0.06514,0.06874,0.04045,0.07602,0.16397,-0.06104,0.00271,-0.02017,0.06560,-0.05304,-0.07412,0.07010,0.22241,-0.16071,-0.06209,0.08228,0.04276,-0.15638,0.09031,0.03589,0.03530,0.00808,0.12746,-0.06053,0.03978,-0.01517,0.05136,-0.12325,-0.09616,0.03970,0.10263,-0.12361,-0.05589,0.29596,0.22894,-0.06069,0.03665,0.10608,0.08015,0.08414,0.05789,-0.01742,0.03995,0.00132,0.07341,-0.08997,-0.13956,-0.00479,0.15746,0.01141,-0.00341,0.35704,0.23579,-0.04699,-0.03496,0.14937,0.03118,0.12845,0.08847,0.02457,-0.05640,-0.00758,0.02440,-0.17711,-0.32709,-0.30638,-0.15107,0.07830,0.08774,0.25816,0.22989,0.13091,-0.12898,0.16036,-0.19468,0.01923,0.12424,-0.05330,-0.05861,-0.07171,-0.04704,-0.20068,-0.26719,-0.31394,-0.22091,-0.11409,0.02226,0.15943,0.16539,-0.09979,-0.03920,0.12582,0.01924,0.03147,0.11431,-0.05483,0.00096,-0.13549,-0.04393,-0.14710,-0.00161,-0.16764,0.15992,-0.02768,0.12474,0.22303,0.06843,-0.07364,0.13430,0.23715,0.18870,0.11171,0.00696,-0.13037,-0.00114,0.00496,-0.12776,0.04852,0.24729,-0.06757,0.02615,0.08631,0.06863,0.21211,0.33630,0.47293,0.28194,0.36593,0.13632,-0.13344,0.00696,0.00040,-0.17708,};
float weights_input_11[] = {-0.00201,-0.03589,-0.02969,0.20770,0.22118,0.06823,0.11164,0.11533,0.36425,0.38035,0.24114,0.03948,-0.29747,-0.21705,-0.20810,-0.10721,0.12743,-0.00500,-0.00006,0.04890,0.09138,-0.02266,0.08650,0.30856,0.26632,0.11715,0.18161,0.32697,0.26882,0.05934,-0.13910,-0.24714,-0.15336,-0.27668,0.07795,0.10630,0.08313,0.16439,-0.00962,0.03760,0.01912,0.26819,0.17178,0.12520,-0.01242,-0.11651,-0.04096,-0.43167,-0.06371,0.03983,-0.03062,0.02908,0.02233,0.16812,0.08554,0.11310,0.08518,0.09934,0.39268,0.27626,0.18079,0.05557,-0.11889,-0.15051,-0.41381,0.08245,-0.01473,0.09883,0.28437,0.42262,0.10031,0.16843,0.08356,0.11244,0.06399,0.04328,-0.04925,0.21268,0.14416,0.06347,-0.11992,-0.42515,0.05142,0.23512,0.36266,0.30513,0.48569,0.53942,0.33176,0.16818,0.03206,0.11064,-0.03723,0.09544,-0.00549,0.18692,0.23510,0.02522,-0.03456,-0.58825,0.06534,0.60023,0.61476,0.86324,0.85206,0.68246,0.39953,0.21571,0.03281,0.07797,-0.04647,0.01319,-0.07132,0.08805,0.19470,0.13835,0.00066,-0.67102,-0.29573,0.41070,0.68772,0.98376,0.88671,0.45863,0.25631,0.22196,0.03293,0.02816,-0.01236,0.02543,-0.23903,-0.28388,0.22873,-0.02981,-0.22201,-0.55359,-0.40205,-0.15531,-0.16203,0.24854,0.39599,0.26337,0.26155,0.33302,0.03363,0.05699,-0.07624,-0.12198,-0.44874,-0.42867,-0.23742,0.08551,0.03434,-0.10776,-0.06641,-0.42107,-0.37130,-0.32859,-0.24357,-0.13926,0.24471,0.19825,0.03375,0.05532,-0.07921,-0.16678,-0.32367,-0.19798,-0.23258,0.06149,0.31983,0.23146,0.26856,0.04904,-0.44411,-0.24329,-0.16782,-0.24585,0.04732,0.18894,0.00752,0.02874,-0.07136,0.11388,-0.04029,0.10427,0.22575,0.10534,0.40146,0.24608,0.39147,0.19756,-0.18461,-0.17002,-0.21007,-0.20232,-0.12810,0.17792,0.00004,0.02844,-0.06703,0.14816,0.25035,0.16867,0.04908,0.27422,0.12345,-0.05648,0.16567,0.09693,-0.27456,-0.19673,-0.17323,-0.24514,-0.13704,0.17818,-0.11495,-0.03049,-0.07323,0.12572,0.13786,0.14747,-0.06994,0.08652,0.03179,-0.48000,0.05601,0.02350,-0.28737,-0.22700,-0.21747,-0.36119,-0.04096,0.08443,-0.11268,-0.04211,-0.15279,0.15139,0.15339,0.06749,-0.20802,-0.03145,0.07010,-0.44659,0.03504,0.05836,-0.08506,-0.20700,-0.19889,-0.33569,-0.11997,-0.07146,0.07772,-0.02859,-0.08785,0.07829,0.28179,0.27464,0.18250,-0.07505,-0.08952,-0.24461,-0.01524,-0.15885,0.00831,-0.24176,-0.07002,-0.08899,-0.26537,0.07663,0.08226,0.01821,0.00298,0.19756,0.28731,0.25637,0.13679,-0.00442,-0.12130,-0.20497,-0.05609,-0.00390,-0.05791,-0.25782,-0.05962,-0.13165,-0.22139,0.07832,-0.00215,0.15071,-0.05442,0.09144,0.02022,0.21873,-0.10811,-0.04827,-0.21299,-0.30364,0.02082,0.02426,-0.32813,-0.25456,-0.28303,-0.21817,-0.00959,0.19523,0.00083,-0.01236,0.16175,-0.06693,-0.25503,0.09274,-0.05276,-0.07498,0.02184,-0.24104,-0.14531,-0.51107,-0.32776,-0.45867,-0.14862,0.12031,-0.01002,-0.00031,0.09125,};
float weights_input_12[] = {0.00863,0.00656,0.00567,0.03766,0.24057,0.19795,0.12964,-0.15461,-0.19943,-0.05057,0.03396,0.09111,0.41967,0.42929,0.26436,0.29004,0.10472,0.08364,0.00879,-0.02520,0.00947,0.10374,0.07455,-0.04950,-0.09573,0.01059,-0.10166,-0.11121,-0.06964,0.02703,0.02009,0.41342,0.46332,0.33198,0.07291,0.05869,-0.03201,-0.06444,0.00874,-0.00488,-0.02385,-0.31767,0.15247,-0.17269,0.25635,0.24923,-0.02389,-0.03415,-0.10127,0.25783,0.41956,0.25626,0.07248,-0.01368,-0.04136,-0.02573,-0.04397,-0.02661,-0.02375,-0.15785,0.00533,0.10861,0.33310,0.34020,0.13219,-0.12994,-0.07977,0.17036,0.29035,0.07639,0.03560,0.01381,-0.03207,-0.02540,-0.00729,-0.09338,0.10268,-0.17106,-0.24773,-0.11661,0.15618,0.19030,0.06587,0.01727,0.10553,0.17587,0.00179,-0.02835,0.01416,-0.01067,-0.03981,-0.02152,0.00982,-0.07643,0.02321,-0.21319,-0.29700,0.06794,0.19392,0.32126,0.16155,0.07493,0.10938,-0.06909,-0.11426,-0.03741,-0.00034,-0.03353,-0.04115,-0.02386,0.01108,0.04163,0.02095,-0.10097,-0.12717,-0.03038,-0.00169,0.13468,0.13332,0.29558,0.14000,-0.21615,-0.19415,-0.05630,-0.00072,-0.03392,-0.04087,-0.02411,-0.02987,0.03232,0.02118,0.07433,-0.13484,-0.21501,-0.16474,-0.01062,0.27638,0.21732,-0.10631,-0.21429,-0.16365,-0.03275,0.00897,-0.02604,-0.04100,-0.02326,0.01037,0.05514,0.13511,0.09971,0.01461,-0.27759,-0.10864,0.05392,0.25692,-0.00582,-0.21071,-0.20725,-0.21548,-0.05029,-0.00974,-0.03692,-0.04010,-0.02258,0.01797,0.16371,0.20040,0.19125,0.04233,-0.21803,-0.00382,0.14487,0.09257,-0.04826,-0.19031,-0.14802,-0.10595,-0.05994,-0.00750,-0.03608,-0.05386,-0.03664,0.02071,0.14547,0.17582,0.18942,0.01514,-0.07041,0.15396,0.14517,-0.07107,-0.11207,-0.16459,-0.08061,-0.12010,-0.06767,-0.01830,-0.04177,-0.04769,-0.04170,0.11392,0.25446,0.21694,0.17102,-0.12659,0.03305,0.17586,0.18799,0.16593,0.05855,-0.23226,-0.07754,-0.09133,-0.04360,-0.01877,-0.04845,-0.02616,-0.00558,0.13863,0.21662,0.14861,-0.02925,-0.05496,0.05334,0.20452,0.38437,0.33221,0.16873,-0.17965,-0.02333,0.00404,0.07087,0.01997,-0.01350,-0.02446,-0.00515,0.09303,0.11812,0.01132,-0.18911,0.00817,0.11972,0.32237,0.47803,0.33547,0.25709,-0.12535,-0.21089,-0.15110,-0.05260,-0.06715,-0.00601,-0.00533,-0.02172,-0.02297,-0.13552,-0.27490,-0.46105,-0.49199,-0.02161,0.19714,0.23852,0.33953,0.16870,-0.25407,-0.33959,-0.35120,-0.14560,-0.08212,-0.11187,-0.03838,-0.04973,-0.08852,-0.19155,-0.36764,-0.52017,-0.41652,-0.25331,-0.13207,-0.01519,-0.02584,-0.07724,-0.33557,-0.37762,-0.30388,-0.06415,0.03533,-0.01018,0.00226,-0.09762,-0.15830,-0.21583,-0.26653,-0.38075,-0.26902,-0.23681,-0.24991,-0.23756,-0.27068,-0.27480,-0.03077,0.02179,0.01741,0.03127,0.02363,-0.06033,0.00066,-0.04360,-0.15486,-0.19951,-0.35153,-0.26150,-0.17859,-0.24930,-0.29888,-0.16696,-0.05513,0.13953,0.09369,0.14124,0.14240,-0.00620,0.01049,-0.00025,-0.21075,};
float weights_input_13[] = {-0.00945,-0.00854,-0.00746,0.00330,-0.05898,-0.18138,-0.09136,-0.06893,0.09821,-0.07618,-0.05588,0.03125,0.00335,-0.15051,-0.07531,0.04599,-0.00119,-0.00845,-0.00982,0.01720,-0.01023,-0.04806,-0.21155,-0.04266,-0.14581,0.06284,-0.13645,-0.09090,-0.00197,0.15346,-0.04496,-0.21358,-0.14846,0.03319,0.02569,0.00876,0.04541,0.04094,-0.04373,-0.05610,-0.03815,-0.14157,0.00081,-0.02040,-0.13089,-0.23111,-0.11740,0.03886,0.00464,-0.15841,-0.12753,0.05524,0.00625,0.05107,0.02368,0.01210,0.00220,0.03583,-0.07330,0.07431,0.16734,0.00551,-0.25283,-0.15718,-0.10779,-0.05126,-0.00931,-0.17700,-0.07881,0.04850,-0.00441,0.00842,0.04499,0.01447,0.05460,0.00178,-0.02233,-0.01589,-0.00723,0.06500,-0.04428,-0.07850,-0.00966,-0.13615,-0.11565,-0.04937,0.01053,0.02814,-0.00777,0.00982,0.04517,0.04760,0.01974,-0.09132,0.03196,-0.05978,-0.04405,0.15062,0.14796,-0.12853,-0.11810,-0.19275,-0.16447,-0.11584,-0.03968,0.02866,0.04113,0.00723,0.05367,0.04760,0.02390,0.00201,0.15633,0.09597,0.21906,0.24773,0.10229,-0.09677,-0.01776,-0.12463,-0.05193,-0.16268,-0.02095,0.05893,0.04046,0.01821,0.05350,0.04566,0.04602,0.05253,0.14959,0.20642,0.31613,0.36767,0.26854,0.03392,0.11236,0.00133,0.03822,-0.12041,-0.00698,0.07314,0.03041,0.00451,0.03318,0.02441,0.02806,0.06151,0.27554,0.20454,0.19581,0.33972,0.33820,0.08191,-0.02145,-0.02363,-0.07418,-0.11892,0.03992,0.11356,0.06813,0.01156,0.02998,0.02491,0.02478,0.15134,0.08997,0.14286,0.29336,0.28380,0.26532,-0.03843,0.07738,0.06398,0.06666,0.01914,0.17338,0.15942,0.06738,0.01269,0.05438,0.04533,0.11084,0.16048,0.09914,0.08634,0.14209,0.15145,-0.15295,-0.28019,-0.09162,0.09732,0.23830,0.21365,0.37057,0.15732,0.10265,0.03721,0.07209,0.09521,0.11920,0.17311,-0.06977,0.07427,-0.06267,-0.02579,-0.29495,-0.42727,-0.09834,0.25366,0.34316,0.34873,0.32123,0.17562,0.10707,0.04100,0.09599,0.12260,0.14034,0.20421,0.10905,0.13255,-0.14530,-0.08657,-0.49350,-0.45909,0.03439,0.37737,0.35534,0.31690,0.22154,0.10415,0.07538,0.00617,0.08708,0.10082,0.13543,0.18807,0.07984,0.01303,-0.19597,-0.23199,-0.24305,-0.22301,0.11507,0.31817,0.32087,0.18416,0.16354,0.01148,-0.02417,0.01226,0.04247,0.09413,0.12800,0.19056,-0.02124,-0.08773,-0.29523,-0.12488,-0.04856,0.03026,0.01157,0.16505,0.13064,0.06728,-0.06686,-0.13116,0.03233,0.01162,0.04525,0.10180,0.07365,0.11959,-0.21599,-0.17119,-0.05183,-0.00945,-0.04820,-0.15278,0.07093,0.12814,-0.10865,-0.07077,-0.03524,-0.08263,0.01392,0.01844,-0.00579,0.04661,-0.02700,0.03813,-0.11161,0.00073,0.00898,0.03479,0.14533,0.11436,0.04006,-0.00222,-0.20701,-0.21315,-0.21013,-0.02960,-0.02894,0.04418,-0.01092,-0.02847,-0.05520,-0.01980,0.00669,0.05597,0.07418,0.24959,0.24402,-0.00475,-0.04340,-0.18822,-0.28135,-0.27011,-0.20991,-0.03653,-0.03016,-0.00147,-0.00782,};
float weights_input_14[] = {-0.00065,0.02014,0.01814,0.04892,0.18765,0.58511,0.50959,0.71862,0.19407,-0.23025,-0.37273,-0.27894,0.04878,0.17344,0.29196,0.26620,-0.08785,0.00994,-0.00046,0.10101,-0.04126,0.03695,0.14195,0.45574,0.51213,0.35636,0.16285,0.08536,-0.12784,0.02313,0.22977,0.11560,0.28175,0.14756,-0.00616,-0.05370,0.08109,0.03383,0.05987,0.15227,0.31045,0.35472,0.32159,0.27044,-0.02107,0.07965,0.22050,0.12843,0.04833,0.20446,0.01523,-0.03452,-0.07177,-0.05167,0.08160,-0.05432,0.11924,0.16912,0.12936,0.19129,0.14960,0.07163,-0.14113,0.06184,-0.09646,0.12560,0.10725,-0.02895,0.10837,-0.13551,-0.11961,0.00382,0.08964,-0.05411,0.04981,0.23572,-0.27524,0.04431,0.10759,-0.10504,-0.39313,-0.23561,-0.33088,0.12231,-0.31688,-0.12640,-0.25187,-0.15791,-0.15210,0.01251,0.08899,-0.07500,0.02575,0.02737,-0.14500,0.00859,-0.04009,-0.08134,-0.27159,-0.42527,-0.13480,0.01590,-0.31239,-0.28163,-0.13447,-0.02773,-0.12791,0.00969,0.07016,-0.05668,-0.05599,-0.05997,-0.04716,0.14283,-0.03523,-0.04093,-0.31337,-0.33419,0.00997,0.25746,-0.20299,-0.09712,0.01568,0.01630,-0.11085,0.02580,0.06935,-0.05740,-0.03262,-0.05244,-0.22192,-0.36904,-0.24893,-0.00541,-0.10149,-0.17282,0.07996,0.15954,0.23071,0.43940,0.09796,0.04856,-0.07412,0.00325,0.06744,-0.13030,-0.05998,-0.10905,-0.07511,0.16023,0.33231,0.39907,-0.14539,-0.23562,-0.10585,0.32707,0.39760,0.52373,0.16537,0.06959,-0.09238,-0.01419,0.05805,-0.13021,-0.10116,-0.24887,-0.04787,-0.05086,0.02764,0.15279,-0.09979,0.04981,-0.08861,0.49536,0.53420,0.18641,0.28960,-0.00952,-0.09109,-0.00977,0.09027,-0.11029,-0.12979,-0.57127,-0.73779,-0.64657,-0.47787,-0.05376,0.07511,0.08126,0.24548,0.39555,0.19316,0.11651,0.18093,0.28236,-0.09975,-0.01067,0.09128,-0.09287,-0.17680,-0.63079,-0.96840,-1.13157,-0.45149,0.24031,0.53838,0.33146,0.04586,0.37013,0.11124,0.09855,0.00773,0.35037,-0.11497,-0.01063,0.09870,-0.09027,-0.21718,-0.28678,-0.44849,-0.58470,-0.28783,-0.09439,0.03603,0.00454,-0.22945,0.20576,0.19640,-0.07848,0.02043,0.26138,-0.20030,0.05135,0.11999,-0.08332,-0.10278,0.05034,0.01002,-0.18643,-0.04561,-0.15829,-0.05448,-0.11882,-0.14674,0.11929,0.07534,0.08175,0.14453,0.23163,-0.09847,0.06205,0.07925,-0.05888,-0.04116,0.01250,0.15923,0.10370,0.03342,0.05147,0.04480,-0.09885,0.05950,0.09326,-0.06284,0.02535,0.30579,-0.14519,-0.07609,0.07717,0.07745,0.06907,0.04995,0.17564,0.16765,0.02715,-0.35603,-0.32765,-0.16145,-0.22533,-0.11695,0.19967,-0.03422,0.12639,-0.16335,-0.34846,-0.03002,0.07784,0.00017,0.03934,0.14385,0.27320,0.39998,0.22848,-0.35125,-0.03168,0.01748,-0.14369,-0.25834,-0.26770,-0.19344,-0.39992,-0.62075,-0.22263,-0.01050,0.01180,0.00130,0.00266,0.20653,0.24621,0.24547,0.36062,0.09053,-0.15295,-0.40718,-0.41325,-0.69318,-0.62537,-0.52033,-0.63069,-0.37878,-0.03328,-0.00971,-0.00098,0.23423,};
float weights_input_15[] = {0.00961,-0.00970,-0.01188,0.01109,0.06024,0.20126,0.09878,0.05491,-0.06801,0.13450,0.07965,-0.02380,0.04104,0.24022,0.12546,-0.01699,0.00455,0.00576,0.00864,-0.02941,0.00308,0.04531,0.23707,0.04316,0.11162,-0.00448,0.19214,0.14854,0.04376,-0.15234,0.05029,0.17696,0.15841,-0.00988,-0.02581,0.00412,-0.06532,-0.05390,0.02472,0.08325,0.06173,0.13798,0.00776,0.10315,0.21712,0.29352,0.11375,-0.08939,-0.03600,0.09509,0.10064,-0.05352,-0.01302,-0.03037,-0.03430,-0.01608,0.00856,0.00162,0.04706,-0.03779,-0.12240,0.06396,0.27053,0.12946,0.05968,-0.01964,-0.07216,0.13254,0.02528,-0.08110,-0.00084,-0.01341,-0.05844,-0.01715,-0.07233,0.04988,0.05562,0.11530,0.09684,0.01236,0.04446,0.03209,-0.04017,0.03528,0.02113,-0.00873,-0.05416,-0.06092,-0.01560,-0.01197,-0.06066,-0.05126,-0.02623,0.14188,-0.01092,0.16472,0.12717,-0.14285,-0.18930,0.11589,0.06773,0.18115,0.08374,0.03285,-0.01976,-0.07932,-0.05304,-0.01448,-0.06561,-0.06411,-0.01311,0.01221,-0.08954,0.03166,-0.16099,-0.22108,-0.11498,0.13983,0.02763,0.17419,-0.01638,0.10760,-0.00740,-0.08969,-0.05637,-0.02035,-0.06556,-0.06522,-0.03471,-0.04202,-0.10236,-0.20688,-0.29688,-0.41562,-0.18285,0.03042,-0.07077,0.05752,-0.03317,0.13715,0.02567,-0.06258,-0.04626,-0.01948,-0.02265,-0.02045,-0.03199,-0.06197,-0.30840,-0.24361,-0.28852,-0.39144,-0.35668,-0.09322,0.04429,0.11551,0.07301,0.17623,0.05514,-0.07519,-0.05710,-0.02657,-0.02034,-0.02140,-0.03003,-0.19859,-0.12621,-0.19069,-0.36845,-0.33228,-0.25340,0.03164,-0.11347,-0.09628,-0.09749,0.01210,-0.12540,-0.09855,-0.05568,-0.02638,-0.01832,-0.01671,-0.11547,-0.22776,-0.11500,-0.15310,-0.15001,-0.11367,0.28010,0.37002,0.11865,-0.08972,-0.27821,-0.23809,-0.36689,-0.12103,-0.06095,-0.02869,-0.05961,-0.09350,-0.16325,-0.26145,0.02238,-0.09113,0.08504,0.01796,0.31409,0.44713,0.10090,-0.24024,-0.36693,-0.42577,-0.35270,-0.21099,-0.07980,-0.02980,-0.07658,-0.12377,-0.20021,-0.35938,-0.23200,-0.15814,0.16008,0.06106,0.47497,0.39700,-0.11626,-0.39320,-0.42719,-0.42267,-0.30270,-0.13893,-0.03289,0.00655,-0.06922,-0.08482,-0.15864,-0.33405,-0.17679,0.00268,0.27933,0.23083,0.22836,0.16323,-0.16487,-0.33623,-0.39123,-0.20689,-0.21791,-0.02761,0.07831,0.01874,-0.06176,-0.08475,-0.12215,-0.23069,-0.00092,0.11420,0.37779,0.18676,0.05692,-0.01088,-0.06144,-0.18346,-0.11687,-0.03650,0.05927,0.12397,0.01381,0.01005,-0.05936,-0.10779,-0.07536,-0.12162,0.23170,0.22231,0.09323,0.05241,0.10622,0.11222,-0.07477,-0.12707,0.13812,0.13322,0.06885,0.08007,-0.00001,-0.01594,0.00636,-0.04367,0.02454,-0.02674,0.16559,-0.06237,0.00227,-0.00112,-0.12171,-0.16932,-0.05691,0.06134,0.25192,0.24649,0.21857,0.03640,0.03277,-0.02211,0.00938,0.02848,0.07880,0.06908,0.05197,-0.00962,-0.10671,-0.30647,-0.27219,-0.06137,0.08989,0.20377,0.31218,0.31073,0.19440,0.01598,0.03479,0.00008,0.03059,};
float weights_hidden_0[] = {-2.15041,2.45387,-0.36057,-0.84395,0.82135,-1.07954,-1.49443,-0.88999,-2.12205,4.33498,-0.62362,2.45384,-0.35104,0.79555,-2.33812,-0.38783,-0.26194,};
float weights_hidden_1[] = {0.66067,-1.43085,1.35199,1.11157,-1.98223,-1.48595,1.20581,1.70571,1.72167,-1.09828,1.70919,-2.04222,1.40768,-1.79005,-1.73775,1.94644,-0.08650,};
float weights_hidden_2[] = {0.71156,1.08091,1.12518,1.33042,-1.82368,-1.10092,1.28431,-1.15833,0.54376,2.26659,-0.86773,1.14411,-2.35618,-2.13249,0.82690,2.33466,0.40648,};
float weights_hidden_3[] = {1.48513,0.46959,-1.69456,1.42478,-3.75107,1.94512,0.34866,1.92056,1.64368,-1.66676,-1.06409,0.28106,-1.82997,1.00752,1.28903,-2.10217,0.36793,};
float weights_hidden_4[] = {1.66700,-2.42871,-0.96396,2.28730,1.60011,-0.44244,1.05487,-1.87810,-2.33067,-0.08838,1.11130,-1.61429,2.40755,0.36708,-1.12686,-0.93551,-0.35212,};
float weights_hidden_5[] = {-1.88109,0.83556,-0.30240,-1.65323,1.64620,-0.50923,-1.20723,3.07862,1.99017,-1.38098,0.94354,-2.65958,-0.34283,0.67095,2.48372,-0.40387,-0.32704,};
float weights_hidden_6[] = {-2.18410,2.18361,-0.45887,-1.95268,1.80190,-1.22303,2.00754,-1.95145,-2.20943,-0.91209,2.98409,-3.10173,-1.37838,1.45876,-2.26843,-0.45501,-0.65335,};
float weights_hidden_7[] = {0.23815,-0.70046,2.19435,0.39608,-1.55089,2.81165,-3.10918,0.71825,0.55622,-0.54073,-1.29458,0.75645,2.96140,-1.75185,1.64853,1.29047,0.84370,};
float weights_hidden_8[] = {2.28574,1.14056,-0.35991,-1.64478,1.69910,1.57769,1.25375,-0.40808,-1.83473,-2.56882,-2.01892,2.55512,-0.50736,0.42604,-1.94465,-0.50856,0.36368,};
float weights_hidden_9[] = {-0.70652,-3.65578,-0.63677,-0.45394,1.56402,-0.51770,-1.34446,-1.08000,2.06860,1.58291,-0.88327,2.24105,-0.05405,1.02554,3.16958,-0.81890,-0.36234,};

class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = cc_segmenter_.GetNumOfSegments(im);

		if (num_of_segments > kMaxNumOfDigits) {
			num_of_segments = nn_segmenter_.GetNumOfSegments(im);
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


