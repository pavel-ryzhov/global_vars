#include <iostream>
#include <vector>
#include <map>
#include <cassert>
#include <cmath>
#include <fstream>
#include <string>
#include <cstring>

#define IMGSIZE 400          /* Размер изображения к которому входящие приводятся */

using namespace std;

double weights[] = {-1.22421,-1.4376,0.220871,0.0677122,0.0697061,0.120165,-0.0750208,-0.892119,0.455466,-0.226661,-0.169485,-0.607463,-0.110854,-2.52656,-2.07109,-2.05319,-1.80654,-0.386337,-2.06758,-1.50041,0.142807,-0.104697,0.432397,0.35757,-1.7977,0.574938,0.0608303,0.0622323,0.0945721,0.315861,1.4557,0.00824559,0.216732,-0.430449,0.403434,-0.605588,-1.1993,0.39219,-1.09418,-1.08837,0.29274,0.599367,0.11976,-0.200454,-1.29745,-1.50613,-0.59882,0.56001,1.44161,0.277777,-0.981417,0.51121,1.34083,0.291368,-1.40718,-2.02953,0.040045,-2.37912,-0.587816,-0.945095,0.9883,0.332877,1.16061,-0.2594,-1.17876,-0.285021,1.40155,1.00225,0.640309,-1.89169,-0.936613,0.468264,0.101846,0.201357,-0.269352,-0.497805,-0.15147,-0.149465,-0.4047,0.390889,0.877168,0.131325,0.243347,-0.285231,-1.04223,-0.347853,-0.175925,0.0925618,0.030699,1.09385,0.387488,0.297119,-0.401385,0.193077,1.22316,-0.127075,1.31598,0.716223,0.225857,0.41991,-1.48093,0.00730215,-0.330226,-0.493614,-0.68802,-0.224564,-0.364441,-0.496161,1.78339,-0.673953,-1.76752,0.492084,1.61402,0.447863,0.88224,0.640762,0.488593,0.187688,1.20887,1.25073,-0.455404,0.366048,-0.361087,-0.162691,-0.366376,0.785117,1.17733,-0.298582,-1.15059,-3.17421,-2.32891,-1.42519,-0.392674,0.366509,-0.32595,-0.0884628,1.33361,1.55825,2.59743,2.22482,1.7094,-0.153336,-0.453831,-0.217467,-0.0561999,1.09393,-0.369914,-0.0668356,-1.67687,-2.34009,-1.0403,-1.08083,0.272715,-0.0169693,-0.984236,-1.19881,0.713903,1.94863,3.12878,2.71059,1.3327,0.234866,0.0902772,0.202406,-0.626053,0.599617,0.654986,0.00739123,-0.075759,-1.72716,-2.93961,-1.08566,-1.34039,-0.595822,0.111277,0.117201,-0.625218,0.0476158,2.35754,3.14242,1.98685,-0.572723,0.0458496,0.115538,-0.565845,-1.09009,-0.804948,-0.371028,-1.68466,-3.14148,-3.75989,-3.04838,-1.04496,-1.47448,-2.50102,-1.80483,-0.987055,-0.709008,0.173528,2.66502,3.26673,1.19255,-0.217735,0.805283,-0.672408,-2.07569,-0.267663,0.0175486,-1.30303,-1.79753,-2.19019,-1.066,-0.920235,-1.12153,-2.19836,-2.43433,-1.09735,-1.56103,-0.847248,2.09397,3.00097,2.0615,1.48814,2.21671,-0.467318,0.366951,1.08089,0.107441,-0.910804,-2.82376,-1.89866,-1.16537,0.0428998,-0.880284,-0.909575,-1.17174,-0.0120294,-1.60906,-1.86333,0.778585,3.24022,2.78622,1.69378,2.08385,0.644058,0.0867756,0.743326,-0.382621,-1.64284,-3.48809,-2.04495,-1.69713,-0.47055,-0.622966,0.0102816,0.0530294,-0.457527,-2.07656,-1.51298,-0.693947,2.31524,2.57932,2.7331,1.79137,1.23853,1.15911,0.620172,-0.547811,-1.41005,-3.11074,-2.75525,-2.02348,-0.0764843,-0.583074,0.920273,-0.582806,-0.842009,-1.41475,-0.532573,-0.636285,1.60426,1.15477,1.11351,1.86294,0.474701,0.682072,-0.392109,0.740703,0.458058,-2.70472,-2.80742,-1.25191,0.191098,0.531693,0.330091,0.121725,-0.0305596,-0.529031,0.782662,-1.48922,1.29949,1.78543,1.19913,1.65851,0.826566,0.831216,0.931926,1.44167,1.71121,-0.158728,-0.0964922,0.313029,0.829476,-0.286505,0.15268,-1.36552,-0.575897,0.337239,-0.283677,-3.05248,0.532823,0.847945,0.77005,0.0845798,0.18941,0.290245,0.769186,0.810531,0.984946,-0.112065,0.381573,1.2085,-0.136652,-1.18796,0.0157847,-0.666528,0.715746,0.802051,-1.58132,0.519441,0.379534,-0.217056,-0.413355,-0.116569,-1.66109,0.643457,0.181654,1.10085,0.852217,-1.48516,-1.30037,-0.310823,-0.675698,0.24663,0.111685,-1.48382,0.29061,0.11631,0.208449,0.502853,0.353584,-0.0979138,-0.609342,-0.895352,-1.56927,-0.972558,-0.560551,-0.0898467,-0.166516,-0.900774,-0.857661,-0.0693073,-1.00724,-1.11071,-2.30355,-1.85535,-1.48892,-0.439345,-0.205782,0.0270845,-1.64775,-1.47652,-1.22275,-0.28262,0.113363,-2.26721,0.176675,-0.428962,-0.30274,-0.0226713,-0.0157703,0.262753,-0.299508,-0.305394,-2.19905,-0.830646,-0.502966,-0.994845,-1.02939,-2.52747,9.08729,2.78413,0.585057,-1.43452,0.351136,1.00287,-1.16818,-7.44027,-2.72259,-4.10655,-3.66647,-2.56752,-1.83681,1.15794,-4.2722,-2.98709,0.45451,2.37897,1.84643,4.46765,2.675,0.611007,-4.98927,-1.84799,-2.59783,-3.38463,-8.304,3.39312,-1.14076,-4.45014,4.13051,2.59801,-4.41912,-6.18936,-4.81005,-5.49948,0.548893,4.34116,4.46089,3.44084,5.73944,5.55332,4.18761,-3.1742,-0.320686,0.147447,1.37161,0.188416,0.372774,-2.54174,-1.85275,-1.85698,-8.21574,-3.29565,-3.22019,-1.01592,-5.40857,1.835,-0.958724,4.1065,-0.45777,-0.786145,-0.761943,-0.243728,4.39419,2.47911,-0.984439,1.56267,0.617604,2.6759,1.43157,2.09744,0.0504931,-1.77738,-1.84807,2.74215,-3.17368,-0.00709282,2.56371,5.94203,-0.979938,-7.16385,-2.27427,-0.551737,7.70142,3.46212,2.3082,1.80616,-1.01065,0.980919,3.10156,5.67469,4.60236,-1.53267,3.9737,-1.40873,-0.939732,-1.31361,2.49374,2.23851,2.61216,-2.36226,-5.85362,-1.44152,-1.90748,-2.067,1.80778,0.955144,-1.41376,0.666591,4.92899,1.14788,2.10895,5.31316,-0.5899,3.43839,-1.86257,1.7552,1.47675,-0.0347031,3.33189,0.265041,-1.34919,-5.89257,3.071,-1.59883,-2.5176,0.113917,2.99638,4.72101,8.73512,-2.22457,3.80784,-3.61046,3.10986,-2.12238,-5.85587,2.75634,-1.01509,4.12215,3.22432,3.50579,-3.54849,0.635191,0.108786,-2.35444,0.920711,-1.77124,-2.4805,8.30591,-5.16644,3.33016,4.21491,-0.354597,2.2874,-0.535016,-1.98732,2.77007,-0.434807,4.50176,6.98465,1.03937,-1.15804,-0.0752291,-1.5457,-0.137551,-2.57684,2.21559,-0.166038,0.731584,0.989762,0.531406,-1.73093,3.289,-1.21432,-2.20688,-3.0399,1.16427,0.244614,8.02227,8.47012,2.43611,-1.30088,-0.988362,-3.29317,-2.2558,-0.586206,2.94401,1.26153,4.29035,-3.47014,-0.119498,3.80844,-1.54219,-0.317079,-2.05777,-4.57113,4.22334,-3.5343,6.29221,6.17409,0.922903,-4.79963,-3.16047,-7.51475,0.401282,-3.44322,3.54987,-4.67974,-3.17977,2.75933,-2.65921,-0.900248,-1.12751,-3.74943,-10.187,-0.586152,-2.86714,-0.578654,-0.32118,5.49399,-1.63092,-4.66645,-5.71508,-0.899359,0.797925,5.47296,1.88911,1.15425,-0.241357,0.833617,-3.39584,-1.2803,-3.49366,-1.93665,2.02394,1.28432,-1.16061,-2.96741,-1.77096,5.29303,-0.494291,-10.8328,-3.07761,-2.40291,2.04564,-2.66228,-1.2482,-5.19925,-0.857245,-1.97916,1.66483,0.350347,1.47289,-0.639048,-3.06167,0.00442045,-0.0349503,-0.562328,0.252453,4.00712,-6.16228,-5.48374,-0.280697,1.62612,0.711401,3.29152,-0.543016,0.0855133,2.12459,-3.18462,-2.92357,5.73776,1.07618,0.0325779,2.41131,0.149232,-2.36039,-1.30141,-2.82785,1.16548,-5.96079,-10.0773,-1.49375,1.13396,0.605792,-4.03954,0.049028,2.89122,3.94916,-1.55624,0.142953,1.61025,0.89537,1.07118,1.54599,-0.134056,-1.19702,-1.32877,-4.43263,-1.28065,-2.92012,0.0996905,-1.1461,-0.322279,4.65428,-5.96654,-0.892564,-3.0779,3.78791,-0.11811,2.9613,0.91991,-1.77302,-0.978845,4.92919,-0.840392,-7.63817,-5.23856,-3.33804,2.29317,2.49127,-4.86208,-5.71368,-1.59148,-2.37284,-1.6377,5.62694,-0.39092,-1.1038,-1.66135,0.485371,1.64407,0.721638,1.44482,3.76757,1.90023,-3.28143,-0.0741301,-1.67767,1.49043,1.159,-5.97147,3.06554,-0.114131,-0.152074,-3.67782,-1.43271,-1.75254,4.53936,-0.90101,0.296695,4.08101,-2.7341,4.28891,6.07567,-0.149177,-0.950806,1.22982,8.00861,-0.904213,-6.1433,3.14054,3.04449,0.772788,-3.42627,-0.155838,-0.573613,-4.59547,-0.672501,0.790093,1.40446,-0.15124,-5.45511,2.51783,-2.86636,4.23839,2.66242,9.90186,8.6503,9.39287,-0.523584,-5.18344,-0.3669,-4.48454,0.594291,3.07245,0.519354,0.306039,-0.36806,-2.04153,-2.17336,12.0566,1.68848,1.97961,3.23993,2.77607,4.49824,7.24987,5.87776,-0.632692,-0.865699,-1.05629,-0.998475,0.0728532,-0.511364,0.318445,0.871662,2.07671,0.4756,0.705897,0.789292,1.17225,-1.42699,-2.01663,0.111877,-1.0614,0.655141,-1.78241,-2.52699,-1.11572,-0.929086,-0.159445,0.047724,-0.607554,1.60325,1.24812,0.442694,0.208335,-2.11306,-0.822369,-1.13912,-0.924445,-0.593691,0.938972,0.0533726,-1.78901,-1.21688,-1.6551,-1.91149,-1.02886,0.46195,-0.92689,0.77923,0.608564,-0.169428,-0.606353,-1.3835,-1.51595,-0.456402,-0.924803,-1.62262,-2.36841,1.51581,-0.205333,0.823933,-0.248269,-2.22934,-2.89039,-2.14006,-0.676607,-2.05516,-1.09032,-1.64577,-0.0898616,-0.688765,-0.0984044,-0.296067,0.27724,-0.125936,0.0395125,-0.62681,0.419617,0.299808,-0.0861403,-2.77501,-0.714837,-0.697443,-1.25829,-1.49232,-1.43329,0.212709,1.29018,-1.33046,-0.0257711,0.366757,-0.414788,-0.258629,-0.105527,0.301602,0.183555,-0.196358,-0.275905,1.27463,0.576954,0.926192,0.230198,1.7072,0.451842,0.990176,-0.275476,0.925188,-0.302182,-1.62943,0.425859,0.292474,-0.102463,0.974179,0.358546,0.798886,0.0449052,-0.356713,0.382538,1.18126,0.414416,0.254611,1.63809,1.15535,1.69286,2.1677,1.80728,0.429031,-1.11398,-0.269737,0.845413,-1.33513,0.356165,-0.542945,-0.279192,-0.717393,-2.51546,-0.218979,0.908469,-0.530743,-0.0179084,0.219503,2.71442,2.01847,1.88465,0.239871,0.597173,0.696633,0.506709,-0.0527688,1.33653,0.755292,-0.539341,-1.24366,-0.876515,-2.69351,-1.46605,0.288914,-0.0382771,-0.745075,-2.34892,1.03542,1.37103,2.04173,1.14168,0.7365,-0.378555,-0.910589,-0.349881,-1.38923,-1.12391,-0.212083,-0.948314,-2.13189,-0.839217,-1.89736,-1.49446,-0.111702,-0.863842,-1.59482,0.896503,0.768146,2.72245,3.34266,-0.140507,-0.266315,-0.717194,-0.0523269,0.111274,-0.0581204,-0.480172,-1.44008,-0.413386,0.56645,-1.53996,-1.77461,0.0943619,-2.19658,0.221227,0.484696,1.57379,1.47125,2.34624,1.03645,0.585182,-0.37306,0.143947,-0.615934,-2.07166,-2.16924,-0.865012,-0.701956,-1.20085,-1.96978,-1.00598,0.510239,-1.88733,-0.631147,-0.642738,0.418483,-0.592115,0.836142,0.261492,0.214501,-0.622164,-1.50621,-0.0622928,-1.67704,-0.861193,-0.0447367,-1.13997,-0.702172,-1.17615,0.494889,-1.9606,-0.889563,0.373552,0.346728,-0.663366,-0.901687,-1.07573,-2.75752,-2.58141,-2.85223,-3.07505,-1.77431,-0.0246305,-0.557424,-0.19064,0.313963,1.30455,0.564623,-0.227053,-1.5663,-1.1348,0.113368,0.673127,-0.710495,1.07941,-1.94719,-1.23488,-1.96349,-3.46883,-5.16488,-4.79559,-2.29371,0.293425,-0.0381873,-0.490119,0.358388,0.459589,-0.446413,-0.206244,1.43294,-0.356674,0.0260543,-0.76788,-0.472366,-1.64855,-2.67919,-2.18404,-1.29068,-3.47668,-3.45684,-3.82795,-2.1816,-0.154462,-0.853799,-0.407506,0.0366101,-0.0477928,-0.169632,2.16027,1.71405,-0.111991,-0.768986,-0.682517,-2.0186,-2.369,-1.61824,-1.68729,0.648719,-2.56271,-2.65589,-2.76398,-1.80172,-0.644874,-0.919328,-1.15672,0.937432,-0.487756,1.30853,0.950236,1.62032,0.512712,-1.82829,-0.407347,-1.59121,-0.805756,-0.356916,0.849745,0.158787,-0.182015,-0.0817507,0.0169258,-0.91067,0.403617,1.05945,1.27679,-0.0918514,0.147934,2.68635,2.50186,2.25224,0.0435242,-0.490013,0.216557,0.650856,-0.831739,0.625456,-0.373235,-0.115513,0.724851,1.19039,1.47461,0.926102,0.588807,0.628133,1.31715,0.779002,0.731886,1.1746,0.924562,1.63045,-0.587541,0.181372,0.291531,0.105157,0.175808,2.16685,0.087083,1.04624,0.403612,1.1326,1.16512,0.517238,1.05933,0.45462,0.399203,-0.255882,-2.51855,-1.04039,-1.59883,-0.580305,0.147971,0.00839901,1.56941,1.49977,1.56905,1.14154,1.8989,1.93047,2.40952,3.55973,3.95716,1.08747,1.40441,-1.0433,0.291645,0.283221,0.838391,-0.871339,-2.35083,-1.39075,-0.545709,-0.162414,-0.583003,0.00827597,-0.409869,0.161512,0.383613,0.503471,4.23869,2.74699,1.67002,3.18698,-0.511022,-2.45949,-1.41563,1.60894,2.79868,1.90599,1.37895,1.78672,0.732699,1.15434,-0.0869037,-1.34212,3.02353,0.998278,-2.08326,-1.99632,-0.192054,-2.16461,-4.16032,-5.38075,0.355,3.37642,0.428322,0.281633,-0.580676,0.349446,0.346826,0.697718,0.975856,-0.323064,0.318524,-0.314561,-0.944593,-1.61657,-1.92806,0.375795,-1.59796,-1.95961,-1.21356,-4.09144,0.776212,1.93179,0.126558,0.0712316,-0.995078,-1.29412,0.326129,-0.273188,-1.62559,-0.230268,1.00361,-0.857274,0.129407,0.822104,-2.17541,-0.27833,-0.76685,-1.77616,-4.51041,0.0348883,0.44815,0.954508,0.461914,0.365258,-0.576319,-0.243367,1.91784,2.19701,0.270365,0.207882,-2.16673,-3.37245,0.259594,0.65964,2.97519,2.00456,1.36818,-2.10684,1.37994,2.28241,1.785,3.36958,1.6602,-0.651838,-1.06797,-0.28967,0.55993,0.992602,0.868238,2.47275,0.214682,1.55168,3.10291,0.25959,0.837218,2.14029,0.0099385,-0.300858,3.98833,5.69734,0.640015,2.82217,-0.323461,-1.39879,-3.19051,-1.30237,0.517973,-0.683704,-1.90053,0.667876,-2.2003,1.73844,-0.918405,-0.777824,0.527134,1.12855,-1.63695,1.5251,0.370797,0.423236,-2.05839,-0.394428,-1.64366,-2.91144,-0.65333,0.566018,1.24319,-2.39965,0.554911,3.22996,0.0448091,-0.385551,1.44648,2.76694,1.0738,-1.37461,1.78034,1.28678,0.462439,-0.858252,-2.95059,-5.50457,-6.35646,-3.81158,-4.0023,-1.54265,-2.07808,-0.67916,0.807997,0.361593,1.28449,1.06347,0.301633,0.967333,-0.205448,-0.721439,3.2591,0.0756525,0.979015,-1.43453,-2.51054,-5.7316,-4.78235,-4.30708,-5.80692,-4.26222,-0.654114,-3.91435,-0.878138,-0.649564,-3.29554,-1.0143,-2.56873,-0.251611,-2.95755,-1.97419,-4.06809,-1.7748,0.494797,-0.856746,-1.00975,-2.34452,-0.0471499,-2.05017,-0.356715,2.12032,2.11515,0.698499,4.49384,2.1748,0.234457,-0.580822,0.906069,0.530122,-1.61327,-0.93976,-0.631305,-2.52019,-2.8749,-5.12382,-0.643147,-1.71533,-2.01199,-4.14971,-3.48903,-4.12257,0.973766,3.19637,3.98402,0.532288,1.17318,0.131956,-0.0452295,-2.165,-0.44661,2.04991,0.489147,-0.798999,1.60622,-0.763299,-1.25701,-1.69925,-3.05029,-5.91155,-5.63732,-2.68422,-2.09304,-4.35435,-0.479886,-1.99384,-2.1224,-2.43762,-4.17245,-0.638076,-0.0058369,1.82499,1.03933,0.264835,0.919084,-1.88702,1.20212,-0.619902,-1.98807,-2.803,-2.38609,1.31424,0.720113,-3.25722,-5.09032,-1.01554,-2.75252,-0.567395,-0.00994683,1.3243,-0.512628,-1.34163,1.05466,2.33168,2.12213,0.99897,0.464017,-0.39637,-0.527883,-1.67438,-1.14568,0.893773,-2.72813,-2.64615,-2.86,-0.245194,0.212808,0.414177,1.22208,-0.530774,-0.0695099,-1.71444,-0.310111,3.22048,3.54393,2.74046,1.05285,-1.86611,-0.956873,-1.0654,-3.31556,-3.63852,-3.40529,-0.200236,-0.955242,-3.24011,-1.68998,-1.04794,-0.680986,-1.28184,3.63885,-0.019521,1.9496,1.08809,0.951573,2.88365,0.982632,0.292766,0.399683,-0.469459,2.42269,1.72544,-0.155724,2.19432,-0.463615,-5.34931,-1.77956,-0.269144,0.0291897,0.282279,3.26737,0.222599,0.621733,0.974154,0.462729,-3.242,1.50021,-0.360017,-0.994607,3.39675,3.27853,-1.21517,0.00636403,0.66845,-3.00886,-1.56795,0.0873453,-0.293956,-0.21229,2.30817,1.95175,0.283506,0.781583,1.92964,0.196419,0.740868,0.218883,2.25771,-1.09139,-0.00536016,0.364213,1.1369,-1.06067,1.36276,0.187277,1.96404,0.393126,-0.542509,-0.405072,-0.466239,1.5193,-1.21189,0.123775,-1.34029,0.878881,-1.87943,4.62329,-0.495111,-0.598997,-0.202089,0.00168833,-2.05754,0.147489,2.24807,-0.759232,1.89623,-0.376473,-1.432,0.433778,-1.01614,-0.356425,1.15187,-5.23402,-1.20412,-3.33075,-2.92609,-0.814231,0.851442,2.72505,-0.300998,-1.4344,-0.370113,0.948983,1.83596,-0.362286,0.230661,1.42978,0.610252,-1.55214,-1.93119,-0.142315,-2.60653,-3.8876,-2.32982,-1.93458,-3.02068,-0.57498,0.0576521,-0.286542,0.0819624,-0.255796,-0.51476,-0.655551,0.303274,-0.294578,-0.326071,-0.625896,-0.0624551,0.0988637,0.015035,-0.187016,-0.0384342,0.441288,-0.140337,-0.969882,-0.784049,-0.780791,-0.823343,-0.25387,-0.780144,-0.608863,-1.64704,-0.903106,-0.537394,0.0772958,-0.670631,-0.552241,-0.871396,-0.613287,-1.44916,-1.74111,-1.51659,0.0409418,-1.02322,-1.76107,-1.47732,-0.945949,-1.08897,-0.762576,-1.83183,-1.419,-1.18585,-0.898754,-0.700534,-0.626509,-0.173466,-0.916392,-0.321238,-1.85342,-1.53748,-0.624876,-0.378803,-0.407512,-1.17005,-1.48512,-0.778279,-0.405639,-0.454311,-0.819741,-0.966141,-1.28681,-0.596092,-0.364713,-0.347857,-0.593934,-1.56112,-0.718378,-0.667921,-0.786858,-0.318926,1.00334,0.0374682,-0.544602,-1.19801,-0.679497,-0.353039,-0.396846,-0.724558,-0.928846,-1.33173,-1.2816,-0.553027,-1.07351,-1.20497,-0.202287,0.699076,-1.40262,-0.242396,0.387858,0.963806,0.649955,0.0625098,-0.354603,-0.552187,-0.807556,-0.269931,-0.201744,-0.604935,-0.782207,-1.23412,-0.769916,-1.0872,-1.35874,0.572074,1.30504,-0.391112,-0.0929789,0.486393,-0.0945145,0.673547,0.996177,0.597576,-0.385324,-0.0556615,-0.650618,-0.454069,-0.931259,-0.714294,-1.12204,-1.14044,-0.842162,0.307867,0.732226,0.809925,0.0384201,0.000885328,0.741772,-0.128491,-0.0385264,1.11705,1.16856,0.772672,0.494829,-0.182443,-0.71601,-0.632451,-0.626615,-0.212079,-0.120098,-0.160015,-0.175522,1.44566,0.618007,-0.0126688,0.315543,0.923055,0.369328,-0.353296,0.238782,0.709941,1.29225,0.793968,0.354635,-0.38268,-0.56855,-0.62516,-0.0833366,0.398903,-0.568228,0.190748,0.281937,0.0412393,0.603296,-0.824981,-0.472682,-1.21488,-1.043,-1.03432,-0.358034,-0.207314,0.121008,0.425853,-0.282759,-0.862219,-0.989873,-0.202009,0.39937,-0.294846,-0.0976211,0.589376,-0.0619438,0.597144,0.580249,-0.0893805,-0.0632882,-1.40497,-1.85502,0.333581,-0.209193,-0.207561,-0.0353274,-0.100304,1.01396,-0.324899,-0.428721,-0.455228,1.11686,0.240801,0.183051,1.01228,1.67184,2.27212,1.92273,2.11902,0.450913,-0.108867,0.154301,1.32563,0.0219305,0.303103,0.0311903,1.35036,0.0893726,0.272596,-0.0668529,1.38627,0.268262,0.228314,1.02472,2.2272,0.998205,0.184174,0.348571,0.305457,-0.103411,-0.439607,0.639594,0.459837,-0.243184,1.00457,1.31612,-0.191947,-0.400165,-0.225973,-0.70591,1.27485,-0.401388,-0.00901525,2.40092,0.887065,1.53144,1.78994,1.95319,1.02004,0.58722,0.870803,1.31205,0.386418,0.184476,1.01687,0.90954,0.280308,1.45454,-0.643627,-0.295842,0.551189,-0.30004,0.869901,0.855987,0.307561,1.32114,0.640831,-0.124227,-0.316124,-0.0258594,0.721302,1.56563,0.563849,1.17831,1.41764,-0.0127625,-0.662998,-0.170056,-0.299531,-1.19713,-0.292003,0.828976,0.155643,0.307634,0.56692,1.1646,1.14688,0.562925,0.713197,0.498761,1.56676,2.29329,1.548,0.681405,0.136304,-0.289588,0.358256,-0.313168,0.0682247,0.0735804,0.54821,-0.152072,-1.38467,-1.67222,-0.603073,0.0978616,-0.141885,0.055005,0.110201,0.946145,1.17728,0.775014,-0.0178113,-0.461676,-0.24305,0.68282,-0.20718,-0.144116,0.381264,0.107558,1.01146,-1.50111,-1.62085,-1.59509,-1.32229,-1.14965,-0.708204,-0.622992,-0.891286,-0.412286,0.0465451,-1.76595,-0.273566,-0.142529,-0.232035,0.113882,-0.932723,0.0174037,-0.423898,-0.454589,0.575823,-1.29627,-1.29599,-1.37247,-1.68593,-1.09334,-1.64962,-1.45566,-0.602956,-1.40767,-1.29921,-0.167338,0.917221,0.163272,0.398092,-0.340658,-0.462735,-0.0775227,0.120767,0.248395,0.724292,-1.17584,-1.41746,-1.58318,-1.80549,-1.87534,-2.14373,-2.30039,-1.61234,-1.18766,-1.50182,-1.21068,-0.277072,-0.613959,0.171216,-0.186319,-0.115246,-0.0836366,-0.0572501,0.238877,0.27727,-0.690793,-1.85418,-2.53589,-2.26718,-1.81464,-2.10964,-2.22321,-1.3336,-1.46065,-1.97889,-0.574532,0.703367,-0.7373,-0.0594018,1.0173,1.46733,1.25876,0.877368,0.376834,0.699184,-0.272575,1.44221,-2.34474,-0.346545,-0.592657,1.87627,0.693907,0.622922,0.90914,-0.278712,0.784774,-1.86048,-2.99543,-2.10907,-2.55858,-0.0261983,1.68975,0.817964,2.3065,0.946992,-1.9623,-1.93765,-1.60353,-1.12797,2.10582,2.09119,-2.5985,0.0307787,0.207271,0.999581,0.679708,-0.848849,-1.73697,-0.787971,-2.19048,0.439739,-0.685144,2.17967,4.65484,0.498786,-0.307308,-0.865801,0.477747,-0.881618,0.445845,0.179778,0.992858,2.70127,-0.722952,0.564428,-1.3211,-1.99827,-0.182953,1.33193,1.15462,1.94656,0.663534,2.76291,-1.76316,-4.19256,-0.387243,-1.98828,-1.73484,2.53658,0.398461,2.04114,-1.10338,-0.771798,1.59553,-2.3553,-1.89127,0.369929,-0.430925,-0.0542788,-1.35154,-2.93188,-1.97913,0.0773146,-4.43048,-2.6977,-2.19204,-3.22334,-1.65811,1.10826,1.10833,0.179907,-0.938905,0.472898,0.680979,3.53223,2.21165,-1.46507,-1.00908,-2.34379,-1.22951,0.152638,-3.13375,-0.940553,-3.11544,-3.26925,-1.27904,-0.877126,-0.157758,2.39451,1.76768,-0.497635,1.71639,3.64517,1.43657,-1.86646,-0.560027,-1.66949,1.44649,-2.86442,-1.8386,-1.78662,-1.74671,-1.21781,-6.15688,-4.23404,-0.45181,0.360493,1.87153,4.26694,3.28058,-0.921946,1.10035,-0.10808,0.727844,-2.02189,0.0392002,0.453085,0.742269,-0.913115,-2.55517,-2.61302,-2.56221,-1.57921,-2.90356,-3.47804,1.41651,0.209764,5.72471,2.19803,2.23781,-0.572753,2.35191,-0.0455195,-0.0295995,0.708626,-0.800249,-0.130322,-2.93435,-2.78823,-2.3145,-3.71524,-1.87323,-0.115568,-1.024,-2.5778,0.184592,-0.866132,2.49763,2.58099,2.041,1.98898,3.97471,4.40624,-0.299275,-1.47431,0.779063,1.32935,-2.34768,0.0782853,-0.353762,-0.191006,2.97314,-0.362319,0.828886,-1.43872,-1.60461,3.50914,2.14054,0.345989,-0.810273,-3.92856,0.940419,-0.840713,-2.73838,-2.25259,-2.53867,0.0537108,-0.439046,0.216001,3.01054,-0.283457,-1.62883,-0.860736,-2.65996,1.10946,-3.93214,1.88168,0.533114,-1.37485,-1.66777,-1.12706,-0.893239,-1.31309,-2.45876,-2.18649,-4.71447,0.74691,0.301883,-0.0644063,-0.644686,-0.963027,0.56205,-0.992834,-2.79282,0.395616,-6.8473,-4.32156,-5.20675,-3.82434,-3.83894,-1.83129,-0.397537,1.27573,-4.06093,-3.49248,-2.04532,0.161715,-0.891714,0.860083,-0.898775,2.77818,1.53547,-0.674341,0.711202,3.11252,-2.2068,-3.75992,-5.40144,-4.58711,-0.445499,0.359651,0.608466,-1.37588,-2.60014,-2.76494,0.798048,-1.54553,-0.50138,3.46502,0.207802,-0.303068,0.717377,-0.422796,1.32056,1.83921,-3.33294,-4.59405,-4.84574,-2.05011,0.908152,2.66744,1.72752,0.801353,0.371416,0.540327,0.72227,-1.29549,0.979461,2.01539,1.14209,1.10729,1.72799,-0.919825,0.164445,1.61307,0.344533,-1.9793,-2.10411,-0.134406,1.56441,0.211681,-0.148676,-1.7342,-1.20757,-3.4048,-1.10838,1.40071,0.292031,2.02309,-0.0939902,0.152784,3.20799,1.00637,-1.70347,1.51098,1.9581,-0.408149,-0.465383,-2.2007,-1.50968,0.560123,-0.193321,-1.26462,-0.290619,-1.24198,-1.15513,-0.800966,2.58678,1.29885,-1.04057,1.45308,1.57233,0.530918,-1.44919,2.54137,0.832736,-0.285271,-0.725758,-0.0537089,-2.4086,0.747689,-1.90922,-0.257558,0.329305,-0.924733,1.38823,2.74746,1.16319,1.50812,-1.83384,-1.99015,0.213053,1.17333,1.30035,-1.20785,-2.89008,2.33063,2.82271,2.75708,0.789737,0.723743,0.488079,2.34184,1.48339,0.546196,-0.649567,1.62796,-1.51539,0.433703,-1.73565,-1.44562,1.72544,1.86918,-2.13902,1.69681,1.11908,1.35583,-1.06027,1.74622,-2.78749,2.11015,-0.348814,-2.34179,-0.867269,0.772401,3.04077,-0.949364,-0.749386,1.25331,-0.0179345,-1.0093,2.1058,-2.6303,1.82055,-0.801038,-2.06809,-3.12361,-1.70878,1.05849,-0.261521,4.60522,-1.95073,-0.535735,-0.128836,-0.304982,-1.24653,-1.5067,0.869487,0.16772,-2.01416,-1.01717,0.796232,0.736694,-1.65122,-1.34481,-0.290902,-1.60958,-1.16949,-1.73606,-2.04115,-2.43035,-1.35408,-1.82416,-1.95434,-2.31915,-1.22283,-2.37259,-0.31859,1.92628,-1.36902,-1.42206,-1.70812,-1.85897,-3.4217,-0.187572,0.288422,-0.963069,-1.03746,-1.59552,0.123445,-1.21507,-2.92056,-0.538665,-1.07448,-0.825785,0.223678,-0.0733809,-0.872164,-1.14307,1.35307,0.090327,-0.224279,-2.34245,-2.93826,1.15686,0.0330955,-0.307631,0.357361,-0.597116,-2.41142,-1.21518,-0.479727,-0.0315528,-2.47436,-1.33371,0.654419,-0.342178,-3.45351,-0.978634,-1.99227,-2.04443,-0.714208,0.332974,-1.05725,1.0862,0.671602,0.265316,-0.292844,-2.04017,-1.20786,-1.09019,-2.52398,-2.07216,-1.19943,-2.28573,-1.9633,0.521431,-0.847498,-0.121798,-0.762164,-3.42162,-0.393123,-2.35661,2.43741,-0.178386,0.730514,0.5071,-0.928562,-0.317947,-0.656624,-0.736273,-3.47913,1.03622,0.305089,-1.01714,-0.433345,1.17841,1.38735,1.75403,-1.74152,-0.249187,-2.51855,-0.69848,-1.99487,0.324827,2.27437,0.318424,-0.32759,-0.507513,0.240883,0.661923,-0.397391,0.635337,0.099768,-0.38442,0.76424,2.51541,-1.05463,-1.4357,-1.38206,-3.21245,0.61198,-2.86118,-4.10959,-0.806314,3.01367,0.75866,-0.0572077,-0.347085,1.88853,0.218099,-0.0702524,1.12745,0.607073,-0.107005,-0.706864,0.0997019,-1.16723,-0.821105,-1.10752,-3.56374,-4.46318,-2.27531,-4.27601,-6.12524,2.50548,2.64031,0.641597,0.0894464,2.49503,-0.885194,1.13591,1.7152,-1.25598,-0.735955,1.45112,-0.0273754,-2.12947,-0.706626,-0.419514,-3.49699,-3.21416,-4.1851,-4.0775,-5.23029,3.83157,1.22574,2.14606,-1.016,-0.527087,-2.79285,-0.321216,-1.39196,-0.984759,-2.27746,-0.349605,1.66882,-0.467259,-0.924482,-2.51625,-1.57359,-0.862922,-1.30495,-1.7519,-4.57281,4.58773,3.77722,1.57298,1.18228,2.05352,-1.20115,1.60132,0.620497,1.55857,0.49322,-0.739257,-1.55641,-0.628843,1.15108,0.87826,0.889998,-0.460191,1.80695,-1.03289,-1.53323,3.54615,1.70656,-0.0631919,2.11913,1.40049,2.34438,2.17958,-2.21435,0.4893,-2.2417,0.239343,-2.466,-0.494685,-1.47732,1.34978,-0.00511816,1.95799,-0.8387,2.34411,-0.523509,1.68852,0.328396,2.56875,-1.22596,0.584983,0.39332,1.61018,0.109339,-0.0414036,-1.45484,-0.164433,-1.05188,-1.1017,-1.26676,-1.67703,-0.259822,0.46423,-1.65839,1.02404,2.78369,1.17941,3.08769,1.49851,1.66522,1.18699,1.02392,1.18662,-1.09233,-1.96498,-3.30016,-2.61626,-1.58399,0.00834564,-0.0043842,1.68901,-0.994431,-0.302499,0.640111,-0.404218,-0.256523,1.24118,1.72005,-0.0667778,0.338447,0.293072,0.67916,0.81117,-1.45546,-1.17995,-2.2927,-0.824207,-0.604363,-2.99631,-0.0582479,2.11299,2.28169,-0.340233,0.0605785,0.903669,1.11117,0.955786,0.509921,0.921476,-0.40884,0.69579,-0.545682,0.567217,0.847966,0.392968,-3.41679,-0.773564,-1.79166,-0.0439509,-0.965606,0.881442,0.409879,-0.547052,0.572309,0.742927,-1.07729,-0.428566,2.97498,-1.78483,-0.699004,0.669594,-0.375991,-0.502783,2.65282,-1.00716,-1.81022,0.314005,0.487213,-0.78467,-0.774154,-0.548787,0.404362,0.96695,1.23408,-0.599547,1.83446,2.78305,-1.03133,1.60717,-0.786446,1.23557,1.20779,1.5728,2.32642,1.33329,-2.34078,-0.391789,-1.08991,0.268655,0.983831,0.386888,-0.447051,1.10448,-0.478805,2.30109,1.0694,0.640693,0.615267,-0.475435,2.49541,1.35142,1.04383,2.87317,1.55637,0.654789,1.38752,1.19715,1.90223,1.18326,0.793825,1.09569,-0.299393,-0.35307,0.331924,2.49184,0.445113,-0.0595215,-1.31217,0.687406,-1.8662,1.16729,0.0317575,0.290113,2.00915,0.756654,0.0199713,1.38577,1.49393,0.466181,-0.856443,0.508305,-1.22092,1.84955,1.73218,0.441349,-0.367127,-1.39347,0.442244,-0.0375789,-1.30376,2.52365,-2.16486,0.516382,0.166702,0.0696382,0.21052,-1.37851,-1.123,-1.22008,-0.467557,0.844319,-0.717243,-0.477708,-0.531202,-0.280589,0.06,3.67857,2.93782,2.38069,2.69425,3.25659,2.59997,2.36017,1.71043,-1.13242,1.35453,-0.528151,0.642659,0.954553,0.521345,-0.492171,-0.0972114,1.45193,0.982203,0.744476,-0.568633,1.11335,0.987768,1.7814,2.0965,1.05401,1.61238,-0.155402,0.612955,0.555147,1.97166,-0.498989,0.0887748,0.874145,1.45338,-0.0281461,0.402405,1.40145,0.891888,-0.441195,0.146619,-1.68449,-0.384553,-0.299426,1.62625,2.31794,1.64713,1.79551,1.649,1.16722,1.12614,1.34296,0.305914,0.105576,-0.521466,0.275714,-1.07889,0.544923,-1.02297,2.62176,2.52192,0.178438,-0.21027,0.476122,0.657809,-0.29469,1.5215,-0.320795,0.63264,-0.355443,0.36202,-0.50019,-1.39957,0.680363,0.195703,1.15293,0.307452,1.54473,0.322832,-0.0224712,-0.619366,0.715492,1.32918,0.863149,1.44728,-0.536559,-0.452522,0.348276,-0.681133,0.143959,-0.426111,-0.547556,-1.03682,-1.97578,0.0981375,-0.86697,0.296113,-1.22244,-0.106438,-0.263469,-3.28484,0.0381401,0.729339,0.00955737,-0.637946,-1.56439,0.342974,0.0482817,-0.70107,-1.01191,-1.82705,-0.447208,0.653318,-0.531005,-0.975397,1.14662,0.101009,-2.24923,-0.619652,-2.41383,-1.52199,-0.239355,-0.159499,-1.31635,-1.48466,-1.87425,-0.19401,-1.29729,-2.29758,-1.36183,-0.625447,-1.37837,-0.30039,-2.49722,-0.733212,-0.851223,-0.297113,-1.06887,-0.513423,-1.34941,-1.44665,-0.464867,-1.1465,-1.10267,-1.21514,-0.597751,-1.26549,0.0156414,-0.935049,-1.54197,-1.60115,0.563095,-0.333021,-0.0343402,0.551699,0.0643761,1.16123,1.07282,0.82303,-1.25829,0.091123,-0.721902,-1.03247,-1.04991,-1.64135,-1.22362,-0.79553,-0.754786,-1.88183,-1.71617,-0.260681,-0.534629,-0.451958,-0.366734,-0.0787356,2.02985,1.19648,1.03224,-2.33895,-0.828772,-0.534884,-0.226677,-0.714088,-1.71177,-1.27182,-0.766607,-1.82579,-1.11387,-1.23101,-2.09434,-1.02423,-0.0690167,-0.0400946,-2.63825,-0.100266,-0.660507,0.136244,-0.000965994,-0.804084,-0.775001,-0.408924,-0.226677,-0.311109,-1.73072,-1.11924,-0.320293,-0.75253,-2.17539,-1.29215,1.16568,0.438377,0.748425,-1.5398,0.11932,-0.401358,-0.0637864,-0.0610829,1.3293,-0.509951,-1.02718,-0.574396,-0.188296,-1.33376,-0.230307,-0.566523,-0.457873,-0.620479,0.471425,0.611299,0.999211,1.04041,-1.96856,-0.519635,-0.792548,-0.559527,0.485898,0.0043031,-1.06257,-1.33034,-0.850121,-0.243072,-0.448272,-0.567937,-0.435405,-0.258299,-0.393567,-0.637006,0.177849,2.52544,1.01227,-0.407302,0.823698,1.14074,-0.535911,0.093559,1.30056,1.13959,-1.55123,-0.89026,-0.764083,-0.592033,-0.3887,-0.70603,-0.605618,-0.956938,-0.460257,0.85179,1.42149,0.929337,0.789997,-1.63324,0.899336,0.0452547,-0.366209,0.664229,-0.265021,-0.630182,-1.1864,-0.766076,-0.795913,-0.533039,-0.695279,-0.966634,-1.1898,-1.44861,-1.64134,2.8245,0.85368,-0.537506,-0.0480229,2.088,0.811534,0.118878,-0.55672,0.898228,0.0505147,-0.825074,-1.04321,-1.33206,-1.33156,-1.29944,-1.35524,-1.10454,-1.41242,-2.07473,1.76811,-1.60755,3.02806,0.0530331,1.37197,0.228674,0.261662,-0.381438,0.00115152,-0.281707,0.722875,-1.55246,-1.66413,-1.91954,-1.37447,-0.852333,-0.857096,-2.03524,-0.436786,-0.030108,0.419441,-0.260398,0.957684,-0.951213,0.700229,0.527767,0.218634,-0.415115,-0.824768,0.452448,-2.42594,-1.45926,-2.75981,-1.6677,-0.991061,-0.957625,-0.914524,-1.40274,0.733434,0.577786,-0.019872,1.17512,1.00587,0.566615,0.952571,-0.229493,-1.51618,-1.85783,-1.97982,1.00382,-1.67419,-1.02973,-1.07521,-2.13486,-1.42433,-0.91266,-1.24878,-1.91221,-2.51196,-0.909888,-0.439428,-1.36823,-0.433383,-1.70986,-1.38146,0.319492,0.222845,0.261762,-0.339752,0.306203,-1.14984,-1.64647,-2.0902,-2.894,-2.26239,-1.68528,0.183227,-2.79135,-2.25658,-0.412385,-1.12607,-2.83197,-0.763784,-1.68857,-1.6861,-1.39281,-0.695449,-1.45219,-1.79415,-2.79711,-2.61404,-2.47472,-3.17391,-2.5508,-2.09459,-1.27717,-0.893305,-0.955312,-2.17656,0.632091,0.0011726,0.688882,-1.80835,1.51406,0.0451176,-0.793423,0.0928951,-1.37575,1.29452,-0.406942,-3.05067,-0.384499,0.139759,-2.39968,-2.88591,-2.59403,-0.260668,-2.39346,-0.932099,-1.30405,-3.2932,-0.683977,-0.0882509,1.72586,-1.19649,-2.30527,2.75968,-0.596938,-0.939257,-1.77421,-1.57063,-0.567244,-0.601473,-2.60887,-2.97378,-0.732194,-2.93716,-3.48231,-1.81689,-1.50407,1.762,2.51924,0.577831,-1.26101,0.229715,-1.35139,0.258508,-0.708617,0.75451,-3.06674,-1.00159,-0.915808,-2.2678,0.497511,-1.768,-2.19491,-2.20691,-3.27844,2.17083,-0.374504,3.03214,3.92345,-0.435422,0.246938,-2.00889,-4.47925,1.20371,-1.95545,-0.395,-3.49065,-3.74542,0.454155,-1.65272,-0.864835,0.788779,2.20548,-2.33869,0.165858,2.08821,-1.45751,-0.462468,0.0487349,-3.19811,1.17324,-0.183973,-1.78044,1.35004,-3.0169,-1.77315,-0.238548,0.93696,1.01488,-0.293226,0.185129,0.994955,1.51307,0.801708,-2.65759,2.93715,-1.86898,-0.913335,-2.2751,0.603946,3.20148,-0.412476,-1.13839,0.674646,-0.283497,-1.75678,0.854385,0.575615,0.368565,-1.41556,1.36187,-0.411537,2.96539,2.1514,2.17078,4.93797,1.26536,1.71486,0.938458,3.07131,0.0379787,-1.24478,-1.86578,4.19019,1.2159,0.733822,4.67612,3.03205,3.97664,0.574148,2.71894,-0.445075,0.710569,2.5652,1.49054,2.97891,1.34845,1.02825,1.42055,3.02806,-1.21296,0.562826,2.56035,0.738108,-0.139173,2.21631,1.49341,-0.733694,3.48027,-0.3544,0.959335,-0.543452,-1.91424,-1.93445,-2.3912,2.03885,-1.40412,3.53175,2.32164,3.11152,2.45001,0.182742,0.707119,1.68927,-1.47368,-2.7811,0.882392,2.82986,0.112826,-1.41965,0.113992,-3.93123,-4.04753,-8.11316,-4.26532,-4.08539,-5.72745,-4.23824,0.548596,1.46162,3.61304,-2.8861,0.806867,2.96619,-0.0396396,-0.216593,-1.85468,0.1728,-2.32439,-0.0972535,-3.24953,-2.78688,-7.09785,-3.87729,-6.5409,1.55657,-0.206316,-1.65584,4.06779,3.35209,4.25472,0.95945,1.28857,-3.72571,4.1865,2.3369,-0.566016,0.538023,-1.5743,-1.12912,-0.0479551,-3.4362,-4.17378,-0.388471,4.03191,-1.35276,-0.706967,2.72514,2.83281,5.70881,1.94127,-0.803139,-1.01706,-0.674815,-1.32433,-0.289567,0.810287,-2.16308,-3.84248,0.843767,-3.37334,-1.46796,-0.479102,4.43787,0.776656,-0.924668,1.92592,1.18082,2.3514,1.54651,-1.12114,-1.34206,-0.274532,0.567816,1.42031,-0.0425118,-1.24069,-1.6108,-2.22855,-2.89822,-2.16549,-0.959495,1.73309,5.54612,-0.172871,4.5892,-0.892216,1.068,-0.655884,0.233877,-2.50907,0.844236,-0.29276,-0.209025,1.73173,-0.413518,-2.24218,-4.05393,-3.49969,-0.165191,0.725353,-1.89652,-0.223788,2.06202,1.99157,0.44371,2.68102,0.400855,-0.592932,0.327762,-2.61117,0.300957,-5.25722,-4.72016,-1.51192,1.21751,-1.35229,-0.538839,1.29374,-1.01654,-0.284171,-0.0338143,-1.62524,5.19297,-3.921,1.44838,3.80189,-2.50128,-1.13198,2.15243,-0.49286,-3.19245,-5.66175,-2.61546,-2.2964,1.88952,0.24549,3.10074,0.271487,1.4389,2.27414,0.662708,0.536299,2.45974,2.14388,-1.13889,3.06847,-1.08122,-0.110466,0.206677,-0.561399,0.0631318,-1.80948,-0.303366,-3.69847,0.101433,-0.768602,-0.425939,2.32801,1.0782,0.762905,-3.47267,1.02609,-0.925972,-1.79354,-0.798942,-0.455117,-4.83388,-4.9165,-2.66754,-0.0882239,3.03305,1.91492,0.20164,-0.67619,0.44493,-1.22409,-0.918486,-3.5456,-1.03696,0.0788603,1.98676,1.58885,-0.334465,0.37664,-1.52083,-0.855067,-0.364173,-0.323966,1.18103,-0.359473,2.964,0.693419,1.12941,-1.18445,-2.24263,0.602365,-4.13458,-2.06658,-0.140978,-0.735504,0.288084,1.49288,-4.98578,-5.84908,-1.65406,-0.537359,-1.4275,-0.0025408,0.980462,3.89772,1.59304,0.670167,-0.286375,-2.18729,-2.51462,-2.85308,-0.946502,-1.84329,-1.51697,-0.418456,-1.6317,-3.33681,-1.04612,-0.75635,-0.206201,0.124599,-0.749916,-0.0418808,1.62547,0.269334,0.162827,0.0501862,-0.0598292,-1.57193,-1.41738,-0.84035,-0.695997,0.551278,-0.128946,-1.3338,-2.66668,-2.15126,-2.08469,-1.38843,-0.165068,1.42602,-1.17542,-1.15516,-0.60814,-2.00929,-1.70344,-1.3983,1.21823,1.81804,1.21405,1.35834,1.3931,-2.89676,-2.62798,-1.35497,-3.31804,-5.09901,-0.570096,2.27807,0.717272,-1.13161,1.3594,-2.41847,-0.201769,0.247333,0.052978,-0.342019,2.53063,0.442832,-0.469761,-0.885806,-2.94238,-0.966471,0.857446,-2.92303,0.149458,-1.1113,1.61103,0.996669,-0.823224,-1.48422,-0.147369,0.0654657,-1.02621,0.0526979,-0.262025,-2.24878,-3.40699,-0.914624,0.023277,0.566752,-0.537525,-2.5232,-0.128125,-1.5218,-0.171404,0.485282,1.90536,1.16959,0.675958,-0.985222,2.20245,0.324436,-0.708368,-1.52525,-0.431599,-1.60564,-2.4468,2.26436,-0.773478,-0.0498117,0.123203,-0.989231,0.323501,0.611993,3.25504,1.34417,1.95306,-0.0545824,-1.27361,0.29742,0.221982,-1.05573,1.03162,-0.046699,0.886776,-0.617131,0.153398,1.48806,1.37792,0.195098,0.00168143,-0.320038,0.265074,1.1817,1.3453,1.24765,4.61638,-0.112536,-1.0061,2.05627,0.80133,-0.618993,-0.677488,0.321291,-0.109003,-1.90642,-1.97076,-1.58399,-1.77498,-0.965416,-0.911251,-2.10715,-0.479494,0.107387,2.35388,3.5503,4.17196,1.84678,1.37434,0.653444,0.714044,0.315472,1.86007,-2.85352,2.55743,-1.0649,-0.912049,1.87475,0.594268,-0.708329,-1.57408,-0.143386,-0.279612,1.33993,3.19613,2.2293,3.7709,3.43348,1.29225,0.0213078,-0.683985,-0.16131,0.916166,-0.228066,0.496526,0.232511,0.231772,1.69103,0.811814,-0.753143,-1.26482,-1.98376,1.58486,3.29998,3.17304,2.24516,-0.592666,5.60412,-0.245491,-2.1518,3.09471,-0.168013,0.188905,-0.912032,0.537178,-0.141756,-1.08763,-2.32267,-0.470451,-1.99482,-2.98935,-1.41634,-1.03823,-0.776916,0.562847,4.13811,-4.48254,0.371219,2.87633,-0.955174,1.11829,2.48912,1.53181,3.91852,2.86712,0.344815,0.0380968,-1.00384,1.74284,-0.025436,0.749621,-0.955101,-0.130805,-0.945517,2.04147,1.10122,-7.11074,-5.64834,-2.4847,-2.45182,-1.41528,-1.63135,-1.14534,2.69518,0.608888,0.688508,-0.543161,0.147026,-0.25749,-0.494271,-1.16381,1.60378,-0.427049,1.16893,1.17234,0.933877,-6.88215,-3.31253,-2.76538,-4.39974,0.343693,0.563238,0.320652,0.44539,1.85046,-0.236341,0.510559,-0.469493,1.79543,1.4911,3.02794,1.36908,-0.19697,1.67824,1.04789,2.64378,-7.42704,-4.87914,0.169204,-2.54821,1.4051,1.57358,2.16027,1.83275,2.12043,0.656415,-1.8646,-0.555927,0.793513,3.17793,2.49905,2.91206,0.797572,0.0349081,0.57484,-0.800587,-3.79655,0.318686,-0.872356,-4.55213,-1.95934,-0.943552,-1.48328,-0.504077,-2.16754,-2.18627,-1.91053,2.09062,-0.657118,0.616135,-0.394509,-0.245358,-0.183963,0.709366,0.00638749,0.114041,-0.382054,0.684487,-0.724549,-2.16549,-0.0692673,-1.7179,-0.803845,-0.398427,1.36357,0.976055,1.9667,0.269683,-1.40232,0.84697,-1.04409,0.583425,0.869817,-0.317127,-0.204457,0.708699,2.91659,1.63888,0.295215,-1.04243,0.739435,-1.60765,-0.659105,2.27827,4.22898,0.986596,-0.973987,-0.411652,-0.668503,-0.0893321,-0.605322,-0.93,-0.89763,0.64433,-0.753981,1.12638,-2.07084,0.00267287,-0.558396,0.15614,-0.502176,-1.58048,0.188702,0.321891,-0.175266,-4.38326,-1.23998,-2.55924,-1.92734,-1.37742,0.29249,-2.69728,-1.94401,-2.38247,1.21171,0.477074,0.0195118,-1.3161,-1.35875,2.1026,0.580235,2.81818,-0.929305,-0.263134,-0.650851,-0.138522,-1.14394,-1.68407,-2.07465,-1.6425,-1.26648,-2.16448,-2.20873,1.12623,-0.155031,-0.197174,-0.1439,-3.25334,-1.08778,-3.3973,1.20281,0.691638,-1.23208,-0.607425,0.595873,0.436877,-0.810396,-3.31343,-3.51532,-2.74215,-0.4113,0.0908005,-5.67399,-1.71468,-3.67775,-2.22984};


/**
* Класс представляющий одну цифру на картинке
*/
struct Digit
{

double S; // площадь цифры
int Xl,Xr,Yl,Yh; // границы цифры
int * digit; // массив для хранения цифры 20х20
int label; // метка цифры в исходном изображении

Digit(int l)
{
	label = l;
	Xr = Yl = 0;
	Xl = Yh = 32000;
	S = 0;
	digit = new int[IMGSIZE];
}

~Digit()
{
	delete[] digit;
}

};

/**
* Изолированные множества для разметки связанных областей
*/
class DisjointSets
{
public:

	// Создание пустого объекта изолированных множеств
	DisjointSets()
	{
		m_numElements = 0;
		m_numSets = 0;
	};

	// Деструктор
	~DisjointSets()
	{
		for(int i = 0; i < m_numElements; ++i)
			delete m_nodes[i];
		m_nodes.clear();
		m_numElements = 0;
		m_numSets = 0;
	};

	// Поиск множества(идентификатора) к которому принадлежит элемент
	int FindSet(int elementId) const
	{
		--elementId;
		assert(elementId < m_numElements);

		Node* curNode;

		// Ищем корень дерева представляющего множество к которому принадлежит элемент
		curNode = m_nodes[elementId];
		while(curNode->parent != NULL)
			curNode = curNode->parent;
		Node* root = curNode;

		// Идем к корню обновляя родителенй `elementId`. Делаем их непосредственными сыновьями
		// корня. Оптимизируем дерево для дальнейшего использования.
		curNode = m_nodes[elementId];
		while(curNode != root)
		{
			Node* next = curNode->parent;
			curNode->parent = root;
			curNode = next;
		}

		return root->index;
	}

	// Объединение двух множеств
	void Union(int setId1, int setId2)
	{
		assert(setId1 < m_numElements);
		assert(setId2 < m_numElements);

		if(setId1 == setId2)
			return; 

		Node* set1 = m_nodes[setId1];
		Node* set2 = m_nodes[setId2];

		// Чтобы результируюющее дерево было более сбалансированным меньшее дерево прививаем к большему
		if(set1->rank > set2->rank)
			set2->parent = set1;
		else if(set1->rank < set2->rank)
			set1->parent = set2;
		else 
		{
			set2->parent = set1;
			++set1->rank; // обновляем высоту
		}

		// Уменьшаем количество множеств
		--m_numSets;
	}
	
	// Добавляем новые элементы. Id новых элементов задаются последовательно начиная с не использованных до этого.
	void AddElements(int numToAdd)
	{
		assert(numToAdd >= 0);

		m_nodes.insert(m_nodes.end(), numToAdd, (Node*)NULL);
		for(int i = m_numElements; i < m_numElements + numToAdd; ++i)
		{
			m_nodes[i] = new Node();
			m_nodes[i]->parent = NULL;
			m_nodes[i]->index = i;
			m_nodes[i]->rank = 0;
		}

		m_numElements += numToAdd;
		m_numSets += numToAdd;
	}


private:

	// Структура представляющяя вершину в дереве
	struct Node
	{
		int rank; // максимальная высота
		int index; 
		Node* parent; 
	};

	int m_numElements; // Количество элементов на данный момент
	int m_numSets; // Общее количество множеств на данный момент
	std::vector<Node*> m_nodes; // список всех вершин
};


/**
*	Нейрон с сигмоидальной функцией
*/
class Neuron
{
public:
	/**
	*	Конструктор
	*/
	Neuron(int c)
	{
		count = c;
		w = new double[count];
	}

	~Neuron()
	{
		delete[] w;
	}

	/**
	*	Передаточная функция
	*/
	double Tranfer(int *x)
	{
		return activator(sum(x));
	}

	/**
	*	Инициализация начальных весов синапсов значениями
	*/
	void GetWeights(double *weight)
	{

		for (int i = 0; i < count; i++)
		{
			w[i] = weight[i];
		}
	}

private:
	double* w; // веса синапсов
	int count; // количество синапсов

	/**
	*	Сумматор
	*/
	double sum(int *x)
	{
		double nec = 0;
		for(int i = 0; i < count; i++)
		{
			nec += x[i]*w[i];
		}
		return nec;
	}

	/**
	*	Сигмоидальная функция активации
	*/
	double activator(double nec)
	{
		return 1/(1 + exp(-nec));
	}
};

 /**
   * Однослойный n-нейронный перцептрон
 */
class Perceptron
{
public:
	/**
	*	Конструктор
	*/
	Perceptron(int n, int m)
	{
		this->n = n;
		this->m = m;
		neurons.insert(neurons.end(), n, (Neuron*)NULL);
		for (int j = 0; j <n; j++)
		{
			neurons[j] = new Neuron(m);
		}
	}

	/**
	*	Деструктор
	*/
	~Perceptron()
	{
		for(int i = 0; i < n; ++i)
			delete neurons[i];
		neurons.clear();
	}


	/**
	* Распознавание образа
	* x - входной вектор
	* y - выходной вектор
	*/
	void Recognize(int *x, double *y)
	{
		for( int j = 0; j < n; j++)
		{
			y[j] = neurons[j]->Tranfer(x);
		}
	}

	/**
	* Инициализация начальных весов значениями
	*/
	void GetWeights(double *weight)
	{
		for(int j = 0; j < n; j++)
		{
			neurons[j]->GetWeights(&weight[j*m]);
		}
	}

private:
	std::vector<Neuron*> neurons;
	int n,m;
};

/**
 *	Класс реализует метод последовательно сканирования 
 *	для разметки связанных областей
 */
class SeqScan
{
public:
	/**
	*	Конструктор класса
	*/
	SeqScan(int row, int column)
	{
		row_count = row;
		column_count = column;
		labeledMap = new int[row_count*column_count];
		memset(labeledMap, 0, 4*(row_count*column_count));
		label = 0;
	}

	/**
	*  Деструктор
	*/
	~SeqScan()
	{
		delete[] labeledMap;
	}

	/**
	*  Функция пост обработки
	*/
	void PostProcessing()
	{
		for (int i = 1; i < row_count; i++)
		{
			for (int j = 1; j < column_count; j++)
			{
				if (labeledMap[i*column_count + j] != 0)
					labeledMap[i*column_count + j] = conflict.FindSet(labeledMap[i*column_count + j]) + 1;
			}
		}
	}
	
	/**
	*  Выделение цифр
	*/
	void SeparateDigits()
	{
		int rows = 20, columns = 20;
		map<int, Digit*> reg;
		vector<int> toDelete;
		int count = 0;
		for (int j = 1; j < column_count; j++)
		{
			for (int i = 1; i < row_count; i++)
			{
				if (labeledMap[i*column_count + j] != 0)
				{
					if (reg.find(labeledMap[i*column_count + j]) == reg.end())
					{
						reg[labeledMap[i*column_count + j]] = new Digit(labeledMap[i*column_count + j]);
						Lcount.push_back(reg[labeledMap[i*column_count + j]]);
						count++;
					}
					if (reg[labeledMap[i*column_count + j]]->Xr < j)
						reg[labeledMap[i*column_count + j]]->Xr = j;
					if (reg[labeledMap[i*column_count + j]]->Xl > j)
						reg[labeledMap[i*column_count + j]]->Xl = j;
					if (reg[labeledMap[i*column_count + j]]->Yl < i)
						reg[labeledMap[i*column_count + j]]->Yl = i;
					if (reg[labeledMap[i*column_count + j]]->Yh > i)
						reg[labeledMap[i*column_count + j]]->Yh = i;
					reg[labeledMap[i*column_count + j]]->S++;
				}
			}
		} 
		for (int i = 0; i < count; i++)
		{
			//Убираем из рассмотрения области в которых менее 20 клеток
			if (Lcount[i]->S < 20)
				toDelete.push_back(i);
			else
			{
				int c = 0;
				double height = (Lcount[i]->Yl - Lcount[i]->Yh) / double(rows - 1);
				double width = (Lcount[i]->Xr  - Lcount[i]->Xl) / double(columns - 1);

				for(int k = 0; k < rows; k++)
				{
					for(int j = 0; j < columns; j++)
					{
						if (labeledMap[(int)floor(k*height + 0.5)* column_count  + (int)floor(j*width + 0.5) +
								Lcount[i]->Yh*column_count + Lcount[i]->Xl] == Lcount[i]->label)
						{
							Lcount[i]->digit[k*columns + j] = 1;
							c++;
						}
						else
							Lcount[i]->digit[k*columns + j] = 0;

					}
				}
				if (c < 2*(rows+columns))
					toDelete.push_back(i);
			}
		}
		for (int i = toDelete.size() - 1; i >= 0; i--)
		{
			Lcount.erase(Lcount.begin() + toDelete[i]);
		}
	}

	/**
	* Метод последовательного сканирования
	*/
	void Run(char *data)
	{
		for (int i = 1; i < row_count; i++)
		{
			for (int j = 1; j < column_count; j++)
			{
				if (data[i*column_count + j] == '@' || data[i*column_count + j] == '#' || 
					(data[i*column_count + j] == '%' && 
					(labeledMap[i*column_count + j - 1] == 0 && data[i*column_count + j + 1] == '.')))
				{	
					if (labeledMap[(i - 1)*column_count + j-1] != 0)
					{
						labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j - 1];
					}
					else
					{
						if ((labeledMap[(i - 1)*column_count + j] == 0) && (labeledMap[i*column_count + j - 1] == 0))
						{
							label++;
							labeledMap[i*column_count + j] = label;
							conflict.AddElements(1);
						}
						else
						{
							if ((labeledMap[(i - 1)*column_count + j] != 0) ^ (labeledMap[i*column_count + j - 1] != 0))
							{
								if (labeledMap[(i - 1)*column_count + j] != 0)
									labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j];
								else
									labeledMap[i*column_count + j] = labeledMap[i*column_count + j - 1];
							}
							else
							{
								if ((labeledMap[(i - 1)*column_count + j] != 0) && (labeledMap[i*column_count + j - 1] != 0))
								{
									labeledMap[i*column_count + j] = labeledMap[(i - 1)*column_count + j];
									if (labeledMap[(i - 1)*column_count + j] != labeledMap[i*column_count + j - 1])
									{
										conflict.Union(conflict.FindSet(labeledMap[i*column_count + j - 1]), conflict.FindSet(labeledMap[(i - 1)*column_count + j]));								
									}
								}
							}
						}
					}
					if ((labeledMap[(i - 1)*column_count + j+1] != 0) && 
						(labeledMap[(i - 1)*column_count + j+1] != labeledMap[i*column_count + j]) )
					{
						conflict.Union(conflict.FindSet(labeledMap[i*column_count + j]), conflict.FindSet(labeledMap[(i - 1)*column_count + j + 1 ]));								
					}
				}
			}
		}
		PostProcessing();
	}



	/**
	*	Получение массива цифр с метками
	*/
	const vector<Digit*>& GetDigits()
	{
		return Lcount;
	}
	
private:
	/// Цифры с метками
	vector<Digit*> Lcount;
	/// Количество столбцов в массиве меток
	int column_count;
	/// Количество строк в массиве меток
	int	row_count;
	/// Массив для хранения меток
	int* labeledMap;
	/// максимальный номер меток
	int label;
	/// Не пересекающиеся множества для хранения конфликтов меток
	DisjointSets conflict;
};

/**
*	Основной класс представляющий Сканер
*/
class Scanner
{
public:
	/**
	*	Конструктор класса,
	*	Считывает изображение в массив.
	*/
	Scanner(int ac, char* av[])
	{
		int tmp[100000];
		int i = 0;
		string str;

		getline(cin,str);
		column_count = str.length();

		do
		{
			for (int j = 0; j < column_count; j++)
			{
				tmp[i*column_count + j] = str[j];
			}
			i++;
		}
		while (getline(cin,str) && !str.empty());

		row_count = i;
		data = new char[row_count*column_count];

		for(int i = 0; i < row_count; i++)
		{
			for(int j = 0; j < column_count; j++)
			{
				data[i*column_count + j] = tmp[i*column_count + j];
			}
		}
	}

	/**
	  *  Деструктор
	*/
	~Scanner()
	{
		delete[] data;
	}

	/**
	  *  Запускает цикл обработки изображения.
	*/
	void Run()
	{
		int n = 10; // количество цифр и соответственно нейронов
		double z[10]; // массив для хранения выдачи нейросети

		SeqScan labelScan(row_count, column_count);
		labelScan.Run(data);
		labelScan.SeparateDigits();
		
		Perceptron perceptron(n, IMGSIZE);
		perceptron.GetWeights(weights);

		for (vector<Digit*>::const_iterator it = labelScan.GetDigits().begin(); it != labelScan.GetDigits().end(); it++)
		{
			int number = 0;
			double prec = 0;
			perceptron.Recognize((*it)->digit, z);
			for (int k = 0; k < n ; k++)
			{
				if (z[k] >= prec)
				{
					prec = z[k];
					number = k;
				}
				//cout << "Number is: " << k << "  " << z[k] << endl;
			}
			cout << number;
		}
	}

private:
	/// Количество столбцов в изображении
	int column_count;
	/// Количество строк в изображении
	int	row_count;
	/// Массив для хранения изображения
	char* data;

};


int main(int argc, char* argv[])
{
	try
	{
		Scanner scanner(argc,argv);
		scanner.Run();
	}
	catch(exception& e)
	{
	cerr << "Error: " << e.what() << "\n";
	return 1;
	}
	catch(...)
	{
	cerr << "Exception of unknown type!\n";
	return 2;
	}
	return 0;
}