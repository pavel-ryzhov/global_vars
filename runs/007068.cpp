#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.88;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {-0.00146,-0.00902,-0.01208,-0.11697,-0.22146,-0.52648,-0.50314,-0.57789,-0.31954,-0.14482,0.08756,0.41111,0.12831,-0.20050,-0.19564,-0.10569,-0.01768,-0.00017,0.00059,-0.04743,-0.08052,0.00015,-0.16610,-0.50247,-0.59295,-0.16630,-0.27522,-0.30886,-0.30715,-0.11403,0.13741,-0.01775,-0.11131,0.14049,-0.06610,-0.05212,-0.03893,-0.09893,-0.02000,-0.14908,-0.25254,-0.23104,-0.29757,-0.27447,-0.00410,0.01047,-0.29377,-0.03456,-0.16909,-0.22376,0.00966,0.05634,-0.08059,-0.16651,-0.03915,-0.05053,-0.02643,-0.10325,-0.19689,-0.10422,-0.12000,-0.05421,0.05097,-0.00479,0.06769,-0.20511,-0.20131,-0.23371,0.00573,0.01576,-0.00064,-0.09527,-0.03943,-0.04996,-0.02423,-0.03956,0.14210,-0.03916,-0.15193,-0.05654,0.12030,0.25894,-0.00999,-0.21197,-0.05343,-0.16078,-0.07768,-0.14843,-0.04778,-0.09502,-0.01031,-0.04799,0.07576,-0.02251,0.03163,0.02950,-0.14707,-0.13368,0.12642,0.38508,-0.06997,-0.30330,-0.22887,-0.52761,-0.46341,-0.35909,-0.12568,-0.13445,-0.01191,-0.05504,0.08500,0.13943,0.09970,0.06100,-0.03842,-0.05552,0.17454,0.53370,0.28913,-0.18308,-0.49546,-0.66016,-0.52509,-0.36626,-0.06351,-0.13642,-0.01201,-0.02413,0.06070,0.10647,0.36554,0.12344,0.04880,0.13589,0.54310,0.45837,0.23652,0.16023,-0.01209,-0.44897,-0.19575,-0.26272,-0.12884,-0.14042,-0.01148,-0.02755,0.07817,0.19243,0.38830,0.20773,0.18389,0.12305,0.14983,0.26419,0.21490,0.43993,0.03838,-0.01345,0.05199,0.09473,-0.12322,-0.07630,-0.01170,-0.02757,0.07245,0.30502,0.37842,0.15054,0.35296,0.07029,0.01887,-0.13354,0.01928,-0.01297,0.06396,0.05609,-0.01756,0.29632,0.01494,-0.06466,-0.02212,-0.03537,0.04096,0.21738,0.34473,0.27245,0.24113,0.19416,0.04907,-0.04387,-0.01620,-0.00862,-0.09223,-0.09995,0.04231,0.07308,0.12123,-0.06729,-0.02003,-0.04370,0.03336,0.13010,0.30959,0.57079,0.44550,-0.00296,0.10033,0.11119,0.18288,-0.07032,-0.06306,-0.15520,0.05607,-0.02128,0.10583,-0.06499,-0.04434,-0.09454,0.05717,0.01343,-0.03964,0.32924,0.21318,-0.00481,0.11322,0.21987,0.26014,-0.06462,-0.04009,0.00061,0.16763,0.05846,0.13214,-0.00393,-0.04610,-0.09538,-0.00103,-0.09326,-0.31810,0.18652,0.06971,0.08717,0.14350,0.37700,0.03518,-0.14307,-0.10209,-0.06033,0.01107,0.04983,0.19731,0.05339,-0.04004,-0.09330,-0.04044,-0.29706,-0.38413,-0.12886,-0.08920,-0.03030,0.09521,0.22965,-0.04250,0.09296,-0.22475,-0.15648,-0.26010,0.02799,0.21996,-0.01043,-0.04099,-0.12141,-0.16748,-0.33469,-0.29719,-0.21715,0.01642,-0.02897,0.10903,0.09384,-0.06645,-0.01970,-0.01653,-0.06436,-0.08857,0.16465,0.20355,-0.04079,0.00070,-0.13327,-0.10284,-0.25209,-0.30664,-0.22112,-0.17668,-0.12650,0.01619,-0.01999,-0.11937,-0.02879,0.19774,0.11046,0.27998,0.23235,0.01066,-0.09245,-0.00091,-0.00977,-0.07633,-0.03389,0.03189,-0.25883,-0.13194,-0.08243,-0.13077,0.09077,0.45945,0.80339,0.28034,0.41926,0.27974,-0.05113,0.00908,-0.00006,0.16259,};
float weights_input_1[] = {-0.00118,-0.00238,-0.00316,-0.15500,-0.30919,-0.38493,-0.31532,-0.16665,-0.33826,-0.17308,-0.01587,0.03329,0.13418,-0.13131,-0.24568,-0.13751,-0.05592,0.00312,-0.00087,-0.03759,-0.07319,0.01391,-0.18907,-0.27777,-0.26535,-0.22466,-0.14430,-0.06601,0.00161,-0.07229,-0.12055,-0.04061,-0.14920,-0.17630,-0.06933,-0.03296,-0.03770,-0.07557,-0.03200,0.04734,-0.12499,-0.33141,-0.08508,-0.30626,-0.22628,0.01943,0.01230,-0.02907,-0.12365,-0.09763,-0.21649,-0.12522,-0.02150,-0.07893,-0.03874,-0.04024,-0.01396,0.05840,-0.06690,-0.18676,-0.09769,-0.00758,0.07550,0.21560,0.39804,0.11586,-0.02941,-0.03478,-0.13316,-0.08635,-0.00700,-0.02917,-0.03724,-0.03996,-0.00036,0.05422,0.01683,0.00946,-0.10920,-0.13522,0.02387,0.34921,0.37624,0.14797,0.19054,0.03939,-0.03047,-0.07045,-0.02829,-0.02991,-0.03878,-0.03774,0.02555,0.04428,-0.02162,-0.06435,-0.10375,-0.14387,0.01426,0.56621,0.30685,0.02408,0.18527,0.11668,0.01240,-0.05348,-0.02368,-0.03821,-0.03913,-0.03794,0.02869,0.17008,0.04428,-0.12384,-0.22495,-0.12312,-0.00830,0.36986,0.25508,0.12360,0.21142,0.03011,-0.07433,-0.00898,-0.02884,-0.03858,-0.03924,-0.03906,0.01311,0.17918,0.07802,0.04328,-0.14619,-0.13118,-0.15717,0.10562,-0.01032,0.16795,0.05883,-0.09485,-0.12440,-0.08398,-0.03037,-0.05878,-0.03676,-0.03886,0.08885,0.11614,0.15558,0.09336,-0.12044,-0.20324,-0.08118,-0.08561,-0.07743,0.12741,0.12639,0.05451,-0.14584,-0.14554,-0.10357,-0.05844,-0.03893,-0.03967,0.09115,0.21742,0.27046,0.26605,-0.00209,-0.05662,-0.08613,-0.05656,0.10608,0.00144,-0.00150,0.04818,0.01421,-0.09592,-0.10314,-0.05841,-0.08405,-0.08662,0.03537,0.12874,0.13717,0.06285,-0.03122,-0.03428,-0.29154,-0.05819,0.15351,-0.07172,-0.07216,0.06510,-0.04363,-0.05677,-0.12037,-0.13810,-0.08082,-0.08873,0.05405,0.12376,0.10813,-0.01092,-0.19607,0.04034,-0.19804,-0.00369,0.29455,-0.01340,-0.13789,-0.09840,-0.13857,-0.08411,-0.12263,-0.13675,-0.08632,-0.06495,0.08322,0.17512,0.00518,-0.10252,-0.09100,-0.00549,0.07683,0.30661,0.44485,0.02505,-0.09150,-0.04181,-0.02961,-0.00123,-0.08382,-0.10733,-0.06838,-0.06076,0.05403,0.12138,-0.04855,-0.08974,-0.19362,-0.03031,-0.04043,0.42136,0.20358,0.01708,-0.05862,-0.03356,-0.01942,-0.03180,-0.07845,-0.00688,-0.01042,-0.06277,-0.01465,0.02189,-0.18679,-0.24751,-0.43993,-0.28874,-0.15470,0.27178,0.15592,0.06606,-0.21723,-0.13109,-0.10805,-0.01727,-0.08722,-0.02693,-0.03775,-0.06368,-0.08141,0.01265,-0.06647,-0.28773,-0.28020,-0.44004,-0.30123,0.13506,0.10215,-0.01365,0.05030,-0.05062,-0.05732,-0.04800,-0.05445,-0.03077,0.00127,-0.09941,-0.04803,-0.03610,-0.10458,-0.12736,-0.10584,-0.33110,-0.32118,-0.05491,0.01711,-0.12532,0.36066,0.26735,0.10376,-0.06106,0.01039,-0.07501,0.00097,-0.00584,-0.05857,0.01695,0.01622,0.06835,0.13566,0.09434,-0.41673,-0.09795,0.20441,0.42799,0.35677,0.32523,0.24981,-0.00097,0.00771,0.00042,-0.06646,};
float weights_input_2[] = {-0.00022,-0.01162,-0.00936,0.03039,-0.00946,0.12226,0.12763,0.20128,0.08448,-0.07007,-0.03881,0.07112,0.14421,0.29965,0.37615,0.24131,0.00303,0.00826,-0.00046,-0.01397,-0.01148,0.02626,-0.04185,-0.16552,-0.01615,0.30537,0.15671,0.21137,0.18436,0.17358,0.02473,-0.00762,0.03381,0.22055,0.09255,0.00825,-0.00223,-0.01833,-0.02032,-0.02429,-0.19577,-0.30558,0.02803,0.29291,0.39337,0.11904,0.24994,0.06272,-0.07659,-0.32895,-0.29749,-0.15530,0.07868,0.09313,-0.00224,-0.00280,-0.01192,-0.07487,-0.18083,0.09275,0.21484,0.22484,0.32644,-0.15707,-0.30403,-0.44776,-0.02775,-0.16020,-0.29786,-0.18122,-0.01715,0.02228,-0.00368,-0.00197,0.02500,-0.09123,-0.11498,0.09478,0.00027,0.31502,0.06491,-0.35109,-0.52175,-0.57331,-0.21788,-0.36074,-0.42712,-0.22758,0.02883,0.00429,-0.01287,0.01047,0.01607,-0.03024,-0.00987,0.19994,0.08302,0.28492,0.02613,-0.37343,-0.47485,-0.43526,-0.45569,-0.64116,-0.43271,-0.23497,0.07909,-0.00024,0.00168,-0.00506,0.02736,0.00901,0.24094,0.34211,0.31331,0.20270,-0.00709,-0.07880,0.09805,-0.36973,-0.33969,-0.49684,-0.38488,-0.24629,0.09558,-0.01760,0.00119,-0.01172,0.03129,0.12035,0.33707,0.45545,0.08987,-0.02747,-0.08041,-0.11488,0.11198,-0.23561,-0.09662,0.09870,-0.08036,-0.06364,0.11919,0.10071,0.00110,-0.00103,0.02721,0.30928,0.35503,0.55988,-0.17069,-0.24783,-0.36307,-0.46798,-0.19579,-0.06018,-0.02678,0.37335,0.50409,0.10859,0.15646,0.07533,-0.01491,-0.01840,0.03804,0.32020,0.13959,-0.09440,-0.35714,-0.54753,-0.38402,-0.47307,-0.38096,-0.73622,-0.11774,0.13808,0.42409,0.06152,0.19082,0.07122,-0.01512,-0.01757,0.03440,0.22011,0.11272,-0.31436,-0.44804,-0.54309,-0.28680,-0.51951,-0.76069,-0.54819,-0.18359,-0.07212,-0.07604,-0.04864,0.19541,0.10739,-0.01701,-0.03439,-0.07400,0.11347,-0.09387,0.07992,-0.00387,-0.37942,-0.49653,-0.74077,-0.39051,-0.14297,0.02279,-0.09834,-0.08558,-0.12950,0.20722,0.10727,0.04966,0.00934,-0.11590,0.12653,0.06637,0.47999,0.42204,0.08909,-0.26327,-0.45711,0.16237,0.04683,-0.05811,-0.04492,-0.12164,-0.14037,0.18397,0.06764,0.02306,0.05600,0.04117,0.15849,0.05452,0.45427,0.59727,0.34731,0.05756,-0.13729,0.34764,0.12019,0.05496,-0.07047,-0.06139,0.09627,0.12134,-0.03209,-0.03291,0.05759,0.03079,-0.00038,-0.04723,0.12187,0.41650,0.39937,0.30885,0.10790,0.30850,0.18054,-0.08924,0.08019,-0.28785,-0.00960,0.05460,0.01673,-0.00478,0.09498,0.02903,-0.20330,-0.05948,0.24085,0.37819,0.30879,0.19724,-0.07138,0.29660,-0.10306,-0.05463,-0.12552,0.03671,-0.00545,0.00813,0.00619,-0.00121,0.03001,0.01611,-0.12750,-0.08314,-0.28460,0.51475,0.17469,0.10242,0.25402,0.17072,0.04223,-0.22474,-0.15881,-0.02552,-0.04363,-0.00448,-0.00428,-0.00055,0.04162,-0.05881,-0.07462,-0.06428,-0.07821,-0.13603,0.09881,0.19518,0.15195,0.06947,0.00484,-0.19184,-0.11762,-0.14796,-0.05254,-0.00614,-0.00061,0.03433,};
float weights_input_3[] = {-0.00163,-0.00174,-0.00503,-0.08520,-0.17411,-0.22507,-0.29581,-0.27797,-0.29142,0.07740,0.03788,0.18902,0.26550,0.18875,-0.13920,-0.09752,-0.02137,0.00016,-0.00141,-0.03352,-0.03778,-0.06989,-0.04047,-0.20794,-0.20875,-0.18518,0.00075,0.03654,-0.06068,-0.10192,-0.06107,0.18398,-0.06315,-0.06035,-0.05937,-0.02169,-0.03175,-0.05574,-0.01078,0.09688,-0.13817,-0.21882,0.02614,-0.10159,0.02595,0.11816,0.07418,-0.14242,-0.09018,-0.00548,-0.10709,-0.06621,-0.02609,-0.07059,-0.03374,-0.02096,-0.01048,0.09493,-0.09529,0.04498,0.05247,0.24235,0.27074,0.41220,0.38242,-0.03222,-0.07537,-0.10179,-0.14691,-0.04421,-0.00126,-0.02949,-0.02953,-0.02077,-0.00141,0.08692,0.07961,0.16050,-0.01716,-0.08105,0.10579,0.28982,0.40186,-0.00619,0.02546,-0.04168,-0.14593,-0.04429,-0.00517,-0.02945,-0.03147,-0.01912,0.03965,0.10700,0.15454,0.09129,-0.14075,-0.23500,-0.02737,0.55947,0.14372,-0.18045,-0.01507,-0.00017,-0.13275,-0.04713,-0.00550,-0.03027,-0.02929,-0.02022,0.04091,0.18103,0.16970,0.03656,-0.38138,-0.18182,0.08048,0.52438,0.09260,-0.07902,-0.00616,-0.05538,-0.14455,-0.04053,-0.00516,-0.02981,-0.03073,-0.01978,0.02681,0.18656,0.06718,-0.03623,-0.36355,-0.33163,0.16760,0.33430,0.05617,0.03126,0.00776,-0.00983,-0.12120,-0.03136,-0.00630,-0.03023,-0.03000,-0.02073,0.03888,0.14618,-0.02793,-0.18092,-0.53934,-0.26579,0.05734,0.10811,-0.10452,0.00242,0.01830,0.05636,-0.09108,-0.05170,-0.00771,-0.02885,-0.02963,-0.02160,0.00425,0.00202,0.00241,-0.01540,-0.46834,-0.29536,-0.07082,-0.00431,-0.20907,-0.36852,-0.14325,0.07456,-0.05995,-0.05455,-0.00797,-0.03050,-0.06362,-0.06882,-0.12779,-0.02757,0.01597,-0.08643,-0.30069,-0.19976,-0.03191,0.00368,-0.05808,-0.35565,-0.21849,0.08875,-0.08391,-0.05748,-0.01187,-0.03755,-0.05772,-0.11789,-0.16062,-0.06591,0.02616,-0.14127,-0.31476,-0.02765,-0.08727,-0.00437,0.09948,-0.23434,-0.16875,0.05577,-0.09501,-0.06528,-0.01723,-0.03621,-0.08132,-0.13646,-0.18946,-0.06602,-0.13736,-0.21530,-0.33102,-0.25407,-0.11670,0.03200,0.17279,-0.17484,-0.18447,-0.05957,-0.19220,-0.06900,0.01901,-0.00238,-0.08400,-0.06998,-0.09956,0.02535,-0.07222,-0.20036,-0.21200,-0.16169,-0.13211,0.17479,-0.00258,-0.32387,-0.23068,-0.00950,-0.14169,-0.02923,0.01795,0.00013,-0.03339,-0.07179,-0.07055,0.10473,-0.05091,-0.17879,-0.28503,-0.08580,0.04115,0.24085,0.01840,-0.17368,-0.07075,0.04594,-0.16117,-0.02254,-0.02249,-0.03608,-0.03047,-0.07608,-0.09212,0.13970,0.01024,-0.09145,-0.10191,-0.06037,-0.06984,0.16540,-0.01358,-0.15899,0.14018,0.10598,-0.05861,-0.01607,0.00607,-0.02701,0.00529,-0.07958,-0.07666,-0.07982,0.01405,-0.05748,0.12807,-0.00395,-0.14438,-0.08023,-0.11818,-0.29864,0.38525,0.40627,0.21193,0.04136,0.01872,-0.05450,0.00372,-0.00519,-0.07863,0.00356,0.04790,0.10560,0.18407,0.07181,-0.30690,-0.01280,0.10542,0.17679,0.54646,0.52303,0.27582,0.01271,0.01946,-0.00077,0.06362,};
float weights_input_4[] = {-0.00025,-0.03816,-0.06013,-0.04329,-0.09637,-0.53455,-0.32384,-0.39432,-0.13404,-0.19495,0.19086,0.11188,-0.14200,-0.42358,-0.26698,0.00653,0.14328,-0.00175,0.00018,-0.05703,-0.05334,0.07263,-0.14657,-0.35804,-0.44633,-0.30078,-0.36344,-0.32680,-0.08125,-0.09942,0.16683,-0.22537,-0.20598,0.08160,0.07776,0.01374,-0.02081,-0.03820,-0.04228,-0.21519,-0.04415,-0.10653,-0.60875,-0.38299,-0.20634,-0.20023,-0.64522,-0.22436,-0.38225,-0.22998,0.14820,0.25187,0.08060,-0.05357,-0.02071,0.01380,-0.02026,-0.08948,0.07472,-0.27912,-0.43066,-0.37434,-0.13780,-0.18716,-0.15046,-0.20723,-0.41119,-0.06973,0.15006,0.25443,0.15482,-0.06635,-0.02164,0.01272,-0.00581,-0.10066,0.30889,-0.30926,-0.26565,0.00410,0.18785,0.13301,-0.27404,-0.22549,-0.01120,0.06016,0.20022,0.14301,0.07687,-0.06784,-0.00429,0.01624,0.03992,-0.02704,-0.05844,-0.04843,-0.08160,-0.12718,0.18396,-0.03739,-0.26868,-0.20513,-0.13240,-0.06898,-0.08601,-0.06307,-0.13825,-0.10722,-0.00670,-0.01944,0.03911,0.03785,0.01925,-0.10004,0.15974,-0.14847,0.21278,0.05566,0.19060,0.32477,-0.05662,-0.23795,-0.16593,-0.20382,-0.12477,-0.10831,-0.00415,0.00074,-0.02635,-0.11130,0.26693,0.21628,0.37937,0.51621,0.70890,0.30402,0.46878,0.28974,0.26651,-0.46610,-0.16232,-0.37725,-0.21947,-0.12705,-0.00483,0.00151,0.01947,-0.09569,0.16573,-0.04915,0.14612,0.36018,0.55308,0.39946,0.53055,0.31428,-0.00682,-0.52050,-0.34572,-0.20984,-0.21389,-0.08826,-0.00447,-0.00016,0.03997,0.04528,0.34524,0.11390,0.53487,0.48198,0.56097,0.12400,0.45517,0.32382,-0.16260,-0.16092,-0.41002,0.05959,-0.07412,-0.08191,-0.03127,-0.02078,0.10763,0.21706,0.45381,0.33454,0.61340,0.56963,0.35109,0.10810,0.32019,0.40330,0.02752,-0.07727,0.01238,0.02252,0.03156,-0.07648,-0.03629,0.04150,0.15056,0.26741,0.51522,0.74713,0.49446,-0.04946,0.07581,0.07148,0.14527,0.14228,-0.08393,-0.06875,0.24119,-0.15437,0.05325,-0.07732,-0.02953,0.05326,0.24383,0.10161,0.16562,0.32536,0.27619,0.00560,0.04613,0.07514,-0.06358,-0.23640,-0.02238,0.14700,0.49013,-0.01374,0.15907,-0.04036,-0.02639,-0.02645,0.08268,-0.08678,-0.14704,0.34559,-0.22931,-0.05710,-0.11017,-0.15998,-0.30594,-0.22392,0.11773,0.01932,0.27383,-0.06936,0.24578,0.05797,-0.02067,-0.05171,-0.01075,-0.13686,0.01492,0.02928,-0.26171,-0.31905,-0.19388,-0.31559,-0.42096,-0.00490,0.00717,-0.04374,-0.05277,0.20581,0.27791,0.05026,-0.02159,-0.05386,-0.10853,-0.30386,-0.02579,-0.16340,-0.07284,0.03338,0.10343,-0.21184,-0.16024,-0.04673,-0.05027,-0.01032,0.13778,0.29615,0.18144,-0.02369,-0.00299,-0.04941,-0.08704,-0.15446,-0.33072,-0.01903,-0.34571,-0.26945,-0.00642,-0.40564,-0.16221,0.06642,-0.08740,0.06807,0.15273,0.26813,0.01173,-0.00565,-0.00301,-0.01240,-0.06253,-0.14619,-0.15788,-0.51432,-0.19120,-0.10734,0.06445,-0.21862,0.30142,0.58209,-0.00892,-0.06059,0.02749,-0.02438,0.01121,0.00076,0.40931,};
float weights_input_5[] = {0.03862,0.04197,0.03760,0.13383,0.41854,0.44428,0.44956,0.07853,-0.17769,0.02990,-0.01873,0.09271,0.35100,0.41413,0.35125,0.21878,0.11588,0.04289,0.03795,0.01015,0.12448,0.21965,0.31111,0.25217,0.08860,-0.01776,-0.00531,0.11175,0.01305,-0.09504,0.22936,0.42834,0.43083,0.29230,0.04060,0.01745,-0.03136,-0.07201,0.08653,0.11069,0.14280,0.00697,0.21286,-0.01807,0.52132,0.49559,-0.02079,-0.25723,0.02576,0.22193,0.42092,0.22856,0.06554,-0.08579,-0.05089,-0.00427,0.01285,0.05289,0.04530,-0.00393,0.13724,0.18931,0.37179,0.38133,-0.04822,-0.19886,-0.02232,0.11632,0.27804,0.09687,0.05569,-0.04197,-0.02982,-0.00258,0.02139,0.00847,0.02423,-0.05122,-0.19018,-0.12150,0.03260,-0.01012,-0.14240,-0.07363,0.06394,0.01282,0.02432,-0.00258,0.02993,-0.06130,-0.05985,-0.01580,0.00771,-0.04146,0.03640,-0.21168,-0.30637,-0.32334,-0.19057,0.14355,-0.00108,0.06303,-0.01023,-0.17436,-0.07712,-0.03827,-0.00195,-0.06076,-0.06064,-0.01420,0.00881,0.04328,-0.01841,-0.20749,-0.22512,-0.22910,-0.03555,0.16295,0.00104,0.14379,-0.04846,-0.32362,-0.14947,-0.08024,0.00115,-0.06279,-0.06019,-0.01745,0.00408,-0.00075,-0.05513,-0.10457,-0.24605,-0.43583,0.04168,0.16436,0.31171,0.17182,-0.17774,-0.22853,-0.10150,0.00699,0.03580,-0.02224,-0.06122,-0.01763,-0.00145,0.01514,-0.06866,-0.16269,-0.37824,-0.23445,-0.07471,0.07825,0.18330,0.04527,-0.20563,-0.20483,-0.08953,0.01496,-0.00304,-0.06150,-0.05943,-0.01763,-0.01142,-0.05919,-0.15284,-0.19547,-0.41585,-0.30664,0.10948,0.20542,-0.08784,-0.20653,-0.16167,-0.15189,-0.04895,0.00658,0.02999,-0.03104,-0.06054,-0.02332,-0.02016,-0.08384,-0.16563,-0.27609,-0.28361,-0.26987,0.34277,0.07687,-0.21449,-0.20168,-0.15763,-0.12543,-0.05042,0.00521,0.05598,-0.00093,-0.05268,-0.02461,-0.03523,-0.11268,-0.14398,-0.32275,-0.35588,-0.04865,0.24869,0.16099,0.05791,-0.12266,-0.32644,-0.16417,-0.07537,-0.02068,0.02234,-0.03378,-0.07987,-0.05157,-0.05289,-0.11724,-0.29605,-0.40235,-0.35649,-0.32521,-0.06217,0.16381,0.14836,-0.11441,-0.38252,-0.31682,-0.19085,-0.03798,0.01978,-0.03120,-0.08465,-0.03783,-0.05798,-0.10986,-0.33290,-0.31937,-0.19179,-0.20530,0.13362,0.34902,0.07217,-0.32255,-0.45129,-0.36547,-0.21462,-0.10259,-0.05926,-0.03545,-0.06054,-0.04338,-0.06024,-0.21202,-0.25207,-0.31163,-0.42393,-0.00872,0.26739,0.36175,0.04308,-0.20240,-0.34885,-0.29130,-0.32962,-0.13520,-0.09353,-0.14982,-0.06129,-0.10825,-0.08329,-0.20184,-0.30985,-0.43579,-0.32649,-0.01699,0.05084,0.23098,-0.17753,-0.32068,-0.26912,-0.31431,-0.21209,-0.10712,0.00670,-0.06330,0.00179,-0.10898,-0.11262,-0.12373,-0.11363,-0.11670,-0.04556,0.04694,-0.13753,-0.09233,-0.29135,-0.29824,-0.03864,-0.00526,-0.03639,0.01288,0.00737,-0.08703,0.00172,-0.01934,-0.13203,-0.20386,-0.21938,-0.06546,-0.05302,-0.09530,-0.24232,-0.31895,-0.38644,-0.24293,-0.00658,-0.00093,-0.01019,-0.05668,0.00310,-0.00213,0.09065,};
float weights_input_6[] = {-0.00395,-0.01837,-0.02339,0.16744,0.02676,-0.16698,-0.22604,-0.12917,0.19118,0.10718,0.03844,-0.20623,-0.14629,-0.09982,-0.02594,0.37035,0.00482,-0.00524,-0.00356,0.04554,-0.07090,-0.10377,-0.16758,-0.15037,-0.17057,0.18914,0.01588,0.01488,0.09207,0.05322,-0.07395,-0.33801,-0.18523,0.24059,0.06553,0.02975,0.03871,0.04534,0.01090,-0.15993,-0.15534,-0.21999,-0.11858,0.08569,0.34127,0.09492,-0.12484,-0.18290,-0.17118,-0.13559,0.19587,0.08550,0.00903,0.12695,0.02888,-0.01064,0.12019,0.03282,-0.00956,0.05236,0.05428,0.09621,0.06035,0.06709,-0.48869,-0.36988,-0.32969,-0.07417,0.10379,0.07909,0.01822,0.10298,0.03965,-0.01194,0.09494,0.01444,0.12423,0.13498,-0.09957,0.25395,0.00413,-0.17924,-0.39079,-0.56295,-0.23046,-0.05537,0.04381,0.08299,0.05189,0.10826,0.05550,0.02882,0.13842,0.12553,0.33545,0.23223,0.16618,0.30965,0.01915,-0.35184,-0.51214,-0.33421,-0.36691,-0.19028,0.01596,0.08197,0.12767,0.12548,0.06727,0.00206,0.19859,0.22451,0.51951,0.79490,0.49892,0.33670,0.04510,-0.00528,-0.20089,-0.12197,-0.33137,-0.17165,-0.08587,0.11731,0.14940,0.13778,0.06600,0.00384,0.11106,0.30943,0.44796,0.37596,0.47837,0.44549,0.53623,0.26354,0.25146,-0.10729,-0.15938,-0.24903,0.02255,0.13840,0.15180,0.13967,0.09127,0.04896,0.02868,0.09458,0.30194,0.25467,0.14399,0.05839,0.03026,-0.00651,-0.15523,-0.03996,-0.30160,-0.15185,0.28645,0.16980,0.17155,0.14338,0.09055,0.04894,0.02401,0.02142,0.05858,0.20637,0.49833,0.02046,-0.03199,-0.24840,-0.13488,0.14520,0.29914,0.35013,0.38898,0.18899,0.12683,0.13859,0.10445,0.05401,0.01674,0.01926,0.04900,0.41128,0.70543,0.47711,0.59239,0.30045,0.20841,0.06817,-0.01326,0.44108,0.31843,0.12299,0.14939,0.13716,0.07004,0.03125,-0.03410,-0.00593,-0.03323,0.13941,0.29531,0.14883,0.14506,-0.04752,-0.03289,0.25765,0.01271,0.21080,0.24991,-0.02814,0.08823,0.15468,0.05849,-0.01550,-0.08999,-0.11325,-0.16027,-0.16575,-0.24989,-0.10161,-0.48189,-0.48151,0.02736,0.39365,-0.09261,0.08063,0.04933,-0.17316,0.03764,0.09922,0.03667,0.00707,-0.19767,-0.20891,-0.33150,-0.34128,-0.18968,-0.27462,-0.17430,-0.51740,0.23435,0.36452,0.05757,0.07835,-0.02644,-0.14699,-0.06258,0.05384,0.03053,-0.01821,-0.22722,-0.12322,-0.15715,-0.34766,-0.23834,0.07547,0.14400,-0.02201,0.00576,0.08773,-0.01640,0.01127,-0.13978,-0.12130,-0.10036,0.05185,0.04818,0.02492,-0.23868,-0.30511,-0.16705,-0.19393,-0.14564,0.01377,0.15986,-0.47841,0.01840,-0.07131,-0.22397,-0.18188,0.04794,-0.17149,-0.09367,0.07450,-0.00185,0.06254,-0.28057,-0.49353,-0.32166,0.02092,0.11358,0.34411,0.08039,-0.26261,-0.23659,0.11763,-0.47996,-0.15117,-0.24392,-0.17997,-0.00577,0.11173,-0.00316,0.00468,-0.09596,-0.16801,-0.11199,-0.08209,-0.25126,-0.08693,0.10250,-0.10056,0.05677,-0.19201,-0.32308,-0.30044,-0.25588,-0.09894,-0.00469,-0.00221,0.03262,};
float weights_input_7[] = {-0.00218,0.04201,0.06571,-0.13650,-0.24629,-0.16290,-0.10809,-0.09661,-0.37948,-0.28647,-0.28984,0.19093,0.15740,0.27474,0.09370,0.04256,-0.02952,-0.00438,-0.00144,0.01972,0.01577,-0.13533,-0.07536,-0.16804,-0.26035,-0.06417,-0.07484,-0.12384,-0.30846,-0.30912,0.02056,0.32113,-0.05096,0.12417,-0.03049,-0.03805,-0.01025,-0.00594,-0.04362,0.05642,-0.02075,-0.09277,-0.17988,-0.07002,0.04742,0.06024,0.22785,0.12205,0.04479,0.04758,-0.22475,-0.00029,-0.02798,-0.07530,-0.00875,-0.01423,-0.07870,0.07696,-0.21354,0.01597,-0.05787,0.20164,0.15154,0.22213,0.38818,-0.11856,0.12139,-0.17145,-0.24388,-0.20122,-0.08239,-0.12243,-0.00713,-0.01480,-0.10785,0.08786,-0.15132,0.00285,0.03612,0.07905,0.21598,0.02710,-0.01925,-0.18571,-0.26224,-0.27807,-0.55178,-0.31144,-0.16340,-0.12483,0.00331,-0.01841,-0.02826,-0.05250,0.13110,-0.06882,-0.14886,-0.12395,-0.13640,0.24507,-0.22191,-0.41059,-0.45828,-0.70260,-0.79132,-0.45671,-0.27190,-0.14712,0.00418,0.02261,-0.08666,0.01556,0.06098,-0.11324,-0.39365,-0.31394,-0.01627,0.53520,0.07417,-0.34531,-0.48836,-0.63848,-0.80119,-0.52424,-0.24848,-0.14552,0.00371,0.03055,0.01774,-0.02931,-0.01073,-0.09439,-0.61669,-0.54992,0.47780,0.56439,0.36107,0.13528,0.20030,0.04284,-0.51143,-0.37629,-0.26429,-0.15475,-0.01124,-0.03914,0.00869,0.10769,0.04522,-0.07151,0.00801,0.32742,0.43626,0.33525,0.01475,0.31345,0.31949,0.39741,-0.03688,-0.01338,-0.24390,-0.12578,-0.01248,-0.03782,-0.04236,-0.09041,0.03996,-0.23279,-0.30351,-0.03832,0.04954,0.05181,-0.43163,-0.34385,0.29784,0.18587,-0.00137,0.13712,-0.07271,-0.12739,-0.01774,-0.04959,-0.17378,-0.23166,-0.20375,-0.55287,-0.66041,-0.32314,-0.20147,-0.15494,-0.27175,-0.20604,0.33735,0.23792,0.17084,0.23915,0.00807,-0.11410,0.01440,-0.10442,-0.29539,-0.36565,-0.42940,-0.54637,-0.33941,-0.34103,-0.10222,-0.01306,-0.10394,-0.14598,0.54471,0.37409,0.08683,0.28884,0.02919,-0.11507,0.07130,-0.05733,-0.34645,-0.24150,-0.31029,-0.21537,-0.24932,-0.43016,-0.43532,-0.23827,-0.13573,0.06253,0.41840,0.24524,-0.13290,0.22243,0.02543,-0.02053,0.06416,0.02688,0.02764,0.06864,0.05762,-0.08656,0.19438,-0.21129,-0.36830,-0.02462,-0.07652,-0.15939,-0.10934,0.24529,0.00523,0.31237,0.11453,0.00139,-0.01512,0.07332,0.22306,0.26486,0.01804,0.07550,0.21838,0.22786,0.08572,0.20422,0.05973,0.01470,0.23349,0.43094,0.07668,0.15006,0.16878,-0.04063,0.00088,0.11412,0.19510,0.38366,0.07202,0.22817,0.20442,0.28676,0.06143,0.31482,-0.03986,-0.20018,0.21207,0.49935,0.17214,0.13268,0.12732,-0.02580,0.00394,0.01742,0.26208,0.17412,0.34758,0.04555,0.39236,0.07277,0.25864,0.36646,0.02546,-0.19431,0.25251,0.36954,0.15387,0.15466,-0.00188,-0.05697,0.00143,0.00082,-0.01030,0.19033,0.45505,0.27997,0.28438,0.07872,0.03884,0.37725,-0.05589,0.09569,0.19708,0.37136,0.01531,-0.00606,-0.00500,0.00050,0.11460,};
float weights_input_8[] = {0.00687,0.02297,0.02409,-0.01286,0.22024,0.50973,0.50150,0.34931,0.07528,-0.17550,-0.27031,-0.50625,-0.17575,0.30101,0.17222,0.08537,0.04345,0.02388,0.00444,0.00377,0.05258,0.00701,0.16620,0.40346,0.48624,0.29235,0.06353,-0.06327,-0.03792,-0.10910,-0.31854,0.21972,0.17513,-0.14194,-0.05576,0.03790,-0.01700,-0.01846,-0.06734,-0.01344,0.24390,0.23961,0.12345,0.36430,-0.04220,-0.11688,-0.06039,-0.14912,-0.22106,0.12505,0.07642,0.00460,0.01250,-0.03053,-0.04184,-0.00762,-0.09747,0.00082,0.18763,0.11658,0.16093,0.35260,-0.08259,0.05587,-0.19420,-0.14651,-0.20365,-0.04955,0.13351,-0.01215,-0.04051,-0.05240,-0.01595,-0.00540,-0.12106,-0.11871,-0.23523,-0.20875,0.02806,0.14156,-0.24259,-0.23806,-0.16894,-0.22318,-0.13159,-0.00436,-0.05642,0.00924,-0.12574,-0.06774,-0.03228,0.00070,-0.19230,-0.24919,-0.20174,-0.13050,-0.15812,0.17141,-0.17693,-0.04580,-0.11396,0.01142,0.08039,0.28072,0.03783,0.07293,-0.11465,-0.06895,-0.03620,0.01879,-0.21914,-0.25095,-0.25340,-0.29817,-0.12265,0.25446,0.30104,0.01253,0.10587,0.28116,0.42885,0.04686,0.00109,-0.05910,-0.14075,-0.07259,-0.03445,0.01862,-0.14983,-0.40517,-0.56512,-0.19835,-0.03446,0.26173,0.36658,0.26717,0.59021,0.28415,0.02161,0.00656,-0.33527,-0.12454,-0.13067,-0.06836,-0.03703,-0.00575,-0.09609,-0.39371,-0.65240,-0.61264,0.08819,0.37098,0.55595,0.67000,0.27654,-0.12819,-0.19556,-0.44011,-0.53905,-0.39701,-0.13784,-0.07511,-0.03635,-0.00593,-0.09728,-0.36709,-0.37033,-0.16914,-0.14222,0.10949,0.43337,0.46220,0.09371,0.18606,-0.30090,-0.22728,-0.35450,-0.30302,-0.13806,-0.07418,-0.04239,-0.01454,-0.08902,-0.05018,0.00990,-0.16163,-0.33434,-0.35499,-0.12667,-0.10085,0.08463,0.26986,0.20882,0.11750,0.26416,0.14945,-0.07866,-0.06242,-0.04099,0.00709,-0.04877,0.02674,-0.08293,-0.37096,-0.50428,-0.20804,-0.36444,-0.23755,0.01689,0.26557,0.16830,0.27807,0.33475,0.31420,-0.06388,-0.07669,-0.03487,0.00850,-0.03180,0.16001,0.31407,-0.13045,-0.27452,-0.08932,-0.24901,-0.05256,0.02768,0.19527,0.11619,0.19389,0.16592,0.28083,-0.05285,-0.05002,-0.02918,0.01757,0.03969,0.35754,0.43406,-0.09663,-0.02747,-0.05894,-0.06097,-0.11816,-0.02193,0.12137,0.03812,0.15903,0.43453,0.29701,-0.01077,-0.03686,-0.02645,0.01568,0.07080,0.41916,0.32890,-0.10224,-0.33257,0.06488,0.06224,-0.16091,-0.10069,0.03197,0.13501,0.03435,0.34289,0.09592,-0.00972,-0.06076,-0.02710,0.01830,0.12392,0.27819,0.04591,-0.15545,-0.17786,0.11916,-0.24402,-0.24522,-0.21245,-0.04944,-0.30159,0.03255,0.11095,-0.13517,-0.05802,-0.03108,-0.00087,0.01454,-0.01319,0.10768,0.17416,0.08283,-0.12704,0.08843,-0.07359,-0.24711,-0.07846,-0.16901,-0.03003,0.03213,-0.09890,-0.06121,-0.00195,-0.02049,0.00165,-0.04300,-0.16000,-0.31461,-0.16691,-0.18845,0.11070,-0.04024,-0.11305,-0.00771,-0.18547,-0.45458,-0.14092,-0.45182,-0.33174,-0.05494,-0.00605,-0.00245,0.32555,};
float weights_input_9[] = {-0.00111,-0.00139,-0.00315,-0.12891,-0.24111,-0.32152,-0.25707,-0.17158,-0.34314,-0.17273,-0.01289,0.05922,0.11074,-0.10363,-0.21872,-0.10916,-0.05398,0.00630,-0.00183,-0.03784,-0.06566,0.03634,-0.14730,-0.25533,-0.20703,-0.19499,-0.14758,-0.06599,-0.02691,-0.08629,-0.08378,0.00563,-0.12234,-0.15082,-0.06562,-0.03221,-0.03743,-0.07620,-0.01680,0.04497,-0.11277,-0.32382,-0.00332,-0.25355,-0.11958,0.07797,-0.01895,-0.05315,-0.13335,-0.05767,-0.17949,-0.10700,-0.01807,-0.07842,-0.03769,-0.03996,-0.00421,0.05557,-0.05577,-0.17367,-0.04267,0.02031,0.08692,0.23205,0.35174,0.11301,-0.01773,-0.02372,-0.08929,-0.07078,-0.00178,-0.02535,-0.03631,-0.04079,0.00435,0.05164,0.01538,-0.00169,-0.10893,-0.14446,-0.03898,0.31664,0.33347,0.14760,0.20763,0.02927,-0.01913,-0.06059,-0.01981,-0.02611,-0.03759,-0.03984,0.03343,0.05046,-0.02786,-0.09463,-0.12480,-0.15778,-0.03601,0.48536,0.28297,0.04952,0.18951,0.08490,0.01667,-0.04639,-0.01728,-0.03483,-0.03691,-0.04130,0.03309,0.18597,0.07185,-0.08550,-0.16193,-0.08629,-0.05486,0.27951,0.22185,0.13420,0.19565,0.00864,-0.07105,-0.01118,-0.01845,-0.03384,-0.03704,-0.04197,0.01973,0.18766,0.10270,0.06531,-0.07289,-0.06339,-0.23841,0.03467,-0.00088,0.20078,0.02905,-0.12044,-0.12401,-0.09126,-0.01968,-0.04889,-0.03721,-0.04279,0.08556,0.10173,0.18854,0.12676,-0.04036,-0.16238,-0.17644,-0.14624,-0.08744,0.14596,0.09809,0.03032,-0.14968,-0.15207,-0.10564,-0.05234,-0.03637,-0.04283,0.09203,0.20432,0.29202,0.31587,0.07293,-0.03789,-0.13262,-0.07753,0.07933,0.04172,0.00388,0.04471,0.01169,-0.10159,-0.10551,-0.04978,-0.08116,-0.08814,0.04010,0.13714,0.14449,0.11076,0.03160,-0.00754,-0.28591,-0.08199,0.12105,-0.03087,-0.04602,0.06848,-0.04678,-0.05087,-0.12446,-0.13694,-0.07784,-0.08704,0.07212,0.13301,0.12939,0.02291,-0.16184,-0.01278,-0.24316,-0.04319,0.28239,0.04984,-0.13109,-0.08689,-0.12661,-0.07326,-0.12113,-0.13749,-0.08175,-0.05927,0.10260,0.19453,0.02776,-0.09542,-0.12550,-0.11252,0.02458,0.29477,0.46972,0.12077,-0.08127,-0.04050,-0.01951,0.01961,-0.08054,-0.10311,-0.06282,-0.05748,0.06522,0.13195,-0.04269,-0.10166,-0.23186,-0.14243,-0.04303,0.47821,0.29853,0.09921,-0.06418,-0.03789,-0.01009,-0.01703,-0.08153,-0.01141,-0.00388,-0.05934,-0.01510,-0.00519,-0.21006,-0.30939,-0.53418,-0.38534,-0.13157,0.33529,0.23245,0.12863,-0.25996,-0.15513,-0.12064,-0.01242,-0.09647,-0.03841,-0.03609,-0.06198,-0.09012,-0.01894,-0.10297,-0.39625,-0.40296,-0.51882,-0.30680,0.18370,0.13355,0.01740,0.02378,-0.07791,-0.05992,-0.05661,-0.05536,-0.02756,0.00151,-0.10530,-0.06341,-0.06313,-0.13544,-0.19355,-0.20423,-0.38268,-0.34309,-0.05515,-0.00519,-0.11803,0.34346,0.27467,0.10745,-0.06872,0.01234,-0.07846,0.00211,-0.00856,-0.07484,-0.03763,-0.06662,-0.04892,0.03622,0.02780,-0.46956,-0.15941,0.15711,0.42135,0.32993,0.31078,0.25828,-0.00460,0.01089,-0.00003,-0.05703,};
float weights_input_10[] = {-0.00063,0.07455,0.09573,0.09440,0.23648,-0.02144,0.07441,0.04056,0.19392,0.40360,0.29516,0.05748,-0.05355,-0.35993,-0.45092,-0.47326,-0.05973,-0.00269,-0.00159,0.12445,0.11253,-0.01299,0.31454,0.21466,0.29392,0.14182,0.41741,0.48800,0.30464,0.09838,0.12504,0.00119,-0.10852,-0.42124,-0.07785,-0.02513,0.05168,0.10756,0.12799,0.11120,0.26745,0.41142,0.49020,0.25377,-0.11424,0.02517,0.20505,0.06442,0.03832,0.11818,-0.01137,-0.07687,-0.13525,-0.06836,0.05254,-0.02128,0.06732,0.13585,0.18512,0.22759,0.16434,0.17356,-0.23248,0.06247,0.30926,0.51133,0.35927,0.05480,0.18003,0.13624,-0.07704,0.02781,0.05224,-0.02374,0.05931,0.03613,0.00538,0.11313,0.03753,-0.09295,0.00989,0.23668,0.39198,0.65667,0.28136,0.28248,0.41215,0.16200,-0.01913,0.04377,0.05276,-0.03593,0.05639,-0.07952,-0.14237,-0.14643,-0.07312,-0.19537,-0.19909,0.38028,0.52374,0.46318,0.33728,0.50411,0.46106,0.19624,0.03859,0.04771,0.04266,0.04658,0.02977,-0.00778,-0.15127,-0.20235,-0.38480,-0.54548,-0.41556,-0.07999,-0.14074,0.16407,0.24688,0.47156,0.40116,0.25329,0.02928,0.05980,0.04038,0.04541,0.12155,-0.02994,-0.27248,-0.63733,-0.20998,-0.57037,-0.33814,-0.01433,-0.34985,-0.15145,-0.20729,0.19190,0.34879,0.28007,0.02735,0.04155,0.04040,0.02276,0.06252,-0.03109,-0.21672,-0.30520,-0.09629,0.12527,-0.15435,-0.22209,-0.29555,-0.14913,0.26760,0.15666,0.10143,0.08441,0.00986,0.03760,0.05862,0.04035,0.02201,-0.16231,-0.17606,-0.27752,-0.48559,-0.11164,-0.25380,0.09487,-0.02823,0.25346,-0.12800,-0.11546,-0.05960,-0.04270,-0.01551,0.03712,-0.06514,-0.09544,-0.14449,-0.32250,-0.48725,-0.41951,-0.32304,-0.07418,0.13529,0.34584,0.19043,0.19900,-0.25027,-0.06615,-0.12201,-0.07562,-0.05784,0.02843,-0.05943,-0.11431,-0.13629,-0.46865,-0.50761,-0.68379,-0.16598,0.17552,0.44909,0.33820,0.10412,0.05893,-0.31663,-0.04674,-0.26509,-0.05520,-0.04816,0.02928,-0.13380,-0.18132,-0.13585,-0.11650,-0.52598,-0.66531,-0.30837,-0.15247,0.23383,0.02921,-0.22940,-0.10101,-0.38055,-0.30932,-0.37895,-0.17605,-0.06765,0.07995,-0.12140,-0.18184,-0.09805,-0.02908,-0.25096,-0.20834,-0.23055,-0.22352,0.03785,-0.12025,-0.17244,-0.24625,-0.33309,-0.28699,-0.31161,-0.15741,-0.04736,0.04072,0.06804,-0.16516,0.01898,0.18682,0.28821,0.24981,0.22174,0.03689,0.00451,-0.11400,-0.04427,-0.18233,-0.14822,-0.20019,-0.10255,0.03458,-0.07529,0.01886,0.05507,0.00118,-0.00248,0.25460,0.32748,0.20023,-0.00036,-0.07087,0.00786,0.23434,-0.10601,0.22123,-0.07934,-0.18415,-0.30576,0.02779,0.02101,0.04970,0.00167,0.09700,0.15380,0.22852,0.08815,0.24221,-0.09684,0.16307,-0.20485,-0.22140,0.16105,-0.21170,-0.03119,-0.13751,-0.01979,0.07838,0.00638,0.02791,0.00190,-0.01715,0.16300,0.04112,-0.09261,0.17224,0.22737,0.17804,-0.31938,-0.29382,-0.15281,-0.22184,0.11066,0.17725,0.14860,0.15965,0.00680,-0.00002,0.26950,};
float weights_input_11[] = {0.01061,0.02101,0.01808,0.01001,0.22176,0.52226,0.46432,0.36107,0.12237,-0.05920,-0.09972,-0.36002,0.03128,0.27618,0.17587,0.20980,0.04082,0.02304,0.01147,0.00305,0.04583,-0.02588,0.17843,0.33929,0.43138,0.31485,0.20887,0.05970,0.09248,-0.10290,-0.23508,0.26442,0.12784,-0.04135,0.00391,0.03061,-0.01890,-0.05216,-0.06194,-0.06471,0.21793,0.29998,0.22729,0.36219,0.15574,-0.00091,-0.04634,-0.16638,-0.14099,0.15458,0.15807,0.07388,0.07303,0.02491,-0.05960,-0.02821,-0.09182,-0.04562,0.16116,0.23655,0.30287,0.39527,0.03064,0.16528,-0.18897,-0.16243,-0.18496,-0.01777,0.12291,-0.05773,-0.04616,-0.06155,-0.01604,-0.02703,-0.09879,-0.17863,-0.06772,-0.08035,0.09468,0.13824,-0.18269,-0.15802,-0.19414,-0.27705,-0.22574,-0.01964,-0.15401,-0.04122,-0.14489,-0.07804,-0.03220,-0.00222,-0.15671,-0.28059,-0.12213,-0.01529,-0.05936,0.10410,-0.24003,0.02719,-0.19085,-0.06237,-0.05541,0.18757,-0.04222,-0.01460,-0.13073,-0.08031,-0.03487,0.00659,-0.16815,-0.24625,-0.09829,-0.06616,0.05525,0.30402,0.29571,0.11492,-0.01577,0.38355,0.32204,-0.01283,-0.07476,-0.14334,-0.15724,-0.08240,-0.03533,0.00610,-0.13706,-0.41630,-0.51384,-0.11437,0.00937,0.20974,0.38444,0.30251,0.74944,0.28869,-0.05088,-0.06955,-0.35607,-0.17293,-0.14691,-0.07783,-0.03705,-0.02529,-0.09644,-0.46681,-0.67396,-0.64119,0.05599,0.36469,0.58229,0.69085,0.33624,-0.12634,-0.38059,-0.54549,-0.53483,-0.40768,-0.15861,-0.08783,-0.03786,-0.02462,-0.10838,-0.48984,-0.40652,-0.22265,-0.15648,0.11256,0.70413,0.67158,0.15912,0.06927,-0.34845,-0.23825,-0.32254,-0.34247,-0.14120,-0.08435,-0.04873,-0.04154,-0.11941,-0.16284,0.03136,-0.19830,-0.32494,-0.21486,0.15000,0.03563,-0.06879,0.14497,0.19442,0.14134,0.27470,0.14111,-0.07603,-0.06791,-0.04510,-0.02710,-0.10317,-0.06757,-0.12418,-0.47160,-0.50801,-0.18890,-0.33125,-0.18849,-0.02387,0.27097,0.17267,0.33431,0.35520,0.28973,-0.06968,-0.08676,0.03078,0.04424,-0.10959,0.05162,0.18292,-0.19298,-0.37752,-0.33600,-0.39020,-0.03770,0.10719,0.23510,0.11705,0.12755,0.13258,0.24668,-0.05781,-0.05348,0.03436,0.05860,0.04030,0.23570,0.36009,-0.16107,-0.16281,-0.30045,-0.14839,0.09682,0.02711,0.01267,-0.06559,0.03278,0.36845,0.26020,-0.02686,-0.04200,-0.03807,0.05447,0.08807,0.45000,0.29023,-0.28242,-0.56647,-0.10793,0.17451,0.10223,-0.04192,-0.10872,0.00656,0.00796,0.27901,-0.03505,-0.03085,-0.08532,-0.02920,0.06256,0.11816,0.31651,0.08347,-0.19423,-0.31109,0.12364,-0.08572,-0.04175,-0.20953,-0.18508,-0.30090,0.00887,0.06782,-0.15336,-0.05571,-0.03404,0.00239,-0.02877,-0.02871,0.04149,0.14786,0.06232,-0.15933,0.14190,0.01905,-0.12538,-0.30925,-0.38111,-0.06146,0.02927,-0.07559,-0.08460,0.00443,-0.03085,0.00197,-0.05761,-0.20974,-0.32358,-0.16256,-0.17325,0.12683,-0.03058,-0.15886,-0.01844,-0.34508,-0.55746,-0.09746,-0.31128,-0.22807,-0.06499,0.00306,-0.00096,0.24163,};
float weights_input_12[] = {-0.00105,-0.00818,-0.03951,-0.01357,-0.08162,-0.27975,-0.33487,-0.33960,0.00727,-0.13179,0.14759,-0.06434,-0.14204,-0.20932,-0.10147,-0.04798,0.06114,-0.00283,0.00045,-0.04191,0.03366,-0.03389,-0.23183,-0.29313,-0.26837,-0.31861,-0.24659,-0.21053,0.04805,0.15102,-0.15068,-0.14554,-0.16437,-0.02012,0.01706,0.07787,-0.03358,0.04226,-0.03561,-0.16129,-0.36204,-0.32331,-0.47336,-0.17321,0.13778,-0.01990,-0.27526,0.06595,-0.02510,-0.10842,0.07579,0.02970,0.11084,0.11305,-0.03378,0.05973,-0.08309,-0.12029,-0.19964,-0.30626,-0.18783,-0.25467,-0.04030,-0.13088,-0.12276,-0.15397,-0.12126,0.08569,0.15897,0.17884,0.14180,0.03584,-0.05117,0.05913,-0.00128,-0.22127,-0.08588,-0.18673,-0.14297,-0.04391,0.21978,-0.10717,0.18093,-0.06204,0.07969,0.23714,0.34223,0.16611,0.09105,0.00191,-0.05074,0.07507,-0.03037,-0.07837,-0.01375,0.02835,-0.19272,0.14288,0.51179,-0.01945,0.09599,-0.02810,0.04218,0.24624,0.22562,0.10717,0.06099,0.00213,-0.04005,0.06633,0.02844,0.03275,0.13008,-0.09355,0.06301,0.06160,0.39700,-0.07235,-0.02175,0.01874,0.11750,0.07087,0.11292,-0.01268,0.06231,-0.02089,-0.03919,0.07098,0.01297,-0.02397,0.15721,0.26810,0.19871,0.12357,0.18587,-0.33968,-0.12256,-0.30386,-0.19864,-0.26861,-0.00757,-0.16248,0.01463,0.01166,-0.04127,0.13522,0.12011,0.03083,0.02045,-0.03191,-0.21314,-0.19244,0.43722,0.15311,0.16531,-0.44169,-0.51163,-0.42715,-0.10677,-0.23634,0.01941,0.01469,-0.04127,0.11639,0.16607,0.27991,0.13917,0.13605,0.14522,0.00800,0.53188,0.11328,0.09015,-0.21671,-0.52316,-0.17039,-0.02669,-0.12881,0.04621,0.00338,-0.03949,0.14479,0.24277,0.68044,0.93686,0.68665,0.56504,0.17316,-0.00077,-0.28382,-0.35375,-0.05032,-0.12263,-0.12239,-0.02557,-0.09422,0.05330,0.00263,-0.04434,0.16316,0.23742,0.89445,1.12867,1.21396,0.48378,-0.06439,-0.46882,-0.55763,-0.25673,-0.13457,-0.14043,-0.20170,0.11719,-0.18887,0.09221,0.00147,-0.04667,0.16448,0.28212,0.55369,0.81432,0.79387,0.43029,0.52196,-0.09095,-0.29177,0.08109,-0.06330,-0.13905,0.01913,0.22686,-0.07928,0.19364,-0.06718,-0.05457,0.13774,0.09301,0.18027,0.24000,0.31948,-0.06367,0.50112,0.00465,-0.39358,0.02173,0.00059,0.22386,-0.15930,0.02444,-0.04747,0.08714,0.00818,-0.05180,0.11789,0.01557,-0.01617,0.01913,0.10020,-0.00811,0.15223,-0.09817,-0.44548,-0.28395,-0.05276,0.23071,-0.03283,-0.05990,0.12562,0.12487,0.02015,-0.03594,0.03517,-0.06914,-0.30431,-0.26829,0.00948,0.34555,0.45359,0.28194,-0.34521,-0.14521,-0.14964,0.07533,-0.08508,0.14805,0.33355,0.04034,-0.03646,0.00018,0.04323,-0.15661,-0.30772,-0.58679,-0.34247,-0.19188,0.04883,0.21654,-0.15431,0.24595,0.41104,-0.00173,0.04578,0.43175,0.16114,-0.00084,0.04590,-0.00056,0.00100,-0.15092,-0.21835,-0.35790,-0.48806,-0.44697,-0.28652,0.35247,0.25708,0.35619,0.25380,0.16438,0.13834,0.11327,0.03303,-0.00075,0.00076,-0.10464,};
float weights_input_13[] = {-0.00070,0.00528,0.00266,-0.20132,-0.37680,-0.33883,-0.31289,-0.04590,-0.32698,-0.24828,-0.34021,0.03112,0.19161,0.29562,0.10807,0.17760,-0.10352,-0.00283,-0.00220,-0.02556,-0.11058,-0.17372,-0.30875,-0.53477,-0.48031,0.01548,-0.21712,-0.18093,-0.24391,-0.18845,-0.03285,-0.00134,-0.07375,0.31781,-0.10793,-0.06448,-0.03292,-0.10181,-0.05533,-0.11808,-0.32573,-0.53346,-0.20684,-0.23981,0.02987,0.16429,0.09056,0.11299,-0.05692,-0.22443,-0.10182,-0.01908,-0.08297,-0.13129,-0.03380,-0.06369,-0.04082,-0.06518,-0.43433,-0.08254,-0.02857,-0.01919,0.04735,0.22554,0.11529,-0.43507,-0.18763,-0.08007,-0.30669,-0.39826,-0.09044,-0.10557,-0.03050,-0.06354,-0.05181,0.04376,-0.00556,0.16191,0.01986,-0.05042,-0.01800,0.12988,-0.21123,-0.56675,-0.34689,-0.15070,-0.54900,-0.48676,-0.26514,-0.10437,0.00977,-0.06293,0.06289,-0.03261,0.13629,0.19187,0.16931,-0.11079,-0.05598,0.28259,-0.31465,-0.60987,-0.49787,-0.65208,-0.61133,-0.58131,-0.29948,-0.12476,0.01014,-0.06578,0.04803,0.04650,0.20812,0.35494,0.08711,0.12999,-0.17059,0.40735,0.09233,-0.31689,-0.42362,-0.69370,-0.67020,-0.39588,-0.19677,-0.12452,0.00976,-0.02308,0.01826,0.03275,0.25692,0.27985,-0.12557,0.11782,0.29903,0.42201,0.35298,0.22851,0.30411,0.01036,-0.23095,-0.20825,-0.22159,-0.25744,0.01178,-0.05588,0.04285,0.05324,0.28288,0.32632,0.07909,-0.08208,-0.15640,-0.00955,0.03427,0.69384,0.29828,0.44390,0.35765,0.14328,-0.18434,-0.15665,0.01017,-0.05634,0.03624,0.08865,0.30583,0.08974,0.07518,0.01587,-0.17557,-0.07320,-0.11877,-0.05719,0.45634,0.37629,0.26710,0.32158,-0.04978,-0.14840,0.03520,-0.03183,0.03257,-0.02874,-0.10796,-0.18206,-0.25350,0.13492,-0.05484,0.01713,0.12256,-0.11419,0.14687,0.12688,0.15396,0.29949,0.09369,-0.11676,0.03726,-0.02699,0.01734,-0.04936,-0.27004,-0.34721,-0.14425,-0.12074,0.11548,0.25139,0.16534,-0.09987,0.26479,0.04622,0.08171,0.19302,0.06611,-0.11646,0.07194,-0.04355,0.00545,-0.12617,-0.15460,-0.13605,-0.08844,-0.15633,-0.07140,0.28550,0.22843,0.10363,0.25265,0.16132,0.13897,0.28910,0.02023,-0.04850,0.06858,-0.02729,0.01762,-0.03381,-0.12950,-0.12531,0.04073,-0.04874,-0.06356,0.51691,0.09172,-0.05543,-0.18403,0.19646,0.13564,0.22564,0.09480,0.10269,-0.03591,-0.02533,-0.04344,-0.16138,-0.36907,-0.33330,-0.30127,0.02468,0.06446,0.48559,0.21799,0.11957,-0.19888,0.20518,-0.09212,-0.01137,0.24099,0.00867,-0.03280,-0.03989,-0.10738,-0.21254,-0.28884,-0.16859,-0.09852,-0.14703,-0.11063,0.06496,0.19092,-0.17509,0.08864,0.34172,-0.04194,0.00756,0.19050,-0.03269,0.00112,-0.14051,-0.09919,-0.24599,0.11920,-0.17822,0.12453,-0.18368,0.10716,0.31229,-0.12280,-0.14643,0.24955,0.23902,0.05510,0.14042,0.00547,-0.09617,0.00110,0.00383,-0.11770,0.12700,0.44255,0.19923,0.16556,0.18625,-0.12288,0.16353,0.06070,0.31333,0.21616,0.43066,0.05840,-0.08529,0.00518,0.00017,-0.03925,};
float weights_input_14[] = {-0.00218,-0.00574,-0.00887,-0.03597,0.00111,0.15288,0.15301,0.26066,0.01537,-0.15924,-0.01509,-0.07176,-0.11573,-0.02928,0.08740,-0.08786,-0.02053,0.00498,-0.00192,-0.04484,-0.00567,0.05924,0.06222,0.04493,0.27419,0.00464,-0.10970,-0.05313,0.04770,-0.15756,0.07587,0.07113,0.11004,-0.12718,-0.05474,-0.01230,-0.03889,-0.00969,0.06418,0.07148,-0.03951,0.11707,0.00763,-0.11044,-0.11817,0.10519,0.11566,0.08057,-0.00285,0.12694,0.10185,-0.08509,-0.01407,-0.05915,0.01082,0.02667,0.02566,-0.02722,0.01025,-0.25887,-0.16618,-0.21246,-0.01234,0.06205,0.13864,0.11189,0.00698,0.23995,0.13329,-0.01206,-0.00856,-0.02963,-0.04186,0.02578,-0.03386,-0.01800,-0.05279,-0.16172,0.05335,0.03349,0.06090,0.04972,0.00405,0.15826,0.11683,0.11673,0.04174,0.03643,0.01857,-0.03009,-0.04049,-0.02886,-0.03708,0.06330,-0.21165,-0.14628,0.34669,0.05471,0.06845,-0.01186,0.19839,0.16486,0.22963,0.17574,0.12172,0.04111,-0.03541,-0.03019,-0.04782,-0.03474,-0.08418,-0.09802,-0.39661,-0.21881,0.01158,0.00914,-0.15786,-0.13456,0.10630,0.09251,0.15076,0.19860,0.11792,0.01217,-0.05177,-0.03923,-0.04966,-0.03244,-0.09719,-0.13925,-0.32717,-0.20427,-0.12384,0.01474,-0.41397,-0.25546,-0.15888,0.05459,-0.01752,-0.00263,0.04149,-0.11589,-0.05823,-0.00829,-0.04541,-0.03125,-0.08522,-0.18662,-0.21954,-0.04884,0.04792,-0.19576,-0.41407,-0.35392,-0.06035,0.04747,0.07593,-0.02914,-0.01905,-0.19871,-0.12311,-0.01025,-0.04525,-0.03168,-0.06682,-0.09242,-0.05601,-0.18477,-0.05554,-0.11505,-0.36723,-0.12416,-0.06760,-0.03357,-0.10051,-0.18639,-0.24663,-0.22162,-0.12945,-0.00267,-0.04850,-0.03612,-0.01923,0.02321,-0.00937,-0.07774,-0.16624,0.06348,-0.00527,0.12246,0.10393,-0.10069,-0.30353,-0.44309,-0.43406,-0.20074,-0.15108,-0.07108,-0.05229,-0.02558,0.07026,0.09323,0.23639,0.06822,0.14783,0.18948,0.13265,0.18380,0.08731,-0.32715,-0.40494,-0.54108,-0.33482,-0.20136,-0.15189,-0.06812,-0.05765,0.00827,0.08978,0.11689,0.22564,0.12772,0.52757,0.40454,0.71014,0.50044,-0.01107,-0.54261,-0.31110,-0.33374,-0.01065,-0.05096,-0.12305,-0.05822,-0.03521,-0.02950,-0.02342,-0.05141,0.11158,0.19304,0.29558,0.36579,0.27465,0.37884,-0.11095,-0.25889,-0.34790,-0.19270,-0.01451,0.03909,0.03405,-0.06726,-0.01554,-0.02912,-0.10584,-0.17707,0.03023,0.11593,0.36135,-0.06321,-0.12914,-0.09536,-0.02074,-0.17450,-0.26100,-0.11621,0.26913,0.26215,-0.00487,-0.00244,-0.04035,-0.05972,-0.05050,-0.07523,0.27738,0.19526,0.11224,-0.14385,-0.07544,0.16558,0.02955,-0.12967,0.13520,0.03374,0.24231,0.23620,-0.05380,-0.03080,-0.00049,-0.05649,0.08995,0.04000,-0.02431,0.01679,-0.10000,-0.27700,-0.25520,-0.00216,0.01379,0.10700,0.11640,0.06381,0.22974,-0.01816,0.00153,-0.04737,0.00166,0.03199,0.13648,0.11730,0.01643,-0.11622,-0.07995,-0.15468,-0.16309,-0.16115,-0.06047,0.26245,0.26228,0.16382,0.22651,0.03591,0.00157,-0.00065,-0.01005,};
float weights_input_15[] = {0.00390,-0.01449,-0.02484,-0.01010,0.06752,0.20167,0.21574,0.26347,-0.08251,-0.08298,0.03138,0.03987,0.03491,0.17558,0.13977,0.03540,-0.00334,0.00902,0.00332,-0.07374,-0.01313,0.09134,0.16212,0.05140,0.14626,-0.01046,0.01317,0.06020,0.09354,-0.14469,0.03454,0.09388,0.25187,0.06005,-0.04391,-0.00959,-0.06434,-0.06629,0.06168,0.14242,0.05209,0.06947,-0.11986,-0.13475,0.03717,0.22055,0.11781,0.06037,-0.07793,0.12241,0.20686,0.04160,0.00920,-0.07199,-0.02847,0.00860,0.01539,0.01254,0.04216,-0.27438,-0.24882,-0.19904,0.07386,0.11729,0.16028,0.05197,-0.08331,0.29808,0.10584,-0.06011,-0.00264,-0.03978,-0.06577,0.00754,-0.01745,0.04423,0.05447,-0.06861,-0.08604,0.04636,0.05701,0.15027,0.07781,0.15338,0.17493,0.14785,-0.02863,-0.03928,-0.00856,-0.04485,-0.07051,-0.03186,-0.01486,0.10051,0.02383,-0.04701,0.22437,-0.02782,0.08825,0.17920,0.23917,0.17906,0.26924,0.14171,0.02963,-0.04325,-0.03362,-0.04213,-0.07764,-0.05178,-0.04525,-0.00639,-0.16841,-0.09354,-0.07062,-0.01656,-0.04872,0.07655,0.21826,0.17436,0.17286,0.17245,-0.00209,-0.04070,-0.05661,-0.04956,-0.07660,-0.05796,-0.10976,-0.05126,-0.14481,-0.06018,-0.21769,-0.13667,-0.35131,-0.14972,-0.00180,0.12303,-0.01489,0.02397,0.01403,-0.06616,-0.05584,-0.04202,-0.07335,-0.05017,-0.03118,-0.07337,-0.15450,-0.07213,-0.21179,-0.44489,-0.53911,-0.32561,0.05459,0.15351,-0.05668,-0.00703,-0.02018,-0.11245,-0.06504,-0.06185,-0.07177,-0.05117,-0.01898,0.04099,0.07319,-0.07666,-0.16966,-0.29282,-0.34171,-0.04656,0.05368,-0.06217,-0.14706,-0.11767,-0.14440,-0.08382,-0.07341,-0.05058,-0.05298,-0.03096,0.01725,0.07614,0.10806,0.04312,-0.12940,-0.04186,0.12491,0.31634,0.17940,-0.13148,-0.34609,-0.33756,-0.33989,-0.10205,-0.10261,-0.05899,-0.05621,-0.03628,0.01622,0.11975,0.28942,0.12856,0.05977,0.11857,0.26478,0.41984,0.21410,-0.30581,-0.50274,-0.49885,-0.36860,-0.23470,-0.10734,-0.06012,-0.06328,-0.02084,0.02822,0.03915,0.19409,0.13562,0.38311,0.35564,0.76092,0.72609,0.15752,-0.42700,-0.45774,-0.36970,-0.11995,-0.13779,-0.06959,-0.05719,-0.05180,-0.02560,-0.04286,-0.15417,0.08187,0.17241,0.24718,0.32544,0.36365,0.54741,0.01010,-0.21507,-0.36102,-0.18191,-0.10992,-0.06238,0.04564,0.00658,-0.05386,-0.02519,-0.11089,-0.26680,-0.02874,0.05134,0.22252,-0.08599,-0.01242,0.08855,0.06247,-0.12194,-0.27063,-0.14331,0.09587,0.13728,0.02114,0.06766,-0.06527,-0.10713,-0.06082,-0.13213,0.11829,0.14460,-0.00301,-0.14817,0.00857,0.21410,0.08871,-0.20132,0.10849,-0.02328,0.16309,0.18773,-0.03200,-0.05520,0.00000,-0.10591,0.02308,-0.09706,-0.11283,-0.18964,-0.11930,-0.32240,-0.26512,-0.04596,0.02699,0.10175,0.19075,0.13410,0.20912,-0.02115,0.00568,-0.07890,-0.00034,0.03196,0.04858,-0.02685,-0.12291,-0.22456,-0.18822,-0.31142,-0.24507,-0.12545,0.03968,0.31871,0.37043,0.25351,0.17820,-0.02933,0.00592,0.00067,-0.15356,};
float weights_hidden_0[] = {-1.37337,-0.34765,4.39742,-0.20380,-1.82431,-0.34258,1.83778,-1.99947,-2.04190,-0.41367,-1.28698,-2.23117,3.22661,-1.76447,-0.14950,0.14523,-1.27957,};
float weights_hidden_1[] = {1.47549,2.10196,-0.53283,3.27947,-1.01066,1.85289,-1.68014,1.81447,-0.57370,1.93802,0.69280,0.21849,-1.39548,1.53935,-0.05135,0.81989,1.58998,};
float weights_hidden_2[] = {-0.93266,-0.49919,-0.57860,-0.45815,-0.43415,-2.78069,-1.99335,-0.46239,-1.41547,-0.85060,2.40050,-2.11256,-0.57622,-0.63124,3.68975,3.12330,-1.27586,};
float weights_hidden_3[] = {-0.92203,-0.43463,-1.51151,-0.56835,-1.04284,-1.58880,-3.17181,2.30065,3.04686,-0.55305,2.77371,2.27834,-0.85563,-1.37600,-1.38563,-2.76495,-0.52471,};
float weights_hidden_4[] = {1.89810,2.42256,-0.86185,-0.36802,2.72802,-0.91686,-0.99885,-2.06720,-0.63421,2.78723,-2.25163,-1.16763,1.20020,0.90731,0.85206,1.00428,0.75879,};
float weights_hidden_5[] = {-0.66193,-0.32501,2.34958,-0.23456,-1.71447,-0.33959,0.77200,2.53618,1.71198,-0.36835,-2.38312,1.84093,-2.13278,3.13808,-0.81346,-0.53822,0.81849,};
float weights_hidden_6[] = {3.13890,-1.07023,1.47329,-0.38234,2.83034,-0.39142,0.69285,2.22735,-1.92397,-1.34719,-1.54467,-1.83980,1.86575,1.87839,-1.53587,-1.69137,1.41546,};
float weights_hidden_7[] = {-1.14137,-1.36506,-0.53014,-0.49762,-0.82380,5.28236,-1.61407,-1.32037,1.05377,-0.79282,0.60842,1.98885,-1.29276,-1.55265,1.28358,1.75796,0.85272,};
float weights_hidden_8[] = {-0.89662,-0.36549,-2.15856,-0.17389,2.08340,-0.27881,1.34844,-1.62440,1.96218,-0.46148,-1.51486,1.97712,3.19699,-1.85143,-0.59005,-0.38477,0.08258,};
float weights_hidden_9[] = {-0.53917,-0.17328,-2.09055,-0.39281,-0.85915,-0.38524,4.80582,-1.45244,-1.19522,0.05357,2.52259,-1.01906,-3.21806,-0.26104,-1.26842,-1.44784,-2.40337,};

class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_15[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


