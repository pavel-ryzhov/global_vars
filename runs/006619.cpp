#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.433892,-0.371668,-0.779721,0.251966,0.679355,-0.744579,-0.128285,-0.360499,-0.125907,-0.287389,-0.259319,0.336889,0.3444,0.571414,-0.462939,0.33662,-0.439592,0.155846,-0.61509,0.01622,0.071699,-0.0986292,0.310472,0.157687,0.664883,0.166213,0.734104,0.160167,-0.174714,-0.347042,-0.459199,-0.502726,-1.03286,0.854965,0.131219,-0.890071,0.440592,-1.30696,0.519707,-0.447585,-0.389905,0.135757,0.248727,1.07996,-0.165224,0.773035,-0.990263,-0.222946,-0.258614,-0.55489,0.176581,0.0136061,0.318237,-0.42908,0.24799,-0.023065,0.699739,0.376241,-0.457154,-0.340269,0.181024,-0.839646,0.106223,0.358483,-0.126512,0.015731,0.379635,-0.344744,0.419306,0.007373,0.149328,-0.0806809,0.0155265,0.709392,-0.216604,0.539228,-0.144592,0.153873,0.0710678,-0.722851,0.225649,-0.208085,0.490671,-0.47213,-0.033282,0.448194,0.108982,0.239085,0.00471618,-0.194449,-0.561693,0.270977,-0.337991,0.411663,0.891601,-0.541086,0.152722,0.0274446,0.0347618,0.360949,-0.632439,0.437701,0.334947,-0.250328,0.0664343,0.0934196,-0.353131,0.277782,-0.489243,0.304563,0.516355,-0.0787943,-0.153664,0.124084,0.365896,-0.38901,0.473726,-0.0582719,-0.0338256,0.116665,-0.31088,0.687724,-0.963261,0.457438,1.58328,-1.08394,-1.29173,0.244657,-0.810411,-0.672994,-1.26994,1.95246,0.757461,0.368742,-0.260789,0.356428,-0.30412,-0.070402,-0.0443196,-0.256423,0.861611,-0.549167,0.0930951,-0.193944,1.52411,-0.940716,0.970172,0.0798286,0.0373458,-0.334588,0.117116,-0.0480375,-0.278266,0.583484,0.186445,-0.0824748,0.66247,-0.631865,0.635609,0.384001,0.0670949,-0.403694,0.410202,0.577251,-0.075363,0.555285,-0.388989,0.180476,-0.156271,-0.351849,-0.283604,-0.161731,0.42199,-0.340099,-0.248281,0.170492,0.367912,0.362085,0.135048,-0.0929717,0.154626,0.208344,-0.364575,-0.4308,-0.12162,0.209737,-0.29133,-0.365512,-0.133504,0.0518421,-0.186653,-0.343313,0.36474,0.119024,0.0832986,0.221699,-0.545889,0.0147286,0.284013,-0.172909,-0.375437,-0.349388,0.170959,-0.493706,-0.0177325,-0.0294009,-0.0881033,-0.298769,-0.100051,-0.152686,0.355378,-0.347979,-0.302339,-0.0801613,0.258387,0.00514654,-0.610591,0.159712,-0.517766,-0.712901,0.649507,0.536802,0.561703,0.357126,-0.449223,0.635113,0.179301,-0.253232,-0.0934738,-0.0448003,0.124042,-0.442288,0.804607,0.228179,0.67925,0.434878,0.951771,0.353346,-0.277307,-0.291303,-0.239913,-1.13394,0.269027,0.375622,-0.710866,0.262291,0.835944,0.298516,0.832477,0.0957337,0.656002,-0.459541,-0.476354,0.396064,-0.123354,-0.0041377,0.143912,-0.110725,-0.37701,0.0505086,-0.13617,0.281253,0.110424,-0.264537,-0.0765011,0.743876,-0.0433762,0.261983,-0.208699,0.0417702,-0.013766,0.289037,0.0229495,0.0722168,0.694977,-0.341433,-0.204901,0.129107,0.270249,0.417499,-0.707049,0.620556,0.412173,-0.162752,-0.130128,0.245398,-0.191134,0.517841,-0.0552079,-0.601815,-0.00887043,-0.428515,0.252213,-0.31255,0.53767,-0.170384,-0.036268,-0.332372,0.270124,-0.472193,0.592991,-0.0933262,0.298934,0.36079,-0.209381,0.212554,0.238939,-0.440363,0.106801,-0.514831,0.0543973,-0.384138,-0.0944348,0.231348,-0.335692,0.332831,0.000288645,-0.0790991,0.198438,-0.776564,0.000877115,-0.187274,0.220797,-0.242697,-0.147028,0.246246,-0.301637,0.046028,0.387767,-0.38066,0.659274,0.708479,-0.118976,0.0119202,-0.0211059,0.240528,-0.76348,-0.0735401,-0.957106,-0.995761,-0.624859,0.564518,0.287803,0.18,-0.114943,0.144398,-0.0348049,-0.45456,0.674055,-0.391903,0.478761,-0.471023,0.15509,-0.298251,0.249278,-0.63807,-0.343845,-0.22394,0.0856262,-0.333333,-0.229944,0.354466,-1.02065,-0.45706,0.382059,0.375335,-1.04064,0.512187,-0.587115,-0.292876,0.432753,0.44761,0.697511,-0.624972,-0.0514789,0.378235,0.061118,-0.892385,-0.100628,0.759565,-0.478268,-0.291246,0.635237,0.34143,0.763296,0.391384,0.653466,-0.144744,-0.728324,-0.351903,-0.580362,-1.29999,0.260576,-0.205632,-0.897344,0.036583,0.603015,0.552797,0.724402,0.621094,1.03261,-0.452839,-1.03011,0.168572,-0.219969,-0.511133,0.362968,0.447507,-0.716851,-0.068602,-0.419226,0.538206,0.0366073,0.19674,0.0923979,0.872712,-0.125696,0.178753,-0.52388,0.0980436,0.482593,-0.970571,0.660647,-0.112518,-0.483634,0.574596,0.780067,0.156659,0.781903,0.23101,0.471738,-0.896569,-0.26107,-0.158486,-0.367565,0.131025,0.417666,0.26998,-0.128015,-0.762539,-0.354897,-0.206244,0.444144,-0.0379451,0.126025,0.675986,-0.696368,-0.0765359,0.131063,-0.503601,0.571593,-0.0554956,0.851497,-0.260337,0.268537,0.322296,-0.753582,0.125784,-0.759984,-0.842481,-0.216712,0.537134,-0.0720818,0.621856,-0.289128,-0.339538,0.422501,0.500498,0.152295,-0.708635,0.444861,-0.170154,-0.326754,0.482057,-0.463291,-0.309562,-0.211007,-0.228384,0.782889,-0.0378776,1.11972,0.756394,0.163487,0.186135,0.54296,0.112224,-0.0126314,-1.16389,-0.80002,-0.532653,-0.893273,-0.205641,0.500872,-0.648926,-0.0591595,0.020928,-0.451716,0.356122,0.509701,-0.886803,0.600347,-0.50023,-0.64007,-0.136521,-0.727698,-1.22848,-0.27842,0.229383,0.979502,-0.0822115,0.0469272,0.654013,-0.720547,-0.244617,0.384768,0.178135,-0.300324,-0.223963,-0.230313,-0.036545,0.0197731,-0.0387234,0.560135,-0.322194,0.208121,0.265219,-0.242541,-0.161339,-0.0123013,0.441904,-0.107547,-0.0866088,0.0650721,0.318602,-0.309639,-0.279215,0.0584626,-0.0381218,-0.207442,0.0637418,-0.417047,-0.488453,-0.0158538,0.457433,-0.504326,-0.163338,1.11275,-0.292481,0.755472,1.01606,0.339392,-0.499944,-0.975493,-0.26812,0.0526912,-0.198332,-0.131941,0.596498,-0.600772,-0.131083,-0.108838,0.533969,-0.189596,0.0184565,0.168385,0.0732151,-0.155642,0.467704,-0.303715,0.339319,1.16524,-1.73749,0.83662,0.459817,-1.35855,0.928485,0.882695,-0.506629,0.623174,-0.700175,1.35425,-1.30638,-0.47396,0.257855,-0.844749,0.45026,0.391576,0.0783859,-0.136024,-1.21932,-0.528161,-0.108891,0.783119,0.0129904,0.049442,1.09452,-0.41498,0.504929,0.191304,-0.790655,0.030314,0.0727032,0.902893,-1.02755,0.119712,-0.0577927,-2.24872,1.61316,-1.4816,-1.0244,-0.107683,2.04207,-0.302373,1.06,-0.0200869,-1.08834,1.01456,-0.267755,0.125882,0.0416348,0.721348,-0.143235,-0.480406,0.170092,-0.324064,-0.214551,0.420482,-0.474718,0.502541,0.513254,0.764172,0.908804,0.475461,0.107131,1.16575,0.249719,-0.667504,-0.626666,-1.14624,-0.61849,-0.742242,0.15882,0.643042,-0.575243,-0.0408657,0.015431,-0.295894,0.528886,0.172809,-0.251592,0.856018,-0.309301,-0.508472,0.576389,-1.01842,-1.12486,0.0627434,-0.217789,1.14254,-0.0507295,-0.124937,1.02134,-0.208762,-0.746803,1.16813,0.501663,0.128856,-0.035668,0.00184328,1.35007,-0.54544,-1.02668,0.984674,-1.34271,0.329884,-0.036728,-0.512771,0.921031,0.203566,0.6036,-0.486991,-0.472655,0.0769516,0.0585314,-0.252154,-0.267323,-0.145039,-0.198598,0.586027,0.0376232,-0.383747,0.0508003,-0.0134206,0.51228,-0.089485,-0.0693186,0.248199,-0.154861,0.114562,-0.0313386,-0.243645,0.0868964,-0.350364,-0.22409,0.227103,0.315727,0.0317922,0.0503008,0.0353502,0.258002,0.690453,0.273141,0.130339,0.0887336,-0.197853,-0.348175,-0.104329,-0.0431039,0.0138725,-0.0732592,0.788466,-1.53853,0.675906,0.0127786,-0.791104,0.62097,-0.554218,0.0364957,-0.355778,-1.60137,1.38206,0.0852454,-0.349646,0.841103,-1.02909,0.0676401,0.682342,-0.167422,-0.407498,-0.937559,-0.166504,-0.0517627,0.640655,0.585575,0.058716,0.880787,0.377928,0.447859,0.266307,-0.56494,-0.335991,0.247296,1.43578,-1.2564,0.18612,-0.20187,-0.933387,2.11044,-0.9395,0.877696,-0.651023,1.16944,-1.57023,-0.22629,0.659218,-2.09035,1.01395,0.972909,0.362876,0.0470894,0.530132,0.149827,-1.91481,-0.232828,-0.512093,-0.802171,-0.774619,-0.0591362,0.725956,1.57191,0.232141,0.308972,1.21194,-0.349842,0.753484,0.267392,0.101032,-0.483062,0.00183289,0.390806,-0.601237,-0.84391,0.0348122,-0.933541,-0.677655,-0.56618,-0.294424,1.35831,-0.705953,-0.342055,0.465831,0.390349,-0.753383,1.21893,-0.823303,-0.686721,-0.309544,-0.549745,1.15453,-0.0828318,0.114552,-0.190017,0.530842,-0.21701,0.798991,0.0403862,-0.0221927,-0.805471,-0.219587,0.352853,0.0941757,-0.726217,0.416725,-0.216999,-0.695903,0.110092,-0.405218,0.990254,-0.647254,-0.366888,-0.479264,0.0439657,0.184027,0.776952,-0.322065,0.299188,0.0191278,-0.222298,0.641758,-0.508968,-0.322142,0.52443,-0.2098,0.392847,0.321133,0.371684,0.146677,-0.730573,0.0579586,0.154823,0.0750094,-0.488267,0.677529,-0.191888,0.271484,0.384986,-0.285985,-0.0314277,-0.190425,0.755244,-0.0267492,0.398485,0.0281818,0.488056,-0.502718,-0.0880698,0.0490772,-0.00143816,-0.195757,-0.0561134,-0.156717,-0.296864,-0.424988,-0.320233,0.0723518,0.360635,-1.06809,-0.304583,-0.966753,-0.579983,0.621795,-0.00457657,0.603293,0.565793,-0.443406,0.196218,-0.0769695,-0.145074,0.179604,0.373878,-0.797283,-0.290534,0.200582,0.487119,-0.657293,0.177258,0.965173,0.242481,0.0484844,-0.161009,0.0950045,0.569086,1.5283,-0.767832,0.31338,-0.0810231,0.452473,1.25601,0.0473303,1.66672,-0.641569,0.285117,-1.36529,-1.18445,0.857201,-1.84017,0.343461,1.42149,0.683098,-0.337016,0.496817,0.115711,-1.88821,-0.366208,-0.639653,-0.843034,-1.27848,0.398526,0.970043,1.62552,0.0487566,-0.398108,0.220087,-0.0382333,-0.226415,-0.376346,0.380588,0.244052,-0.164431,-0.0367189,0.0241698,-0.0897724,-0.715628,-0.22773,-0.278539,-0.365788,0.0721432,0.0965578,-0.328022,-0.180897,0.484837,0.433179,-0.634689,0.0301635,0.220723,-0.365943,-0.414216,0.149075,0.0207553,0.016771,-0.0730169,-0.921292,0.792002,0.257473,0.451182,-0.287513,0.70332,0.508972,0.0341327,-0.148981,0.237892,0.159125,-1.01337,-0.218088,-0.803712,-0.292685,0.275702,0.560979,-1.07398,-0.279218,0.732628,0.815483,0.0597086,1.15855,0.690612,0.476083,-0.0903132,0.295122,-0.00574682,-0.425178,-0.260313,0.411614,-0.419033,-0.12247,0.407122,0.095571,0.0359089,-0.0353325,-0.313756,-0.350323,0.0165495,-0.11336,0.256335,-0.943584,0.210837,0.0359712,-0.389346,-0.237095,-0.325034,0.489672,-0.252111,0.400606,-0.403649,0.293798,0.0227051,-0.41626,0.0819901,0.306046,-0.129857,0.19756,-0.491197,0.670953,-0.583342,0.27578,0.2203,0.39985,0.217199,-0.891983,-0.0805781,0.772886,0.518122,-0.366238,1.16681,0.68478,0.46468,0.356495,-0.492271,0.194339,0.646895,0.70479,-1.28563,-0.360595,0.0340839,-0.259615,-1.58251,-0.0468919,1.06109,0.22051,0.114938,0.619119,0.154908,0.647068,-0.0779415,0.304197,0.0812986,-0.0260228,0.523217,-0.275093,-0.0107194,0.390486,-0.402766,-0.185448,-0.141632,-0.16746,0.324891,-0.265107,-0.105029,-0.0337848,0.809625,-0.266643,-0.139595,-0.316853,-0.654532,-0.670775,-0.566004,-0.676595,-0.194739,0.332278,0.101278,0.497473,0.320799,-0.257206,-0.0755264,-0.162177,-1.05077,-0.0363027,-0.298543,0.691562,-0.295425,-0.644174,0.0335964,0.766864,-0.627636,0.705755,-0.0327439,-0.0220199,0.365834,-0.736921,0.519,-0.509869,0.591742,-0.280474,0.0277412,-0.999551,0.412651,0.0110684,-0.492768,-0.0209043,-0.455594,-0.0775422,-0.428043,-0.701304,0.242015,0.308428,-0.0731905,-0.595014,0.173525,0.417777,0.200497,-0.310548,0.297397,0.51106,-0.916519,0.182963,-0.501341,-0.0958092,0.158049,-0.144719,-0.794537,-0.027415,0.589147,0.680495,0.0666379,0.266997,0.907543,0.103164,-0.046607,0.253179,-0.607379,-0.163526,-0.289562,-0.164225,-0.511236,-0.237074,0.312364,0.15237,-0.159443,-0.0670768,-0.443233,-0.113635,0.34005,-0.282233,0.107159,-0.456937,-0.144293,-0.129309,-0.091356,-0.159562,-0.329621,0.60986,-0.336363,0.144211,-0.303094,0.346052,-0.145046,0.0775884,0.439882,0.19558,-0.0770171,0.210734,-0.243982,0.881201,-0.386838,0.13692,0.081516,0.382529,0.0177711,-0.75604,-0.0891214,0.743777,-0.118409,-0.408517,0.869111,0.164162,0.839133,0.359932,-0.302147,0.099601,0.876349,0.433155,-0.770205,-0.609951,-0.171806,-0.685271,-1.10605,-0.323994,0.286602,0.0654582,0.171681,0.375714,0.358428,0.239791,-0.153785,1.02789,-0.531974,0.286446,0.762399,-0.793665,0.559582,-0.154089,-0.276445,-0.144883,0.362864,0.635781,0.573165,0.850617,-0.177848,-0.323436,0.551648,-0.132685,0.575853,-0.133656,0.255663,-0.628679,-0.392785,-0.15795,0.0396453,0.23718,0.0349238,0.0754407,0.739715,-0.0796869,0.0484088,-0.0566972,-0.982636,0.294403,-0.141191,0.841052,0.314496,-0.223161,-0.292419,0.678432,-0.250791,0.634375,0.420775,-0.0782439,0.462524,-0.422385,1.09366,-0.519338,0.500042,-0.689794,0.0968963,-1.48829,0.512099,0.0618153,-0.885318,-0.465856,-0.374431,-0.0109182,-0.198587,0.041209,-0.0752813,0.237803,-0.0464851,0.00574946,-0.0353006,0.156087,0.467327,0.349121,-0.0726086,0.353619,-0.097953,0.446727,0.132878,0.180354,0.0597044,-0.106935,0.000362401,-0.039345,0.311529,0.14649,0.190254,-0.345935,0.10289,0.251691,0.106427,-0.0288094,-0.342035,0.00405309,-0.279406,0.171093,-0.17131,-0.0926309,-0.288674,0.253053,-0.0631145,0.302956,-0.220787,0.102751,0.278063,0.120409,0.101697,-0.00014321,0.150314,-0.103758,0.16947,-0.16214,0.144304,0.724984,-0.214156,0.227274,-0.259854,0.0298807,-0.259327,0.0240061,0.0191847,0.10635,-0.139859,0.601056,0.32194,0.882273,0.131113,0.327643,-0.119836,0.357412,-0.209613,0.257378,0.222182,-0.139636,-0.393515,0.443139,0.0452952,-0.331651,0.606425,0.260362,0.412815,-0.555716,0.617686,-0.0536258,0.443401,-0.337077,0.0146037,-0.711241,0.0534092,-0.281746,-0.557339,-0.294055,-0.147529,0.00849874,0.130267,-0.427465,-0.0680159,0.070185,-0.618992,0.448993,0.0823929,0.624511,0.612595,-0.4468,0.560889,0.166184,-0.222921,-0.306374,0.27518,0.619209,0.381064,-1.16788,-0.20046,0.545112,0.368542,0.483065,0.969318,-0.0452013,0.700073,0.677186,-0.095119,-0.315383,-0.983342,-0.373813,0.353474,-0.210937,-0.618689,0.285629,-0.665412,0.667672,0.386485,-0.519391,0.64708,-0.0889995,0.436748,-0.634601,0.925685,0.660918,0.377055,0.783217,-0.259156,-0.764739,0.279407,-0.0662337,-0.253546,-0.36658,0.938845,-0.460999,-0.275512,0.635774,0.294424,-0.168212,-0.48639,-0.280165,0.135116,0.274224,-0.0625777,0.0406155,-0.553585,0.292574,0.136308,0.0134986,0.178275,0.439827,-0.0312831,0.165471,-0.0577034,0.366066,0.654511,0.0474873,0.244851,-0.505971,0.550372,0.225464,0.279841,-0.327823,-0.0243499,-0.753415,-0.114927,0.0420205,-0.393276,-0.0301063,-0.257581,0.434808,-0.399642,0.339812,0.481791,-0.599761,0.220957,0.558904,-0.593601,1.47809,-0.516877,-0.784419,0.388774,0.537649,-0.584052,-1.60547,0.343923,-0.485388,0.753825,-1.13882,-0.182565,1.45879,0.28346,0.776052,0.099096,0.601321,0.539542,0.420231,-0.627448,-0.4411,-0.922453,-0.0179781,0.297584,-0.291018,0.367233,-0.625792,0.337353,0.622579,-0.822785,1.71594,-0.279098,-1.15928,0.341319,0.427057,-0.324677,-1.46939,-0.22908,-0.132528,0.915694,-0.826869,-0.547532,0.644837,0.473705,0.571278,0.640501,0.928466,1.3921,0.58042,-0.331628,-0.224929,-0.404413,-0.511302,0.536558,0.113711,0.135428,0.144892,-0.668057,0.222748,0.200837,-0.0415055,0.273268,-0.37754,-0.0201244,-0.159485,-0.313133,-0.0152948,0.164501,-0.0272148,0.202358,-0.162976,0.399399,-0.487262,0.225186,0.0813388,-0.0378421,-0.136026,-0.0788425,-0.0331573,-0.603092,0.0203901,0.232724,0.119308,0.626342,-0.771279,0.712828,-1.66059,-2.33884,0.00769389,-0.37583,-1.09742,1.13369,1.3799,-3.01019,-0.849355,-2.28995,-0.602407,-0.17678,1.90989,2.02411,-1.21038,1.00211,-1.61578,1.08672,-2.27183,0.379556,-1.92172,0.744816,-2.73047,0.485937,-1.15136,0.0478829,0.968333,-1.57194,-1.28986,0.399215,-0.0542303,-0.760249,1.11782,-2.49431,1.17204,0.346349,-0.176992,-2.54969,1.43769,-3.19509,-2.12904,0.680523,-0.301869,0.719886,0.454127,0.67945,-0.386516,0.10465,-0.11977,0.493914,-0.108327,-1.01079,-0.715216,-0.463794,-3.40286,0.379584,0.772054,-0.906264,-1.75549,1.34148,1.2833,0.0133161,-2.10258,-2.8669,0.591526,2.25281,-0.796192,1.16412,0.192711,0.97818,-1.63503,0.0933293,-1.97536,1.67342,-0.993064,-2.99358,-3.15683,-1.32666,-1.4462,1.46164,1.57621,-0.733376,-2.54283,-1.59579,0.632606,0.196076,-1.287,-1.26082,-1.75902,-1.29266,2.38889,0.652398,-2.9199,0.468026,0.423016,1.21889,-1.96855,1.11574,0.50736,0.413222,1.43349,-0.299134,-0.868385,-3.06387,-1.19721,-1.60935,0.657753,0.378277,-0.41009,-0.819929,-2.64972,-0.236302,1.50511,1.53565,0.909841,-3.11723,-1.70427,-2.57553,1.26971,-2.54638,0.658077,-2.21223,1.29159,-0.0931129,-0.523736,0.240261,1.23865,1.15102,-3.40497,-0.977646,0.520485,-0.945464,0.569022,-1.22606,1.51549,-3.10144,1.07555,-0.254672,-1.45777,-0.63858,0.688404,-0.445375,0.596838,1.02978,-1.29277,0.166052,-2.30944,-2.15403,0.475387,0.0214156,0.321199,-2.27037,1.95443,-1.90949,-0.200333,0.307747,0.430537,1.10412,-0.727013,1.07199,-1.19686,-0.451325,-1.19048,-0.0055122,-1.35321,-1.87728,-0.501318,-0.351942,-1.52051,-1.72107,-0.794119,1.32537,-2.74647,-0.204502,0.952216,1.51614,0.757915,1.0192,-1.71382,-0.975774,0.47888,-2.40056,1.4456,1.13483,-1.27054,0.446594,-0.617882,-1.66742,2.15276,-0.782557,1.01251,1.26709,-0.0990987,-0.606401,-1.62491,-1.62237,-2.47286,-0.362187,-1.64699,1.51817,-3.26912,-0.069115,0.27667,0.25498,0.217627,-0.431246,-1.11773,-0.602757,0.145208,0.302779,-0.845542,2.34471,-0.912474,-1.44702,-0.639661,-0.510726,-0.978903,-1.55126,1.92309,0.814877,0.635043,-2.11611,-0.0541396,-2.03365,-0.288448,-1.50468,0.691562,-1.21535,1.98507,-1.0879,-1.57368,2.21613,-1.40494,-1.38074,-0.741431,-0.800271,1.152,-1.11692,2.10752,0.926576,-2.39981,-0.987386,-0.742274,-0.905609,2.10766,-1.23938,-2.24147,0.0785659,0.923443,0.933228,0.968817,-0.80649,-1.88774,-2.06822,-0.593345,-2.01792,0.417029,-1.01937,0.903492,-2.26765,-0.0335366,-0.19654,0.998466,-1.48339,0.722075,-2.13246,0.801664,0.746156,-0.87906,-0.808861,-0.465307,-0.0913466,-0.109956,-1.85995,0.00896769,0.239276,-0.561293,0.0792613,-1.93028,-1.52466,-1.85471,-0.413072,-1.2598,0.689023,-0.517526,0.978401,1.41568,1.36718,-1.99414,-1.47533,0.069015,0.772577,-0.262166,0.966846,-0.790298,-0.0916999,-1.73415,0.537342,0.452377,0.861096,1.0742,0.230049,0.587844,1.17375,0.367141,0.604485,0.764014};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    for (size_t i = 0; i < numbers.size(); ++i) {
      size_t height = numbers[i].size();
      size_t width = numbers[i][0].size();
      if (width > 1.2 * height) { // Bad cut
        vector<string> temp = numbers[i];
        Prune(0, width / 2 + 1, 0, height, &numbers[i]);
        vector<size_t> points;
        FindBestCuttingPoints(numbers[i], true, &points);
        Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
        Prune(width / 2 + 1, width, 0, height, &temp);
        points.clear();
        FindBestCuttingPoints(temp, true, &points);
        Prune(0, temp[0].size(), points[0], points.back(), &temp);
        numbers.insert(numbers.begin() + i + 1, temp);
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
