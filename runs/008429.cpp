#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{3,16,2,30,0,33,2,65,1,2},
{7,25,18,44,0,40,5,99,4,7},
{25,27,27,62,5,68,20,85,27,13},
{40,36,50,72,11,88,33,89,39,52},
{57,55,67,89,23,87,52,91,67,79},
{75,63,79,88,39,79,59,91,77,79},
{71,65,80,97,61,77,54,91,75,65},
{66,67,70,97,53,92,53,81,80,76},
{71,87,81,94,58,94,72,95,86,78},
{78,85,86,103,69,89,81,93,92,95},
{87,77,85,104,68,95,93,93,88,103},
{74,92,67,99,74,95,86,95,83,71},
{39,87,33,69,68,94,63,95,65,45},
{20,72,28,55,58,90,49,96,30,24},
{3,70,10,48,26,85,40,96,19,20},
{3,70,0,25,20,58,29,94,14,2},
{26,36,38,40,0,33,20,59,20,39},
{32,50,61,61,0,41,34,67,41,52},
{61,53,80,75,11,77,48,72,75,78},
{72,55,75,68,20,81,59,69,76,72},
{71,69,71,72,38,76,56,68,82,66},
{69,74,72,71,64,74,56,68,72,65},
{63,80,61,70,54,83,52,68,65,64},
{60,84,63,75,61,83,61,68,65,66},
{58,94,71,74,71,81,63,82,61,70},
{58,102,81,79,72,84,62,85,65,71},
{69,93,88,85,72,90,71,99,82,76},
{73,96,89,102,83,92,85,100,81,94},
{88,96,94,104,79,91,82,95,85,91},
{67,75,92,107,64,92,64,98,88,94},
{40,69,41,56,31,76,51,96,59,75},
{27,62,16,24,17,24,21,79,15,64},
{33,34,54,54,0,35,26,40,32,69},
{74,46,67,65,8,63,54,43,67,79},
{75,49,63,61,25,76,82,44,83,58},
{78,63,62,53,35,81,78,38,86,68},
{73,69,64,59,63,74,63,33,80,74},
{74,74,64,50,56,69,58,35,69,68},
{62,71,53,48,65,70,53,42,59,36},
{38,78,64,49,66,59,55,50,32,27},
{36,98,72,65,66,56,51,67,32,47},
{53,90,74,68,70,44,56,83,36,69},
{60,83,70,78,79,50,72,88,55,71},
{63,92,78,76,83,41,51,95,60,84},
{67,96,86,90,79,41,52,102,69,84},
{82,73,90,72,61,37,53,98,90,102},
{67,64,87,62,22,35,52,89,66,103},
{40,51,39,30,17,16,30,15,40,55},
{56,50,64,46,0,37,38,36,37,78},
{75,56,60,55,25,71,82,34,74,64},
{82,59,66,59,42,77,83,34,88,80},
{78,64,59,50,63,80,66,34,83,76},
{78,58,60,50,55,72,62,32,81,56},
{70,56,60,51,65,72,57,32,63,45},
{53,45,52,59,62,64,62,35,40,32},
{31,53,45,63,63,50,41,67,21,24},
{25,73,58,67,69,52,45,70,17,23},
{40,82,60,73,77,42,58,71,31,65},
{48,84,73,75,87,46,50,80,60,67},
{60,89,82,73,87,44,50,92,70,80},
{67,88,85,67,83,42,52,96,75,81},
{68,73,88,61,67,39,37,77,77,98},
{88,53,88,57,23,21,36,49,69,89},
{66,47,71,30,18,6,27,15,41,69},
{74,30,40,8,17,44,76,5,39,84},
{82,52,52,16,32,66,83,26,63,81},
{88,53,47,46,47,61,83,26,81,82},
{80,38,42,46,61,68,70,4,77,62},
{71,38,38,56,71,74,66,7,84,53},
{64,39,38,69,59,85,72,7,76,46},
{45,52,32,56,52,58,65,37,56,44},
{25,59,33,65,58,68,59,46,37,36},
{24,72,45,74,67,72,49,57,49,40},
{39,86,65,74,88,78,44,63,60,65},
{46,82,70,79,93,65,52,90,60,70},
{59,90,80,65,93,55,48,80,68,84},
{65,88,84,67,87,44,48,73,75,82},
{67,56,89,64,52,30,16,68,68,94},
{84,50,85,41,23,28,21,13,46,94},
{87,44,59,20,16,10,19,10,31,84},
{82,29,28,5,29,49,82,0,16,94},
{89,35,33,29,45,64,87,0,43,79},
{87,36,31,30,65,57,84,0,70,79},
{78,33,19,48,77,64,71,0,84,80},
{70,32,15,64,60,66,79,21,81,62},
{57,40,15,72,48,80,82,25,80,58},
{45,52,35,68,43,64,70,49,78,45},
{15,61,47,71,58,61,59,57,69,37},
{14,71,69,65,47,69,64,65,59,59},
{39,87,76,75,88,87,67,78,69,66},
{45,82,75,84,99,99,76,76,73,72},
{60,90,85,82,93,101,56,75,69,71},
{64,71,83,76,75,78,57,72,74,80},
{72,56,84,50,52,69,55,41,60,94},
{84,46,58,24,22,36,40,10,21,85},
{83,44,41,6,18,28,8,2,0,76},
{83,24,15,15,45,35,84,0,34,34},
{89,30,13,15,74,49,88,0,59,72},
{80,31,13,16,89,36,89,0,64,61},
{70,32,20,20,82,37,92,23,68,61},
{65,35,20,34,76,35,83,25,86,60},
{57,50,22,55,52,49,71,49,85,54},
{35,52,51,73,33,36,53,63,67,42},
{15,65,74,74,61,41,41,65,72,52},
{14,75,74,67,62,56,36,74,65,74},
{38,84,79,73,92,77,49,68,67,73},
{45,79,85,87,101,96,62,75,76,60},
{60,79,86,92,103,89,76,75,78,87},
{71,71,71,90,89,97,91,55,74,74},
{72,56,54,75,71,90,73,11,59,80},
{84,44,36,43,53,79,61,0,45,76},
{81,44,16,11,40,46,30,0,18,74},
{89,24,0,8,43,23,88,0,55,37},
{89,30,8,8,78,31,89,0,69,45},
{80,31,26,12,76,24,90,16,71,56},
{65,34,28,17,63,22,83,27,71,41},
{64,45,34,26,56,21,71,33,77,39},
{57,50,41,24,40,17,53,63,68,39},
{46,51,85,39,38,17,34,51,52,58},
{25,71,83,40,67,41,23,51,34,54},
{24,77,84,46,57,49,19,68,39,48},
{38,84,74,54,91,61,32,75,41,50},
{46,69,66,65,100,70,56,75,61,68},
{66,67,52,85,92,86,59,67,57,76},
{70,71,44,85,88,88,84,29,69,64},
{72,56,38,92,71,90,71,8,75,76},
{78,44,14,89,52,87,70,0,73,76},
{80,43,0,72,39,72,63,0,58,72},
{88,24,14,23,54,34,89,0,70,17},
{89,31,16,31,59,23,104,16,81,25},
{81,33,21,32,57,24,101,26,82,24},
{66,45,34,24,51,22,76,33,75,43},
{63,45,41,31,51,21,59,63,54,47},
{57,50,75,28,51,22,50,64,43,45},
{46,56,74,41,55,32,48,47,39,41},
{25,72,58,51,85,40,37,68,25,22},
{24,77,61,59,74,32,34,75,34,40},
{38,74,57,58,104,52,44,76,41,68},
{54,63,55,53,102,73,68,72,44,63},
{66,67,40,67,82,83,70,56,50,70},
{70,71,36,72,79,81,85,2,66,64},
{66,50,26,93,63,86,79,0,70,76},
{80,44,26,95,46,79,82,0,75,73},
{72,40,12,93,42,79,77,0,75,66},
{70,24,16,61,42,68,84,16,76,34},
{89,32,26,62,32,63,104,21,92,39},
{76,44,39,63,30,53,91,33,86,39},
{67,45,41,52,36,51,78,54,66,37},
{64,45,74,59,33,61,69,60,49,36},
{58,50,74,57,31,56,52,48,44,50},
{47,61,65,52,38,38,45,70,27,45},
{27,72,62,43,67,36,35,74,18,37},
{33,71,64,51,79,54,32,73,31,34},
{48,74,56,51,104,65,40,76,39,58},
{60,57,56,54,102,71,57,66,54,53},
{67,67,57,71,78,79,58,41,63,64},
{65,67,51,76,74,74,83,0,60,65},
{70,46,51,93,67,77,69,0,73,74},
{73,43,45,92,51,79,78,0,75,71},
{43,40,37,87,49,76,68,0,69,60},
{45,25,33,67,13,72,51,23,88,42},
{88,43,48,66,13,78,107,33,94,49},
{82,44,55,68,13,73,94,50,73,49},
{72,45,81,59,13,64,67,62,63,40},
{67,45,82,61,13,62,61,46,45,61},
{59,56,84,49,20,53,52,70,37,59},
{58,62,66,47,21,53,49,78,48,52},
{37,60,67,46,50,48,39,77,38,31},
{44,71,72,55,68,59,36,76,31,32},
{56,68,69,57,90,69,47,75,49,50},
{62,57,66,57,81,64,66,46,63,51},
{61,67,59,76,75,71,80,1,68,68},
{60,65,65,83,68,71,84,0,62,64},
{74,46,49,89,54,79,64,0,67,71},
{52,41,54,85,40,75,63,0,69,45},
{32,40,51,42,34,40,38,0,48,40},
{29,51,55,66,0,68,37,29,50,18},
{45,60,70,87,0,90,60,48,76,55},
{70,61,92,86,0,94,82,55,94,76},
{79,62,84,82,0,88,76,55,85,62},
{79,68,79,66,1,76,77,69,69,66},
{80,68,79,70,8,65,71,74,62,64},
{73,55,74,65,9,60,65,78,56,51},
{64,63,78,66,53,58,61,76,57,61},
{63,63,86,68,69,61,61,75,54,65},
{49,68,85,64,91,58,61,68,56,68},
{56,72,86,71,73,65,63,43,63,55},
{71,80,79,87,74,79,75,0,61,67},
{74,83,79,86,69,73,84,0,68,55},
{49,61,81,53,52,48,55,0,67,44},
{26,58,79,34,29,33,29,0,45,41},
{17,57,58,13,23,19,18,0,21,35},
{0,65,60,28,0,18,0,29,7,7},
{7,66,73,59,0,38,16,50,25,15},
{8,74,69,56,0,49,28,57,33,12},
{34,74,69,77,2,48,48,50,64,41},
{57,74,72,87,3,79,70,41,65,89},
{87,63,72,89,20,81,87,72,82,86},
{77,68,65,83,29,74,61,76,77,61},
{70,69,66,88,55,80,62,76,78,70},
{75,71,78,83,70,79,80,65,64,71},
{69,70,74,59,83,65,70,49,69,67},
{73,74,74,44,74,52,82,15,63,35},
{32,73,71,21,78,30,55,0,40,42},
{7,86,81,6,76,1,30,0,25,8},
{3,81,74,0,62,0,24,0,7,6},
{3,79,62,0,44,0,24,0,1,5},
{0,73,57,0,40,0,19,0,0,1}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
