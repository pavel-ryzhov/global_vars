#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.246266,0.555453,0.507204,0.0587025,-0.267981,0.232104,-0.391294,0.679727,-0.634691,-0.807752,0.731055,-0.318505,-0.379554,0.45103,-0.162242,0.126928,0.689015,0.378986,0.273226,-0.409489,0.352308,-0.466797,-0.135248,0.188847,0.244,-0.267974,-0.274195,-0.562898,-0.181952,0.423113,-0.789098,0.777102,0.536872,0.279524,0.271875,0.197079,-0.58623,0.957822,-0.476726,-0.170772,1.07908,-0.789725,-1.09948,0.363012,0.0618371,-0.403589,0.854669,0.230527,0.322462,-0.684652,0.156171,-1.07332,-0.354038,-0.170451,0.0888319,-1.12899,-0.559367,-0.197983,0.166771,-0.214307,0.305046,0.545678,-0.0236447,0.334412,0.637087,0.307241,-0.754793,1.03758,0.305981,0.3837,0.136664,-0.0829413,0.13242,-0.214989,0.440553,-0.672394,-0.0731773,-0.194133,0.159013,-0.478984,-0.297748,0.0731348,-0.293266,-0.0753705,-0.372782,0.194835,-0.271485,-0.698137,0.261538,-0.0300842,0.705476,0.23766,0.735819,0.419019,-0.150983,-0.879232,-0.02452,-1.24116,-0.468516,-0.830663,0.601163,-0.123909,0.072346,0.535199,0.158915,0.0801012,0.643254,-0.126682,0.370091,-0.233267,0.190989,0.681275,0.0851106,-0.0192449,0.0790255,0.126134,0.875268,0.0930148,-0.49625,0.601977,-0.415192,0.27802,0.843717,-0.648148,-0.879262,-0.239359,0.828941,-0.742716,-1.77904,-0.938793,0.650815,-1.00845,-0.468675,0.719368,-0.435192,0.894645,1.28474,0.604502,0.423257,0.264078,0.879878,-0.125145,0.351827,0.321585,1.08992,-0.247896,0.142937,0.500348,-0.973073,0.849252,0.204429,1.11308,0.1833,0.335968,-0.126033,0.0178219,-0.206993,0.864387,-0.398141,0.142198,0.452206,0.243469,-0.421423,0.280658,1.05563,-0.768101,0.391237,0.398765,-0.119695,-0.339651,-0.224464,-0.587644,-0.588983,-0.680988,0.176062,-0.342969,0.137396,-0.551173,0.0671964,0.127439,-0.163987,0.561502,-0.191665,-0.341881,0.39334,0.0662629,-0.312978,0.875248,-0.409047,0.235778,0.556259,-0.383181,-0.228557,-0.117112,0.182817,-0.412766,0.46111,-0.368498,0.110687,-0.409289,-0.0690449,-0.716201,-0.607355,-0.396841,-0.521528,-0.464732,0.333826,-0.32205,-0.18627,0.0746832,0.0544913,0.21626,-0.190615,-0.165808,0.0515336,-0.306584,-0.0192858,-0.0487234,0.243319,-0.640227,0.326921,-0.246863,0.288287,0.400026,-0.529847,0.735572,-0.113899,0.356831,-0.239618,-0.439587,0.597758,0.384626,0.193524,0.315283,-0.464909,0.856019,0.0379994,-0.572209,0.213479,0.395369,-0.0204922,-0.168815,0.0971634,1.06944,0.0327698,0.295238,-0.551078,0.429274,0.392968,0.519708,0.152199,0.42721,-0.039812,0.303543,-0.109587,-0.0222776,-0.385898,-0.102106,0.290333,-0.188756,0.199721,-0.139639,-0.166724,0.169158,-0.284586,0.159015,-0.91318,-0.30289,0.998183,-0.325482,0.539407,-0.19715,0.418598,0.0359755,-0.751197,-0.454067,-0.0202637,-0.586585,-0.959724,-0.341636,-0.326597,0.101278,-0.212163,0.0708891,0.326319,-0.131037,0.220586,-0.0971975,0.540458,0.407203,0.132942,0.126642,0.0763771,0.135262,0.469367,-0.0953541,0.619624,0.608641,-0.781707,0.376427,0.270994,0.739529,-0.160569,0.304903,0.1497,-0.0671207,-0.865522,0.944539,0.235045,0.0898508,0.19848,-0.385306,0.328495,-0.276185,0.16906,-0.486337,-0.233231,0.104776,-0.34182,-0.425127,-0.29663,0.23185,-0.561863,-0.296116,-0.629368,0.432976,0.176357,-0.926779,0.346136,0.0733256,-0.330132,-0.204198,-0.473003,-1.09355,-0.0252476,-0.00451183,0.361394,0.243499,0.0881202,0.212094,0.132989,-0.907337,0.085894,-0.231788,-0.859259,0.382296,0.170191,-0.00318246,-0.62125,-0.242002,0.466261,-0.242307,-0.372412,-0.0710547,-0.598218,-0.404686,0.310529,-0.127195,0.0806886,-0.279761,0.0992051,-0.590212,0.281237,0.362525,0.115155,-1.40426,-0.879968,-0.897302,1.10879,-0.76005,0.926711,-0.335092,0.26831,0.504055,-0.768455,0.507028,0.466869,-0.967161,-0.184275,-0.915355,1.2305,0.149986,0.371031,0.738794,-1.2149,0.0493695,0.424102,-0.36415,0.261545,-0.149059,0.588309,0.00472893,0.488935,1.5153,-0.287762,0.392783,-1.48819,0.551616,0.60679,-0.604844,-0.359986,1.22156,-0.268633,0.0375109,0.642782,-0.964434,-0.0706945,-1.11654,0.603088,-0.253206,-0.712643,0.180209,0.485144,0.697129,0.233658,0.0762738,-1.08812,-0.78523,0.672587,-0.143048,0.380133,-0.235871,-0.106299,0.654639,0.0283606,0.164143,-1.00541,1.38608,0.412546,0.263678,-0.468974,-0.204559,0.427473,-0.344391,0.466848,-0.87666,-0.822934,-0.769027,0.518741,-0.338385,-0.378676,0.216714,-0.190606,0.298662,-0.399804,0.128699,-0.666122,-0.810172,0.429846,-0.497135,-0.0600611,0.625218,-0.354963,-0.241377,-0.208057,-0.141662,-0.464709,0.572904,-0.125448,0.162973,-0.0156832,-0.352012,0.442332,0.366139,-0.676956,0.826554,-0.728909,0.77123,-0.386778,0.238249,-0.392268,0.0448892,-0.551158,-0.579393,-0.248867,0.94726,-0.0924811,-0.35919,0.0874278,0.19502,-0.38625,-0.203062,-1.55177,-1.67528,0.805004,0.838426,1.55561,-0.0318458,-0.361512,0.765421,-0.190303,-0.751528,-0.0841322,-0.973346,-0.0326632,0.667,0.317444,0.682854,-1.65898,0.747122,-0.390517,0.249865,0.0298274,-1.01233,0.014267,0.497648,0.282576,-0.0452936,-0.767747,-0.0922285,0.20272,-0.908843,-0.506592,-0.193831,0.542032,0.00437036,0.42376,-0.906931,0.554861,0.307506,0.144766,0.290858,-0.290388,-0.730357,-0.00888281,0.0527077,0.397076,-0.794872,-0.613972,0.0502312,-0.218039,0.149201,0.663966,0.396554,-0.159455,0.161402,0.055418,0.153267,-0.432795,-0.209304,0.375524,0.179636,0.192688,0.440134,0.133584,0.77144,-0.322054,0.633239,-0.125186,-0.178352,-0.247174,0.342667,-0.206458,-0.472021,0.894566,-0.711655,0.296049,-0.635698,0.288846,-0.100165,-0.651349,0.104231,0.228421,0.28892,0.27088,-0.391889,-0.116061,-0.149931,-0.060557,0.0582101,-0.198861,-0.039383,-0.242752,0.592569,0.627358,0.775614,-1.24197,2.50342,1.30717,0.597837,-0.0811851,-0.491817,0.129196,-0.286874,0.182615,-0.564433,-0.8928,-0.715801,0.0932383,-0.730381,-0.435445,0.0642126,-0.0555513,0.224921,-0.654717,0.369385,-1.57449,-1.73362,1.68318,-0.952364,-0.419107,-1.00646,-0.307678,-1.09926,-1.85131,-0.850242,1.10973,-0.508404,-0.346843,0.221628,-0.724076,-0.161864,0.489532,1.79364,-3.13281,2.82647,-1.76816,1.17853,-0.338516,1.06948,0.87903,0.0438643,-0.179973,-0.18764,0.298642,1.03658,-0.670503,0.806694,0.29917,-0.00234667,-0.964634,0.385319,-1.43722,-1.35578,0.920834,1.53184,1.6188,-0.330735,-0.473642,0.556489,-0.346683,-0.549589,0.0432915,-0.253478,-0.390362,1.22146,-0.0334135,1.57579,-1.42198,0.649917,-0.652988,0.24087,-0.154145,-0.877233,0.56791,1.14971,0.00960185,0.0927564,-0.617046,0.229968,1.41569,0.450686,0.146249,-0.0999955,0.5636,-0.932003,-0.154462,-1.42849,0.306069,-0.823338,-0.00224971,0.637305,0.177502,-0.13049,0.841077,-0.431462,0.718851,-0.2674,-0.725037,0.138574,-0.421633,1.01825,0.225706,-0.509264,-0.561251,1.1613,1.73888,0.143779,-0.831612,0.93717,-0.909769,0.140113,-0.122425,-0.290362,-0.364261,1.05835,0.44345,-0.377494,-0.512371,0.664002,0.566117,-0.456106,0.164991,0.364685,-0.764999,0.539964,-0.0737449,0.883335,-0.111826,-0.336477,0.206703,-0.475951,-0.396898,-0.0132911,0.0871917,-0.415684,0.185957,0.944999,0.0540685,0.130895,-0.45081,-0.0111978,-0.298776,0.358472,-0.013632,0.275541,-0.648609,1.96752,1.11651,0.207236,0.432927,-0.829789,-0.0864985,0.604203,-0.974497,1.06378,-1.06552,0.343854,-0.15109,-0.29292,0.332583,-0.302398,-0.171437,0.291158,-0.244825,0.574009,-1.84818,-1.29516,1.86083,-0.593753,0.900005,-2.1497,-0.444213,-1.45208,-1.9888,-0.201616,2.6697,-0.442561,-0.350579,0.576831,-2.47088,1.43783,0.554796,0.331468,-1.03379,0.897903,-1.12578,-0.274269,-0.186148,1.90205,-0.328929,1.01315,0.181828,-0.198098,1.19425,0.934166,-0.341392,0.893822,-1.2208,0.158034,0.288947,0.431048,-1.39411,0.139817,0.413748,1.94323,-0.361582,-0.477193,-0.342329,-0.239465,-1.22956,-0.148913,0.497874,-0.617098,0.993757,-0.0788348,-1.01923,0.463911,-0.495697,0.942983,-2.04937,1.39464,0.731259,0.466598,0.999953,1.42372,0.0434113,-0.0623972,-1.36711,0.936853,0.533215,0.917982,-0.624896,0.126056,0.778646,0.371974,-0.848486,-0.0724947,0.277193,-0.506736,-0.349985,-0.387672,-0.0993973,-0.611393,0.892268,-0.0574923,-0.13752,0.405355,-1.18506,0.074961,-1.05712,0.61134,0.232322,0.073305,0.0315069,0.990699,0.0929627,-0.286463,-0.950602,0.741255,-0.843218,0.312189,0.236348,0.627712,0.72064,0.411923,0.0160595,-1.15487,-0.245653,0.357041,0.398914,-0.314166,-1.08313,-0.210924,0.0647441,0.245137,0.33774,0.229747,-0.264837,0.00172426,-0.510129,-0.358552,0.285299,0.0652229,0.411067,-0.545252,-0.0567495,1.57166,0.0879981,0.115856,0.0409429,0.367831,0.365813,-0.0683002,0.395633,-1.51247,0.292169,-0.929069,0.770365,-0.0876719,0.289194,0.291713,-0.731297,0.393654,-0.277536,1.03956,-0.233673,0.778631,-1.09404,0.163903,-0.0939418,-0.0708857,-0.131079,-0.906023,-0.20066,0.556498,-0.178258,-0.359827,0.643903,0.0754442,1.80291,-1.21764,-0.530948,-1.066,-1.25596,0.692772,2.2755,0.0765857,-0.550654,1.2785,-2.41789,1.68245,0.844488,-0.790889,1.38423,-1.159,-0.541892,-1.01466,-0.347727,1.54623,-1.0359,1.20181,-0.393164,-0.580701,0.873538,0.501715,0.526745,0.0493279,-1.85126,0.145786,0.258079,-0.668014,-0.119136,0.230528,-0.462829,0.572785,0.433882,0.184642,0.237909,-0.0997733,-0.675253,0.313747,0.324819,-0.409043,0.818308,-0.71398,-0.14624,-0.986474,0.277944,0.307457,-0.188798,0.461878,0.419206,0.672337,0.616177,-0.0172519,-0.575336,-0.556662,-0.189794,-0.259242,-0.468863,-0.527071,-0.636804,0.377118,0.311334,1.50795,-0.137883,0.598396,0.27716,-0.211596,-0.248822,-0.566408,-0.015127,-0.137095,-0.588,0.773178,-0.401601,0.153765,-0.287875,-0.0302565,-0.374779,0.373695,1.03119,1.21076,0.92717,0.682383,-1.49893,-0.0771781,-0.21588,0.179766,-0.374714,-0.0180195,0.191487,-0.0498838,0.496377,-0.514673,0.356273,-0.951999,0.0975203,-0.63646,0.473934,-0.0497699,-0.609274,-0.266317,-0.0519965,0.251106,0.792211,-0.0610999,-0.471074,0.208479,0.204429,0.21003,0.146068,-0.248932,-0.251336,0.239083,0.285571,0.0996268,0.0113628,0.137429,0.261406,1.38453,1.23108,0.271136,0.966806,-1.55794,0.978611,-1.18022,0.741304,0.305892,0.396487,1.02833,-1.35695,0.130286,1.0091,0.0899059,0.864335,0.831876,-1.03402,0.206168,-0.032808,-0.562079,-0.506761,-1.74548,-0.301255,-0.217551,0.0293552,-0.357292,0.540819,0.214559,0.100813,0.477651,0.182144,-0.622065,-0.0931489,-0.280394,0.54161,0.427606,-0.274876,0.52963,-0.216443,-0.190335,0.292514,-0.223421,0.425603,-0.700784,0.54429,-0.0959073,-0.172964,-0.12676,-0.0300287,-0.112942,-0.5481,-0.693497,-0.362628,-0.470271,0.555549,-0.662949,-0.166416,-0.171362,-0.308831,-0.657471,-0.0370628,-0.213203,-1.27792,0.377188,-0.430353,1.42574,0.185692,0.942871,-0.51986,-0.0494989,0.586915,0.121671,-0.714365,-0.492726,-0.811641,-0.493717,0.676941,-0.404933,0.762193,-0.731935,-0.606618,0.416394,-0.307969,-1.26897,-0.25908,0.0167788,0.665755,-1.07141,-0.61027,-0.215557,0.212454,-0.0119859,-0.549831,0.515116,-0.0106724,0.745624,-0.0626623,-0.765092,0.0119105,-0.428208,0.00946996,0.353066,-0.907367,0.710037,-0.196318,-0.0586079,0.477919,-0.0515708,0.879008,-0.398212,0.539121,1.18966,0.856496,0.00787752,-1.20285,-0.165726,-0.115658,-0.0371291,0.147298,-0.0313653,0.165106,0.0269018,0.005507,-0.234471,0.218018,-0.134028,0.455134,-0.19411,0.135432,0.476436,-0.538646,-0.132974,0.209923,-0.187819,0.121583,-0.111663,-0.291402,0.238465,0.0163582,0.0175638,0.0378617,-0.350367,-0.311294,0.225839,-0.260846,-0.23145,0.743019,-0.056102,-0.0327337,0.484147,0.608285,-0.288316,0.426412,-0.587924,0.765269,-0.247649,0.212649,1.21951,-0.0735159,0.561264,-0.540101,0.0633783,0.750954,-0.675709,0.426352,0.394411,-0.309748,0.039625,0.173853,-0.55289,-0.833055,-1.19402,-0.405711,-0.714985,0.40226,0.377951,0.356465,-0.251091,-0.353146,0.48487,0.131769,-0.338567,0.641292,-0.287911,-0.164055,0.397386,-0.160904,0.515731,0.648084,-0.588633,-0.0999273,-0.200484,0.421567,-0.561855,0.55409,0.0914117,0.102662,-0.645119,0.530346,-0.863469,-0.582968,-0.44569,-0.77613,-0.780306,0.52861,0.136487,0.422193,-0.27435,0.470157,-0.333467,-0.214783,-0.508612,-0.977454,-0.478516,-0.138561,0.220102,-0.209203,1.17246,0.212175,-0.0864237,0.839221,0.661061,-0.556673,0.117392,-0.234469,-0.0476602,0.302095,-0.359607,1.12143,-0.361342,-0.954236,-0.643464,-0.811094,-0.464662,1.12781,0.550681,-0.207936,-0.503858,-0.132611,-0.586518,0.225835,-0.0527366,-0.817865,-0.400982,0.033836,0.0884768,-0.079002,-0.335896,0.105429,0.284255,0.261992,0.596339,-0.518192,0.127262,0.142394,-0.283797,0.90754,-0.100164,1.0718,-0.520962,-0.10525,0.401372,0.0831103,-0.6201,0.0168607,0.560034,0.118408,0.0129888,0.0193422,-0.755771,0.0885083,0.244613,-0.570331,-0.744489,-0.0138601,-0.791693,0.375387,-0.0273899,-0.196845,0.682375,-0.22773,0.531557,-1.22304,0.724214,-0.613842,-0.198808,0.166845,0.467619,0.156063,0.177549,0.0728945,4.95321e-005,-0.318622,0.298318,-0.22967,0.414459,0.674107,-0.280369,-0.352004,-0.578283,-0.167547,-0.32757,0.177856,-0.181188,0.258899,-0.728902,-0.0703887,0.71737,-0.21497,-0.581039,0.191834,-0.574054,0.0100064,-0.205494,-0.0165841,-0.239334,0.0776037,-0.303976,0.0162812,0.0172974,0.0323637,0.00724866,-0.382057,-0.198044,0.667926,0.648036,-0.142424,-0.461673,-0.242366,-1.19881,-0.293745,0.533536,-0.232735,0.0740622,-0.848421,0.457945,0.879785,0.462652,0.6905,-0.400845,0.935043,0.170343,-1.22256,-0.426517,-0.79203,-0.89704,1.00774,-0.783205,0.867854,-0.325273,0.171353,0.812696,-1.34759,-0.718128,0.182559,0.434902,1.15063,-1.09402,0.293657,0.786855,-0.0577571,-0.206011,0.794482,-0.289315,-0.333732,-0.1805,0.317101,0.616115,1.05273,-0.0162984,0.0259011,0.00546265,0.864962,-0.497028,0.79508,0.0586301,-0.182118,-0.747787,0.662165,-0.663009,-1.14654,-1.19375,-1.44717,-0.687743,1.24936,0.120743,0.114056,0.00501768,0.533877,0.0425331,-0.175553,-0.304958,0.0784772,-0.0654943,0.450364,0.113008,0.246894,1.04381,-0.0105862,0.830457,0.188796,0.263534,0.48678,-0.367634,0.303401,-0.269468,0.280427,0.247605,0.51746,-0.379154,-1.0009,-0.814428,-0.312043,-0.193379,0.567473,0.271561,-0.0378633,0.169533,-0.153241,-1.68928,-0.0424627,0.143111,0.0940466,-0.26739,0.139102,-1.64502,0.302959,-0.22932,-0.106359,-0.45832,0.415822,-0.0307194,-1.15915,0.76945,-0.274968,-1.18032,0.451229,0.0638734,0.277755,0.894214,0.885609,1.15243,-0.0188114,0.638126,0.168129,1.12222,-0.212323,-0.151045,0.218065,-1.64053,-0.113236,0.552684,-0.0491633,-0.0337818,-0.969165,-0.42713,0.645862,-0.135038,0.148289,-0.812455,0.928177,-0.010665,-0.80661,0.500253,-0.812775,-0.997597,0.607296,-0.335591,0.238348,1.11905,1.00485,1.43226,-0.578318,0.976052,0.485874,0.757791,0.171522,-0.19698,0.439775,0.186334,-0.246952,-0.380624,0.0203907,-0.226979,0.336359,0.317556,0.51595,1.17863,0.120454,0.431745,0.215479,-0.169897,0.351036,0.132437,0.119795,0.351404,-0.54431,0.300446,0.256567,-0.212119,-0.618509,-1.13772,-0.899086,0.335986,0.744405,-0.0885858,0.540666,-0.775138,0.589078,-0.241918,-1.63275,0.753427,-0.882248,-3.14795,0.582711,-0.942325,0.660662,-1.49368,-2.51202,-1.00333,-2.25745,0.986254,-1.52595,-0.253957,-2.87597,1.6781,0.509866,2.88287,-0.489932,-0.169526,-0.980674,1.69361,-0.655627,-0.389247,-1.18377,1.70688,-2.6953,-1.20198,-1.91701,0.156562,0.32215,1.35549,0.328336,-2.94841,-1.93128,0.21031,-2.11769,0.286713,-2.55575,0.578969,-0.900636,0.701494,0.129706,0.848405,-3.12485,-1.9507,2.1763,1.2892,-0.358528,-2.86295,1.4736,-3.41898,0.944079,-1.17297,-1.9165,0.289252,1.86561,0.164929,1.91429,-3.58806,-1.51243,-1.77361,0.873331,2.87098,0.602508,-1.03721,0.665297,-2.82138,3.25219,-4.02363,1.96655,-1.24594,-1.82122,-2.06483,-2.91996,0.679054,0.315082,1.19444,0.804509,0.501416,0.100145,1.68727,-0.670026,-1.02954,-1.68652,-3.43653,-0.935424,0.393344,0.246431,-3.77945,1.40069,-0.460065,-1.65444,0.395956,0.735732,-2.67585,0.700492,-0.924261,-2.53021,1.77365,-0.35432,0.0454074,-2.14492,2.60622,-2.32562,-0.306529,-1.09729,-0.0571188,0.678257,-2.06286,-1.32262,1.95709,0.460826,-2.36728,0.897977,-0.727452,-0.639159,-1.64439,0.28085,0.63799,2.18095,-1.54864,-1.7094,-2.219,-0.156101,-0.514575,-0.2883,-1.17443,-0.017902,-0.166373,-0.817537,-0.937793,-1.70451,-0.0998665,0.246542,0.584841,-3.17599,-0.143664,-2.28002,-2.19897,-1.40104,2.54434,-0.0068335,-2.62325,-1.47001,0.304594,3.573,-0.735239,0.223594,1.09475,-1.8346,-3.17099,-0.142227,2.03734,0.38506,-1.20801,-2.97314,0.943034,-1.94807,0.358479,-1.97561,0.71197,-0.952443,2.01441,-1.67053,1.41888,0.877719,-2.10242,-1.50518,-1.69731,-2.05106,-1.86326,-0.88691,1.04993,0.51622,-0.173133,-0.935452,2.63505,-0.58846,-0.372778,2.28854,-0.456886,-0.44194,-1.73985,-0.530213,2.00666,-2.21637,-2.52287,0.652651,-2.35296,-1.74225,-1.83518,1.31079,-0.894791,1.7051,-0.644011,-0.302446,-0.844833,0.295355,0.347534,0.0186692,-0.205454,-3.16976,2.33669,0.106606,-0.050579,-2.51956,-2.10053,-0.0335024,2.03883,-0.637127,-1.30208,0.630271,-2.4874,0.0742779,-1.03743,0.737934,-0.775246,-0.622113,1.74611,-0.370832,-1.34169,2.56767,-0.611738,-1.36427,-0.0292287,-0.921469,-0.732044,-1.23823,1.59389,1.8877,-2.66764,1.49465,-1.3891,-2.13294,0.930056,-1.83411,-1.49345,-0.387903,-2.10593,-1.21014,-1.79275,3.04852,-1.04929,-0.438552,1.74715,-0.997335,-0.257146,0.444767,1.91195,-2.15776,-2.50726,0.0438937,-1.76595,0.459644,-1.89276,0.496908,1.37073,-2.66139,1.52634,-1.03278,0.189259,-2.83595,-0.639374,2.17105,-1.41767,1.35452,-1.98875,-2.71212,-0.502161,-0.233477,-1.39624,1.03204,0.655131,2.78693,-1.06071,-1.44471,-2.37929,1.60493,-0.60412,1.84288,1.78706,-1.56011,0.491101,-2.78205,-1.5497,-2.75947,1.04,-1.73351,0.121598,-2.41035,-1.30602,0.340669,-1.24021,-0.2294,1.22915,0.166703,-0.108619,0.990676,0.914165,0.646487,0.844874,0.567154,0.793518,0.848688,0.790035,0.458743,0.867458};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
