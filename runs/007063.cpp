#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;

float weights_input_0[] = {-0.00015,0.02472,0.02468,-0.00648,0.08687,0.08773,0.07433,-0.06055,-0.12061,-0.02338,0.14711,-0.04491,-0.02761,-0.15871,-0.25134,-0.29597,0.13101,0.00091,0.00021,-0.00563,0.06616,0.11519,0.25989,0.23178,0.07409,-0.17253,0.17529,0.16617,0.12527,0.04581,0.06836,0.20212,0.11101,-0.38353,0.08209,0.00726,-0.02573,0.00773,0.06515,0.15133,0.12413,0.41141,-0.05291,0.05330,-0.27433,-0.10750,-0.07698,-0.04099,0.09262,0.21157,-0.04448,0.04769,0.14126,-0.03254,-0.02182,0.01215,-0.01938,0.03301,0.07002,-0.07371,-0.23054,-0.03347,-0.07106,-0.14969,0.19007,0.41831,0.16771,0.10182,0.04889,0.22082,0.13283,-0.03625,-0.02865,0.01247,-0.00326,-0.16929,-0.10399,-0.37047,-0.14184,-0.16382,0.00040,0.16680,0.27161,0.60627,0.32402,0.21032,0.30145,0.22834,0.12851,-0.03794,-0.03330,0.00558,-0.07911,-0.08486,-0.24227,-0.39688,-0.30093,-0.08338,0.02599,0.20836,0.31682,0.39323,0.50514,0.77639,0.36556,0.25046,-0.02445,-0.04186,-0.03769,0.02931,-0.12020,-0.08707,-0.39834,-0.51328,-0.33563,-0.15934,0.29330,0.16354,0.07464,0.22425,0.52223,0.55162,0.23151,0.19416,-0.06828,-0.04645,-0.03794,0.02157,-0.14316,-0.24773,-0.45776,-0.32677,-0.15939,-0.22209,-0.05848,0.04306,-0.08887,0.07071,0.16627,0.03271,-0.16679,-0.11472,-0.08563,-0.04426,-0.04310,0.00931,-0.07597,-0.23353,-0.49561,-0.53017,-0.29121,-0.00764,0.28169,0.45512,0.24561,-0.20209,0.05766,-0.34585,-0.65063,-0.46863,-0.12047,-0.05686,-0.03991,0.00989,-0.07103,-0.19232,-0.17416,-0.05734,-0.27492,0.05313,0.19040,0.30783,0.18299,0.10465,-0.31511,-0.35969,-0.67858,-0.37520,-0.16739,-0.06182,-0.15766,-0.10346,-0.14744,0.05824,0.16306,0.05037,-0.10672,-0.22007,-0.30756,0.04285,-0.02533,0.10539,-0.02192,-0.18837,-0.44310,-0.21312,-0.19001,-0.09353,-0.14890,-0.08162,-0.02224,0.17946,0.31155,0.26328,-0.06923,0.00074,-0.07136,0.21510,0.11688,-0.06969,-0.07303,-0.05324,-0.17125,-0.03807,-0.11823,-0.09261,-0.14415,-0.02631,0.02962,0.14898,0.24705,0.19699,0.07241,0.30166,0.37353,0.42612,-0.04489,-0.34925,-0.04761,0.00010,-0.02885,0.03602,-0.06432,-0.06644,-0.11807,-0.08328,0.04771,0.16150,0.30750,0.15208,-0.01222,0.30562,0.07278,0.14622,-0.24312,-0.30795,0.05775,-0.04910,0.00057,-0.04603,-0.00945,-0.03847,0.00310,-0.07939,0.08406,0.33721,0.27307,0.25058,0.11253,-0.05849,-0.17430,-0.17831,-0.31203,-0.29906,0.10178,-0.19731,0.22453,0.11343,-0.01403,-0.03551,-0.02188,-0.01844,0.09649,0.22198,0.26033,0.15366,0.06576,0.13215,-0.03195,0.24561,-0.31850,0.00824,0.11791,0.02958,0.06136,0.08585,-0.01386,-0.03017,0.00090,-0.02136,0.16805,0.26450,-0.06154,0.04905,-0.29084,-0.18137,-0.17020,-0.08274,0.05509,-0.08493,0.27397,0.22165,0.17991,0.08067,0.00448,-0.02607,0.00153,-0.05029,0.09556,-0.04430,-0.23164,-0.19450,-0.00425,-0.08307,-0.12213,-0.00899,0.03264,0.05812,0.23010,0.25428,0.23632,0.12706,0.00511,-0.00027,0.19144,};
float weights_input_1[] = {0.00006,-0.06561,-0.06744,-0.02217,-0.09296,-0.42807,-0.46301,-0.49402,-0.06781,0.14991,0.14407,0.13223,-0.23466,-0.37898,-0.38687,-0.04594,0.00686,-0.01828,-0.00225,-0.06173,-0.07619,-0.13149,-0.07730,-0.13768,-0.29841,-0.06364,-0.16951,-0.02086,0.10549,0.13609,-0.05220,-0.23728,-0.20397,0.07770,0.02935,-0.01501,-0.00807,-0.06754,-0.07449,-0.10867,-0.07997,-0.01491,-0.07781,-0.07396,0.09056,-0.16397,-0.24218,-0.22900,-0.05191,-0.10257,0.23101,0.16484,0.01655,-0.00399,-0.01000,-0.00362,0.05787,0.07671,0.08207,0.15265,0.04519,-0.01619,-0.01739,-0.02683,-0.16006,-0.18579,-0.12733,-0.02723,0.22359,0.23787,0.08406,0.02000,-0.00778,-0.00290,0.06465,0.08105,0.28581,0.05634,-0.03871,0.15956,-0.00279,-0.12045,-0.06170,-0.23756,0.10555,0.18205,0.46018,0.25496,0.09574,0.02393,-0.00348,-0.00103,0.09487,0.15068,0.21829,-0.00697,0.04182,0.02611,-0.11450,-0.13069,-0.46376,-0.22381,0.06088,0.27221,0.29684,0.16076,0.12411,0.04029,-0.00190,-0.06577,0.14259,0.20946,0.30276,0.24731,0.20633,0.15963,0.04425,-0.10214,-0.46356,-0.23411,-0.09820,0.14856,0.16588,0.14980,0.12622,0.04471,-0.00158,-0.06286,0.14689,0.26293,0.40653,0.28997,0.53647,0.15981,0.27825,0.08679,-0.02991,-0.18288,-0.09450,-0.17508,0.15310,0.15928,0.11632,0.04714,0.00862,-0.01669,0.05742,0.14693,0.21070,0.01694,-0.16407,0.03038,0.12210,0.08217,-0.03591,-0.36181,-0.25497,-0.33921,0.15191,0.18706,0.16480,0.04921,0.00462,-0.01795,0.05582,-0.00403,-0.00821,0.16653,0.31670,0.24899,0.19098,-0.07358,-0.06568,-0.37563,-0.14806,0.08136,-0.03059,0.20405,0.15072,0.05825,0.00675,-0.01588,0.03827,0.24777,0.36201,0.40957,0.69070,0.61949,0.58665,0.27789,0.07008,-0.14113,-0.08782,0.26852,0.10143,-0.03241,0.21899,0.10249,-0.00632,-0.03184,-0.05123,0.12593,0.34623,0.52857,0.51858,0.22583,0.04333,-0.15210,-0.12133,-0.06389,0.14606,0.11249,0.07065,-0.20515,0.16908,0.10201,-0.05150,-0.11128,-0.06572,-0.10681,-0.02682,0.21894,0.06326,-0.25747,-0.52827,-0.69619,-0.25394,-0.05638,0.03871,-0.00498,-0.12730,-0.28100,0.22715,0.04966,-0.07541,-0.10730,-0.17584,-0.26567,-0.28531,-0.00795,0.03702,-0.18430,-0.32085,-0.33157,-0.28320,-0.08060,0.07305,-0.06584,-0.17238,-0.26801,0.12462,0.01877,-0.04951,-0.10480,-0.13100,-0.01601,-0.10876,0.01014,0.13684,0.13811,-0.01456,-0.04857,-0.39396,-0.18975,-0.02159,-0.06395,-0.30643,-0.08305,0.10094,-0.00371,-0.01515,-0.15332,-0.17446,-0.11129,-0.12788,0.07690,0.31406,0.28454,0.20396,-0.15312,-0.10221,-0.21264,-0.17295,-0.22536,-0.00550,-0.00079,0.02740,-0.01645,-0.00112,-0.08027,-0.26155,-0.24655,-0.16362,0.18399,0.37814,0.32551,0.03160,-0.12816,-0.29865,-0.19367,-0.35242,-0.19662,-0.09869,0.06883,-0.00273,0.00470,-0.00116,-0.01854,-0.12556,-0.24796,-0.11607,-0.01423,-0.00519,0.33536,0.24203,-0.11201,0.02224,-0.18210,-0.19585,-0.19923,-0.22546,-0.14491,-0.00320,0.00124,0.20898,};
float weights_input_2[] = {-0.00015,-0.08619,-0.11311,0.00592,-0.09814,0.00331,-0.06091,0.02410,-0.11542,-0.26856,-0.23615,-0.01973,-0.03526,0.22206,0.38113,0.50483,0.12846,0.00172,0.00161,-0.10984,-0.06508,-0.03714,-0.25188,-0.20952,-0.16362,0.06505,-0.34851,-0.27674,-0.08455,-0.00748,-0.01164,0.06117,0.15510,0.36892,0.10797,0.07242,-0.02827,-0.04099,-0.11783,-0.11182,-0.40679,-0.32421,-0.25720,-0.12139,0.25514,0.03731,-0.04248,0.08198,0.05057,-0.08742,0.06852,-0.02509,0.12934,0.12388,-0.02902,0.07165,-0.05821,-0.16407,-0.25365,0.07283,0.05753,-0.13974,0.44959,0.08247,-0.27885,-0.45064,-0.21129,0.09937,-0.14039,-0.12110,0.08657,-0.00649,-0.02949,0.07049,0.04362,-0.17874,-0.00243,0.12492,0.03345,0.23606,0.17118,-0.27952,-0.40413,-0.56750,-0.00305,-0.13630,-0.23749,-0.16307,-0.01584,-0.03828,-0.02850,0.08460,0.05209,-0.06771,0.13123,0.18760,0.16386,0.32499,0.23666,-0.59690,-0.63898,-0.34214,-0.31143,-0.42531,-0.33108,-0.22451,0.02965,-0.03832,-0.01589,-0.00707,0.07782,-0.02450,0.29402,0.33071,0.49077,0.64166,0.40897,-0.00750,0.10672,-0.13075,-0.29356,-0.55200,-0.36539,-0.25942,0.02980,-0.06247,-0.01859,-0.00661,-0.02331,0.04969,0.29305,0.61134,0.23719,0.55188,0.29289,-0.08231,0.28011,0.21184,-0.05698,-0.25153,-0.33182,-0.29811,0.03196,-0.02420,-0.01172,0.01865,0.00920,0.04874,0.24930,0.25479,-0.00317,-0.13765,0.05021,0.04858,0.21952,0.02714,-0.41529,-0.29990,-0.11085,-0.23111,0.04830,-0.02295,-0.04378,-0.01260,0.03315,0.19074,0.11471,0.10056,0.15655,-0.14003,-0.04257,-0.35455,-0.08115,-0.54475,-0.18203,0.07217,-0.04309,-0.15326,0.08553,-0.02021,-0.04029,-0.01222,0.11607,0.52540,0.60854,0.32264,0.23915,-0.03072,-0.18589,-0.51915,-0.51047,-0.37650,-0.02921,-0.11367,0.04579,-0.13938,0.11926,-0.01525,-0.04692,0.00513,0.12100,0.63797,0.69065,0.73056,0.28556,-0.11316,-0.52392,-0.59360,-0.29021,-0.08060,0.19928,-0.15893,0.20696,-0.08466,0.14182,-0.01658,0.00039,0.05967,0.10404,0.21868,0.56464,0.60982,0.40154,0.34410,-0.16376,-0.36009,0.03441,0.04808,0.13797,0.06631,0.19763,0.02165,0.17078,-0.06447,-0.01095,0.07958,0.08174,0.06212,0.32951,0.25346,0.21963,0.41687,0.00219,-0.09143,0.07319,0.08373,0.00103,0.03905,0.18173,0.04867,0.07540,-0.04348,-0.06795,0.06695,-0.04464,-0.10421,-0.13154,-0.16026,-0.02794,0.14839,-0.02859,-0.01363,-0.11356,0.04769,0.04038,0.17937,0.00078,0.00141,0.08171,-0.02678,-0.03234,0.07222,-0.11485,-0.25368,-0.10532,-0.05597,0.08354,0.29373,0.06907,-0.23509,0.09856,-0.27368,0.05010,0.11202,0.19063,0.14647,-0.01220,-0.02397,-0.00166,0.02125,-0.10833,-0.26217,-0.10193,-0.22447,0.27060,0.09408,0.15526,0.28492,0.00878,0.24269,0.02260,0.13507,0.16846,-0.06557,-0.00549,0.04868,-0.00386,0.05285,-0.12601,0.07307,0.19039,-0.10562,-0.20207,0.00553,0.36420,0.35549,0.02918,0.02884,0.02946,0.01213,-0.09377,-0.09212,-0.00754,0.00001,-0.26529,};
float weights_input_3[] = {0.00912,-0.01934,-0.02299,0.10162,0.25054,0.36148,0.28705,0.29788,0.25453,0.20693,0.14345,-0.02438,-0.10558,0.01558,0.17858,-0.03162,-0.08006,0.00332,0.00951,0.00009,0.02266,0.08363,0.28618,0.09103,0.25355,0.14668,0.20302,0.05355,0.00156,-0.10259,0.03074,0.12778,0.10787,-0.03521,-0.02515,0.00213,-0.00724,-0.03271,0.01709,0.05949,-0.04909,0.16519,0.07439,0.12684,0.17273,0.08143,0.17570,-0.01053,0.15613,0.14106,0.17993,-0.09648,-0.04047,0.06098,-0.00191,-0.02056,-0.01947,-0.10118,0.08187,-0.13371,-0.07978,-0.13869,0.23385,-0.14886,-0.19973,0.16149,0.15713,0.33633,0.18253,0.06001,0.01089,0.07733,-0.00874,-0.02055,-0.05145,-0.12838,-0.26802,-0.05155,0.05197,0.17767,0.08186,-0.22889,-0.20641,0.23237,0.26253,0.15206,0.09194,0.10257,0.13874,0.07215,-0.02788,-0.03079,-0.07229,0.04182,-0.05484,-0.01967,0.15668,0.07107,0.07483,-0.32310,0.12237,0.42454,0.34705,0.18862,0.28603,0.16664,0.23374,0.07976,-0.02458,-0.06133,-0.01471,-0.07501,-0.21799,-0.05325,0.10136,0.10374,-0.07251,-0.48930,-0.07221,0.18609,0.17704,0.27966,0.38064,0.10204,0.20946,0.07818,-0.02457,-0.07609,-0.04280,-0.00461,-0.20112,-0.12990,-0.10351,-0.19917,-0.48140,-0.53749,-0.36053,-0.28208,-0.30233,0.15032,0.33129,0.19920,0.22666,0.16980,0.00129,-0.01419,-0.01124,0.04174,-0.14352,-0.03984,-0.08909,-0.40965,-0.57600,-0.61922,-0.26938,-0.29203,-0.14976,0.14613,0.29059,0.11603,0.15172,0.13598,-0.00023,-0.01687,0.01068,0.16152,-0.11444,-0.26148,-0.34313,-0.48041,-0.42303,-0.31697,-0.25478,-0.32555,-0.10531,-0.08280,0.12961,-0.05136,0.08352,0.15460,0.01684,-0.00028,0.04958,0.20439,0.11016,0.03228,-0.24030,-0.41789,0.00581,-0.09861,-0.47193,-0.41296,-0.37429,-0.56625,-0.38879,-0.22031,-0.02546,0.10012,-0.01338,-0.03066,0.03457,0.25842,0.31314,0.25186,0.16021,0.03793,0.07032,-0.13871,-0.45400,-0.35046,-0.37372,-0.58410,-0.44679,-0.31320,-0.11891,0.09429,-0.02839,-0.02558,0.01471,0.26052,0.25059,0.32908,0.54168,0.46046,0.51817,0.12711,-0.12433,-0.26904,-0.30004,-0.36474,-0.23667,-0.26313,-0.09216,0.05197,-0.02404,-0.05284,-0.04443,0.05771,0.02513,0.47952,0.50457,0.45340,0.38314,-0.01827,-0.06304,-0.07420,-0.19522,-0.22562,-0.15885,-0.10183,-0.02885,-0.02997,-0.01478,-0.05957,-0.08943,-0.22452,0.03704,0.43255,0.57717,0.29618,0.17557,-0.13615,0.02815,0.02805,-0.02915,-0.05996,0.04780,0.06250,-0.13734,0.05289,-0.01555,-0.06825,-0.07605,-0.22468,0.29947,0.47534,0.44187,0.17270,0.09957,-0.03943,0.06433,-0.13469,0.08826,-0.20933,-0.12726,-0.04544,-0.10561,0.01842,-0.00075,-0.01901,-0.02605,-0.10917,0.16569,0.08570,0.13409,0.00458,-0.11440,-0.07719,-0.01870,0.08931,-0.21608,-0.26780,-0.02494,-0.17248,-0.00351,0.01554,0.00405,0.01973,0.12176,0.02395,-0.08985,-0.09380,-0.20535,-0.15576,0.11384,-0.04821,-0.20046,-0.28656,-0.15304,-0.20457,0.05760,0.02709,0.00089,0.00122,0.05616,};
float weights_input_4[] = {0.00167,0.00923,0.02366,0.11312,0.20631,0.16295,0.30064,0.31827,0.29883,0.17916,0.08650,0.01211,-0.19899,-0.13862,-0.04798,-0.13622,-0.05040,-0.00075,0.00019,0.08855,0.02947,-0.02204,0.21816,0.38809,0.35658,0.20661,0.26694,0.22742,0.09566,0.10802,0.14345,-0.16295,-0.04205,-0.17230,0.02566,-0.02528,0.08029,0.06599,0.04732,0.04778,0.29692,0.38358,0.22270,0.23577,0.00397,0.01272,0.02728,-0.07286,0.08060,0.07309,0.10804,0.08816,-0.05280,0.02155,0.08020,-0.02669,0.07081,0.11081,0.19898,0.19898,0.07419,0.13039,-0.27867,-0.08951,-0.24303,0.26853,0.18534,0.06961,0.18728,0.13786,-0.03814,0.07883,0.08226,-0.02530,-0.00193,0.16030,-0.12423,0.09328,-0.00142,-0.03442,-0.38862,-0.34670,-0.26906,0.30057,0.01975,0.13699,0.25879,0.16521,0.03231,0.11026,0.08131,-0.03488,-0.02353,0.04600,-0.05833,-0.01225,0.00628,-0.18221,-0.30858,-0.40624,0.00776,0.41143,0.20094,0.28130,0.31169,0.21761,0.03008,0.11300,0.07029,-0.02471,-0.02659,0.03272,-0.15338,0.06027,-0.08117,-0.23146,-0.45791,-0.68037,-0.17486,0.29346,0.11791,0.34590,0.28486,0.23202,0.02845,0.12038,0.07069,-0.02458,0.03028,0.00882,-0.18655,-0.46305,0.02888,-0.14607,-0.24309,-0.32459,-0.32231,-0.14878,-0.00319,0.12733,0.23069,0.24249,0.03159,0.10056,0.06947,-0.02541,-0.03744,-0.11469,-0.15264,-0.19083,0.20123,0.32766,-0.19378,-0.30596,-0.27011,-0.01861,0.12739,0.09877,0.11195,0.17906,0.02229,0.09676,0.09652,0.00298,-0.04451,-0.26911,-0.23846,-0.22408,-0.00092,0.12614,0.05851,0.18971,0.05351,0.42639,0.12432,-0.08520,0.06235,0.11070,-0.01595,0.11611,0.09163,-0.00285,-0.07266,-0.37764,-0.56271,-0.32060,-0.11756,0.18827,0.34562,0.29002,0.37965,0.44526,-0.02364,-0.11067,-0.00329,0.07451,-0.02698,0.11792,0.08952,-0.00700,-0.09252,-0.49443,-0.63072,-0.63726,-0.23311,0.26366,0.41082,0.22077,0.03673,0.19880,-0.22702,-0.03448,-0.12322,0.04300,-0.04571,0.11646,0.05600,-0.04198,-0.07235,-0.17413,-0.43467,-0.46030,-0.20696,0.00711,0.07956,-0.05948,-0.19729,0.06900,-0.09236,-0.13097,-0.14924,-0.05641,-0.08588,0.12266,0.06667,-0.07339,-0.07445,-0.01477,-0.23327,-0.23338,-0.10662,-0.08589,0.01561,-0.22896,-0.16305,0.01149,0.00817,-0.03476,-0.11493,-0.09330,-0.06561,0.10142,0.10556,-0.06214,0.00210,0.06216,0.01861,0.02444,0.04387,0.03063,0.03274,-0.15958,-0.09369,-0.00888,-0.07999,-0.19809,-0.01197,-0.09799,-0.06632,0.08425,0.07909,-0.00232,0.04457,0.22988,0.11119,0.01787,-0.13689,-0.16334,-0.12148,-0.13558,-0.10420,0.15848,-0.21938,-0.21636,-0.16832,-0.19899,-0.01673,0.07709,-0.00147,0.05236,0.09869,0.30904,0.21771,0.27826,-0.22939,-0.12757,-0.12634,-0.30410,-0.19743,-0.13265,-0.40582,-0.43136,-0.40789,-0.06285,-0.00726,0.05263,0.00411,-0.02309,0.21298,0.12007,-0.00119,0.17809,0.00119,-0.02693,-0.28480,-0.57833,-0.39828,-0.47031,-0.45451,-0.37718,-0.22261,-0.00148,-0.00712,-0.00004,0.37327,};
float weights_input_5[] = {0.00079,-0.00477,-0.01396,-0.01544,-0.00277,-0.01008,-0.01309,-0.00187,-0.07859,-0.08291,0.00671,-0.01812,0.05863,-0.02211,0.02152,0.04690,-0.01482,0.01802,0.00204,0.00519,-0.04116,-0.09623,-0.04163,0.01852,0.15148,-0.03109,-0.02478,-0.06165,-0.06556,-0.06939,-0.04385,-0.09249,0.04990,0.02415,-0.00259,0.00780,-0.01159,-0.01975,-0.02363,-0.03955,0.09667,0.08836,0.05828,-0.14674,-0.04124,0.20772,0.05999,0.07377,-0.07894,0.03197,0.18076,0.02490,-0.01065,0.01545,-0.00679,-0.02445,-0.00679,0.05414,0.12605,0.09359,-0.13246,-0.19035,-0.10079,0.16814,0.09680,0.10240,-0.06367,0.11364,0.08120,0.01460,-0.01050,0.02964,-0.01042,-0.02330,-0.03323,0.11059,0.22038,0.11342,-0.09134,-0.15292,-0.14654,0.16547,0.07457,0.09131,-0.05217,0.07767,0.07349,0.02485,0.01684,0.03167,-0.01490,-0.02972,0.00226,0.17194,0.17932,0.11580,0.10883,-0.00390,-0.03188,0.05795,0.12842,0.05712,-0.09872,0.04079,0.19378,0.08041,0.01053,0.01087,-0.01949,-0.03128,0.01598,0.11896,0.15406,0.24340,0.10308,-0.01501,-0.17407,-0.16261,-0.08292,0.10760,-0.01099,0.13575,0.19098,0.09293,-0.00470,0.02821,-0.01737,-0.03797,0.00747,0.10049,0.12917,0.12198,0.13512,-0.00935,-0.33919,-0.31825,-0.22714,0.09564,0.00311,0.07567,0.23280,0.09297,-0.00350,0.00222,0.00287,-0.02153,-0.02855,0.00788,0.15659,0.23075,0.34006,-0.04248,-0.40173,-0.24129,-0.09473,0.28680,0.10900,0.10657,0.08766,0.02463,-0.01773,-0.00774,0.00648,-0.01678,-0.03665,-0.07943,0.19586,0.26099,0.35641,-0.00808,-0.23100,0.05312,0.23065,0.40142,0.07551,0.05334,-0.01147,-0.02761,-0.04126,0.00958,-0.01132,-0.03655,-0.03796,-0.13615,-0.13668,0.16013,0.18376,0.39045,0.51783,0.62934,0.70950,0.22942,-0.24054,-0.20438,-0.18046,-0.10721,-0.03445,0.00357,-0.03171,-0.06973,0.04995,-0.02788,-0.09752,-0.25252,-0.05262,0.26604,0.48338,0.74445,0.35215,-0.01965,-0.39781,-0.32105,-0.18736,-0.10487,-0.06842,0.00454,-0.01165,-0.02482,0.07712,-0.05330,-0.19003,-0.34506,-0.10675,0.15459,0.50196,0.61094,0.10364,-0.08109,-0.21366,-0.20881,0.00824,-0.02675,-0.05617,0.02636,0.00038,-0.03741,-0.00081,-0.13075,-0.13725,-0.19980,-0.03874,0.14632,0.37092,0.47946,0.10738,-0.03767,-0.20403,-0.07235,0.02545,-0.06411,-0.00876,0.03953,0.02161,-0.05860,-0.10748,-0.20146,-0.17842,-0.24437,-0.28913,-0.16419,0.05479,0.16680,0.16109,-0.08507,-0.37662,-0.27508,-0.03074,-0.07064,-0.04147,0.03618,-0.01286,-0.04243,-0.10996,-0.17322,0.07823,-0.13248,-0.33440,-0.44429,-0.10993,-0.08456,0.04703,-0.00701,-0.06619,-0.21530,-0.12581,-0.08236,-0.01310,0.02728,-0.00009,-0.05398,-0.04574,-0.18272,-0.01653,0.08533,-0.27687,-0.29784,-0.29115,-0.23151,-0.23027,0.11061,0.02160,-0.07266,-0.00241,-0.07240,0.01282,-0.00156,0.00181,0.00829,0.00542,0.00608,-0.11478,0.02816,-0.06118,-0.27994,-0.39463,-0.30474,0.10954,0.45625,0.19022,0.18612,0.16062,-0.00320,0.01475,0.00050,-0.06908,};
float weights_input_6[] = {0.00111,0.03752,0.04410,-0.02309,0.06792,0.38434,0.33399,0.27015,0.05823,0.14079,-0.05426,-0.02206,0.16662,0.35784,0.27231,0.06113,-0.05725,0.00346,0.00236,0.01439,0.01697,0.04882,0.20348,0.27780,0.25157,-0.00731,0.26431,0.13055,0.00564,-0.00287,0.15490,0.37111,0.32414,0.11677,-0.03885,-0.04576,-0.02230,-0.04351,0.04879,0.21827,0.05437,0.26052,0.17705,0.26183,0.11608,0.25796,0.45048,0.20725,0.22633,0.22858,-0.04931,-0.05122,-0.01393,-0.06957,-0.02424,-0.04347,0.00289,0.10170,-0.00654,-0.04191,0.09917,0.20953,0.33454,0.28963,0.30805,0.20348,0.19068,0.02950,-0.15131,-0.17565,-0.06635,-0.03407,-0.02406,-0.04217,-0.00829,0.09207,-0.12681,-0.02039,0.10729,-0.05245,0.03261,0.07914,0.20207,0.23650,0.00489,-0.10290,-0.32216,-0.19040,-0.05931,-0.03312,-0.02687,-0.04533,-0.03210,0.05238,-0.00406,-0.07475,-0.16658,-0.16568,-0.23410,0.13923,0.05289,0.01851,-0.05075,-0.10879,-0.19685,-0.12820,-0.01746,-0.03263,-0.02850,-0.01856,-0.04756,0.02832,-0.10378,-0.22540,-0.44586,-0.33958,-0.06720,0.23372,0.08296,-0.08475,-0.08286,-0.00611,-0.14545,-0.10197,-0.01796,-0.03379,-0.02836,-0.02553,-0.01408,0.01947,-0.24757,-0.34730,-0.63723,-0.58073,-0.18776,0.13951,-0.02020,-0.12817,-0.04025,0.25992,-0.08824,-0.02632,-0.00619,-0.03288,-0.02790,-0.04035,0.01218,0.07059,-0.27945,-0.23830,-0.45566,-0.29760,-0.15872,0.00416,0.02282,-0.06708,0.20738,0.42555,-0.12876,-0.06130,-0.00920,-0.03789,-0.02546,-0.04093,0.00774,-0.02678,-0.23275,-0.25223,-0.72222,-0.37128,-0.21504,0.03766,-0.20068,-0.21456,0.15417,0.11822,0.00557,-0.11737,-0.03766,-0.03464,-0.03979,-0.04649,-0.11357,-0.17353,-0.28130,-0.47309,-0.70211,-0.59947,-0.28579,-0.12646,-0.27770,-0.29992,0.08308,-0.01610,-0.13031,-0.04969,-0.05667,-0.03237,-0.02650,-0.08676,-0.19254,-0.27543,-0.25923,-0.50823,-0.41571,-0.28178,-0.01794,-0.00814,-0.21702,-0.28461,0.02051,-0.04377,-0.15297,0.03171,-0.06038,-0.03538,-0.01918,-0.09984,-0.24147,-0.13326,-0.19127,-0.28573,-0.19583,-0.22198,0.07604,0.12865,-0.19409,-0.31528,-0.07289,-0.14395,-0.23984,0.01893,-0.08994,-0.01098,-0.02280,-0.03807,-0.05831,0.13822,0.16229,-0.03222,0.06891,0.00618,0.00423,0.01841,-0.13938,-0.28151,-0.06385,-0.01059,-0.10193,0.06366,-0.07272,-0.01091,-0.02679,-0.02932,0.05104,0.26640,0.17459,0.16648,0.18986,0.14004,0.03914,-0.05020,0.10860,-0.03715,0.19783,0.23856,0.11408,-0.01496,-0.08092,-0.02609,-0.02377,-0.01600,0.08377,0.36541,0.27691,0.14221,0.00653,0.01232,0.01100,0.19884,0.12619,-0.02590,0.31297,0.33500,-0.06719,-0.06351,-0.01519,-0.02522,0.00172,-0.03127,0.14489,0.23111,0.42569,0.10009,0.08446,0.13629,0.13468,0.16860,0.13223,-0.10750,0.36638,0.23211,-0.01166,-0.01617,0.01207,-0.07540,0.00322,0.01137,0.06195,0.14277,0.17522,0.26381,0.22570,-0.02428,-0.10203,0.13469,-0.12858,-0.20314,0.21116,0.21731,0.00910,0.03547,0.01282,-0.00096,-0.10059,};
float weights_input_7[] = {-0.00491,-0.00543,-0.00797,-0.01669,-0.25027,-0.17912,-0.28341,-0.05100,0.10834,0.10343,-0.05700,-0.02490,-0.13269,-0.06982,-0.10898,-0.05559,-0.12729,-0.07805,-0.00493,0.04879,-0.00586,-0.16970,-0.18012,-0.10678,-0.03682,-0.08847,0.10322,0.09387,0.01496,-0.01791,-0.05262,-0.27795,-0.36191,-0.06917,-0.04819,-0.04517,0.05196,0.09011,-0.00953,0.03962,-0.12912,0.03857,-0.10144,0.13977,-0.05382,-0.07763,0.24742,0.06353,0.12102,-0.15928,-0.30186,-0.14679,-0.07278,0.05289,0.06685,0.03386,0.05090,0.09623,-0.08850,0.21275,0.05636,0.00213,-0.11228,0.03812,0.06972,0.06624,0.00534,-0.19239,-0.23427,-0.12285,-0.05553,0.00853,0.05167,0.03129,0.00502,0.17679,-0.01410,0.28587,0.32407,0.12505,0.03721,0.00411,0.17329,-0.07358,-0.22490,-0.18315,-0.19213,-0.02605,-0.00464,0.04399,0.06043,0.02615,0.00504,0.20318,0.14741,0.41305,0.29361,0.04529,-0.08636,-0.16520,-0.14225,-0.20808,-0.29684,-0.15630,-0.07684,0.01878,0.03145,0.06498,0.05962,0.02235,0.00095,0.10296,0.22147,0.39006,0.09597,0.16624,-0.07083,0.04708,-0.13525,-0.26514,-0.23892,0.05974,0.06516,0.04798,0.03225,0.06337,0.05917,0.02206,0.05216,0.16459,0.14561,-0.03646,0.04670,0.08746,0.14891,0.06746,-0.26441,-0.18275,0.14208,0.32952,0.17589,0.09354,0.02929,0.08449,0.06092,0.02009,-0.00380,0.15314,-0.04648,-0.03289,-0.04401,0.06772,0.06990,-0.05615,-0.16204,0.07070,0.24574,0.31246,0.34019,0.13974,0.09843,0.08743,0.05854,0.02218,-0.01568,-0.12522,-0.16499,-0.14394,-0.16313,-0.01846,-0.05491,-0.07436,-0.14447,-0.08789,0.20931,0.16293,0.12318,0.13128,0.08847,0.04341,0.10016,0.06318,-0.05504,-0.12845,-0.13784,-0.20960,-0.17119,-0.03560,-0.08035,-0.07777,0.03112,-0.04804,0.04543,-0.00135,0.08921,0.08291,0.05405,0.10491,0.09948,0.04230,-0.20288,-0.20865,-0.20879,-0.16605,-0.02308,-0.10432,-0.14264,-0.17216,-0.18313,-0.07417,0.11792,-0.01129,0.00873,0.00485,0.02578,0.11127,0.09702,-0.02309,-0.23574,-0.23077,-0.18524,-0.00913,-0.02341,-0.13008,-0.18209,-0.34101,-0.28368,-0.11694,0.04768,-0.11018,-0.14288,-0.13409,-0.00112,0.08916,0.06833,0.03878,-0.11566,-0.12135,-0.03854,0.02191,-0.02022,-0.11630,-0.23707,-0.35521,-0.17563,-0.16770,-0.07111,0.06456,-0.00522,0.04237,0.06305,0.03737,0.00877,0.05205,-0.00680,0.09746,0.16637,0.24933,0.34641,0.04471,-0.06096,-0.10692,-0.12457,-0.11294,0.13037,0.29068,0.23188,0.07312,0.08987,0.15156,0.05905,0.07518,0.06774,0.27070,0.23861,0.40162,0.30354,0.20651,0.13089,-0.00704,0.11758,-0.00849,0.20133,0.40468,0.18251,0.06877,0.01137,0.04184,-0.00215,0.10042,0.09818,0.15557,0.35494,0.22623,0.22039,0.21748,0.27508,0.16244,0.13723,0.12260,0.09025,0.08550,0.01281,0.02497,-0.01785,0.08881,-0.00018,0.04276,0.12773,0.35830,0.51704,0.36929,0.19852,0.15389,0.21094,0.25562,0.21032,0.00830,0.21357,0.13998,-0.06051,0.05010,-0.00739,0.00295,0.03957,};
float weights_input_8[] = {0.00021,-0.00620,-0.01228,-0.14588,-0.26861,-0.36347,-0.39661,-0.40733,-0.24706,-0.11318,-0.12122,0.07946,0.08079,-0.02004,0.06216,0.05593,-0.04686,0.01082,-0.00031,-0.05646,-0.11002,-0.00677,-0.26457,-0.52142,-0.58688,-0.17539,-0.30708,-0.22803,-0.21158,-0.09338,0.01396,0.10860,-0.03470,0.26017,-0.07172,-0.06147,-0.04728,-0.12779,-0.03573,-0.01349,-0.21862,-0.49211,-0.20778,-0.28073,0.04362,0.14039,-0.07090,0.20719,-0.17409,-0.11893,0.00609,-0.00498,-0.04492,-0.16212,-0.04735,-0.07192,-0.06124,-0.02960,-0.28786,-0.13945,-0.16076,0.03203,0.00409,0.19449,0.28368,-0.20669,-0.18241,-0.00018,-0.26385,-0.25307,-0.06331,-0.10837,-0.04773,-0.07188,-0.04508,0.08966,0.21814,-0.03472,-0.23602,-0.06223,0.10049,0.27582,-0.03777,-0.24836,-0.12143,-0.15070,-0.36585,-0.36030,-0.21816,-0.10598,0.00917,-0.07122,0.06567,0.02732,0.07283,-0.00474,-0.21948,-0.25056,-0.10512,0.34826,-0.22996,-0.54202,-0.39444,-0.62888,-0.61540,-0.57817,-0.30343,-0.14220,0.00944,-0.07684,0.07522,0.10518,0.11766,0.02018,-0.19170,-0.30844,-0.07621,0.46372,0.28707,-0.27971,-0.50849,-0.73957,-0.73628,-0.43884,-0.18985,-0.14326,0.00801,-0.01829,0.02409,0.07697,0.36987,0.38005,-0.12354,0.02743,0.33208,0.51458,0.42669,0.21755,0.26364,-0.27971,-0.23277,-0.30214,-0.23804,-0.24249,0.00988,-0.03467,0.06572,0.16379,0.46210,0.34290,0.09405,0.08409,-0.03664,0.20042,0.19023,0.50022,0.33016,0.25842,0.16153,0.10021,-0.22634,-0.13274,0.01250,-0.03324,0.05695,0.26456,0.30488,0.14553,0.20118,0.06919,-0.24624,-0.15970,0.10534,0.02225,0.32008,0.32269,0.05913,0.27476,-0.05187,-0.13439,0.01178,-0.03181,0.02910,0.06075,0.09176,-0.01207,-0.09107,0.15225,-0.13354,-0.05065,-0.04151,-0.04625,0.13799,0.18822,0.08116,0.12395,0.16020,-0.12912,0.01632,-0.03839,0.04203,-0.06688,-0.01018,0.06876,0.11207,-0.32984,-0.00614,0.16237,0.10980,-0.01029,0.21020,0.10840,0.11888,0.07998,0.13868,-0.12939,0.03537,-0.06982,0.04673,-0.14539,-0.08080,-0.02181,-0.02174,-0.31457,-0.02472,0.31648,0.12293,0.00321,0.17900,0.23376,0.16007,0.19500,0.06895,-0.04898,0.03409,-0.05182,0.00319,-0.15014,-0.17514,-0.14264,-0.03493,-0.12633,0.01825,0.39349,0.09581,-0.13140,0.00624,0.22518,0.06556,0.21048,0.13280,0.07008,-0.04010,-0.05619,-0.05116,-0.21845,-0.42842,-0.45892,-0.36344,-0.09378,0.02878,0.23017,0.18336,0.13082,-0.06554,0.20950,-0.23281,0.08477,0.24683,-0.04278,-0.04889,-0.08084,-0.11710,-0.32473,-0.28395,-0.48072,-0.30126,-0.13607,0.05210,0.07402,0.15740,0.00825,-0.00313,0.22327,0.00613,0.13951,0.22825,-0.04151,0.00097,-0.12250,-0.05860,-0.21244,-0.09424,-0.19322,0.10981,-0.08421,0.11822,0.22884,0.02965,-0.11455,0.20974,0.30590,0.17601,0.21467,0.01976,-0.11946,-0.00108,0.01402,-0.13856,0.02537,0.23639,-0.19235,0.03248,0.14768,-0.09409,0.11603,0.25271,0.54241,0.25812,0.40915,0.14524,-0.08320,0.01910,-0.00073,-0.12727,};
float weights_input_9[] = {0.00565,0.00581,0.00529,-0.01369,0.18750,0.09553,0.10156,-0.13155,-0.16485,-0.00894,0.07406,0.05259,0.32946,0.21858,0.10526,0.13034,0.14092,0.08846,0.00794,-0.05294,0.00848,0.13357,0.11854,-0.02499,-0.06989,0.05504,-0.00516,0.07105,0.02147,0.08083,0.07402,0.40093,0.31545,0.08678,0.03497,0.06841,-0.05945,-0.09120,-0.00848,0.03657,-0.02332,-0.28565,0.28137,-0.06599,0.19891,0.28261,-0.05651,-0.01655,-0.07243,0.24203,0.28370,0.10419,0.06520,-0.05501,-0.08146,-0.02005,-0.02978,0.02583,0.03072,-0.19325,0.09374,0.13205,0.21339,0.28307,0.13801,-0.05140,-0.02835,0.22489,0.26645,0.07885,0.04147,-0.01750,-0.06069,-0.02154,-0.00812,-0.07732,0.00738,-0.19418,-0.28659,-0.18201,0.00414,0.14020,0.10843,0.10816,0.25639,0.27003,0.09971,-0.03581,-0.00533,-0.04427,-0.07230,-0.01229,-0.00177,-0.10598,-0.04900,-0.34898,-0.36472,-0.14764,0.11134,0.42702,0.21267,0.14484,0.26321,0.13566,-0.01792,-0.06506,-0.02993,-0.07449,-0.07354,-0.01198,0.01047,0.07501,-0.05185,-0.23123,-0.26842,-0.27951,0.00005,0.20084,0.18025,0.23557,0.27704,-0.11571,-0.16469,-0.07719,-0.03025,-0.07344,-0.07305,-0.01162,-0.01188,0.02940,-0.08017,0.01932,-0.21005,-0.19382,-0.11523,0.13312,0.31061,0.10630,-0.18200,-0.34739,-0.28880,-0.13880,-0.02709,-0.09012,-0.07255,-0.01337,0.01472,-0.06701,0.08648,0.05921,-0.03810,-0.12422,0.04870,0.23713,0.17681,-0.09890,-0.25396,-0.28072,-0.39546,-0.19286,-0.13558,-0.09583,-0.07147,-0.01278,0.02049,0.12510,0.19367,0.16644,0.01897,-0.14802,0.10213,0.31010,0.15182,0.00937,-0.18949,-0.17355,-0.15358,-0.19666,-0.12324,-0.04796,-0.13469,-0.07559,-0.02933,0.14955,0.12133,0.11707,-0.05867,-0.12189,0.06148,0.10753,-0.02071,-0.00333,-0.02407,-0.02196,-0.13565,-0.09115,-0.08443,-0.14465,-0.13202,-0.06645,0.12459,0.20848,0.17975,0.11438,-0.18930,0.00654,-0.02561,0.09606,0.26893,0.13429,-0.05624,0.03134,-0.06654,-0.02199,-0.05970,-0.15576,-0.13442,-0.02191,0.15246,0.25727,0.09831,-0.14345,-0.18660,-0.09759,0.01450,0.25383,0.44117,0.25839,0.00502,0.05192,0.00089,0.11156,-0.02002,-0.11704,-0.09889,-0.04480,0.08431,0.25370,0.02875,-0.20361,-0.12016,-0.07731,0.10929,0.38761,0.33069,0.29807,0.09252,-0.14163,-0.13373,-0.04552,-0.10802,-0.05786,-0.00700,-0.05155,-0.00869,0.02891,-0.25272,-0.42009,-0.58716,-0.16856,-0.03291,0.25946,0.33148,0.24087,-0.06892,-0.29952,-0.37640,-0.12426,-0.15496,-0.20926,-0.06883,-0.06589,-0.07724,-0.09744,-0.25938,-0.56724,-0.53071,-0.36008,-0.24402,0.04120,0.05157,0.06595,-0.18660,-0.36962,-0.28214,-0.11904,-0.00029,-0.04172,0.00145,-0.10334,-0.09662,-0.09695,-0.22660,-0.27777,-0.24040,-0.22029,-0.25173,-0.14801,-0.19780,-0.23198,0.05711,0.06857,0.01587,-0.00732,0.06023,-0.08647,0.00363,-0.04826,-0.14267,-0.21005,-0.33962,-0.21224,-0.05198,-0.07783,-0.35771,-0.19242,-0.15044,-0.00848,-0.06729,0.05545,0.18147,0.01807,0.04327,-0.00188,-0.27458,};
float weights_input_10[] = {-0.00271,0.00768,0.00846,-0.02797,-0.07355,-0.07797,-0.02205,-0.03142,-0.12784,-0.25240,-0.30179,-0.09825,-0.03252,-0.11145,-0.09137,0.04587,0.09105,-0.00215,-0.00099,-0.01731,0.01425,0.06003,-0.06237,0.04320,-0.13673,0.02869,-0.25396,-0.30594,-0.15200,-0.02502,0.16772,0.06907,-0.03374,-0.05109,0.01819,0.01153,-0.00519,0.02024,0.00489,-0.10138,0.07540,0.02673,-0.28250,-0.12182,-0.32415,-0.35297,-0.35693,-0.17913,-0.11831,0.01469,0.05058,0.05634,0.04754,-0.05612,-0.00573,0.03381,-0.01268,-0.08742,-0.01947,-0.08337,-0.09228,-0.08060,-0.26605,-0.24248,-0.15044,-0.28623,-0.22093,-0.21648,0.12429,-0.00053,-0.00990,-0.07320,-0.00758,0.03307,0.00841,-0.08816,0.07667,-0.31144,-0.07913,-0.07294,-0.01073,0.04742,-0.22224,-0.22659,-0.19190,-0.13210,-0.01132,-0.04553,-0.12457,-0.07264,0.02987,0.02968,0.00519,-0.10659,-0.19217,-0.30221,-0.21128,-0.01686,0.10953,-0.00404,-0.26028,-0.23901,-0.12979,-0.15059,-0.19945,-0.23145,-0.22417,-0.08139,0.02648,0.03511,-0.04381,-0.08266,-0.11692,-0.39571,-0.03016,0.22454,0.38254,0.25857,0.21251,0.00901,0.00098,-0.26003,-0.29444,-0.23643,-0.16562,-0.08153,0.02631,0.07667,-0.05066,-0.28039,-0.15728,-0.14192,0.00513,0.55410,0.65758,0.35731,0.46376,0.39713,0.39144,-0.16900,-0.38906,-0.35155,-0.19646,-0.09652,0.00822,0.03170,-0.01059,-0.26346,-0.29129,-0.31610,0.10014,0.62188,0.62546,0.53441,0.42066,0.29735,0.12557,-0.32489,-0.38916,-0.25272,-0.18497,-0.02005,0.00977,0.03339,-0.01845,-0.31342,-0.16148,-0.13093,0.22546,0.56822,0.47598,0.20234,0.29883,0.17921,0.02381,-0.12171,-0.23746,-0.06628,-0.07795,-0.04257,0.02411,0.05054,0.01505,-0.15568,0.08048,-0.11258,0.07745,0.14889,-0.20703,-0.21080,0.10980,0.36206,0.26604,0.13473,0.26157,0.13493,0.10048,-0.03187,0.04506,0.08761,0.02871,-0.06405,0.01837,0.03705,-0.08512,-0.12999,-0.30192,-0.28674,0.03902,0.20459,0.30786,0.24670,0.40959,0.20501,0.11734,-0.03429,0.04118,0.03839,0.07282,-0.01239,0.19069,0.10290,-0.08816,-0.14079,-0.32972,-0.28448,-0.13769,0.10981,0.28345,0.21022,0.30686,0.23472,0.11599,0.00861,0.02879,0.03824,0.09471,0.15445,0.24791,0.12682,-0.08331,-0.06918,-0.27439,-0.21576,-0.34544,-0.05960,0.21588,0.19100,0.34598,0.29535,0.09418,0.01590,-0.02083,0.04967,0.13167,0.23456,0.20932,0.09713,-0.09376,-0.08712,-0.24408,-0.18754,-0.35897,-0.05735,0.21696,0.17168,0.21408,0.18093,0.15541,-0.08430,-0.00546,0.03339,0.14010,0.12150,-0.02351,-0.11301,-0.08075,0.06793,-0.03273,-0.11986,-0.31303,0.04095,0.01875,0.26995,0.39163,0.18694,0.08942,-0.02821,0.00092,0.03691,0.07062,0.30123,-0.00725,0.04892,-0.12902,-0.04478,0.14079,0.10092,0.00826,-0.06532,0.00344,0.17899,0.01993,0.14828,-0.02109,-0.00872,-0.00115,0.01097,0.02134,0.09244,0.11506,-0.13094,0.05153,0.14635,0.09422,0.07513,-0.08879,0.08693,-0.03903,-0.19965,-0.23070,-0.02457,-0.02500,0.00103,0.29930,};
float weights_input_11[] = {0.00056,0.08089,0.10178,-0.03914,0.06507,0.45073,0.50095,0.42677,0.18412,0.07959,-0.15411,-0.17772,0.02350,0.24294,0.41105,0.18488,-0.07455,0.00402,0.00022,0.06439,0.03915,0.05576,0.13937,0.40786,0.32724,0.14513,0.18247,0.11763,-0.02297,-0.05167,0.10261,0.11830,0.33047,0.22769,-0.03610,-0.06921,-0.01403,-0.01250,0.08912,0.02957,0.23391,0.30269,0.24791,0.20075,0.02028,0.15116,0.29702,0.13613,0.17015,0.04513,0.00245,-0.00587,0.00758,-0.09659,-0.01242,-0.06818,0.02344,-0.03280,0.05858,-0.03995,0.23834,0.19705,0.26087,0.15778,0.18528,0.12089,0.10492,-0.13514,-0.18590,-0.19204,-0.10527,-0.07551,-0.01417,-0.07053,-0.04200,-0.03694,-0.06633,-0.08615,0.11307,-0.01378,0.06680,0.08862,-0.07266,0.01235,-0.14445,-0.32571,-0.42077,-0.22995,-0.12455,-0.07669,-0.01854,-0.07432,-0.07132,-0.14968,-0.10730,-0.09736,-0.06903,-0.08430,-0.15910,-0.00201,-0.12405,-0.17307,-0.21745,-0.34553,-0.30042,-0.16461,-0.12753,-0.07960,-0.01970,0.00647,-0.13276,-0.19070,-0.19306,-0.18052,-0.25780,-0.26111,-0.05475,0.13970,0.09604,-0.13707,-0.15833,-0.22390,-0.21671,-0.14238,-0.12805,-0.07919,-0.01955,-0.00063,-0.02012,-0.22959,-0.28803,-0.20552,-0.39984,-0.23314,-0.04270,0.20966,0.21004,0.02411,0.02135,0.15076,-0.14766,-0.09093,-0.11189,-0.07924,-0.02380,-0.05951,-0.02278,-0.15544,-0.15115,-0.08047,-0.14250,-0.03703,-0.03211,0.00364,0.16984,0.23886,0.31111,0.33793,-0.17969,-0.08533,-0.11313,-0.08176,-0.02180,-0.05898,-0.02513,-0.19548,-0.27097,-0.26129,-0.38402,-0.07369,-0.13145,-0.02540,-0.01319,0.10896,0.29566,0.02314,0.14564,-0.11998,-0.13017,-0.08042,-0.01205,-0.04742,-0.05245,-0.37063,-0.57790,-0.72404,-0.71534,-0.60348,-0.23072,-0.18654,-0.16114,-0.10347,0.13632,0.01859,0.08606,0.04880,-0.13494,-0.07790,0.00252,-0.04916,-0.13132,-0.50902,-0.75577,-0.98135,-0.72984,-0.38076,0.00418,-0.03961,-0.12931,-0.08809,0.06849,0.00789,-0.00109,0.11678,-0.13100,-0.08168,0.05345,-0.01221,-0.16464,-0.25217,-0.37210,-0.56312,-0.41369,-0.38832,-0.06548,0.02430,-0.11737,-0.03182,0.01625,-0.10174,-0.07630,0.07451,-0.18485,-0.02920,0.04831,0.01368,0.00011,0.04010,-0.00860,-0.19142,-0.07655,-0.15979,-0.02773,-0.00202,-0.03088,-0.02576,-0.05876,-0.08444,0.02881,0.05502,-0.12050,-0.02327,-0.01674,0.02082,0.08320,0.21426,0.18222,0.05698,-0.04203,0.03819,0.20762,0.00225,0.26010,0.12249,0.01881,0.06315,0.17991,-0.05328,-0.10974,-0.05414,-0.01363,0.05246,0.12953,0.23320,0.23235,0.06118,-0.19539,-0.12305,0.02967,0.16544,0.21972,-0.01131,0.06741,0.18432,0.09135,-0.17567,-0.03760,-0.02269,-0.00143,-0.00845,0.19763,0.23216,0.38346,0.23451,0.13062,0.10083,0.18080,0.17147,-0.01911,-0.22789,0.05019,0.14469,-0.14780,-0.07988,0.00104,-0.09519,0.00176,-0.00080,0.02250,0.14373,0.08620,0.33073,0.34895,0.19906,0.06044,0.05985,-0.32281,-0.33573,-0.07488,-0.14541,-0.20486,-0.00931,-0.00047,0.00084,0.09664,};
float weights_input_12[] = {0.00111,0.00751,0.00990,-0.00684,-0.07654,-0.32372,-0.21335,-0.28518,0.05980,0.06639,0.21582,0.62643,0.14871,-0.31278,-0.10578,-0.31090,-0.18437,0.01331,0.00183,0.04812,-0.01952,-0.01394,-0.20537,-0.25577,-0.36463,-0.20985,-0.39839,-0.23346,-0.16201,0.13063,-0.00673,-0.16650,-0.14552,-0.00569,-0.09630,-0.01200,0.04246,0.02587,0.00372,0.03012,-0.20802,-0.42305,-0.18082,-0.46591,-0.14973,-0.17150,0.01439,0.22402,0.07647,-0.16210,-0.07875,-0.11353,-0.18189,0.03754,0.03836,-0.02634,0.01326,0.09350,-0.08016,-0.33038,-0.23325,-0.20003,-0.16520,-0.17456,0.12357,0.12138,0.19758,-0.14210,-0.19836,-0.00703,-0.11052,0.11449,0.04347,-0.02615,0.07605,0.12751,-0.08866,-0.17671,-0.46793,-0.16202,-0.04251,0.03685,0.15822,0.10881,0.13319,0.00165,0.15208,-0.04166,-0.03302,0.11653,0.04327,-0.01989,0.10754,0.01795,0.14403,-0.24163,-0.32022,-0.20056,0.13504,0.12721,0.20236,-0.01730,-0.01859,-0.23230,-0.09147,-0.06124,0.16077,0.11186,0.04422,-0.01068,0.17697,0.16309,0.12437,-0.11421,-0.05910,-0.11567,-0.09110,-0.19430,-0.03262,-0.41447,-0.31924,-0.24589,-0.05610,-0.02211,0.19423,0.11216,0.04349,-0.00680,0.19967,0.35512,0.57598,0.49376,0.38539,0.19173,-0.21431,-0.36735,-0.52186,-0.41513,-0.10664,-0.04315,0.26063,0.27639,0.21828,0.11830,0.04464,0.04392,0.17521,0.43553,0.85085,0.69711,0.27580,-0.07358,-0.46454,-0.62784,-0.54551,-0.39409,0.04539,0.31839,0.34136,0.51336,0.22056,0.11425,0.04322,0.04518,0.17986,0.68812,0.26054,0.29437,0.51231,0.12409,-0.29442,-0.47219,-0.11832,-0.27258,0.05134,0.20182,0.48503,0.37814,0.22095,0.11687,0.04653,0.03932,0.23476,0.34542,0.20888,0.46001,0.43181,0.26913,-0.04284,-0.19005,-0.16689,-0.36298,-0.15552,0.14158,0.12548,-0.03541,0.17065,0.11474,0.03446,0.05343,0.23770,0.16802,0.19080,0.37687,0.31848,-0.00748,-0.00458,-0.20980,-0.09659,-0.18552,-0.04350,0.14908,-0.13439,-0.07443,0.13237,0.11359,-0.00143,0.03734,0.27296,0.18357,0.22584,0.39676,0.14802,0.03503,-0.15893,-0.12721,0.27227,0.20020,0.12655,0.28966,0.01664,-0.06953,0.08068,0.05676,0.00473,0.00760,0.11163,-0.02818,-0.11758,0.15572,0.07832,-0.07910,0.13154,0.08529,0.34369,0.22362,0.29203,0.16523,-0.16157,-0.06961,-0.03985,0.03765,0.06431,-0.00215,-0.00591,-0.24697,-0.45810,-0.05539,-0.04114,-0.02375,0.09499,0.15560,0.23326,0.06701,0.03262,-0.05930,-0.41340,-0.04335,-0.03684,0.05662,0.03948,-0.01502,-0.14241,-0.31015,-0.50161,-0.30826,0.15437,0.02277,0.09564,0.05689,0.30495,0.15078,-0.12064,-0.38804,-0.22443,0.01860,0.04789,0.05548,0.00088,0.02084,-0.09340,-0.32496,-0.37502,-0.30245,0.21417,0.02796,0.13743,0.26921,0.15469,0.10425,-0.24549,-0.23942,-0.05069,-0.00011,-0.00962,0.01761,-0.00189,-0.00646,0.00713,-0.12652,-0.12259,-0.05530,-0.21417,0.16151,0.30583,0.11009,0.22991,0.24050,-0.03796,0.05244,0.05385,-0.04035,-0.01058,0.00114,-0.25095,};
float weights_input_13[] = {0.00550,-0.00742,-0.01628,0.02338,0.10352,0.11533,0.03291,0.03122,-0.03959,0.15804,0.07788,-0.06646,-0.05021,0.11480,0.04762,-0.01144,0.02265,0.00633,0.00788,-0.03225,0.00848,0.03973,0.19232,0.01266,0.12167,0.01720,0.19912,0.15362,0.03328,-0.14126,-0.01584,0.12024,0.12357,0.00078,-0.04438,0.00719,-0.04303,-0.05258,0.01595,0.07411,0.05698,0.11424,0.06737,0.08736,0.20923,0.23775,0.04661,-0.08186,-0.04364,0.07972,0.11438,-0.01260,-0.02236,-0.05608,-0.03366,0.00036,-0.00598,0.00313,0.06564,0.01026,-0.04311,0.07529,0.28634,0.12856,0.03468,-0.01473,0.00739,0.13630,0.03120,-0.03619,0.00645,-0.02185,-0.04182,-0.00197,-0.05421,0.01608,0.07748,0.09018,0.09779,0.00513,0.09282,0.05361,-0.01348,0.09026,0.10745,0.02099,-0.02031,-0.03928,-0.00292,-0.02671,-0.04238,-0.01082,-0.02118,0.09547,0.06034,0.11445,0.06574,-0.16602,-0.12511,0.13746,0.08760,0.17633,0.12293,0.05097,0.00332,-0.05855,-0.04228,-0.02981,-0.04258,-0.02655,-0.01442,0.03160,-0.05183,-0.07218,-0.22859,-0.23005,-0.04142,0.13641,0.05545,0.15688,0.04344,0.07112,-0.03501,-0.07809,-0.04547,-0.03081,-0.04361,-0.03519,-0.04609,-0.01478,-0.12626,-0.22389,-0.34300,-0.38582,-0.13265,0.02930,-0.00709,0.05749,-0.02726,0.05650,-0.02156,-0.05618,-0.04257,-0.02501,-0.02496,-0.01661,-0.03774,-0.02385,-0.26994,-0.31474,-0.39254,-0.36279,-0.30694,-0.06445,0.03834,0.03183,-0.02777,0.02642,-0.05366,-0.09210,-0.04190,-0.03363,-0.02445,-0.01808,-0.03688,-0.16517,-0.20842,-0.24680,-0.36593,-0.31753,-0.25240,0.03625,-0.11307,-0.13765,-0.14960,-0.07452,-0.20336,-0.10633,-0.04147,-0.00905,-0.04326,-0.03299,-0.13973,-0.20973,-0.18640,-0.16337,-0.17446,-0.12446,0.23403,0.29997,0.03856,-0.13603,-0.28584,-0.27976,-0.30650,-0.12617,-0.02307,-0.00280,-0.04939,-0.07546,-0.18216,-0.22049,-0.02592,-0.13196,0.01015,0.06387,0.32797,0.42583,0.07024,-0.23007,-0.33784,-0.35024,-0.27287,-0.17162,-0.03404,-0.00564,-0.08361,-0.11984,-0.21777,-0.29593,-0.25943,-0.26109,0.02888,0.09892,0.41883,0.36772,-0.12039,-0.40014,-0.42575,-0.39098,-0.25489,-0.10599,-0.00142,0.02312,-0.08818,-0.08451,-0.18367,-0.24349,-0.18642,-0.05093,0.16641,0.24901,0.22579,0.16470,-0.19215,-0.35914,-0.39654,-0.20529,-0.15438,-0.02148,0.08034,0.02838,-0.04115,-0.09393,-0.15542,-0.18849,-0.02349,0.07381,0.25816,0.22004,0.07748,0.02400,-0.09784,-0.20388,-0.10859,-0.00978,0.04481,0.11664,0.02100,0.00708,-0.04120,-0.09964,-0.10906,-0.11651,0.14271,0.12294,0.08608,0.11105,0.09651,0.08877,-0.12321,-0.12416,0.07696,0.10572,0.05271,0.10089,0.01473,-0.02346,0.00274,-0.05405,-0.00885,-0.05313,0.04024,-0.06291,0.07193,0.06130,-0.07874,-0.15527,-0.02503,0.04343,0.22711,0.24789,0.22979,0.06571,0.03165,-0.02638,0.00565,0.01705,0.03771,0.02670,0.00395,-0.05207,-0.03345,-0.21730,-0.19750,-0.01423,0.10393,0.20321,0.25276,0.29554,0.22399,0.05567,0.02988,-0.00122,-0.00673,};
float weights_input_14[] = {-0.00654,0.02410,0.02636,-0.03753,-0.22670,-0.30162,-0.42207,-0.24922,0.09014,0.14960,0.15198,-0.21926,-0.37455,-0.58715,-0.54560,-0.35424,-0.04940,-0.09039,-0.00775,0.07774,0.04893,-0.14209,-0.08318,0.14491,0.03628,-0.15949,0.12405,0.18400,0.10249,-0.06869,-0.26928,-0.46198,-0.46796,-0.54837,-0.01432,-0.00074,0.05539,0.18413,0.01466,-0.10186,-0.02065,0.30287,-0.08997,-0.04297,-0.30371,-0.25545,-0.09089,-0.09452,0.12209,-0.07514,-0.20851,-0.21190,-0.00020,0.08566,0.08443,0.08907,0.08425,0.02757,0.04480,0.13625,-0.15541,-0.07176,-0.24655,-0.22207,0.11561,0.47770,0.17456,-0.10191,-0.00667,0.19441,0.05069,0.02766,0.05433,0.08915,0.03101,-0.13238,-0.08823,-0.02292,0.04069,-0.13441,0.06095,0.25486,0.44113,0.55599,0.20319,0.14437,0.40128,0.36210,0.11581,0.07099,0.03436,0.07016,-0.04408,-0.04344,-0.09111,0.05240,0.02582,0.21382,0.20265,-0.06964,0.28406,0.40876,0.30332,0.77933,0.68778,0.49242,0.08269,0.08510,0.03407,0.09720,-0.07868,-0.09232,-0.10033,-0.17206,-0.13403,0.26854,0.30823,-0.12424,-0.25093,0.21409,0.30493,0.78396,0.71308,0.50421,0.00205,0.08831,0.03509,0.06921,0.01656,-0.13643,-0.23095,-0.53891,0.10166,0.13182,-0.05606,-0.40868,-0.57589,-0.23382,-0.08245,0.24471,0.25244,0.17500,0.00385,0.08569,0.03082,0.07480,-0.06986,-0.22521,-0.39848,-0.59238,0.07937,0.27265,0.22322,0.12401,-0.10504,-0.36564,-0.20277,-0.29385,-0.15132,-0.24298,-0.00372,0.03526,0.03597,0.07811,-0.06503,-0.35432,-0.19568,-0.12584,0.02697,0.26101,0.26815,0.08732,0.12073,0.18441,-0.15787,-0.18412,-0.26099,-0.25359,-0.11623,0.00260,-0.05804,-0.01571,-0.13769,-0.03988,0.00871,0.03115,0.19837,0.09598,-0.26960,-0.14159,0.36506,0.26320,-0.00628,-0.00556,-0.17026,-0.13397,-0.23625,-0.01187,-0.05478,-0.00295,-0.07747,-0.01840,0.14847,0.03463,-0.10352,0.06633,-0.24625,-0.11364,0.20584,0.12194,-0.05901,0.00182,-0.05295,-0.05926,-0.19162,-0.00262,-0.05625,0.04128,-0.04588,-0.05891,0.08967,0.01445,-0.26576,0.12745,-0.03979,-0.20789,0.04629,0.04500,-0.05540,-0.09646,-0.07574,-0.11235,-0.11808,-0.01898,-0.04707,0.02540,-0.01697,-0.03670,0.14310,0.04197,-0.44459,-0.08603,-0.31890,-0.36299,-0.05566,0.05440,-0.00280,-0.00750,-0.02013,-0.19758,-0.09194,-0.02908,0.07590,0.02671,0.06383,0.33212,0.40257,0.31858,0.01769,-0.31580,-0.34927,-0.37882,-0.14556,-0.20957,0.08870,-0.15272,0.28070,0.06821,-0.07808,0.09035,0.06439,0.11910,0.08935,0.31949,0.35749,0.29231,0.03420,-0.06238,-0.16969,-0.16658,-0.04066,0.21337,0.17559,0.02519,0.14596,0.04968,-0.15014,0.05573,-0.00281,0.14664,0.18262,0.23671,0.08636,0.30579,-0.14567,0.01985,-0.04791,-0.08617,0.14666,0.16403,0.03896,-0.01040,0.06896,-0.04145,-0.02687,0.13198,0.00132,-0.02917,0.20322,0.19240,0.05472,0.23685,0.10093,0.06516,0.05204,0.05729,0.22078,0.05220,0.18850,0.08928,0.16336,0.18182,-0.02054,0.00299,0.26234,};
float weights_input_15[] = {-0.00174,-0.01574,-0.02064,-0.17838,-0.36660,-0.50569,-0.42905,-0.44503,-0.25605,0.00026,0.08897,0.08719,-0.02915,-0.21644,-0.31529,-0.30667,-0.06975,-0.00343,-0.00014,-0.04748,-0.09269,-0.03895,-0.21065,-0.42553,-0.41676,-0.31972,-0.16807,-0.09767,-0.07910,-0.16551,-0.13063,0.02150,-0.14600,-0.15810,-0.07173,-0.03610,-0.03105,-0.07256,-0.04845,0.05689,-0.20890,-0.33782,-0.30516,-0.31072,-0.25580,-0.02755,0.03063,0.00903,-0.22804,-0.09047,-0.08058,-0.12420,-0.05072,-0.08595,-0.02918,-0.03189,-0.04155,0.02020,-0.09754,-0.22197,-0.38918,-0.24671,-0.04230,0.02899,0.34533,0.02251,-0.21615,-0.01549,-0.10178,-0.01334,-0.00518,-0.03487,-0.03202,-0.02938,-0.03255,0.01954,0.07013,-0.11778,-0.11236,-0.01286,0.16025,0.32804,0.25185,0.09960,0.06218,-0.05722,0.04550,-0.04162,-0.01305,-0.03153,-0.02301,-0.03191,0.01206,0.03804,-0.00313,-0.03720,0.13368,-0.02129,0.04248,0.46340,0.16135,-0.15252,-0.04272,-0.04322,-0.07158,-0.13945,-0.04213,-0.04332,-0.02224,-0.04072,0.01526,0.00432,-0.04892,-0.11797,-0.08494,-0.12501,-0.00095,0.33920,0.18557,-0.18408,-0.12966,0.00051,-0.13645,-0.15064,-0.03280,-0.04504,-0.02191,-0.03657,-0.03636,0.00745,0.12279,0.15397,-0.11936,-0.17350,-0.05059,0.19194,-0.08000,0.06788,0.10040,0.03596,0.00010,-0.11546,-0.05241,-0.04799,-0.02239,-0.03433,-0.00435,0.07462,0.15729,0.14045,-0.04739,-0.10295,-0.09742,-0.01877,0.01654,0.20040,0.24011,0.18594,-0.00018,-0.08192,-0.04977,-0.03692,-0.02576,-0.04018,-0.00461,0.22806,0.24825,0.10562,0.04928,0.00638,-0.35125,-0.22237,0.15330,-0.03085,0.05641,0.09508,-0.15493,-0.05142,-0.01527,-0.03730,-0.09551,-0.10522,-0.07383,0.15935,0.28801,0.25139,0.13461,0.00362,-0.26016,0.14710,0.22740,-0.14514,-0.18124,-0.12196,-0.33490,-0.21764,0.00514,-0.04449,-0.09219,-0.10524,-0.04568,0.14889,0.36963,0.48869,0.40981,-0.08484,0.05857,0.33690,0.29287,-0.31974,-0.19398,-0.27721,-0.33875,-0.26342,-0.00721,-0.03898,-0.10074,-0.11143,-0.02959,-0.00570,0.16516,0.34954,0.41063,0.27521,0.39382,0.46098,0.19435,-0.35962,-0.29354,-0.13401,-0.10735,-0.18041,-0.00067,-0.00998,-0.10166,-0.12039,-0.07311,-0.11985,-0.03107,0.24855,0.35917,0.25216,0.09463,0.23181,0.11566,-0.30862,-0.24010,-0.00875,-0.11381,-0.05443,0.10987,-0.00308,-0.02302,-0.13275,-0.11072,-0.16990,-0.12646,0.14181,0.27997,-0.00624,-0.15234,-0.02394,0.07050,-0.21230,-0.17702,-0.03238,-0.07104,0.17947,0.10807,0.06826,-0.02644,-0.08441,-0.10950,-0.17578,0.04083,0.13917,0.12624,-0.04521,0.03480,0.19773,0.09320,-0.12986,0.09175,0.09038,0.09765,0.16539,0.04958,-0.01744,-0.00066,-0.07205,0.06398,-0.08022,-0.03112,0.00747,0.08169,-0.18402,-0.18612,0.10133,0.29653,0.24011,0.40775,0.40192,0.37941,0.13112,0.01076,-0.05513,0.00045,0.04465,0.06947,0.10058,0.19119,-0.09275,-0.14051,-0.15677,-0.09839,0.24413,0.64686,0.80133,0.66696,0.63759,0.39427,0.02253,0.02345,0.00302,-0.12154,};
float weights_hidden_0[] = {-1.12805,1.26076,2.81343,2.68221,-1.06351,-1.61519,-0.26496,0.81185,-2.41702,-0.77888,-2.94922,-0.99675,2.87042,-0.37386,0.49954,-0.26434,-0.14984,};
float weights_hidden_1[] = {0.64304,-0.51138,-1.50466,-1.24199,-2.30727,0.34315,1.99165,-0.29654,2.45478,1.93649,-1.55565,0.79732,-1.26138,1.99619,-0.82216,2.48871,0.37438,};
float weights_hidden_2[] = {1.02390,-1.37788,-1.14919,2.87387,0.82440,1.33077,0.96666,1.31227,-1.34582,-2.91112,-1.34418,-0.02690,-1.30738,1.53891,1.53152,1.67529,1.23787,};
float weights_hidden_3[] = {2.66108,-2.00099,-2.54063,-1.55378,1.08115,-2.41048,1.61023,0.34572,-1.16743,-0.43100,2.15760,1.85382,-1.04694,-1.62965,1.94761,-1.13731,-0.13063,};
float weights_hidden_4[] = {0.40777,-1.78512,0.41923,-0.59695,-0.69753,1.68869,-2.06343,-2.41696,1.47288,2.54900,0.28130,-1.97188,2.72851,-0.92913,-0.37914,1.86488,-0.04798,};
float weights_hidden_5[] = {-2.34849,-1.09509,2.33987,-0.82294,-0.90844,-0.61746,1.03059,1.36419,1.08329,-0.47969,1.25219,3.56962,-1.68829,-0.67691,-2.12005,-1.47226,-0.78283,};
float weights_hidden_6[] = {-2.03058,2.26282,1.32504,-1.64251,-1.50730,-1.51484,-1.58753,0.65423,3.35089,-1.27188,1.77135,-2.29044,1.50191,-0.34293,-2.12887,1.32478,0.36460,};
float weights_hidden_7[] = {0.93981,-0.71133,-0.94412,2.40513,2.28310,0.94492,1.29300,-2.45545,-0.85450,1.90583,-0.88189,1.15422,-0.90423,1.68849,-2.60745,-2.50900,0.03604,};
float weights_hidden_8[] = {1.51055,2.18295,1.79103,-1.36316,-1.30495,-0.31623,-1.78757,-0.02090,-1.93061,-0.22060,2.11624,-1.90824,-2.61770,-0.23309,3.04497,-0.71019,-0.09652,};
float weights_hidden_9[] = {-1.60005,1.81363,-2.58436,-0.81459,3.55729,2.22530,-1.13786,0.76891,-0.66725,-0.30859,-0.77256,-0.23501,1.69433,-1.05638,0.99960,-1.34666,-0.76094,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};

/*
 * Scanner class
 * */


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


