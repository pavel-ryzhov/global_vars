#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;

float weights_input_0[] = {-0.00718,-0.06270,-0.06458,0.05058,-0.05259,-0.45677,-0.48555,-0.33712,-0.11346,-0.16295,0.04179,0.04487,-0.11628,-0.31582,-0.30359,-0.13456,0.06473,-0.00560,-0.00708,-0.03134,-0.04180,-0.09607,-0.22080,-0.31280,-0.30290,0.04673,-0.24357,-0.13038,0.04306,0.06480,-0.13134,-0.35937,-0.37180,-0.20083,0.01188,0.05517,0.03150,0.04588,-0.08203,-0.10682,-0.14798,-0.35069,-0.13079,-0.27527,-0.05783,-0.19800,-0.42241,-0.19737,-0.18702,-0.20705,0.02019,0.00728,-0.04588,0.04835,0.02649,0.04145,-0.00780,0.01006,-0.02264,0.06008,-0.10863,-0.28936,-0.41903,-0.14771,-0.30665,-0.14420,-0.17870,0.03856,0.21967,0.21312,0.05944,0.04893,0.03039,0.04439,-0.00410,0.00004,0.07473,0.04267,-0.23329,-0.01727,-0.08076,-0.17995,-0.03885,-0.18290,0.04006,0.30284,0.47131,0.20960,0.10996,0.04741,0.04576,0.06873,0.03104,0.05493,0.11171,0.08455,0.04222,0.08553,0.24244,-0.11382,0.09155,0.03008,0.15317,0.35128,0.35129,0.16817,0.07927,0.06356,0.05271,0.02485,0.04832,0.12253,0.26243,0.27108,0.34699,0.25527,0.05498,-0.25635,-0.10547,0.11321,0.13274,0.19976,0.21852,0.15787,0.08625,0.07314,0.05125,0.02713,0.00896,0.15033,0.34158,0.31216,0.64239,0.51453,0.24680,-0.18460,-0.04346,0.04828,-0.03798,-0.20206,0.15340,0.09058,0.04891,0.06644,0.05207,0.03062,-0.03293,0.06486,0.31733,0.25654,0.35632,0.36586,0.24852,-0.01730,-0.05287,-0.11828,-0.26507,-0.32316,0.23766,0.06033,0.05587,0.07632,0.05180,0.03033,-0.03186,0.15092,0.32117,0.37291,0.69915,0.31590,0.29957,0.08044,0.23913,0.07977,-0.19388,0.05538,0.12264,0.13460,0.05456,0.07834,0.05445,0.02936,0.04194,0.30087,0.46555,0.78474,0.91442,0.85057,0.48684,0.26707,0.31768,0.19898,-0.12059,0.19987,0.10487,0.05218,0.06550,0.06481,0.04808,0.06491,0.11874,0.41876,0.54198,0.80203,0.62132,0.41167,0.00776,-0.07860,0.18951,0.24578,-0.04208,0.19000,0.09293,-0.06611,0.04996,0.07781,-0.00839,0.02539,0.17139,0.17195,0.28103,0.38076,0.13176,0.22227,-0.22899,-0.29409,0.21898,0.32677,0.01770,0.20540,0.12902,-0.06517,0.08842,0.06210,-0.01384,-0.02476,-0.05333,-0.11385,-0.13819,-0.05182,-0.15463,-0.04823,-0.08511,-0.08015,0.17115,0.28692,0.08708,0.10422,-0.04349,-0.12491,0.06772,0.03756,0.04200,-0.05271,-0.15198,-0.27633,-0.20576,-0.24462,-0.19383,-0.12951,-0.13845,0.03167,-0.22657,-0.03266,-0.16129,-0.24213,-0.28487,-0.04729,0.05496,0.03657,0.04443,-0.03737,-0.18673,-0.42010,-0.39140,-0.23501,-0.03242,-0.00391,-0.05146,-0.31474,-0.22450,-0.06073,-0.30089,-0.42269,-0.09964,-0.00445,0.01810,0.04458,-0.00056,0.02777,-0.23184,-0.40192,-0.64814,-0.20142,-0.15645,-0.14192,-0.20125,-0.27969,-0.13262,0.15911,-0.33951,-0.25656,-0.08911,-0.00157,-0.00567,0.10297,-0.00127,-0.01750,-0.05056,-0.30527,-0.35677,-0.31200,-0.27749,-0.07553,-0.02676,-0.23094,0.22843,0.22482,-0.07524,-0.20414,0.03547,-0.04257,-0.00449,-0.00082,-0.05670,};
float weights_input_1[] = {-0.00236,0.03441,0.03787,0.10678,0.21658,0.26610,0.29164,0.32933,0.39165,0.46675,0.30523,0.14831,0.08069,0.02669,0.05291,-0.14198,-0.18348,-0.00021,-0.00084,0.12069,0.04064,0.00343,0.22439,0.19418,0.42084,0.09080,0.17681,0.27230,0.08744,0.14601,0.03746,-0.08794,0.03032,-0.10008,-0.07549,-0.00458,0.07137,0.09842,0.04947,0.10512,-0.00787,0.34381,0.33199,0.26036,0.22196,0.08878,0.27581,-0.05262,0.18812,0.05579,-0.03701,-0.12967,-0.20760,0.05615,0.07178,-0.01978,0.11359,0.11105,0.19469,-0.05776,0.25451,0.03127,0.31661,-0.27686,-0.42974,0.02472,0.30579,0.04896,0.15796,0.06895,-0.11259,0.13180,0.07107,-0.01818,0.01488,0.13550,-0.16741,0.10685,0.03923,0.04110,-0.23147,-0.29260,-0.15609,0.08952,0.21565,0.09439,0.16452,0.09832,0.14970,0.13669,0.02122,-0.01965,-0.01074,0.09373,-0.00094,-0.04904,0.08471,0.00121,-0.05694,-0.34690,0.15047,0.44127,0.31573,0.15434,0.21542,0.24059,0.41017,0.20063,0.02101,0.01279,0.01268,0.07170,-0.09373,0.15148,0.07563,-0.08084,-0.43901,-0.69354,-0.31927,0.11487,0.24730,0.34753,0.38472,0.22789,0.35533,0.20373,0.02193,-0.03742,0.15276,0.25085,-0.00657,0.01261,0.01000,-0.42051,-0.76836,-0.67459,-0.47681,-0.45396,-0.34141,0.11437,0.42103,0.44207,0.39179,0.31992,0.03709,-0.01627,0.02612,0.19006,0.26338,0.45864,0.05582,-0.48300,-0.72232,-0.91067,-0.61017,-0.41823,-0.11742,0.20685,0.43694,0.42252,0.36899,0.25126,0.03778,-0.01623,0.03321,0.27627,0.06140,0.06810,-0.03839,-0.38315,-0.26524,-0.24409,-0.26897,-0.16879,-0.06281,0.01060,0.38777,0.08613,0.17495,0.25694,0.05729,0.00245,0.05985,0.07567,-0.28869,-0.01377,-0.15352,-0.12986,0.29773,0.01035,-0.23951,-0.34147,-0.36735,-0.23436,-0.13725,-0.08540,-0.06750,0.23940,0.03739,-0.01168,0.04745,-0.05379,-0.25166,-0.28958,0.06986,0.37950,0.32780,-0.06826,-0.35547,-0.19899,-0.26092,-0.27640,-0.41894,-0.12361,-0.12376,0.23875,-0.02966,-0.01608,0.02035,0.12670,-0.08029,0.08101,0.13923,0.33503,0.21965,-0.14671,-0.06419,0.06871,-0.19249,-0.31484,-0.27077,-0.20386,-0.10324,0.17186,-0.03004,-0.07652,-0.07630,0.08998,-0.15138,0.19060,0.22220,0.19693,0.35482,-0.06628,0.06986,0.13819,-0.03778,-0.23204,-0.25129,-0.17336,-0.07610,-0.00136,0.06878,-0.08273,-0.08945,-0.26345,-0.03920,0.28550,0.41091,0.46525,0.29169,0.09046,0.21825,-0.01063,-0.09851,-0.25647,-0.05817,-0.11564,-0.21342,0.12005,0.06751,-0.00767,-0.08127,-0.13419,-0.00222,0.31593,0.21923,0.07207,0.05690,0.03668,0.10191,-0.02678,-0.05324,-0.42468,-0.22713,-0.21894,-0.13552,0.08603,-0.00017,0.08546,-0.04335,-0.08675,0.08476,0.16220,0.09673,0.10347,-0.06273,-0.01381,-0.24622,-0.00732,-0.30066,-0.52303,-0.13683,-0.20633,-0.01146,0.08061,0.00029,-0.00723,0.14562,-0.00083,-0.10910,0.21976,-0.13317,-0.08234,0.06321,-0.13466,-0.43905,-0.57829,-0.33088,-0.26851,0.05078,0.06330,-0.01008,0.00138,0.00947,};
float weights_input_2[] = {0.01896,0.02367,0.01763,0.02003,0.23937,0.28161,0.21882,-0.03099,-0.06296,0.12861,0.08484,0.03195,0.22159,0.30231,0.23691,0.15126,0.09503,0.02586,0.01877,-0.01979,0.03823,0.08487,0.18418,0.13150,0.09899,0.06284,0.09599,0.14771,0.09803,-0.00679,0.05348,0.31223,0.33120,0.22312,0.03351,0.00862,-0.04246,-0.07660,0.01935,0.01492,0.07481,-0.02285,0.22056,0.11538,0.43393,0.36237,-0.01232,-0.15522,-0.09454,0.13113,0.30212,0.18071,0.06286,-0.06555,-0.05739,-0.00618,0.00219,0.03707,0.03685,-0.03874,0.16404,0.24354,0.37293,0.27408,-0.00837,-0.17597,-0.07782,0.04584,0.15871,0.06600,0.03615,-0.04376,-0.04163,-0.00533,0.01406,0.01918,0.10747,-0.02818,-0.01056,-0.02222,0.08729,0.03311,-0.06042,-0.10862,-0.04700,-0.10645,-0.03429,0.00164,0.01660,-0.05629,-0.06132,-0.01397,0.02048,0.00210,0.05928,-0.04786,-0.14573,-0.17081,-0.08562,0.27394,0.01233,-0.02428,-0.13212,-0.20783,-0.12158,-0.03381,0.00414,-0.05718,-0.06215,-0.01449,0.03220,0.06765,0.03484,-0.06188,-0.22826,-0.26327,-0.07012,0.22879,0.01182,0.16065,-0.08728,-0.26142,-0.17708,-0.05722,0.00523,-0.05722,-0.06271,-0.01991,0.01911,0.03890,-0.02634,-0.07609,-0.23820,-0.44861,-0.00306,0.20318,0.29212,0.10496,-0.13479,-0.24587,-0.14344,-0.00077,0.02501,-0.03458,-0.06023,-0.01546,0.02072,0.03070,-0.04734,-0.13802,-0.32420,-0.29086,-0.09972,0.10813,0.08670,-0.03906,-0.16931,-0.21852,-0.10849,0.00571,0.00464,-0.05714,-0.06175,-0.01576,0.01945,-0.05407,-0.13969,-0.16286,-0.31202,-0.26474,0.03094,0.16065,-0.17200,-0.22670,-0.19449,-0.17230,-0.05377,0.00358,0.02689,-0.00672,-0.06783,-0.02255,-0.02912,-0.07351,-0.13317,-0.25577,-0.24132,-0.18277,0.30781,0.07596,-0.26394,-0.22970,-0.19959,-0.12164,-0.03847,0.00825,0.07540,0.00687,-0.06639,-0.04033,-0.04310,-0.09561,-0.12699,-0.30202,-0.21147,-0.01694,0.12236,0.05462,-0.01206,-0.16760,-0.30554,-0.14355,-0.05839,-0.01559,0.05099,-0.01437,-0.07642,-0.05288,-0.06626,-0.11531,-0.30051,-0.36428,-0.19833,-0.17791,0.01877,0.10468,0.04928,-0.14659,-0.31645,-0.25611,-0.14249,-0.00862,0.06406,-0.00337,-0.07620,-0.02015,-0.04310,-0.08699,-0.27122,-0.23824,-0.03513,-0.05127,0.12628,0.21346,0.05980,-0.17730,-0.26864,-0.30391,-0.18483,-0.05033,0.00753,-0.00626,-0.06288,-0.02531,-0.04154,-0.12694,-0.19444,-0.27127,-0.31827,0.06342,0.24134,0.20068,0.11324,-0.08593,-0.19497,-0.23671,-0.23559,-0.08779,-0.06272,-0.11817,-0.06109,-0.08904,-0.06343,-0.08280,-0.16158,-0.28473,-0.17181,0.05000,0.09915,0.11294,-0.06483,-0.08828,-0.20919,-0.21479,-0.11680,-0.04824,0.02755,-0.05578,0.00582,-0.09780,-0.07934,-0.07069,-0.06812,-0.09190,0.03544,0.15989,-0.06367,-0.16643,-0.24393,-0.21529,-0.04390,0.03614,0.06123,0.03655,0.03762,-0.08277,0.00580,-0.02007,-0.11177,-0.14630,-0.18225,-0.07708,-0.02008,-0.05356,-0.20310,-0.18400,-0.19015,-0.12573,-0.04334,0.07305,0.06858,-0.04483,0.03157,-0.00283,0.05121,};
float weights_input_3[] = {0.00342,-0.00831,-0.02194,-0.00201,-0.05031,-0.03018,-0.05936,-0.04307,-0.11448,-0.27158,-0.22659,0.13087,0.12632,0.27414,0.33192,0.33411,0.04632,0.00718,0.00116,-0.05418,-0.00087,0.07084,-0.19610,-0.24022,-0.19576,0.02199,-0.27353,-0.28108,-0.10240,0.10799,0.09286,0.11156,0.21068,0.35033,0.05723,0.04389,-0.04625,-0.01684,-0.02549,-0.04453,-0.35546,-0.31801,-0.24943,-0.13568,0.12517,-0.00676,-0.03527,0.20607,0.06512,-0.02841,-0.04952,0.04771,0.09935,0.08772,-0.04712,0.02856,-0.07500,-0.10826,-0.28535,-0.16761,0.04112,-0.09686,0.30900,-0.00675,-0.20145,-0.37078,-0.15401,0.04901,-0.21511,-0.13731,0.04170,-0.01140,-0.04958,0.02855,-0.00778,-0.14269,-0.10258,-0.05646,-0.11961,0.15770,0.07189,-0.23285,-0.35192,-0.42335,-0.07023,-0.18680,-0.22556,-0.22410,-0.06613,-0.03341,-0.04644,0.04129,-0.02539,-0.09725,0.10284,0.02402,0.00963,0.21562,0.25372,-0.34141,-0.37985,-0.35306,-0.20280,-0.38679,-0.32571,-0.26388,-0.02719,-0.03996,-0.03389,0.03289,0.00829,-0.02536,0.19423,0.03291,0.36269,0.47746,0.44660,0.08220,0.20497,-0.19003,-0.12970,-0.48592,-0.41892,-0.25813,-0.02131,-0.08029,-0.03405,0.03729,0.00497,0.01276,0.24715,0.53089,0.16270,0.56868,0.25683,-0.02333,0.27201,0.11785,0.01504,-0.22631,-0.31550,-0.21856,-0.01432,-0.03043,-0.03507,0.07133,0.09147,0.16186,0.33726,0.22463,-0.13260,-0.25201,-0.00489,-0.01984,0.07813,-0.11105,-0.28125,-0.05305,-0.10720,-0.13601,-0.00297,-0.02523,-0.05453,0.04892,0.11318,0.40267,0.19021,0.15554,0.12913,-0.03280,0.04294,-0.37440,-0.08017,-0.52781,-0.13465,0.11576,0.11402,-0.02785,0.03392,-0.00996,-0.04649,0.05644,0.22415,0.56808,0.66198,0.37585,0.19234,-0.09104,-0.38750,-0.60139,-0.65105,-0.49249,-0.09843,-0.01470,0.14804,-0.06110,0.05646,-0.00564,-0.04696,0.06618,0.19228,0.67217,0.67227,0.72007,0.18449,-0.16756,-0.65508,-0.61736,-0.28350,-0.12808,0.11714,-0.11030,0.19568,-0.02876,0.10483,-0.00776,0.01302,0.13712,0.17748,0.38415,0.73448,0.68335,0.36293,0.25971,-0.20895,-0.13454,0.10061,0.02409,0.12790,0.08807,0.23366,0.05146,0.10250,-0.06282,0.00209,0.14600,0.16252,0.20907,0.39914,0.32043,0.20325,0.32382,0.00172,0.12862,0.14415,0.19176,0.17868,0.02967,0.20989,0.11108,0.03758,0.00324,-0.06847,0.12724,0.00652,-0.02460,-0.15999,-0.07935,0.00283,0.16372,0.04372,0.05383,-0.09597,0.02982,0.08939,0.20661,-0.00745,0.02565,0.04871,0.00825,-0.04663,0.08018,-0.04056,-0.26346,-0.22284,-0.06812,0.16894,0.34765,0.14116,-0.04695,0.16638,-0.15735,0.07577,0.07404,0.14653,0.17744,0.00199,-0.03999,-0.00096,0.01575,-0.01753,-0.24101,-0.35684,-0.38290,0.20480,-0.00815,0.22768,0.33838,0.12778,0.12476,0.05846,0.10232,0.16181,0.01185,-0.01048,-0.01203,-0.00130,0.03101,-0.12164,-0.04196,-0.04395,-0.29361,-0.29505,-0.02638,0.37234,0.30140,0.06784,0.06077,-0.01572,0.00834,-0.03218,-0.03594,-0.01180,-0.00095,-0.38795,};
float weights_input_4[] = {0.00364,-0.01262,-0.01543,-0.03529,0.03600,0.09990,0.07561,0.11984,-0.04496,-0.06706,-0.02763,-0.00188,-0.00280,0.12168,0.10004,-0.00205,0.00385,0.00863,0.00552,-0.02397,-0.05319,0.10365,0.07337,-0.02358,0.06679,-0.02123,0.05496,-0.07624,0.00436,-0.03997,0.03347,0.15908,0.20413,-0.00421,-0.00908,-0.02399,-0.02446,-0.04062,0.00765,0.10034,0.09380,-0.01229,-0.08693,-0.13385,-0.02785,0.16272,0.05152,0.10627,-0.05763,0.15923,0.17658,-0.00797,-0.00601,-0.06524,0.00535,-0.01378,-0.02427,0.05552,0.05416,-0.15330,-0.27685,-0.24214,-0.00341,0.02543,0.07824,0.09909,0.01175,0.31882,0.07680,-0.03918,0.00987,-0.00308,-0.02269,-0.01456,-0.01211,0.05947,0.06934,-0.03711,-0.10065,-0.10185,-0.04932,0.10877,0.04629,0.18289,0.20967,0.14612,0.05647,-0.02058,-0.01072,-0.00338,-0.02886,-0.04413,0.00194,0.09927,0.05364,-0.04105,0.08635,-0.06789,0.03097,0.16002,0.25924,0.21547,0.17630,0.15938,0.12442,-0.01215,-0.03977,-0.01547,-0.03017,-0.05854,-0.01645,0.04893,-0.09827,-0.12573,-0.10673,-0.10521,-0.03551,0.01094,0.13630,0.19992,0.11352,0.21878,0.07281,0.00216,-0.05633,-0.01923,-0.03021,-0.06419,-0.07587,-0.00012,-0.08970,-0.05118,-0.19745,-0.15277,-0.29517,-0.23559,-0.13180,0.08883,0.03565,0.07344,0.08134,-0.06689,-0.05813,-0.02902,-0.01793,-0.05040,-0.00849,0.00715,-0.06113,-0.00763,0.10623,-0.17346,-0.37252,-0.19978,0.02428,0.20359,0.05600,0.10972,-0.01298,-0.13421,-0.07631,-0.03984,-0.01900,-0.05090,0.00097,0.09719,0.13211,0.08609,0.12823,-0.09195,-0.27192,-0.03180,0.11471,0.18566,-0.00529,0.01086,-0.15416,-0.12684,-0.08308,0.00325,-0.04132,-0.07418,-0.00040,-0.00776,-0.00263,0.10772,0.03696,-0.03263,0.17136,0.35666,0.29859,0.07090,-0.20754,-0.23442,-0.35943,-0.15860,-0.06492,-0.01829,-0.04629,-0.08642,0.03353,0.05454,0.17821,0.05098,0.06169,0.11542,0.30274,0.49382,0.24507,-0.11459,-0.45592,-0.44709,-0.33347,-0.19950,-0.07890,-0.01596,-0.07241,-0.08545,0.03907,0.00725,0.06606,-0.00432,0.21773,0.30385,0.63375,0.69204,0.19974,-0.22161,-0.35123,-0.29251,-0.08542,-0.11025,-0.06604,-0.00799,-0.06548,-0.10070,-0.04843,-0.15408,0.00807,0.08446,0.10359,0.27734,0.40464,0.43691,0.08102,-0.17309,-0.23851,-0.15654,-0.09481,-0.08389,0.00569,0.05348,-0.01318,-0.10858,-0.13569,-0.27726,-0.10380,-0.04032,-0.02225,-0.08415,0.04625,0.05079,0.06938,-0.10201,-0.21568,-0.15654,0.08454,0.08661,-0.03389,0.04517,-0.02427,-0.10565,-0.13164,-0.20951,0.07851,0.02745,-0.04870,-0.21950,0.01583,0.08238,0.00470,-0.02294,0.08192,-0.03760,0.06475,0.11703,-0.02580,-0.00461,0.00223,-0.08345,-0.02165,-0.15574,-0.11830,-0.12298,-0.18464,-0.29077,-0.29091,-0.19660,-0.06876,0.11175,0.15137,0.10314,0.17933,-0.04501,0.00746,-0.04305,0.00195,0.01552,0.04764,-0.02772,-0.12186,-0.16305,-0.20162,-0.34986,-0.35393,-0.17403,0.03697,0.35251,0.19926,0.20257,0.19648,-0.01327,0.00795,-0.00030,-0.13647,};
float weights_input_5[] = {-0.00205,0.02356,0.02916,-0.12844,-0.26726,-0.38247,-0.37876,-0.48181,-0.27835,-0.01949,0.05464,0.06934,0.11104,-0.19660,-0.23453,-0.27956,-0.09410,-0.00342,-0.00104,0.00275,-0.03273,-0.01911,-0.13921,-0.21294,-0.37773,-0.32027,-0.16094,-0.09058,-0.02715,0.01945,-0.20046,0.01189,-0.10820,-0.11166,-0.07157,-0.05512,-0.02420,-0.04675,0.01524,0.03118,-0.10108,-0.35163,-0.10434,-0.26622,-0.30264,-0.06088,0.01823,0.06202,-0.18742,-0.16761,-0.24682,-0.04919,-0.05065,-0.09318,-0.02303,-0.04977,-0.00903,0.03348,-0.10712,-0.14527,-0.18471,-0.03057,-0.17512,0.12280,0.36955,0.13149,-0.07099,-0.20651,-0.23832,-0.05040,-0.02633,-0.02548,-0.02128,-0.04911,0.00896,0.03328,0.02527,-0.04061,-0.09865,-0.14882,0.08221,0.31017,0.42513,0.10422,-0.05733,-0.13506,-0.12659,-0.12258,-0.08255,-0.02704,-0.00597,-0.04826,0.02336,-0.06990,-0.04147,-0.01410,-0.15618,-0.17375,-0.02764,0.63362,0.32540,-0.13134,-0.10568,-0.21143,-0.23033,-0.18901,-0.07982,-0.03647,-0.00777,-0.01985,0.02591,0.00636,0.00688,-0.13640,-0.33922,-0.37579,-0.09853,0.47969,0.26023,-0.06100,-0.11803,-0.20951,-0.24328,-0.11506,-0.04996,-0.03635,-0.00561,-0.00505,0.03868,0.03114,0.17337,0.05353,-0.15352,-0.28287,0.17160,0.54889,0.17333,0.18139,0.09596,-0.03519,-0.07637,-0.03837,-0.06326,-0.09098,-0.00763,-0.00806,0.08010,0.09361,0.25960,0.16359,0.02917,0.11872,0.33409,0.24412,-0.07922,0.09035,0.26247,0.22322,0.00488,0.05653,-0.06873,-0.06439,-0.00789,-0.00710,0.08304,0.24227,0.21532,0.17255,0.01217,0.03474,-0.09189,-0.07365,-0.04982,0.02002,0.08847,0.17011,0.14042,0.14892,-0.02109,-0.06298,-0.03108,-0.02725,0.04774,0.12578,0.19014,0.06933,0.04514,0.01137,-0.20711,-0.03451,-0.00634,-0.12830,-0.00352,0.22939,0.14249,0.09429,0.00830,-0.07533,-0.02281,-0.03217,0.05334,0.01065,0.08509,0.09401,0.10508,-0.11435,-0.21692,-0.02429,0.23942,-0.08908,0.03587,0.18839,0.11765,0.11276,0.01827,-0.07283,-0.04079,-0.05747,0.05663,-0.02032,0.01260,0.01571,0.02173,-0.18858,-0.20818,0.06028,0.35469,0.00433,0.00471,0.23433,0.17345,0.13915,-0.00771,-0.05964,-0.04117,-0.04974,0.03553,-0.05977,-0.10100,-0.06766,-0.01472,-0.12570,-0.17013,0.17862,0.28731,0.02179,0.10481,0.11719,0.05066,0.11587,-0.01314,0.01658,-0.01646,-0.04721,0.03819,-0.01235,-0.24645,-0.18530,-0.17288,-0.17941,-0.11130,0.13383,0.23461,0.02437,0.00645,-0.02122,-0.12275,0.02135,0.02538,-0.01572,-0.02030,-0.06155,0.01093,-0.03520,-0.26572,-0.24408,-0.04503,-0.18415,-0.10555,0.22395,0.14657,0.12654,-0.00878,0.01313,-0.08714,-0.01929,0.07191,-0.01973,0.00283,-0.04373,0.04185,-0.06690,-0.18509,-0.18934,-0.03836,-0.09662,-0.04657,0.10289,0.16315,-0.02450,0.23899,0.19834,0.06583,0.11525,0.01731,-0.07099,0.00161,-0.00972,-0.03419,-0.06994,-0.00937,-0.12601,0.05326,0.03452,-0.16321,0.16739,0.44307,0.39366,0.34338,0.32950,0.18591,-0.00606,0.01445,-0.00087,-0.09944,};
float weights_input_6[] = {-0.00078,-0.01116,-0.01866,-0.01273,0.03944,0.33363,0.22319,0.28266,0.00944,-0.12409,-0.21952,-0.57818,-0.23931,0.09430,-0.02230,0.14983,0.09893,-0.00980,-0.00034,-0.02711,-0.00038,0.00113,0.08739,0.29503,0.41323,0.15643,0.26159,0.15506,0.06488,-0.18765,-0.15160,0.01396,0.11972,-0.14029,0.07090,0.00122,-0.01441,-0.02187,-0.01033,-0.03145,0.21780,0.44453,0.15640,0.35684,0.04025,0.09848,-0.02623,-0.21604,-0.05758,0.10529,0.04475,0.06177,0.13159,0.00929,-0.01150,0.01150,-0.01150,-0.04039,0.15049,0.33297,0.22045,0.24010,0.06478,0.12888,-0.04805,-0.05185,-0.23665,0.01987,0.12891,0.00271,0.08578,-0.05785,-0.01631,0.01177,-0.08450,-0.09887,0.03483,0.10702,0.51835,0.19825,0.05513,-0.04543,-0.10089,-0.08396,-0.11061,-0.05080,-0.08012,0.08784,-0.00507,-0.05803,-0.01965,0.00147,-0.13474,-0.09973,-0.22827,0.15535,0.32789,0.21617,-0.15216,-0.07769,-0.18281,0.13066,0.13866,0.37929,0.18880,0.21350,-0.15315,-0.06255,-0.02468,-0.01341,-0.16707,-0.24164,-0.25230,0.01428,0.05467,0.24498,0.23818,0.20151,0.03008,0.45122,0.41191,0.33217,0.17667,0.11428,-0.20235,-0.06442,-0.02279,-0.02021,-0.20581,-0.40521,-0.59570,-0.44403,-0.27459,-0.03908,0.27407,0.27390,0.33288,0.43638,0.14842,0.13744,-0.27518,-0.17616,-0.21358,-0.07221,-0.02251,-0.03288,-0.16947,-0.50096,-0.87064,-0.72327,-0.27423,0.09060,0.47473,0.70852,0.44090,0.25291,-0.06664,-0.36802,-0.49231,-0.52134,-0.21550,-0.08477,-0.02306,-0.03449,-0.17271,-0.65183,-0.31470,-0.24236,-0.49236,-0.04093,0.40469,0.48790,0.19010,0.26121,-0.05858,-0.27368,-0.47608,-0.44647,-0.24625,-0.09378,-0.03265,-0.03897,-0.20652,-0.22359,-0.11009,-0.37263,-0.44830,-0.28625,0.00345,0.26889,0.32121,0.45908,0.16797,-0.14888,-0.07258,-0.03691,-0.17870,-0.09347,-0.03096,-0.03679,-0.21305,-0.06328,-0.15689,-0.42860,-0.38195,0.08806,-0.03698,0.13105,0.13850,0.14961,0.02695,-0.11847,0.10821,0.10751,-0.13157,-0.09476,0.00898,-0.00051,-0.20829,-0.03725,-0.08202,-0.35162,-0.16530,-0.02571,0.02368,-0.01873,-0.20626,-0.19303,-0.12487,-0.15996,0.02625,0.06969,-0.09402,-0.06265,0.01324,0.00643,-0.08133,0.08314,0.19224,-0.17930,-0.12863,0.01320,-0.18060,-0.14882,-0.20323,-0.22928,-0.23406,-0.11596,0.18444,0.03298,0.01336,-0.04016,-0.03732,0.01562,0.00822,0.38819,0.48852,0.04098,-0.08672,-0.15263,-0.15006,-0.17432,-0.22365,-0.11971,-0.00833,0.04369,0.40931,0.01495,0.01724,-0.03391,-0.01775,0.03673,0.13903,0.44398,0.57852,0.30806,-0.13842,-0.06189,-0.16209,-0.06109,-0.22617,-0.01951,0.19451,0.34009,0.17661,-0.06873,-0.09979,-0.02767,-0.00023,-0.00508,0.05766,0.32827,0.38290,0.34141,-0.21028,-0.06925,-0.17460,-0.22307,-0.11840,-0.10165,0.22457,0.13183,0.08022,-0.08552,0.00419,-0.00452,0.00199,0.00434,-0.01470,0.07395,0.14683,0.12980,0.13313,-0.16849,-0.31597,-0.13835,-0.12518,-0.23012,0.02798,-0.12808,-0.11542,0.01868,0.00789,0.00117,0.37779,};
float weights_input_7[] = {0.00164,0.04837,0.04695,0.08366,0.29015,0.58597,0.60148,0.55485,0.15247,-0.20857,-0.27423,-0.27334,0.17061,0.23865,0.26597,0.22862,0.05797,0.02281,0.00250,0.04333,0.09597,0.06755,0.09594,0.45591,0.43004,0.21847,-0.02501,-0.18564,-0.17908,-0.02074,0.12782,0.13193,0.25179,0.06654,-0.03630,0.03465,0.00154,-0.01482,0.03524,-0.05862,0.22586,0.37626,0.20713,0.20402,0.03463,-0.10994,-0.07782,0.00432,0.19480,0.20029,0.19321,0.12541,0.00517,-0.02807,-0.05621,-0.04316,-0.02510,-0.05312,0.14430,0.05411,0.25335,0.09273,-0.02860,-0.20552,-0.24643,-0.15042,0.08031,0.06099,0.15151,-0.06059,-0.05995,-0.06611,0.00232,-0.03993,-0.00398,-0.07829,-0.10325,-0.16359,0.02449,-0.11597,-0.20191,-0.21083,-0.31714,-0.12521,0.01017,0.06698,-0.09088,-0.09920,-0.13273,-0.07395,-0.01256,0.00296,-0.07716,-0.22408,-0.14954,-0.16975,-0.19603,-0.08134,-0.08641,-0.26360,-0.21998,0.05292,0.19882,0.10777,-0.05143,-0.06335,-0.12047,-0.07910,-0.01660,0.04262,-0.08492,-0.17856,-0.18732,-0.27904,-0.02917,0.18536,0.33203,-0.02971,0.02114,0.19297,0.39798,-0.02857,-0.05853,-0.11733,-0.13296,-0.07843,-0.01526,0.04514,-0.07494,-0.27613,-0.45101,-0.21275,-0.04831,0.40620,0.27282,0.00571,0.31490,0.23978,0.10099,-0.03237,-0.25510,-0.12598,-0.10872,-0.07968,-0.02348,-0.00567,-0.05924,-0.28771,-0.41861,-0.24103,0.01471,0.30455,0.30544,0.26601,0.32137,0.06998,-0.06233,-0.29007,-0.39676,-0.17792,-0.11409,-0.08106,-0.02305,-0.00595,-0.05960,-0.26739,-0.22524,-0.06213,-0.07660,0.19679,0.42119,0.26259,0.16209,0.24768,0.13151,-0.09342,-0.00329,-0.16623,-0.11868,-0.07441,0.00445,0.01894,-0.02089,-0.14213,-0.14685,-0.26379,-0.33278,-0.27997,-0.07760,-0.25509,-0.20278,0.20880,0.31354,0.16654,0.27647,0.14779,-0.09164,-0.06309,0.01185,0.04751,0.01374,0.01613,-0.33269,-0.60106,-0.59655,-0.07210,-0.10237,-0.35494,-0.33995,0.20578,0.13391,0.27760,0.26233,0.29675,-0.05161,-0.07649,0.03351,0.07014,0.06585,0.19195,0.10030,-0.29337,-0.35226,-0.13549,-0.27620,-0.30136,-0.17664,0.22045,0.18463,0.22139,0.22681,0.26755,-0.06177,-0.03104,0.03573,0.06847,0.12478,0.35981,0.27121,-0.16111,-0.14041,-0.11402,-0.04753,-0.11194,-0.14342,0.13579,0.11929,0.02618,0.32233,0.14407,-0.07795,-0.02433,-0.00602,0.07338,0.11441,0.31655,0.21634,-0.11552,-0.31392,-0.02695,0.10758,-0.06657,-0.03700,0.00830,-0.02476,-0.00118,0.19272,-0.08433,-0.08460,-0.11023,-0.01228,0.08499,0.13910,0.20793,-0.06672,-0.32494,-0.27114,-0.03847,-0.17763,-0.15033,-0.22753,-0.14693,-0.12831,-0.00346,-0.03233,-0.14432,-0.03401,-0.01879,0.00043,0.05235,0.02133,0.14364,-0.02154,-0.07088,-0.15780,0.04026,0.08746,0.06561,-0.15103,-0.34737,-0.08342,-0.16630,-0.20902,-0.08454,-0.01117,-0.01618,0.00033,-0.03521,-0.09221,-0.19475,-0.25267,-0.00644,0.10763,0.01496,-0.09205,-0.10314,-0.51560,-0.47202,-0.34799,-0.51049,-0.36891,-0.01598,-0.02008,-0.00153,0.28135,};
float weights_input_8[] = {0.00262,0.04280,0.04137,0.02672,0.15172,0.16795,0.19793,0.07876,0.03391,0.20056,0.13272,0.09270,-0.03940,-0.13045,-0.18551,-0.35052,-0.01530,-0.00713,0.00486,0.04732,0.11595,0.09399,0.27113,0.16189,0.22741,-0.06042,0.23069,0.23640,0.14399,0.05094,0.02435,0.30858,0.05303,-0.29414,-0.00783,-0.03125,0.00912,0.02069,0.13578,0.23360,0.03744,0.33753,0.18036,0.18050,-0.11030,-0.02416,0.23404,0.17553,0.19429,0.29232,-0.13164,-0.09256,-0.00946,-0.04256,0.01070,-0.00992,0.05528,0.15877,0.01109,0.02254,-0.00013,0.11082,0.00831,0.09056,0.41273,0.43329,0.44275,0.17158,-0.01964,-0.01900,-0.02308,-0.01489,0.00810,-0.01232,0.07144,0.05092,-0.21608,-0.12647,0.04059,-0.21436,0.12073,0.18272,0.45145,0.59482,0.35158,0.23767,0.12277,-0.01211,-0.03043,-0.01846,0.00103,-0.02265,-0.00533,-0.08450,-0.21906,-0.21837,-0.30258,-0.25450,-0.10822,0.41727,0.45331,0.36538,0.35371,0.45412,0.14031,0.01579,-0.03647,-0.01438,-0.00195,0.01589,-0.02463,-0.05294,-0.29359,-0.47508,-0.61366,-0.50794,-0.06290,0.15710,0.05296,0.06519,0.23664,0.38110,0.11317,-0.00967,-0.04325,-0.01624,-0.00257,0.01018,-0.01157,-0.11156,-0.27210,-0.49148,-0.50740,-0.75805,-0.36454,-0.04570,-0.36364,-0.21544,-0.02805,0.31200,0.01427,-0.00993,-0.03960,-0.01444,-0.01132,0.00206,0.03339,-0.01893,-0.38665,-0.48919,-0.42565,-0.15792,0.04224,0.05183,-0.06680,-0.31561,0.19789,0.14895,-0.28631,-0.14451,-0.04615,-0.01873,-0.00758,0.00111,0.03280,0.02058,-0.21789,-0.30551,-0.78024,-0.14158,0.07545,0.38752,-0.10858,-0.21938,-0.30361,-0.19068,-0.26232,-0.19361,-0.05125,-0.01981,-0.10633,-0.08663,-0.11786,-0.01243,0.02144,-0.39644,-0.63749,-0.55799,-0.33425,-0.13464,-0.37944,-0.16385,-0.03894,-0.13284,-0.23993,-0.12132,-0.08742,-0.02229,-0.09520,-0.09940,-0.17214,-0.11170,0.02599,-0.25623,-0.24771,-0.21636,-0.09266,-0.11924,-0.18230,-0.18997,-0.02556,-0.07223,-0.26862,0.00419,-0.01700,-0.02881,-0.10565,-0.11917,-0.16776,0.02671,-0.04971,-0.10835,-0.07514,-0.03507,0.08307,-0.02185,-0.18277,-0.24386,-0.11804,-0.17383,-0.33329,-0.02278,0.00514,0.00398,-0.10353,-0.12669,-0.02179,0.10511,0.16694,0.10328,0.02222,0.09875,-0.03662,-0.13517,-0.16869,-0.36848,-0.12877,-0.21114,-0.23257,0.02790,0.02463,0.00928,-0.00395,-0.09176,0.14051,0.28679,0.29176,0.41687,0.37511,0.15588,-0.07515,-0.23400,-0.01620,-0.16737,0.16258,-0.01449,-0.00231,0.09450,0.01825,-0.00619,0.00551,0.01773,0.15534,0.29912,0.11505,0.24540,0.34052,0.30887,-0.02605,0.25324,-0.09574,0.10465,0.15734,0.14189,-0.11065,0.12497,0.07083,-0.00800,0.00287,0.05537,0.23706,0.32786,0.15865,-0.01934,-0.04939,0.08002,-0.08410,-0.00705,0.29336,-0.09012,0.24238,0.11644,0.13933,0.15553,0.02333,-0.02863,0.00412,-0.01737,0.10679,0.09163,-0.04968,0.03130,0.08506,0.01721,-0.20439,0.04344,-0.06078,-0.15493,0.19100,0.33284,0.14789,0.15553,0.02169,0.00026,0.07902,};
float weights_input_9[] = {0.00542,0.05728,0.06084,-0.01251,0.11541,0.09541,0.18484,-0.04253,-0.11852,-0.04173,0.01912,0.06264,0.11174,-0.09950,0.02561,0.00258,0.08147,0.03114,0.00538,0.01645,0.09899,0.05282,0.03698,0.19273,0.03399,-0.06875,-0.06216,-0.03668,-0.05884,0.04548,-0.09246,0.13097,0.18743,0.04445,0.00862,0.01799,-0.03862,-0.04035,0.06174,-0.03817,0.07774,-0.03138,0.16326,-0.08418,-0.00918,0.08737,0.02747,0.08770,-0.02897,0.12235,0.09449,0.10014,0.01826,-0.06512,-0.07933,-0.04293,0.00526,0.01870,0.06760,-0.09795,0.02523,0.03454,0.09509,0.20914,0.16797,0.14686,0.13862,0.03617,0.18905,0.01138,-0.00865,-0.03947,-0.03822,-0.04184,0.02423,-0.04250,-0.07802,-0.13090,-0.20073,-0.26551,0.09400,0.28067,0.30274,0.27922,0.31605,0.21820,0.05096,-0.07699,-0.04182,-0.04835,-0.04673,-0.00989,-0.02385,-0.19453,-0.08149,-0.15692,-0.38555,-0.14045,0.13904,0.47267,0.39317,0.21443,0.28504,0.14622,-0.04236,-0.05605,-0.03132,-0.05392,-0.04630,0.04278,-0.00016,-0.00097,-0.14042,-0.41311,-0.39402,-0.36571,-0.01757,0.16381,0.17692,0.25819,0.33271,-0.00234,-0.06287,-0.06294,-0.02984,-0.05335,-0.04733,0.04193,0.04530,-0.04615,-0.19646,-0.27590,-0.31704,-0.29394,-0.13533,0.06620,0.18104,0.11396,-0.11026,-0.08891,-0.14299,-0.05471,-0.02438,-0.06555,-0.05196,0.03241,0.08894,-0.03363,-0.04106,-0.14081,-0.02411,0.05468,0.29567,0.24904,0.09456,-0.10823,-0.09724,-0.18636,-0.34877,-0.07743,-0.07167,-0.07224,-0.05056,0.03118,0.09295,0.15604,0.04582,0.04932,-0.15212,-0.02143,0.32057,0.40282,0.14144,0.12242,-0.10079,-0.17750,-0.03591,-0.06897,-0.07428,-0.06284,-0.07341,0.01260,0.07892,0.14284,0.05944,-0.13348,-0.25576,-0.25660,-0.08009,-0.08977,-0.12385,0.00112,0.14670,0.13600,0.08125,0.08119,-0.08235,-0.10324,-0.06130,0.02648,0.14463,0.09737,0.01884,-0.14687,-0.37715,-0.11507,-0.15722,-0.12684,0.05790,0.06874,0.02274,0.19361,0.13741,0.23003,-0.02218,-0.11196,-0.07417,0.04632,0.17739,0.26733,0.18039,-0.05476,-0.28418,-0.16297,-0.14346,0.11763,0.30207,0.21784,0.09879,0.20841,0.17329,0.26709,-0.02025,-0.09986,-0.05657,0.03448,0.20799,0.32097,0.17080,-0.09467,-0.19204,-0.17113,0.01679,0.28051,0.29910,0.20022,0.15040,-0.06582,0.08991,0.10670,-0.12515,-0.03473,-0.01708,0.04472,0.16613,0.16912,-0.02748,-0.19191,-0.50418,-0.24062,-0.00257,0.13414,0.33550,0.19551,-0.01502,-0.15438,-0.13758,-0.11509,-0.14160,-0.16051,-0.04534,0.00278,0.11451,0.08331,-0.38668,-0.56366,-0.32064,-0.29904,-0.21619,0.03811,0.08644,0.20272,-0.15941,-0.21242,-0.21094,-0.11609,0.03597,-0.04101,0.00738,-0.00239,0.01343,-0.01587,-0.22509,-0.36404,-0.37054,-0.10780,-0.04046,0.09878,0.08463,-0.13869,0.13263,0.04121,-0.05260,0.05518,0.03401,-0.06812,0.00788,-0.05543,-0.14809,-0.26690,-0.42276,-0.27196,-0.00508,-0.06943,-0.24471,0.04729,0.08541,-0.00019,-0.01725,-0.03590,0.06812,0.04200,0.02094,-0.00492,-0.10926,};
float weights_input_10[] = {-0.01533,-0.01022,-0.00451,0.07425,-0.09090,-0.09812,-0.17574,-0.09617,0.14348,0.14804,0.04417,-0.06843,-0.09597,-0.17119,-0.09541,-0.09260,-0.04585,-0.04151,-0.01414,0.04228,0.03342,-0.16775,-0.10421,0.05640,0.02695,0.04966,-0.06746,0.11199,0.02185,-0.03690,-0.02099,-0.34764,-0.27851,-0.11505,-0.02449,0.01472,0.05276,0.10688,-0.01201,-0.12000,-0.11293,0.16606,0.02980,0.23386,-0.04464,-0.16250,0.01117,-0.07906,0.09701,-0.25750,-0.19836,-0.08898,-0.03890,0.09202,0.04767,0.04504,0.08969,-0.02463,-0.02778,0.37107,0.25949,0.19368,-0.18633,-0.10733,-0.13553,-0.01487,-0.03764,-0.35612,-0.15681,0.02415,-0.01153,0.03262,0.05095,0.04405,0.00036,0.00057,-0.00584,0.31593,0.30889,0.19846,0.02430,-0.22062,-0.04676,-0.17109,-0.23814,-0.17261,0.00910,0.07103,0.03971,0.04188,0.06659,0.05972,-0.01627,0.01341,0.02304,0.26860,0.15269,0.10175,-0.06810,-0.39488,-0.22905,-0.06361,-0.15630,-0.02815,0.00892,0.07590,0.04915,0.06738,0.06614,0.06069,-0.01148,-0.05871,0.06055,0.26142,0.18129,0.20865,0.07723,-0.13154,-0.22379,-0.16404,-0.15435,-0.04475,0.12129,0.03920,0.05126,0.06720,0.06624,0.06290,0.08843,-0.02739,0.08048,-0.06030,0.28218,0.36199,0.39143,0.16846,-0.09470,-0.12331,0.10905,0.09609,0.14589,0.11638,0.04220,0.08734,0.06476,0.05799,-0.06223,-0.04799,-0.02913,0.01855,0.11500,0.37793,0.33992,0.12123,-0.04450,-0.03769,0.05135,-0.09370,0.16936,0.16346,0.14745,0.09965,0.06480,0.05919,-0.07057,-0.23664,-0.17206,-0.17503,-0.03042,0.13531,0.19334,-0.01542,-0.06849,-0.00083,0.02706,-0.08504,0.02921,0.10276,0.13598,0.05010,0.10056,0.09442,-0.04059,-0.05169,-0.16185,-0.15806,0.05599,0.20150,0.04561,-0.18506,0.04072,0.09111,0.06636,-0.01990,0.13210,0.05008,0.09634,0.14375,0.09516,0.10104,-0.10116,-0.16157,-0.22435,-0.08587,0.01768,0.07179,-0.20108,-0.41289,-0.14862,0.10654,0.26711,0.17008,0.15408,0.08346,0.12213,0.15530,0.08597,0.05821,-0.11162,-0.17285,-0.10474,-0.03499,-0.09334,-0.16721,-0.46880,-0.69622,-0.30680,0.09900,0.14755,-0.00885,-0.07795,-0.03728,0.08525,0.12292,0.06491,0.04933,-0.05588,-0.05867,0.02619,-0.00264,-0.07889,-0.16406,-0.31161,-0.56295,-0.25232,-0.00453,0.02576,0.00057,-0.01597,0.03713,0.08338,0.00902,0.02725,0.05821,0.04050,0.14361,0.30189,0.24658,0.27266,0.13315,-0.06968,-0.11743,-0.28754,-0.08680,0.16321,0.11956,0.06487,0.02583,0.11886,0.08279,0.06362,0.10105,0.09112,0.17802,0.21185,0.31418,0.28834,0.31022,0.14577,-0.07686,-0.04995,0.02600,0.03976,0.10071,0.09029,0.07601,0.03510,0.03630,-0.00859,0.13355,0.06093,0.18515,0.18592,0.20555,0.23183,0.28330,0.31491,0.15948,0.10633,0.16080,-0.18374,-0.21008,-0.03995,0.06049,-0.04827,0.12130,-0.01027,-0.00302,0.09711,0.21028,0.28954,0.27504,0.10775,0.22587,0.41499,0.12541,0.03935,-0.26838,-0.11876,-0.17495,-0.19963,0.03616,-0.04588,0.00090,0.23993,};
float weights_input_11[] = {0.00048,0.00131,-0.00047,-0.18665,-0.41125,-0.41833,-0.29218,-0.08189,-0.17047,-0.21766,-0.31334,-0.05381,0.18961,0.25430,0.10038,0.28079,-0.12753,-0.00167,0.00012,-0.03501,-0.15740,-0.04414,-0.38648,-0.66933,-0.44907,-0.10134,-0.20033,-0.31048,-0.32945,-0.21562,-0.03787,0.21071,-0.04095,0.47279,-0.12996,-0.07458,-0.03882,-0.11697,-0.09405,-0.01641,-0.22035,-0.54424,-0.24071,-0.15403,0.10507,0.22854,0.03119,0.11498,-0.11492,-0.07763,0.05013,-0.07752,-0.05674,-0.11926,-0.03724,-0.07443,-0.10988,-0.06282,-0.43893,-0.11963,0.06817,0.03462,0.09036,0.33220,0.21041,-0.53373,-0.27514,-0.15150,-0.19515,-0.41099,-0.10366,-0.10101,-0.03778,-0.07570,-0.10167,0.17516,0.18698,0.08993,0.11947,0.09063,-0.05069,0.20858,-0.31006,-0.58947,-0.46194,-0.23526,-0.57873,-0.53757,-0.33262,-0.10658,0.04176,-0.07399,0.08195,0.17026,0.14594,0.18175,0.07934,-0.09310,-0.13321,0.24090,-0.52330,-0.85325,-0.58056,-0.94305,-0.91272,-0.79220,-0.41756,-0.18322,0.04214,-0.07537,0.06899,0.17524,0.35266,0.34011,-0.02227,0.08018,-0.28648,0.50284,0.19713,-0.30890,-0.56256,-0.90735,-1.05663,-0.62505,-0.28992,-0.18471,0.04433,0.00355,0.02936,0.14059,0.35507,0.40675,-0.25120,0.21497,0.29200,0.52429,0.60608,0.22938,0.33591,-0.18626,-0.39503,-0.39105,-0.33042,-0.29550,0.04412,-0.02133,0.08421,0.20257,0.41495,0.44184,0.01247,-0.18627,-0.28540,0.04553,0.28024,0.68200,0.24834,0.45088,0.27652,0.10243,-0.29843,-0.16560,0.04051,-0.02422,0.07984,0.20128,0.30999,0.09287,0.08992,-0.02518,-0.24800,-0.20172,-0.01364,0.02391,0.44258,0.42638,0.17966,0.35792,-0.00942,-0.15268,0.07387,0.00953,0.07644,-0.05510,-0.01228,-0.18969,-0.23275,0.08639,-0.28657,-0.16706,-0.20418,-0.16381,0.19548,0.07140,0.11832,0.26196,0.23643,-0.12821,0.07651,0.00889,0.01037,-0.14240,-0.19968,-0.13916,0.10528,-0.28682,-0.07473,0.13241,-0.03207,-0.14269,0.23975,-0.01381,0.08426,0.12044,0.16495,-0.12984,0.12700,-0.03847,-0.02892,-0.21777,-0.17304,-0.12534,0.06444,-0.20558,-0.08308,0.27731,0.04246,-0.03897,0.18515,-0.00132,0.02034,0.25217,0.05158,-0.04070,0.12488,0.00688,-0.01597,-0.10178,-0.23201,-0.13333,0.19111,0.07733,-0.03601,0.38701,0.02853,-0.19486,-0.07978,0.13367,0.03430,0.33056,0.10619,0.12095,-0.04838,0.00613,-0.06350,-0.18042,-0.46043,-0.46109,-0.25272,0.22945,0.16652,0.35839,0.14996,0.21880,0.00284,0.37430,-0.11987,0.01251,0.24520,-0.00245,-0.03422,-0.01391,-0.12532,-0.26111,-0.26848,-0.32632,-0.31412,-0.06677,0.11667,0.07203,0.15684,-0.09038,0.02332,0.44440,0.05432,0.06424,0.23376,-0.03727,0.00122,-0.14862,-0.11361,-0.22951,0.05525,-0.20441,0.15037,-0.01401,0.25254,0.27164,0.04582,-0.08637,0.19609,0.41759,0.21416,0.16891,0.01305,-0.10838,-0.00000,0.03315,-0.13472,0.23597,0.51577,0.00644,0.06809,0.19386,-0.01179,0.37263,0.15698,0.39651,0.26171,0.58231,0.16848,-0.13945,0.01008,-0.00049,-0.16197,};
float weights_input_12[] = {0.00834,0.00691,0.00364,-0.01961,0.18051,0.17822,0.18918,0.03579,-0.10352,-0.13523,-0.05070,0.00676,0.18186,0.17068,0.22920,0.20039,0.10284,0.05122,0.00778,-0.03922,-0.01527,0.16686,0.08852,-0.00059,-0.05637,0.03442,-0.06267,-0.11372,0.02337,0.05236,0.06495,0.31354,0.39420,0.19684,0.04931,0.01722,-0.04193,-0.08784,0.00111,-0.05210,0.11227,-0.21213,0.05772,-0.10950,0.21776,0.26040,-0.12027,-0.03899,-0.09468,0.23125,0.35500,0.16112,0.04722,-0.07624,-0.05279,-0.03331,-0.04801,-0.08344,0.04082,-0.29101,-0.09087,-0.02421,0.15881,0.08933,-0.06153,-0.12367,-0.03940,0.23230,0.29568,0.07351,0.03143,-0.02113,-0.04342,-0.03486,0.00411,-0.10396,0.00264,-0.26941,-0.25162,-0.09565,-0.02415,0.08758,-0.09630,0.02278,0.18027,0.13816,0.08823,-0.01601,-0.01395,-0.03479,-0.05225,-0.03367,0.01400,-0.12545,-0.10133,-0.24642,-0.18438,-0.00089,0.14946,0.25546,0.15691,0.13982,0.12598,-0.01661,-0.01341,-0.05171,-0.02591,-0.05267,-0.05260,-0.03545,0.01631,-0.00734,-0.12786,-0.23108,-0.04371,-0.08907,0.02443,0.06194,0.14302,0.28936,0.13111,-0.10358,-0.12921,-0.04628,-0.02638,-0.05459,-0.05486,-0.03494,-0.03744,-0.05179,-0.10902,0.02941,-0.04405,-0.04811,-0.13623,-0.08797,0.22227,0.21634,-0.15288,-0.26436,-0.18681,-0.10862,-0.01940,-0.06712,-0.05219,-0.03459,0.04194,-0.08701,0.04214,0.03747,0.16086,-0.06784,-0.09513,0.02287,0.16266,0.06001,-0.16665,-0.15581,-0.25297,-0.13691,-0.11669,-0.07448,-0.05290,-0.03363,0.05631,0.10015,0.12796,0.17631,0.22820,-0.01096,0.02368,0.14083,0.10384,0.06846,-0.12744,-0.09734,-0.04544,-0.09515,-0.11011,-0.00787,-0.06949,-0.05396,0.07631,0.03200,0.04230,0.11382,0.09689,-0.04836,0.14528,0.11603,-0.03327,0.01508,-0.08575,-0.04586,-0.07609,-0.00986,-0.04780,-0.09184,-0.06481,-0.04901,0.16401,0.11043,0.12398,0.05907,-0.00836,0.06707,0.10971,0.19234,0.15793,0.07651,-0.23299,-0.12431,-0.05199,0.00292,-0.04643,-0.10068,-0.07512,-0.01568,0.18089,0.14941,0.08303,-0.04175,0.04888,0.13123,0.24502,0.41213,0.32220,0.16107,-0.11134,-0.01989,0.10966,0.11991,-0.01189,-0.08514,-0.05504,-0.02913,0.08446,0.01422,-0.10007,-0.03831,0.05760,0.15413,0.29958,0.45431,0.24019,0.19441,-0.00546,-0.14429,-0.02697,-0.02445,-0.07497,-0.00531,-0.01237,-0.04062,-0.03585,-0.23725,-0.30796,-0.36061,-0.42147,-0.05228,0.11146,0.14806,0.23666,0.17145,-0.22263,-0.30713,-0.18187,-0.08174,-0.13290,-0.14622,-0.05349,-0.08944,-0.10366,-0.33115,-0.33512,-0.47128,-0.35454,-0.26212,-0.10386,-0.01308,-0.04724,0.00192,-0.24446,-0.36135,-0.16388,-0.10633,-0.04378,-0.03193,0.00355,-0.10995,-0.12959,-0.21691,-0.30338,-0.29541,-0.31180,-0.26293,-0.28824,-0.18856,-0.24490,-0.11995,-0.07402,-0.01010,-0.03371,-0.06128,0.02363,-0.08766,0.00457,-0.03549,-0.12915,-0.27018,-0.40790,-0.29811,-0.21593,-0.23036,-0.40610,-0.26337,-0.18267,0.06848,-0.18335,-0.11350,0.08683,-0.06262,0.01170,-0.00340,-0.10927,};
float weights_input_13[] = {0.00000,0.00757,0.01090,0.03423,0.13064,0.50910,0.55877,0.63836,0.20218,-0.15414,-0.30545,-0.24974,0.16242,0.20635,0.31741,0.31886,-0.03400,0.02179,-0.00015,0.06528,-0.05501,0.01311,0.10099,0.43639,0.47940,0.36978,0.17049,0.06804,-0.14486,-0.00407,0.18710,0.18323,0.16593,0.17404,0.01363,-0.03288,0.06433,0.00628,-0.00093,0.12466,0.29918,0.12525,0.42239,0.18910,0.06764,0.10699,0.26368,0.19678,0.05015,0.18203,-0.02561,-0.04365,-0.04340,-0.03606,0.05904,-0.04627,0.07761,0.21841,0.06048,0.17942,0.27656,0.18442,-0.10076,0.12787,0.05474,0.05915,0.19296,-0.09339,-0.04203,-0.14990,-0.14531,-0.02001,0.07665,-0.04280,0.06815,0.21934,-0.14017,0.04117,0.00676,-0.17270,-0.33047,-0.17152,-0.16680,-0.08606,-0.27767,-0.19375,-0.37503,-0.18727,-0.11328,-0.00684,0.07394,-0.04084,0.10451,0.04375,-0.00597,0.04476,-0.11031,-0.19129,-0.26878,-0.18073,0.00800,-0.10772,-0.32768,-0.40499,-0.27732,-0.09492,-0.02591,-0.00867,0.07307,-0.03669,0.04057,-0.00141,0.06922,0.09782,-0.05250,-0.15440,-0.27273,-0.05993,0.18325,0.08707,-0.22127,-0.34931,-0.12953,-0.07470,-0.02085,0.00788,0.07134,-0.03736,0.03401,0.05256,-0.10065,-0.19295,-0.18286,0.01325,-0.04782,0.00134,0.19282,0.01913,0.16019,0.18009,0.02719,0.02143,0.02893,-0.00830,0.06376,-0.11030,-0.06672,-0.03001,0.19997,0.36135,0.40834,0.33720,-0.12815,-0.18773,-0.26654,0.11777,0.16036,0.32350,0.14570,0.10882,0.02440,-0.01245,0.06270,-0.10361,-0.09532,-0.15726,0.08164,0.10293,0.20295,0.12846,-0.01937,0.00093,-0.25484,0.37824,0.36726,0.16847,0.33787,0.01002,0.01324,-0.00506,0.07858,-0.09877,-0.15707,-0.52849,-0.69983,-0.50731,-0.30317,0.07500,0.27799,0.10909,0.17022,0.29639,0.19990,0.22393,0.31601,0.26854,0.04582,-0.00238,0.08541,-0.06944,-0.17608,-0.59245,-1.03313,-1.08381,-0.42781,0.34757,0.44089,0.22422,0.07721,0.40862,0.18628,0.31684,0.13576,0.43359,0.03428,0.00005,0.11834,-0.04810,-0.22128,-0.28727,-0.49213,-0.73384,-0.38794,-0.23589,-0.28740,-0.10042,-0.01040,0.43171,0.21204,0.19243,0.12083,0.33272,-0.06822,0.04621,0.12169,-0.04886,-0.09126,-0.03016,-0.06197,-0.33259,-0.20022,-0.44293,-0.19568,-0.14399,0.08206,0.22092,0.16694,0.14539,0.17150,0.20735,-0.05281,-0.00201,0.07358,-0.04338,-0.05182,-0.01528,0.01198,-0.23708,-0.36085,-0.11261,0.09550,0.09886,0.19666,0.13267,0.01623,-0.01115,0.15360,-0.07267,-0.09327,0.00966,0.06694,0.06558,-0.01949,0.13867,0.03715,-0.19166,-0.35305,-0.29363,-0.21812,-0.22470,-0.08138,0.17365,-0.15895,0.00012,-0.16928,-0.32640,-0.06189,0.05938,0.00033,0.00116,0.01517,0.09524,0.22170,0.03239,-0.18146,0.03818,0.06008,-0.07626,-0.30025,-0.38573,-0.26713,-0.38197,-0.49251,-0.27510,-0.01320,-0.00159,-0.00015,-0.04179,-0.00025,0.02991,0.06753,0.28904,0.13866,-0.09242,-0.43141,-0.39030,-0.66885,-0.62412,-0.62872,-0.69539,-0.48799,-0.14204,-0.02102,-0.00264,0.14762,};
float weights_input_14[] = {-0.00067,-0.01144,-0.01019,-0.06185,-0.13855,-0.03444,-0.04911,0.12837,0.05277,-0.15798,-0.10749,-0.12564,-0.28837,-0.26705,-0.08283,-0.15744,-0.07016,-0.01368,-0.00077,-0.01820,-0.03866,0.05527,-0.04924,-0.04108,0.03490,-0.09395,-0.11415,-0.20371,-0.09145,-0.17710,-0.08611,-0.18004,-0.06722,-0.23433,-0.05928,-0.03276,-0.01374,0.01982,0.04433,0.00829,-0.00236,0.03804,-0.17593,-0.22082,-0.29419,-0.09961,-0.04341,0.07681,-0.06280,-0.07295,-0.06789,-0.18863,-0.03052,-0.03019,0.04464,0.02487,0.02473,-0.02843,0.03118,-0.16758,-0.29790,-0.33116,-0.19082,-0.22618,0.00114,0.07396,-0.04521,0.11126,0.02617,-0.05289,-0.00537,-0.00204,-0.01443,0.02494,0.02125,-0.00829,-0.03631,-0.10037,-0.06830,-0.03058,-0.05133,0.00794,-0.07054,0.08650,0.08121,0.03313,0.11871,0.03842,-0.01556,0.00381,-0.01338,-0.02948,0.01771,0.02958,-0.17995,-0.08760,0.18458,0.09832,0.09660,-0.05057,0.15098,0.09903,0.11752,0.12809,0.24430,0.07632,-0.03224,-0.00691,-0.01463,-0.03560,-0.03382,-0.13004,-0.32721,-0.20179,0.12857,0.09487,0.09154,-0.12244,0.09877,-0.00197,0.06203,0.23329,0.24774,0.08884,-0.04698,-0.00951,-0.01552,-0.03726,-0.05862,-0.16260,-0.26903,-0.12159,-0.01390,0.14527,-0.19335,-0.30802,-0.29454,-0.02486,0.04085,0.06987,0.14889,-0.07318,-0.05274,-0.02470,-0.01137,-0.03040,-0.02176,-0.19244,-0.17761,-0.07404,0.15927,-0.07357,-0.24370,-0.26035,-0.09973,0.14948,0.13169,0.07122,0.02031,-0.13406,-0.11167,-0.02855,-0.00969,-0.03060,-0.00625,-0.00012,0.00424,-0.05427,0.17406,0.03420,-0.26010,-0.21512,0.12423,0.24061,0.08661,-0.04843,-0.12200,-0.13389,-0.11466,-0.02716,-0.00862,-0.03340,0.07773,0.03537,0.00988,0.07376,0.08287,0.05173,-0.09646,0.17227,0.41295,0.20433,-0.09618,-0.26855,-0.28162,-0.11253,-0.12906,-0.08705,-0.01236,-0.01938,0.15344,0.12759,0.14763,0.13728,0.11334,0.05358,0.11875,0.32295,0.29233,0.03096,-0.20809,-0.47379,-0.21544,-0.09391,-0.12839,-0.08378,-0.00822,0.01070,0.16888,0.10178,0.17679,0.14422,0.31360,0.39136,0.53491,0.49131,0.16204,-0.14356,-0.16032,-0.21315,0.13149,0.01480,-0.12205,-0.07937,-0.00270,-0.02883,0.04788,-0.08212,0.05728,0.18429,0.10286,0.29789,0.19438,0.17242,-0.00455,-0.03648,-0.15243,-0.08818,0.09635,0.07081,-0.00860,-0.04428,0.00198,-0.03629,-0.03296,-0.18602,-0.03406,0.08561,0.09208,-0.15576,-0.14096,-0.17160,0.00487,-0.03199,-0.16770,-0.11426,0.31429,0.24401,0.01297,0.04839,-0.01045,-0.03723,-0.02127,-0.14992,0.19424,0.13989,-0.02099,-0.24119,-0.05747,0.03261,0.10242,0.00616,0.13240,0.02746,0.22339,0.16917,-0.06836,0.00063,-0.00528,-0.03285,0.07537,0.03469,0.00860,0.01896,-0.23111,-0.34454,-0.17637,-0.00920,0.12442,0.23396,0.14564,0.04398,0.16440,-0.05665,-0.01843,-0.02320,-0.00199,0.03518,0.13133,0.12674,0.06547,-0.07661,-0.14258,-0.19890,-0.11783,0.00486,0.15719,0.35291,0.17598,0.05654,0.16192,0.01840,-0.01596,0.00221,0.04539,};
float weights_input_15[] = {0.00254,0.01734,0.01006,0.00646,0.07562,0.17362,0.08855,0.09023,-0.04776,0.11352,0.05888,-0.09296,-0.03926,0.16676,0.06101,-0.07424,-0.01300,0.00038,0.00230,0.00899,0.00702,0.04720,0.19651,0.07121,0.16217,-0.05894,0.09001,0.14840,0.05010,-0.13268,0.00482,0.19542,0.14223,-0.04321,-0.03144,-0.01588,-0.01689,-0.00685,0.04397,0.13381,0.06048,0.19627,0.00478,0.08431,0.20406,0.25693,0.19320,-0.02120,0.01603,0.12176,0.12002,-0.02651,-0.02832,-0.04628,0.00433,0.00152,0.02427,0.08299,0.05816,-0.06657,-0.13124,0.07906,0.23118,0.16065,0.10574,0.10096,0.05801,0.17136,0.05066,-0.05280,-0.01388,-0.01096,-0.01786,0.00140,-0.03781,0.08406,-0.01077,-0.00097,0.10467,-0.00354,0.08353,0.04175,0.02782,0.18746,0.12100,0.04395,-0.03558,-0.02144,-0.01806,-0.01059,-0.01835,-0.02483,-0.02295,0.11205,-0.01122,0.00994,0.10027,-0.15633,-0.19013,0.14378,0.11363,0.22433,0.17587,0.12390,0.01927,-0.03955,-0.05733,-0.01648,-0.02131,-0.01907,-0.03716,0.02822,-0.12396,-0.01652,-0.23942,-0.26427,-0.16101,0.11511,-0.03135,0.14420,0.06303,0.17732,-0.01713,-0.05694,-0.06352,-0.01816,-0.02307,-0.02406,-0.03212,-0.02710,-0.12311,-0.18828,-0.32669,-0.47382,-0.15246,0.08206,-0.07713,0.03411,-0.01111,0.11715,-0.01661,-0.05810,-0.06448,-0.00812,-0.00998,-0.01665,-0.03558,-0.02224,-0.26594,-0.18588,-0.21242,-0.19060,-0.20610,-0.00980,0.05481,0.10461,0.11596,0.07350,-0.03230,-0.11100,-0.06242,-0.01340,-0.01083,-0.01689,-0.03842,-0.13725,-0.15798,-0.19585,-0.34788,-0.21473,-0.19978,0.11862,-0.05341,-0.05448,0.01648,-0.01942,-0.21497,-0.13531,-0.06194,0.00040,-0.03999,-0.04292,-0.13750,-0.16191,-0.14325,-0.17247,-0.21249,-0.17200,0.19745,0.25006,0.02587,-0.08082,-0.17660,-0.19140,-0.38019,-0.14590,-0.05728,0.00515,-0.04711,-0.07704,-0.17099,-0.21626,-0.00155,-0.16629,-0.03452,-0.03858,0.26295,0.27097,-0.04182,-0.30890,-0.31296,-0.30920,-0.33396,-0.16475,-0.06217,0.00517,-0.07021,-0.11017,-0.19254,-0.22278,-0.21454,-0.19213,0.04626,0.06133,0.42816,0.24837,-0.19787,-0.46448,-0.37066,-0.37501,-0.31320,-0.11300,-0.03134,0.03207,-0.07164,-0.09244,-0.17026,-0.17089,-0.14953,-0.05812,0.18798,0.22314,0.23113,0.08222,-0.21122,-0.42446,-0.34471,-0.21692,-0.20328,-0.02823,0.06193,0.02808,-0.02110,-0.09019,-0.13013,-0.10077,0.04170,0.15724,0.35204,0.20802,0.07245,-0.07690,-0.04063,-0.24024,-0.09091,0.04758,0.06931,0.14422,0.01851,0.01902,-0.01748,-0.06183,-0.07150,-0.00746,0.21577,0.21897,0.13381,0.07545,0.04800,0.11935,-0.13697,-0.11706,0.13280,0.15388,0.05532,0.12174,0.00704,-0.00881,0.00285,-0.03030,0.02425,0.00490,0.13540,0.01707,0.01575,0.08525,-0.12780,-0.12513,-0.02159,0.03145,0.20884,0.16770,0.16808,0.07795,0.02174,-0.02416,0.00479,-0.00003,0.06481,0.05260,0.00004,-0.02274,-0.09693,-0.20245,-0.24862,-0.07222,-0.03654,0.05622,0.23314,0.27990,0.14292,0.06444,0.02075,-0.00048,0.06701,};
float weights_hidden_0[] = {0.80361,3.98775,-0.18080,3.47469,-0.73986,-0.70962,-2.97601,-1.76158,-0.02482,-0.75504,1.00748,-2.17926,-0.45598,-2.59922,-0.31021,-0.33214,-0.62562,};
float weights_hidden_1[] = {-1.54656,-1.62286,1.81780,-1.02038,0.94455,2.87184,0.83862,-1.64904,1.68245,1.44345,-1.73783,2.13700,0.43713,-0.89237,-0.38331,1.46046,0.31014,};
float weights_hidden_2[] = {-1.59536,1.94350,-1.36965,-1.03526,2.02881,-0.82800,1.05453,-1.21618,1.38891,-1.65349,-0.02524,-0.90787,-1.36036,-1.27904,2.29637,2.50393,-0.52664,};
float weights_hidden_3[] = {-2.18787,-0.82784,-1.23927,-2.01851,-2.02310,0.36889,1.72902,2.27618,3.38316,1.78580,1.39573,-2.16635,-1.32670,1.09543,-1.00627,-0.61223,0.34145,};
float weights_hidden_4[] = {1.32065,-1.01779,-0.73964,1.17212,1.77976,1.27389,-1.76782,-0.16616,-1.47646,1.71436,-2.58718,0.64232,2.45550,-0.33476,1.93942,-1.49760,0.42429,};
float weights_hidden_5[] = {-2.76992,-1.01624,-0.11118,1.51779,-0.78892,-0.71367,1.04499,1.79689,-1.77647,-0.90230,0.29299,3.81407,-0.57131,3.25384,-0.54809,-0.81169,0.37154,};
float weights_hidden_6[] = {2.04610,-3.01749,-0.35107,1.66526,-1.62183,0.92673,-2.53269,-1.90996,-1.07558,-1.48904,1.53441,4.56152,-1.15284,-1.65779,-1.05562,-0.76613,-0.06439,};
float weights_hidden_7[] = {-1.13491,1.63205,2.70250,-0.81881,0.99952,-2.01084,0.03048,1.99225,0.86639,0.96357,-2.21532,-2.17870,2.22811,1.05567,-0.56055,1.35745,0.94391,};
float weights_hidden_8[] = {2.77099,-2.71549,-0.24489,1.27860,-0.31513,-1.28197,3.60900,0.85351,-1.17352,-0.86532,0.93314,-2.59870,-0.30124,-2.32796,-0.10348,-0.67111,-0.44744,};
float weights_hidden_9[] = {2.29815,2.58973,-0.29454,-4.17321,-0.22169,0.00928,-1.03212,-0.21300,-1.66980,-0.17836,1.42521,-1.11689,0.04123,3.70770,-0.35750,-0.63557,-0.75368,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};

/*
 * Scanner class
 * */


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


