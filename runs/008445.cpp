#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{6,6,0,17,0,23,0,76,0,0},
{8,17,15,28,0,38,5,96,3,4},
{8,17,17,58,1,54,6,86,15,18},
{15,25,47,64,17,82,20,84,30,28},
{44,29,65,87,22,85,45,84,54,60},
{72,49,74,93,42,68,58,60,62,82},
{70,63,75,82,50,83,57,64,69,69},
{64,61,79,94,51,85,53,64,79,78},
{78,78,85,94,57,87,51,80,79,80},
{85,79,91,86,60,80,55,77,97,90},
{94,74,90,87,65,89,92,77,104,104},
{56,77,54,80,65,82,92,75,83,73},
{31,84,44,54,66,83,59,76,49,25},
{12,66,34,55,59,87,53,77,28,24},
{7,84,15,58,57,84,46,93,22,33},
{0,72,0,30,45,63,37,75,13,12},
{14,32,20,30,0,25,20,62,13,12},
{25,42,47,47,0,43,25,83,35,29},
{52,56,64,78,19,66,31,85,49,60},
{67,58,76,92,20,83,56,85,77,81},
{67,73,71,77,33,84,58,84,83,67},
{79,82,75,87,51,67,32,84,73,56},
{71,72,74,84,52,84,56,84,70,54},
{59,81,79,92,60,87,50,84,73,95},
{67,97,84,94,68,84,64,84,75,95},
{67,103,92,100,66,87,64,104,86,99},
{73,105,95,100,67,97,73,109,84,93},
{89,91,96,114,75,98,93,109,92,106},
{93,107,99,119,81,107,83,105,79,105},
{52,87,64,117,69,105,61,112,81,86},
{23,85,46,55,50,94,52,112,56,56},
{10,69,20,24,37,40,6,96,20,43},
{24,42,39,34,0,25,25,44,22,30},
{51,54,73,61,0,61,31,72,67,81},
{73,54,68,73,20,81,57,72,77,78},
{68,44,67,53,50,96,63,70,83,47},
{81,53,70,74,61,69,66,66,95,61},
{75,67,70,78,55,80,53,66,85,67},
{70,85,76,52,59,84,50,65,65,71},
{55,96,76,56,72,68,59,64,42,54},
{42,102,73,51,71,66,62,84,43,57},
{62,117,78,79,71,65,63,84,38,68},
{65,113,83,80,71,64,80,98,43,82},
{68,111,83,97,81,67,64,104,52,94},
{87,109,92,110,88,62,71,112,82,107},
{95,87,95,100,69,56,53,119,89,113},
{60,75,65,71,53,33,51,87,81,81},
{20,58,37,47,34,13,23,25,43,42},
{28,28,63,38,0,31,27,33,27,66},
{73,48,67,55,3,70,57,46,56,65},
{88,74,67,56,49,92,92,44,65,58},
{83,83,68,52,61,91,74,42,83,69},
{79,75,67,56,71,79,68,37,86,81},
{75,88,66,60,56,101,56,37,66,52},
{53,86,60,54,70,92,50,41,39,44},
{37,96,61,56,77,79,58,68,22,38},
{34,100,67,72,70,75,58,71,24,46},
{41,94,70,79,73,55,66,90,33,59},
{60,115,68,78,78,56,75,93,53,65},
{65,106,77,78,80,52,53,109,69,73},
{74,104,90,88,81,41,56,118,78,94},
{87,78,101,76,69,32,50,95,98,123},
{93,59,96,76,40,22,49,76,75,107},
{34,47,45,45,34,13,28,23,56,56},
{65,50,56,14,0,24,34,37,28,69},
{74,45,58,32,9,64,92,36,80,53},
{89,47,62,52,57,79,93,35,84,86},
{82,56,60,46,78,77,74,36,84,84},
{84,52,55,49,60,43,65,18,73,68},
{64,49,57,53,71,81,54,19,72,38},
{50,51,62,60,65,54,61,21,40,32},
{26,82,56,70,64,46,57,64,30,28},
{29,88,58,77,72,63,58,68,22,38},
{39,84,62,85,80,61,56,92,28,65},
{46,93,72,76,77,70,46,98,57,68},
{64,95,95,76,83,46,51,93,76,85},
{73,95,100,69,85,46,51,84,100,87},
{79,78,100,83,56,34,19,78,94,105},
{96,58,96,67,40,9,31,46,59,95},
{72,48,67,34,33,8,10,9,40,78},
{73,16,48,0,30,27,87,2,39,74},
{89,49,57,6,37,64,93,18,61,87},
{90,49,57,32,65,61,89,18,80,99},
{87,41,52,34,78,62,74,1,78,75},
{70,43,47,47,73,84,69,3,83,56},
{63,41,47,62,63,88,75,4,71,43},
{43,59,41,61,56,72,68,36,48,28},
{25,73,37,74,62,72,64,54,34,46},
{28,87,43,82,64,82,57,66,50,50},
{37,88,79,92,77,69,49,71,70,61},
{43,84,81,88,88,68,54,92,75,78},
{63,95,92,80,94,59,53,84,80,85},
{72,96,99,89,83,38,52,74,79,92},
{79,60,91,91,57,39,15,67,69,99},
{89,57,84,51,40,27,23,21,50,101},
{95,47,60,24,32,18,29,9,24,87},
{88,24,35,0,43,26,92,0,24,93},
{90,34,37,10,64,54,94,0,53,83},
{94,34,35,20,79,52,90,0,69,97},
{86,27,20,35,92,60,74,0,82,75},
{70,27,16,55,63,72,72,4,71,50},
{57,41,16,65,58,88,81,19,79,60},
{43,62,28,83,51,77,79,55,69,51},
{15,75,51,88,66,51,78,65,64,54},
{18,86,72,74,57,83,64,84,67,58},
{37,78,85,70,87,83,66,92,77,84},
{43,83,84,72,106,101,66,80,78,78},
{63,96,88,90,111,95,58,79,82,90},
{71,78,91,66,81,60,58,70,65,88},
{81,60,89,56,56,58,47,47,58,100},
{89,48,65,31,39,41,12,9,37,98},
{91,47,42,6,32,22,8,1,1,79},
{89,15,30,24,49,37,94,0,25,91},
{91,25,13,24,71,64,91,0,45,81},
{94,25,13,24,88,55,93,0,64,85},
{70,25,13,35,100,55,84,13,73,82},
{62,34,16,51,66,58,83,19,90,67},
{56,54,18,67,59,52,89,41,88,61},
{33,63,46,72,31,45,78,77,83,41},
{15,74,78,77,68,48,58,83,69,56},
{18,82,90,81,72,81,61,70,83,74},
{37,84,80,84,90,86,64,72,76,83},
{43,82,87,86,116,103,87,81,85,73},
{63,95,89,59,114,114,94,77,80,83},
{76,78,78,67,85,98,97,64,87,90},
{81,60,63,59,66,95,47,21,42,98},
{89,48,43,16,50,63,32,9,27,82},
{89,47,18,4,45,32,16,0,8,78},
{91,15,0,2,42,27,94,0,34,48},
{96,24,12,2,80,39,98,0,49,65},
{79,24,16,24,95,33,104,13,79,59},
{70,32,23,31,90,29,81,19,78,54},
{63,47,37,42,64,25,80,24,88,50},
{56,55,41,38,56,26,73,73,88,56},
{43,63,69,49,58,16,52,83,79,49},
{15,69,92,54,73,22,43,67,61,76},
{18,82,84,57,71,62,42,72,65,85},
{36,85,82,68,90,85,52,80,63,68},
{43,82,83,80,118,74,63,78,69,65},
{63,75,73,114,107,84,69,70,91,78},
{77,78,53,103,87,99,96,62,75,87},
{81,60,41,73,71,97,67,8,59,89},
{89,47,23,53,50,86,67,0,49,79},
{88,47,18,14,41,70,33,0,37,77},
{95,14,0,1,72,28,96,0,54,14},
{96,24,10,6,85,19,98,0,73,38},
{81,32,24,15,83,6,98,19,82,48},
{64,35,43,22,69,6,88,24,73,28},
{62,47,41,36,52,7,74,59,73,27},
{56,56,57,31,49,7,50,82,68,28},
{44,55,92,40,50,30,40,66,46,64},
{25,74,77,46,72,40,34,54,42,55},
{28,83,69,47,73,53,33,72,46,46},
{36,85,68,66,92,44,39,76,37,54},
{43,71,67,75,107,77,62,77,47,66},
{69,75,47,87,96,97,65,65,68,72},
{78,78,41,95,79,96,91,43,73,75},
{81,60,35,100,64,83,68,0,77,79},
{84,47,18,87,48,87,68,0,68,78},
{86,46,0,71,42,76,59,0,61,74},
{96,14,16,20,51,33,96,0,67,10},
{82,24,21,29,55,15,99,19,85,21},
{81,33,31,35,57,17,111,37,94,28},
{65,46,44,24,30,18,78,41,85,29},
{62,49,47,36,30,17,56,77,58,34},
{57,56,73,34,29,34,45,77,40,31},
{44,58,70,40,39,43,39,64,37,52},
{25,74,63,61,86,47,46,72,35,49},
{28,82,67,63,81,36,45,77,46,40},
{37,74,64,49,92,60,53,79,45,65},
{46,65,57,62,102,76,71,74,54,66},
{69,75,46,81,92,98,79,60,56,67},
{78,78,40,84,77,79,92,11,61,77},
{76,49,32,99,62,85,82,0,72,79},
{88,47,32,98,48,80,75,0,72,76},
{70,44,15,93,44,77,75,0,68,68},
{78,14,20,51,46,62,100,13,84,28},
{82,33,36,50,44,43,112,33,95,37},
{79,45,45,58,37,42,105,41,101,34},
{65,46,46,39,33,37,84,60,74,34},
{63,49,76,64,33,50,70,73,48,34},
{59,49,76,66,36,43,60,64,34,54},
{44,61,67,55,44,27,43,86,15,52},
{26,73,60,45,87,34,38,78,21,57},
{29,80,61,51,100,55,37,76,49,39},
{41,74,60,53,108,67,43,78,49,58},
{65,62,58,70,100,76,57,71,58,56},
{71,75,53,82,88,86,66,48,71,72},
{75,78,49,86,89,78,77,0,61,72},
{60,48,49,96,89,77,82,0,70,77},
{72,46,35,97,70,80,76,0,72,74},
{36,44,33,88,63,75,69,0,67,58},
{50,21,32,52,16,77,64,19,104,36},
{82,45,47,60,16,67,114,41,105,49},
{79,45,56,69,9,71,106,42,98,50},
{68,48,67,61,9,59,75,62,60,39},
{63,42,78,58,12,48,63,74,46,48},
{58,48,78,48,47,28,49,68,25,61},
{49,62,67,37,48,41,46,84,22,64},
{31,72,64,50,60,57,41,79,32,45},
{54,80,71,59,71,63,39,75,39,47},
{61,68,64,68,102,75,46,77,50,53},
{67,62,66,74,96,68,58,67,70,53},
{65,75,62,82,88,71,75,10,73,64},
{60,68,63,81,93,67,84,0,56,73},
{74,48,47,96,63,80,75,0,70,74},
{71,45,52,91,51,79,73,0,67,42},
{27,44,48,63,45,50,35,0,51,39},
{40,43,49,68,4,65,42,35,80,34},
{65,62,62,82,4,98,67,42,107,53},
{80,63,86,83,4,75,80,60,88,75},
{68,65,96,70,4,68,88,74,69,47},
{66,56,89,80,7,55,69,62,49,72},
{61,71,96,58,45,68,58,84,37,69},
{68,70,86,59,46,54,55,91,45,49},
{60,70,85,65,68,52,48,79,44,44},
{62,73,88,66,70,67,50,77,58,54},
{64,65,88,72,80,68,56,76,58,64},
{64,62,87,75,92,60,87,57,64,68},
{53,81,79,76,87,78,82,10,67,70},
{68,81,82,88,70,67,84,0,60,68},
{70,64,76,91,59,75,60,0,67,61},
{28,62,75,55,45,49,36,0,63,38},
{14,58,67,39,40,15,18,0,35,22},
{31,50,61,58,0,49,36,26,48,5},
{40,77,90,87,0,80,42,61,77,45},
{50,77,101,97,0,108,63,62,94,73},
{88,80,96,96,0,112,85,74,101,79},
{90,80,91,78,3,83,75,82,79,84},
{84,79,91,78,41,76,79,83,83,59},
{78,60,90,70,40,52,73,91,83,52},
{75,69,90,75,69,60,70,77,82,62},
{47,73,100,71,70,63,75,77,67,67},
{47,77,98,75,80,59,55,61,68,58},
{51,69,99,78,89,63,67,35,47,64},
{68,98,93,85,87,75,83,3,66,69},
{52,100,92,60,72,66,91,3,67,36},
{28,79,82,43,56,47,37,0,50,39},
{13,76,72,27,41,23,16,0,30,22},
{7,75,55,5,36,10,6,0,6,5},
{0,57,60,30,0,22,4,26,5,0},
{2,69,83,44,0,48,9,45,16,8},
{13,75,80,53,0,28,23,67,44,9},
{28,73,80,66,0,22,32,69,62,35},
{36,62,70,70,5,63,22,56,64,63},
{55,62,66,77,38,59,41,53,71,52},
{63,72,62,79,60,68,48,74,74,78},
{67,71,65,65,61,77,62,74,60,71},
{75,64,71,54,67,76,95,68,63,69},
{56,65,76,46,72,53,68,55,49,48},
{26,66,76,21,88,36,58,13,35,21},
{9,84,74,16,90,20,45,3,17,7},
{8,73,66,9,73,2,44,3,12,4},
{1,71,70,5,59,2,34,0,8,4},
{0,68,63,0,55,0,34,0,0,0},
{0,76,60,0,50,0,29,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void data_erase_valid()
{
    int i, j, k;
    bool seq, white_space;
    for (i = 0; i < n; i++)
    {
        seq = false; white_space = false; j = 0;
        while (j < m)
        {
            if (pict[i][j] == '.')
            {
                if (seq)
                {
                    k = j - 1;
                    while (k >= 0)
                    {
                        if ((pict[i][k] == '#') || (pict[i][k] == '%'))
                        {
                            pict[i][k] = '@';
                        }    
                        else
                        {
                            break;
                        }    
                        k--;
                    }    
                        seq = false;
                }    
                white_space = true;
            }    
            if ((pict[i][j] == '%') || (pict[i][j] == '#'))
            {
                if (white_space)
                {
                    seq = true;
                }
            }        
            if (pict[i][j] == '@')
            {
                white_space = false;
                seq = false;
            }        
            j++;
        }    
    }    
    for (j = 0; j < m; j++)
    {
        seq = false; white_space = false; i = 0;
        while (i < n)
        {
            if (pict[i][j] == '.')
            {
                if (seq)
                {
                    k = i - 1;
                    while (k >= 0)
                    {
                        if (pict[k][j] == '%')
                        {
                            pict[k][j] = '.';
                        }    
                        else
                        {
                            break;
                        }    
                        k--;
                    }    
                        seq = false;
                }    
                white_space = true;
            }    
            if (pict[i][j] == '%')
            {
                if (white_space)
                {
                    seq = true;
                }
            }        
            if (pict[i][j] == '@')
            {
                white_space = false;
                seq = false;
            }        
            i++;
        }    
    }    
}       


void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    int mid_v = 0;
    for (i = 0; i < komp; i++)
    {
        mid_v += dim[i][3] - dim[i][1];
    }    
    mid_v = mid_v / komp;
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            if ((dim[i][3] - dim[i][1]) < mid_v/2)
            {
                dim[i][5] = 1;
            }    
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    data_erase_valid();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
