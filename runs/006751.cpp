// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={26,19,29,-4,5,8,9,2,-4,-7,7,-10,-5,-7,-19,-4,12,13,-9,-1,11,-4,-9,-14,-14,-5,1,-15,-12,-10,-19,-8,6,-1,6,-2,1,10,-7,-13,-10,3,17,-5,9,1,-4,-6,10,8,-1,-14,-3,-1,2,-15,0,6,4,-12,-1,-18,0,-18,12,-5,0,10,29,22,2,9,-8,14,15,-2,6,11,15,23,5,-7,9,6,17,5,-7,-6,-6,-2,1,-1,-3,-5,11,16,20,14,22,3,9,-3,-11,-13,-14,-5,-22,-32,-17,-2,7,34,38,17,-5,-21,-2,-12,-1,-13,-23,-22,-14,-13,-12,-27,-15,8,25,17,-6,-18,-5,2,4,-17,-7,1,-3,-15,-4,-15,24,3,24,14,3,-18,-11,-15,-3,-9,-4,-9,-13,-12,0,1,3,-16,19,37,12,8,2,-7,6,-1,-5,-9,-1,-7,8,-9,1,-1,14,9,10,15,2,17,-2,-4,-4,10,0,-9,1,-10,-19,-6,17,4,7,8,12,12,6,-2,-6,6,7,3,0,3,15,-27,-8,-3,5,15,7,19,22,15,-12,16,4,-8,1,-2,-6,-22,4,9,4,-4,6,10,0,-2,-11,-2,4,-14,2,9,-5,-15,11,-9,-9,-9,-24,-13,-4,-10,-13,-9,-6,-12,-5,10,-20,-6,9,18,-14,3,-44,-9,-14,-5,-31,-14,-8,6,30,34,16,25,-11,30,24,12,-27,-5,-7,-3,-18,-11,-5,-13,-13,-18,-2,24,18,24,3,-8,13,8,10,0,-20,5,-8,0,-3,-12,-19,23,25,-20,8,-10,1,19,30,0,-7,22,-7,-14,-3,-34,-30,14,-7,-12,17,2,5,26,14,25,11,35,4,23,4,-4,-10,10,-4,5,0,-18,4,10,16,13,9,6,-21,15,-18,-9,1,22,18,27,-5,-14,-2,-19,15,9,-10,23,2,-2,-24,-3,1,17,28,11,6,-18,-22,-23,5,13,0,-21,-23,-25,-6,-26,-18,11,14,-22,-27,-32,-11,12,-7,10,-10,9,4,5,-7,-23,-5,25,2,-6,-39,-17,10,-21,-7,17,-7,11,-4,-32,-2,3,19,3,-10,8,0,-19,-6,3,4,-7,-3,-4,-3,9,12,22,4,-19,-2,-39,1,-8,-7,13,-11,0,-3,0,10,6,11,14,-31,-25,-3,-41,5,-15,13,11,-5,11,4,-5,4,29,30,22,3,-35,13,8,-17,-24,-6,-15,3,18,-4,1,1,18,0,-5,1,-10,9,-2,-6,-30,-14,-5,5,16,-8,10,0,17,-1,21,29,26,20,1,16,30,-3,-17,-18,-11,0,-27,-13,-2,-2,20,31,63,8,-3,10,3,16,1,12,-7,-4,-20,-12,-10,-15,0,0,-13,-4,-2,-9,4,-22,-17,4,6,-13,-1,-19,1,-3,-9,-22,-1,18,-4,8,5,-6,-2,-16,-9,-18,-15,-1,-4,7,-5,-11,-1,9,-6,-10,7,4,6,-10,-12,-10,-10,-6,8,8,4,10,-4,-7,-5,-5,-8,18,14,8,0,7,-2,-1,1,9,1,-3,13,13,12,8,1,8,-2,-7,-9,10,-10,-3,-1,-3,4,13,6,7,32,9,-14,2,-4,-21,-1,0,-8,3,-3,10,1,30,8,7,-2,-19,-5,-3,-14,-21,-24,-3,-18,3,0,7,8,11,-8,-3,4,6,1,1,-1,-16,-5,-7,-7,21,8,5,6,-9,-35,1,26,16,9,4,11,4,0,-4,-3,5,-18,-9,-15,-12,-35,8,-2,-9,10,14,3,5,-6,-8,0,2,-12,-20,-16,-28,-38,15,-9,-7,-14,5,7,15,4,0,4,-2,-11,-7,-19,-3,2,20,4,-1,-2,12,30,20,5,15,7,-8,-1,15,-7,7,16,18,2,-9,9,15,23,30,-5,-1,8,6,5,1,-14,15,22,15,21,9,16,5,-2,1,1,8,12,-7,-11,-13,9,13,41,15,46,22,-16,-19,-19,-3,-7,-1,0,-5,6,-5,22,46,24,105,34,78,31,-17,42,3,-11,-12,-13,13,-24,-65,-11,-30,-26,17,12,-37,-6,-15,-37,10,-1,-39,-9,-13,10,-5,6,-15,-49,16,23,22,-36,41,19,14,-2,-2,3,-31,-4,2,-2,-18,-35,26,-8,24,-19,15,-22,1,-29,-32,-13,0,-18,-5,-38,-9,22,-7,-36,43,-55,48,38,40,1,-15,32,-2,-6,22,3,59,37,2,-30,-15,-47,-24,-44,63,31,19,23,20,40,17,23,28,28,45,-33,-60,-89,22,-36,-5,15,-19,-21,-11,18,-11,20,-13,-17,51,12,-16,-32,19,-22,35,33,-19,-46,6,0,-2,5,-38,-64,54,-11,21,-30,-29,-12,7,15,6,25,28,5,-2,2,6,-9,8,-55,6,-50,-25,-47,9,2,-24,8,11,-4,2,58,28,10,38,12,22,-30,-22,-22,-5,-32,28,-7,21,-23,25,17,89,-11,38,-15,-28,3,18,-29,7,-45,-13,-29,-12,14,11,-12,-6,60,66,19,-14,-8,36,15,-20,-56,4,5,30,6,-4,-17,35,13,79,32,4,3,-10,55,25,-33,-14,-15,-12,-49,26,-11,-21,5,41,1,-28,2,-40,10,22,-10,17,7,15,-23,3,-25,9,-11,87,81,5,7,-33,-11,-13,-8,-40,4,-25,-32,-33,-17,-54,-28,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,80,1,19,33,27,-8,11,-39,-6,-52,-1,-40,-16,6,55,-18,13,-28,39,24,22,26,9,-7,-23,-49,-31,-37,-36,-16,45,35,0,6,24,-20,-13,12,15,-2,-41,16,36,44,-8,-46,7,-8,-17,3,4,14,35,12,1,-38,5,-6,12,-16,13,-54,-20,-40,-51,-7,-40,16,23,-5,4,21,-12,-30,-32,1,13,-14,-54,-3,47,-10,56,18,3,34,17,-31,8,1,-6,-27,13,-16,16,2,6,13,-22,-2,-1,41,8,-26,5,21,25,-41,-38,-14,-20,48,-12,-13,14,47,-29,21,-12,-6,-2,9,19,42,21,2,18,7,57,6,22,42,-51,-11,2,-56,-6,-1,-19,18,-18,-30,-44,42,4,-3,-34,-30,-1,50,-53,-24,14,9,-3,-65,1,-16,19,-17,-31,-34,-16,-40,-4,39,-30,-21,22,-37,-16,-34,34,23,-10,19,25,-61,4,22,20,-28,-32,-2,25,-10,12,-14,-6,10,-52,-17,26,-6,26,23,-14,28,-12,3,33,12,9,14,-26,31,29,19,70,23,6,-23,-16,-11,-1,20,47,7,7,-3,-12,6,31,2,47,44,-2,1,-4,-54,-17,12,-2,33,-32,46,-6,7,14,-57,45,34,4,55,-13,-23,-27,-13,-5,13,-18,-9,18,-17,-6,-11,30,13,14,-7,-9,12,-8,-19,-8,-12,-21,-2,-6,-2,-5,21,7,-16,-23,-13,-5,-9,-2,-6,-17,9,-32,-13,-11,-26,20,-23,-3,0,-14,-2,18,3,0,-6,8,-4,-32,-19,0,-46,-8,37,-2,-27,-7,2,5,-8,-22,-22,-4,8,-27,-40,-11,8,-33,31,34,-18,15,-2,11,13,11,10,40,-3,-20,-26,-14,8,-20,-4,32,0,-5,5,5,-22,4,-14,20,8,4,-37,-25,-24,-34,-32,43,29,2,-29,-16,-18,1,-2,4,8,8,23,3,2,-9,-27,35,31,-12,-25,0,-18,21,21,-4,13,10,-5,2,16,28,-27,17,42,17,-11,3,-21,-6,-5,-5,10,8,-7,-2,1,13,-23,12,18,12,12,4,-15,5,-18,-25,2,17,14,6,-6,13,-25,16,49,53,4,15,29,16,-11,-8,-6,14,3,20,11,7,-12,0,1,14,3,-5,24,8,-10,2,-10,7,-5,22,-22,0,-13,1,2,10,-2,-13,14,8,-6,-3,-18,-19,18,23,-26,30,25,-2,-21,25,34,37,20,23,-5,13,7,-4,-7,2,6,-11,-7,-15,-2,14,2,13,3,12,-16,12,-11,-15,-13,-32,-2,47,30,34,7,15,-5,-18,-11,4,6,-28,-38,-25,-15,9,12,1,-1,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,52,26,12,29,17,3,17,-23,-22,-9,7,-11,-9,-33,1,-4,29,10,-6,-2,-18,-20,-10,-5,-26,-9,0,-43,-14,-22,-28,-2,10,9,-1,-4,14,27,1,-17,-7,-36,-11,-36,10,-24,-7,5,33,-22,31,15,-4,-7,11,-36,10,-11,-9,-28,29,-6,4,-33,1,13,15,-6,13,24,-16,-1,-34,-8,-6,-2,2,-11,37,8,6,15,11,15,16,-19,4,-8,-32,-21,0,-5,6,18,44,28,-22,8,3,26,18,57,37,6,32,-2,-7,-38,2,23,3,-6,-15,-51,-16,-9,-9,25,43,-14,-22,8,-16,-25,-12,-34,-3,-63,-20,-8,-11,-36,17,10,-7,22,31,21,6,-1,1,1,12,-11,18,3,45,29,33,21,-1,24,21,18,23,3,3,3,1,-27,57,35,31,-16,13,5,-16,-16,18,21,3,19,9,4,13,-29,19,25,-7,-17,-24,13,-35,-12,1,-9,1,-12,-22,22,-17,13,52,29,24,-7,-10,8,10,-29,-16,-21,1,-11,-23,19,-7,9,32,15,-5,-28,-11,-10,7,6,1,3,2,-2,-13,12,-17,18,2,23,0,23,4,21,0,-5,15,-3,-18,-28,-8,9,20,18,54,-5,-23,-7,-14,-20,-8,1,-31,-17,-32,-36,-31,32,-3,-6,20,23,6,6,17,18,24,-7,-9,16,2,1,4,-45,-16,17,37,11,24,-20,-29,-2,-8,-2,-3,10,-2,-44,-24,-8,-15,-26,36,8,-6,-1,10,7,5,2,-31,7,8,5,-8,-18,-5,3,37,5,12,-2,-9,0,1,-49,-4,10,10,-7,12,-33,-20,8,18,-2,18,-13,23,-5,-18,5,9,6,11,-31,10,-1,10,8,37,8,25,1,4,11,5,-8,16,-4,17,2,-15,-18,8,24,28,20,19,18,5,8,11,-3,-33,-11,14,-5,-14,8,21,31,12,11,27,-23,27,-2,-2,-6,-7,0,-23,-14,16,0,4,31,-11,0,14,23,9,9,10,-6,0,4,-23,2,-6,-2,18,20,-27,-43,3,8,3,24,37,10,14,-4,0,-22,0,4,7,-2,4,-25,-36,-42,-13,16,23,3,14,18,5,-4,-2,11,11,18,-10,-26,3,-14,0,-39,20,1,-8,5,-10,-7,6,-11,-23,-10,27,0,11,-6,-8,-9,-13,11,9,14,-16,0,16,0,17,-24,26,6,13,-8,4,-11,-2,1,-19,15,0,-6,8,-5,-20,-18,9,16,-1,-5,-10,4,6,-27,-31,-21,-1,-15,9,-19,8,-3,19,-13,0,-2,-2,-28,3,-18,-23,-20,-22,-32,-24,-17,-11,-7,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) 
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			
			
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

