//Контурный анализ
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <complex>
#include <algorithm>
#include <assert.h>
#include <cmath>
#include <limits>

inline const std::complex<double> scalar_product(std::complex<double>& lhs,\
                                    std::complex<double>& rhs)
{
  return std::complex<double>(lhs.real()*rhs.real()+lhs.imag()*rhs.imag(),
                              lhs.imag()*rhs.real()-lhs.real()*rhs.imag()
                             );
}

const std::complex<double> scalar_product(std::vector<std::complex<double> > &lhs,\
                                          std::vector<std::complex<double> > &rhs,\
                                          size_t m)
{
  assert(lhs.size()==rhs.size());

  std::complex<double> result(0.0,0.0);
  size_t i=0;
  size_t j;

  m%=rhs.size();
  for(j=m;j<rhs.size();++j,++i)
    result+=scalar_product(lhs[i],rhs[j]);
  for(j=0;j<m;++j,++i)
    result+=scalar_product(lhs[i],rhs[j]);

  return result;
}

class AsciiImage
{
public:
  class bad_char
  {
  public:
    bad_char(const std::string& message):m(message){}
    bad_char(const bad_char& other):m(other.m){}
    bad_char& operator=(const bad_char& rhs){this->m=rhs.m;return *this;}
    std::string what(){return m;}
  private:
    std::string m;
  };

public:
  explicit AsciiImage(std::istream& in);
  void recognize(std::ostream& out);

private:
  enum Vector{NW=0,N,NE,E,SE,S,SW,W};
  typedef bool (AsciiImage::*m_ptr)();

  static const size_t N_PATTERN=66;
  static const size_t LENGTH=60;
  static const size_t N_NUM=2*LENGTH;
  static const size_t N_DIRECT=8; //При изменении правится .ctor(...), get_boundary(...)!
  static const char digits[N_PATTERN];
  static const double loops[N_PATTERN][N_NUM];
  static const double patterns_norm[N_PATTERN];

  AsciiImage(const AsciiImage&);
  AsciiImage& operator=(const AsciiImage&);

  bool nw();
  bool n();
  bool ne(); //++j
  bool e(); //++j
  bool se(); //++j
  bool s();
  bool sw();
  bool w();

  double loop_norm(const std::vector<std::complex<double> >& v);
  bool get_boundary();
  void length_cast(const std::vector<std::complex<double> >& src,\
                   std::vector<std::complex<double> >& dst,\
                   const size_t length);
  void reset()
  {
    start_row=start_column=0;
    boundary.clear();
    is_recognized=false;
    num.clear();
  }

private:
  std::vector<bool> bitmap; //бинаризованное изображение
  std::vector<std::vector<std::complex<double> > > patterns;
  size_t n_row;
  size_t n_column;
  size_t start_row;
  size_t start_column;
  size_t i;
  size_t j;
  size_t right_column;
  std::vector<std::complex<double> > boundary;
  Vector v;
  m_ptr directions[N_DIRECT];
  std::string num;
  bool is_recognized;
  bool has_frame;
};

bool AsciiImage::nw()
{
  if((i!=0) && (j!=0) && bitmap[(i-1)*n_column+(j-1)])
  {
    --i;
    --j;
    boundary.push_back(std::complex<double>(-1.0,-1.0));
    v=NW;
    return true;
  }
  return false;
}

bool AsciiImage::n()
{
  if((i!=0) && bitmap[(i-1)*n_column+j])
  {
    --i;
    boundary.push_back(std::complex<double>(-1.0,0.0));
    v=N;
    return true;
  }
  return false;
}

bool AsciiImage::ne() //++j
{
  if((i!=0) && (j!=(n_column-1)) && bitmap[(i-1)*n_column+(j+1)])
  {
    --i;
    ++j;
    (j>right_column)?right_column=j:j;
    boundary.push_back(std::complex<double>(-1.0,1.0));
    v=NE;
    return true;
  }
  return false;
}

bool AsciiImage::e() //++j
{
  if((j!=(n_column-1)) && bitmap[i*n_column+(j+1)])
  {
    ++j;
    (j>right_column)?right_column=j:j;
    boundary.push_back(std::complex<double>(0.0,1.0));
    v=E;
    return true;
  }
  return false;
}

bool AsciiImage::se() //++j
{
  if((i!=(n_row-1)) && (j!=(n_column-1)) && bitmap[(i+1)*n_column+(j+1)])
  {
    ++i;
    ++j;
    (j>right_column)?right_column=j:j;
    boundary.push_back(std::complex<double>(1.0,1.0));
    v=SE;
    return true;
  }
  return false;
}

bool AsciiImage::s()
{
  if((i!=(n_row-1)) && bitmap[(i+1)*n_column+j])
  {
    ++i;
    boundary.push_back(std::complex<double>(1.0,0.0));
    v=S;
    return true;
  }
  return false;
}

bool AsciiImage::sw()
{
  if((i!=(n_row-1)) && (j!=0) && bitmap[(i+1)*n_column+(j-1)])
  {
    ++i;
    --j;
    boundary.push_back(std::complex<double>(1.0,-1.0));
    v=SW;
    return true;
  }
  return false;
}

bool AsciiImage::w()
{
  if((j!=0) && bitmap[i*n_column+(j-1)])
  {
    --j;
    boundary.push_back(std::complex<double>(0.0,-1.0));
    v=W;
    return true;
  }
  return false;
}

AsciiImage::AsciiImage(std::istream &in):
    start_row(0),start_column(0),is_recognized(false),has_frame(false)
{
  char char_buf;
  size_t row=0;
  size_t column=0;
  std::string str_buf;

  while(std::getline(in,str_buf,'\n'))
  {
    std::stringstream str_in(str_buf,std::ios_base::in);
    ++row;
    column=0;
    while(str_in>>char_buf)
    {
      ++column;
      switch(char_buf)
      {
      case '.':
      case '%':
        bitmap.push_back(false);
        break;

      case '#':
      case '@':
        bitmap.push_back(true);
        break;

      default:
        throw bad_char("unknown char");
      }
    }
  }
  n_row=row;
  n_column=column;

  //шаблоны контуров
  patterns.resize(N_PATTERN);
  for(size_t i=0;i<N_PATTERN;++i)
  {
    patterns[i].reserve(N_NUM/2);
    for(size_t j=0;j<N_NUM;j+=2)
      patterns[i].push_back(std::complex<double>(loops[i][j],loops[i][j+1]));
  }
  //В предположении (8==N_DIRECT)
  directions[0]=&AsciiImage::nw;
  directions[1]=&AsciiImage::n;
  directions[2]=&AsciiImage::ne;
  directions[3]=&AsciiImage::e;
  directions[4]=&AsciiImage::se;
  directions[5]=&AsciiImage::s;
  directions[6]=&AsciiImage::sw;
  directions[7]=&AsciiImage::w;
}


double AsciiImage::loop_norm(const std::vector<std::complex<double> > &v)
{
  double result=0.0;

  for(size_t i=0;i<v.size();++i)
  {
    result+=std::norm(v[i]);
  }

  return std::sqrt(result);
}

bool AsciiImage::get_boundary()
{
  boundary.clear();
  if((0==start_row)&&(0==start_column))
  {
    i=start_row=n_row/2-2;
  }
  else
  {
    i=start_row;
  }
  j=start_column;

  if(has_frame)
  {
    while((j<n_column) && !bitmap[i*n_column+j])
      ++j;
    while((j<n_column) && bitmap[i*n_column+j])
      ++j;
    while((j<n_column) && !bitmap[i*n_column+j])
      ++j;
  }
  else
  {
    while((j<n_column) && !bitmap[i*n_column+j])
      ++j;

  }
  if(j>=n_column)
    return false;

  right_column=start_column=j;

  unsigned index;

  for(index=0;index<(N_DIRECT-1);++index)
    if((this->*(directions[index]))())
      break;

  while((i!=start_row) || (j!=start_column))
  {
    index=(v+5) & 0x07; //В предположении (8==N_DIRECT)
    while(!(this->*(directions[index]))())
      index=(index+1) & 0x07; //В предположении (8==N_DIRECT)
  }

  if(i==start_row && j==start_column)
  {
    ++right_column;
    if(has_frame)
    {
      while((right_column<n_column) && !bitmap[i*n_column+right_column])
        ++right_column;
      while((right_column<n_column) && bitmap[i*n_column+right_column])
        ++right_column;
    }
    start_column=right_column;
    return true;
  }
  else
  {
    reset();
    return false;
  }

}

void AsciiImage::length_cast(const std::vector<std::complex<double> > &src,
                             std::vector<std::complex<double> > &dst,
                             const size_t length)
{
  size_t old_length=src.size();

  dst.resize(length);
  std::fill(dst.begin(),dst.end(),std::complex<double>(0.0,0.0));

  if(length<old_length)
  {
    for(size_t i=0;i<old_length;++i)
      dst[(i*length)/old_length]+=src[i];
  }else
    if(old_length<length)
    {
      double index;
      double k;
      size_t j;

      for(size_t i=0;i<length;++i)
      {
        index=static_cast<double>(i*old_length)/length;
        j=static_cast<size_t>(index);
        k=index-j;
        dst[i]=src[j]*(1-k)+src[j+1]*k;
      }
    }else
      dst=src;
}

void AsciiImage::recognize(std::ostream &out)
{
  if(!is_recognized)
  {
    std::vector<std::complex<double> > cur_loop;
    double max=0.0;
    double cur_max;
    double nsp;
    double norm_cl;
    size_t best_pattern=std::numeric_limits<size_t>::max();
    size_t p;
    size_t shift;
    static const size_t SHIFT_FOR_69=5;

    while(get_boundary())
    {
      length_cast(boundary,cur_loop,LENGTH);
      norm_cl=loop_norm(cur_loop);
      max=0.0;
      for(p=0;p<patterns.size();++p)
      {
        cur_max=0.0;
        if(('6'==digits[p]) || ('9'==digits[p]))
          shift=SHIFT_FOR_69;
        else
          shift=LENGTH;
        for(size_t m=0;m<shift;++m)
        {
          nsp=std::abs(scalar_product(patterns[p],cur_loop,m)/(patterns_norm[p]*norm_cl));
          if(cur_max<nsp)
            cur_max=nsp;
        }
        if(max<cur_max)
        {
          max=cur_max;
          best_pattern=p;
        }
      }
      if((0==best_pattern) && !has_frame)
      {
        reset();
        has_frame=true;
      }
      else
        num+=digits[best_pattern];
    }
    is_recognized=true;
  }

  out<<num;
}

const char AsciiImage::digits[AsciiImage::N_PATTERN]=
  {
    '0','9','7','4','8','5','2','7','2','3','5','7','6','2','9','4','5','1','8',\
    '5','3','1','6','5','0','8','6','4','4','8','9','6','2','4','7','9','5','8',\
    '5','8','9','2','8','5','2','7','1','7','0','9','4','1','6','0','5','9','2',\
    '1','1','5','6','8','6','1','4','4'\
  };
const double AsciiImage::loops[AsciiImage::N_PATTERN][AsciiImage::N_NUM]=
{
  //0
  {
    -3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,3.0,\
    -1.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,\
    0.0,3.0,0.0,3.0,0.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,1.0,3.0,\
    1.0,3.0,3.0,1.0,3.0,0.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,0.0,\
    3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,2.0,0.0,\
    3.0,0.0,3.0,-2.0,2.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,\
    0.0,-2.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,\
    0.0,-3.0,-1.0,-3.0,-1.0,-2.0,-3.0,-2.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,\
    -3.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,0.0\
  },
  //9
  {
    -2.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,2.0,\
    0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,1.0,1.0,1.0,2.0,1.0,0.0,\
    1.0,1.0,2.0,1.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,1.0,-1.0,2.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-2.0,\
    1.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,-1.0,-2.0,-1.0,-1.0,\
    -1.0,0.0,-2.0,-1.0,0.0,1.0,0.0,1.0,2.0,2.0,1.0,1.0,0.0,1.0,\
    0.0,2.0,0.0,1.0,-1.0,1.0,-2.0,2.0,-1.0,0.0,-1.0,1.0,-2.0,0.0,\
    -1.0,-1.0,1.0,-1.0,1.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,\
    -1.0,-1.0,-2.0,-2.0,-1.0,-1.0,-1.0,0.0\
  },
  //7
  {
    -2.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,-2.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,-1.0,0.0,-1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,\
    1.0,0.0,1.0,0.0,1.0,-1.0,1.0,-1.0,2.0,-1.0,1.0,-1.0,1.0,0.0,\
    1.0,-1.0,1.0,0.0,1.0,-1.0,2.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,\
    1.0,0.0,2.0,-1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,-1.0,0.0,-1.0,\
    -2.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,0.0,\
    -1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0\
  },
  //4
  {
    -4.0,2.0,-3.0,0.0,-3.0,1.0,-2.0,1.0,0.0,3.0,1.0,2.0,3.0,-1.0,\
    3.0,-2.0,3.0,-1.0,3.0,-2.0,3.0,-2.0,3.0,-2.0,3.0,-2.0,-1.0,3.0,\
    -3.0,3.0,-4.0,2.0,-3.0,2.0,-1.0,1.0,0.0,3.0,-3.0,2.0,3.0,0.0,\
    3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,1.0,3.0,0.0,3.0,2.0,3.0,\
    1.0,-2.0,1.0,-2.0,-3.0,-2.0,1.0,-3.0,3.0,0.0,3.0,1.0,1.0,3.0,\
    1.0,-1.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,-3.0,2.0,-3.0,0.0,-1.0,-3.0,\
    0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,0.0,3.0,0.0,3.0,0.0,3.0,\
    0.0,3.0,-2.0,1.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,\
    -3.0,2.0,-3.0,2.0,-3.0,2.0,-3.0,1.0\
  },
  //8
  {
    -3.0,-3.0,-3.0,0.0,-3.0,1.0,-2.0,3.0,-2.0,2.0,-1.0,3.0,-2.0,3.0,\
    -3.0,1.0,-2.0,0.0,0.0,3.0,3.0,1.0,3.0,-2.0,2.0,0.0,1.0,3.0,\
    2.0,2.0,2.0,3.0,3.0,0.0,2.0,0.0,3.0,-2.0,-1.0,1.0,-3.0,1.0,\
    -2.0,0.0,-3.0,-1.0,3.0,-1.0,3.0,-1.0,2.0,-2.0,2.0,-3.0,1.0,3.0,\
    3.0,3.0,2.0,2.0,1.0,2.0,3.0,1.0,3.0,0.0,3.0,0.0,2.0,-2.0,\
    2.0,-2.0,2.0,-3.0,1.0,-3.0,0.0,-2.0,0.0,-3.0,0.0,-3.0,0.0,3.0,\
    0.0,2.0,0.0,3.0,-2.0,-1.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,1.0,-1.0,\
    -2.0,-1.0,0.0,-1.0,-2.0,-2.0,-2.0,-3.0,-3.0,-1.0,-3.0,0.0,-2.0,0.0,\
    -3.0,3.0,-2.0,3.0,-3.0,1.0,-1.0,-2.0\
  },
  //5
  {
    -4.0,0.0,-4.0,1.0,-4.0,1.0,-3.0,0.0,-4.0,1.0,-1.0,3.0,0.0,4.0,\
    0.0,3.0,0.0,4.0,0.0,4.0,0.0,4.0,0.0,3.0,0.0,4.0,4.0,0.0,\
    3.0,0.0,2.0,-2.0,0.0,-4.0,0.0,-4.0,0.0,-3.0,0.0,-4.0,2.0,-4.0,\
    4.0,0.0,1.0,2.0,-1.0,4.0,0.0,4.0,1.0,4.0,1.0,3.0,4.0,4.0,\
    4.0,2.0,3.0,0.0,4.0,0.0,4.0,-2.0,4.0,-2.0,2.0,-3.0,2.0,-4.0,\
    1.0,-4.0,0.0,-4.0,0.0,-3.0,-1.0,-4.0,-1.0,-4.0,-4.0,-4.0,-3.0,-2.0,\
    -3.0,0.0,0.0,4.0,-1.0,3.0,1.0,3.0,3.0,3.0,2.0,4.0,0.0,3.0,\
    -3.0,4.0,-4.0,1.0,-4.0,0.0,-3.0,-2.0,-2.0,-4.0,0.0,-4.0,3.0,-4.0,\
    0.0,-3.0,-1.0,-4.0,-1.0,-3.0,-3.0,1.0\
  },
  //2
  {
    -4.0,4.0,-3.0,2.0,-3.0,0.0,-4.0,-4.0,0.0,-3.0,1.0,-3.0,4.0,-2.0,\
    2.0,-2.0,0.0,-3.0,-1.0,-3.0,0.0,-4.0,-3.0,1.0,-3.0,1.0,-4.0,3.0,\
    -2.0,3.0,0.0,3.0,-1.0,4.0,0.0,3.0,0.0,3.0,0.0,3.0,2.0,4.0,\
    1.0,3.0,3.0,2.0,4.0,2.0,3.0,0.0,3.0,0.0,4.0,-2.0,3.0,-2.0,\
    3.0,-3.0,2.0,-3.0,3.0,-4.0,2.0,-3.0,3.0,-1.0,0.0,4.0,0.0,3.0,\
    0.0,3.0,0.0,4.0,0.0,3.0,2.0,1.0,3.0,0.0,4.0,0.0,0.0,-3.0,\
    0.0,-3.0,0.0,-4.0,0.0,-3.0,0.0,-3.0,0.0,-4.0,0.0,-3.0,0.0,-3.0,\
    0.0,-3.0,0.0,-4.0,0.0,-3.0,-3.0,1.0,-4.0,1.0,-3.0,2.0,-3.0,2.0,\
    -4.0,4.0,-2.0,3.0,-3.0,3.0,-2.0,3.0\
  },
  //7
  {
    -3.0,1.0,-2.0,1.0,-2.0,1.0,-2.0,1.0,-2.0,1.0,-2.0,2.0,-2.0,0.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-3.0,0.0,-2.0,\
    0.0,-2.0,-1.0,-1.0,-2.0,0.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,\
    0.0,2.0,0.0,2.0,0.0,2.0,0.0,3.0,0.0,2.0,0.0,2.0,1.0,1.0,\
    2.0,0.0,2.0,-1.0,2.0,-2.0,2.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,-1.0,\
    2.0,-1.0,3.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,0.0,2.0,-1.0,2.0,0.0,\
    2.0,-1.0,2.0,0.0,2.0,0.0,2.0,-1.0,2.0,0.0,1.0,-1.0,-1.0,-2.0,\
    -2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,0.0,-2.0,1.0,-2.0,0.0,-2.0,1.0,\
    -2.0,0.0,-2.0,1.0,-2.0,1.0,-2.0,1.0\
  },
  //2
  {
    -3.0,2.0,-3.0,1.0,-2.0,0.0,-3.0,0.0,-3.0,-2.0,-2.0,-2.0,-1.0,-3.0,\
    1.0,-3.0,1.0,-2.0,3.0,-2.0,3.0,-1.0,2.0,0.0,-1.0,-3.0,-3.0,0.0,\
    -2.0,1.0,-3.0,1.0,-2.0,3.0,-1.0,2.0,-1.0,3.0,0.0,3.0,1.0,2.0,\
    2.0,3.0,3.0,2.0,2.0,1.0,3.0,0.0,3.0,0.0,2.0,-1.0,3.0,-1.0,\
    3.0,-1.0,2.0,-2.0,3.0,-2.0,3.0,-3.0,2.0,-1.0,3.0,-3.0,3.0,-2.0,\
    2.0,0.0,0.0,3.0,0.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,0.0,2.0,\
    3.0,0.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,\
    0.0,-3.0,0.0,-2.0,-2.0,-1.0,-3.0,1.0,-2.0,1.0,-3.0,2.0,-3.0,3.0,\
    -2.0,2.0,-3.0,3.0,-3.0,2.0,-2.0,2.0\
  },
  //3
  {
    -1.0,2.0,-2.0,3.0,-3.0,2.0,-2.0,1.0,-3.0,0.0,-3.0,-1.0,-2.0,-3.0,\
    -1.0,-2.0,0.0,-3.0,3.0,-3.0,2.0,-1.0,3.0,-1.0,-1.0,-3.0,-3.0,1.0,\
    -2.0,1.0,-3.0,2.0,-2.0,3.0,0.0,2.0,0.0,3.0,1.0,3.0,3.0,3.0,\
    2.0,1.0,3.0,1.0,3.0,0.0,2.0,0.0,3.0,-2.0,3.0,-2.0,2.0,3.0,\
    2.0,1.0,3.0,1.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,-2.0,3.0,-2.0,\
    2.0,-2.0,1.0,-3.0,0.0,-3.0,0.0,-2.0,-2.0,-3.0,-2.0,-2.0,-3.0,-2.0,\
    -2.0,-1.0,-2.0,1.0,0.0,2.0,2.0,1.0,3.0,1.0,2.0,3.0,1.0,3.0,\
    0.0,2.0,-2.0,3.0,-3.0,2.0,-2.0,1.0,-3.0,0.0,-3.0,0.0,-3.0,-2.0,\
    -2.0,-2.0,-1.0,-3.0,0.0,-3.0,-2.0,1.0\
  },
  //5
  {
    -2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,0.0,1.0,0.0,2.0,0.0,2.0,\
    0.0,1.0,0.0,2.0,0.0,1.0,-1.0,2.0,1.0,0.0,1.0,-1.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,1.0,-2.0,1.0,0.0,2.0,0.0,\
    1.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,1.0,2.0,0.0,1.0,1.0,2.0,\
    1.0,0.0,2.0,1.0,2.0,0.0,1.0,0.0,2.0,-2.0,1.0,-1.0,1.0,-2.0,\
    0.0,-1.0,0.0,-2.0,-1.0,-2.0,0.0,-1.0,-2.0,-2.0,-1.0,0.0,-1.0,1.0,\
    2.0,1.0,1.0,1.0,2.0,2.0,0.0,1.0,0.0,2.0,-1.0,1.0,-1.0,2.0,\
    -2.0,1.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,-2.0,-2.0,-2.0,0.0,-1.0,\
    0.0,-2.0,0.0,-1.0,0.0,-2.0,1.0,-1.0\
  },
  //7
  {
    -2.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,\
    1.0,-1.0,0.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,1.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,2.0,1.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,\
    1.0,0.0,1.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,\
    1.0,-1.0,1.0,0.0,1.0,0.0,2.0,-1.0,1.0,0.0,1.0,0.0,0.0,-1.0,\
    -1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,\
    -1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,1.0\
  },
  //6
  {
    -2.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,\
    -1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,2.0,-1.0,\
    1.0,-1.0,1.0,0.0,1.0,0.0,1.0,1.0,-1.0,1.0,-1.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,\
    1.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,-1.0,1.0,-1.0,\
    0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    -1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //2
  {
    -2.0,1.0,-2.0,1.0,-2.0,0.0,-2.0,-1.0,-2.0,-2.0,0.0,-2.0,0.0,-2.0,\
    1.0,-2.0,2.0,-2.0,1.0,0.0,2.0,1.0,0.0,2.0,2.0,0.0,1.0,-2.0,\
    -1.0,-2.0,-2.0,0.0,-2.0,0.0,-2.0,2.0,-1.0,2.0,-1.0,1.0,0.0,2.0,\
    0.0,2.0,1.0,2.0,1.0,2.0,2.0,1.0,2.0,0.0,2.0,0.0,2.0,-2.0,\
    2.0,-1.0,1.0,-1.0,1.0,-2.0,2.0,-2.0,1.0,-2.0,2.0,-2.0,2.0,1.0,\
    0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,1.0,-2.0,1.0,-2.0,1.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,-2.0,1.0,-2.0,2.0,-2.0,2.0,\
    -2.0,2.0,-2.0,2.0,-2.0,2.0,-1.0,0.0\
  },
  //9
  {
    -2.0,-1.0,-1.0,0.0,-2.0,0.0,-1.0,1.0,-2.0,1.0,-1.0,1.0,-1.0,2.0,\
    0.0,1.0,0.0,2.0,0.0,1.0,1.0,2.0,1.0,1.0,2.0,2.0,1.0,0.0,\
    1.0,0.0,2.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,-1.0,1.0,0.0,2.0,-2.0,1.0,0.0,1.0,-2.0,0.0,-1.0,1.0,-2.0,\
    0.0,-1.0,0.0,-1.0,-1.0,-2.0,0.0,-1.0,-2.0,-1.0,-1.0,0.0,-2.0,1.0,\
    0.0,1.0,2.0,1.0,1.0,0.0,2.0,-1.0,1.0,1.0,0.0,2.0,0.0,1.0,\
    -1.0,2.0,0.0,1.0,-1.0,1.0,-2.0,1.0,-1.0,0.0,-2.0,1.0,-1.0,0.0,\
    -2.0,0.0,-1.0,0.0,0.0,-2.0,0.0,-1.0,1.0,-2.0,0.0,-1.0,0.0,-2.0,\
    0.0,-1.0,-1.0,-2.0,-1.0,-1.0,-1.0,0.0\
  },
  //4
  {
    -2.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-2.0,2.0,-1.0,0.0,-1.0,1.0,\
    -1.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,1.0,0.0,1.0,0.0,2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,2.0,-1.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,2.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,1.0,-1.0,2.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-2.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,1.0,-2.0,1.0,\
    -1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,1.0\
  },
  //5
  {
    -2.0,-3.0,-1.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,-1.0,-1.0,-3.0,1.0,\
    -3.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,1.0,-1.0,2.0,0.0,3.0,0.0,3.0,\
    0.0,2.0,0.0,3.0,0.0,3.0,0.0,3.0,2.0,1.0,2.0,-1.0,0.0,-3.0,\
    0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,3.0,-1.0,3.0,0.0,\
    3.0,1.0,0.0,2.0,0.0,3.0,0.0,3.0,1.0,3.0,2.0,3.0,1.0,2.0,\
    3.0,2.0,3.0,1.0,3.0,0.0,3.0,0.0,2.0,-1.0,3.0,-2.0,3.0,-3.0,\
    2.0,-3.0,1.0,-3.0,1.0,-2.0,0.0,-3.0,1.0,-3.0,0.0,-3.0,-1.0,0.0,\
    0.0,2.0,-1.0,3.0,-1.0,3.0,-1.0,3.0,-3.0,3.0,-2.0,2.0,-3.0,2.0,\
    -3.0,0.0,-3.0,0.0,-3.0,-1.0,-2.0,-2.0\
  },
  //1
  {
    -2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,\
    -1.0,0.0,-2.0,0.0,-1.0,-1.0,-1.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,0.0,\
    0.0,1.0,-1.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,-1.0,1.0,0.0,2.0,\
    2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,2.0,0.0,1.0,1.0,0.0,2.0,0.0,1.0,1.0,2.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,0.0,0.0,-1.0,1.0,0.0,2.0,0.0,1.0,-2.0,1.0,\
    -2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //8
  {
    -2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,0.0,1.0,\
    -1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,\
    0.0,1.0,2.0,1.0,1.0,1.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,-1.0,\
    1.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,\
    1.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,-1.0,1.0,-1.0,\
    1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-2.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,\
    -1.0,0.0,-1.0,1.0,-1.0,0.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,\
    -1.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0\
  },
  //5
  {
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.5,-1.0,0.9,-1.0,0.3,-1.0,0.0,-1.0,0.0,-0.6,0.4,\
    -0.1,0.9,0.5,1.0,0.9,1.0,0.4,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,-0.0,1.0,-0.6,1.0,-0.8,1.0,-0.3,1.0,-0.3,1.0,\
    -0.9,1.0,-1.0,0.6,-1.0,0.0,-0.4,0.6,0.1,0.7,0.7,-0.4,1.0,-1.0,\
    1.0,-1.0,1.0,-1.0,1.0,-1.0,0.5,-1.0,0.1,-1.0,0.7,-1.0,0.8,-1.0,\
    0.2,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.2,-1.0,\
    0.8,-1.0,1.0,-0.7,1.0,-0.1,1.0,-0.5,1.0,-1.0,1.0,-0.4,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0\
  },
  //3
  {
    -2.0,-1.0,-2.0,1.0,-2.0,1.0,-1.0,2.0,-1.0,2.0,0.0,2.0,0.0,2.0,\
    1.0,2.0,2.0,1.0,2.0,0.0,2.0,-1.0,1.0,-2.0,2.0,0.0,1.0,2.0,\
    1.0,1.0,2.0,1.0,2.0,0.0,2.0,-1.0,2.0,-2.0,1.0,-1.0,1.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,-2.0,-2.0,-2.0,1.0,0.0,2.0,\
    2.0,0.0,2.0,1.0,1.0,2.0,0.0,2.0,-1.0,2.0,-2.0,2.0,-2.0,1.0,\
    -2.0,0.0,-2.0,1.0,-2.0,-2.0,-1.0,-2.0,0.0,-1.0,2.0,-2.0,-1.0,0.0,\
    -1.0,2.0,-2.0,2.0,-2.0,2.0,-2.0,0.0,-2.0,0.0,-2.0,-2.0,0.0,-2.0,\
    1.0,-2.0,2.0,-2.0,2.0,-1.0,2.0,0.0,2.0,1.0,0.0,2.0,-2.0,1.0,\
    1.0,0.0,1.0,-2.0,0.0,-2.0,-1.0,-1.0\
  },
  //1
  {
    -2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,-2.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,2.0,0.0,1.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,2.0,1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,1.0,-1.0,1.0,-2.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //6
  {
    -2.0,0.0,-2.0,1.0,-2.0,2.0,-1.0,1.0,-2.0,2.0,-1.0,2.0,0.0,2.0,\
    0.0,2.0,0.0,2.0,1.0,2.0,2.0,1.0,-1.0,-1.0,-1.0,-2.0,-1.0,-2.0,\
    0.0,-2.0,2.0,-1.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,1.0,0.0,2.0,\
    -1.0,2.0,-1.0,2.0,-2.0,1.0,-2.0,2.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,\
    -2.0,-1.0,-1.0,-2.0,0.0,-2.0,1.0,-2.0,-1.0,2.0,0.0,2.0,1.0,2.0,\
    2.0,2.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,-1.0,2.0,-2.0,1.0,-2.0,\
    1.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,-1.0,-2.0,-2.0,-2.0,-2.0,-1.0,\
    -2.0,-1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0\
  },
  //5
  {
    -3.0,0.0,-1.0,-2.0,0.0,-2.0,2.0,-2.0,-1.0,0.0,-2.0,0.0,-2.0,1.0,\
    -2.0,1.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,0.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,2.0,-1.0,2.0,0.0,\
    1.0,2.0,0.0,2.0,0.0,2.0,1.0,2.0,0.0,2.0,1.0,2.0,2.0,1.0,\
    2.0,1.0,2.0,1.0,3.0,-1.0,2.0,0.0,2.0,-2.0,2.0,-2.0,1.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,-1.0,-2.0,-2.0,-2.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,1.0,1.0,0.0,2.0,-1.0,2.0,0.0,2.0,0.0,\
    2.0,2.0,2.0,2.0,1.0,2.0,0.0,2.0,-2.0,1.0,-2.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0\
  },
  //0
  {
    -2.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,\
    -1.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,\
    1.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,-1.0,\
    1.0,-1.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,\
    -1.0,-1.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //8
  {
    -2.0,-1.0,-2.0,-1.0,-2.0,0.0,-2.0,2.0,-1.0,1.0,-2.0,2.0,-2.0,2.0,\
    0.0,1.0,2.0,-1.0,2.0,-1.0,2.0,0.0,2.0,1.0,2.0,2.0,1.0,2.0,\
    0.0,1.0,-1.0,2.0,-2.0,1.0,-2.0,0.0,-2.0,-1.0,-1.0,-2.0,-2.0,0.0,\
    -1.0,2.0,-1.0,1.0,-1.0,2.0,1.0,2.0,1.0,2.0,2.0,0.0,2.0,0.0,\
    2.0,-1.0,1.0,-1.0,2.0,-2.0,2.0,-2.0,2.0,1.0,1.0,2.0,1.0,2.0,\
    2.0,2.0,2.0,0.0,1.0,0.0,2.0,-1.0,2.0,-2.0,2.0,-2.0,1.0,-2.0,\
    2.0,-2.0,1.0,-2.0,0.0,-1.0,1.0,-2.0,1.0,-2.0,0.0,-2.0,-1.0,-2.0,\
    -1.0,-2.0,-2.0,-1.0,-2.0,0.0,-1.0,0.0,-2.0,1.0,-2.0,1.0,-2.0,2.0,\
    -2.0,2.0,-2.0,0.0,-2.0,-2.0,0.0,-1.0\
  },
  //6
  {
    -3.0,1.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,-1.0,2.0,\
    0.0,1.0,1.0,-1.0,2.0,-2.0,2.0,-2.0,2.0,-1.0,2.0,-2.0,2.0,-1.0,\
    2.0,-1.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,1.0,2.0,1.0,2.0,1.0,\
    2.0,2.0,1.0,2.0,0.0,2.0,-1.0,2.0,-2.0,1.0,-2.0,-1.0,-2.0,0.0,\
    -2.0,-1.0,-2.0,-2.0,-1.0,-3.0,-1.0,0.0,-2.0,2.0,-1.0,2.0,0.0,2.0,\
    0.0,2.0,1.0,2.0,2.0,1.0,2.0,1.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,-1.0,2.0,-2.0,2.0,-2.0,1.0,-2.0,2.0,-2.0,0.0,-2.0,1.0,-2.0,\
    0.0,-2.0,-1.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-1.0,-2.0,-1.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,1.0\
  },
  //4
  {
    -3.0,2.0,-2.0,1.0,-2.0,1.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,\
    1.0,1.0,2.0,-2.0,2.0,-1.0,2.0,-2.0,2.0,-1.0,3.0,-2.0,2.0,-1.0,\
    2.0,0.0,2.0,1.0,0.0,2.0,1.0,2.0,-1.0,2.0,-2.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,1.0,-1.0,2.0,-2.0,3.0,0.0,1.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,1.0,2.0,0.0,2.0,-1.0,2.0,1.0,0.0,\
    2.0,-1.0,3.0,-2.0,0.0,-2.0,1.0,-2.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    1.0,-2.0,2.0,-2.0,1.0,-2.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-3.0,0.0,\
    -1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,\
    -2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,2.0\
  },
  //4
  {
    -2.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-2.0,1.0,\
    -1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,-1.0,2.0,-1.0,1.0,-1.0,\
    1.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,2.0,-1.0,1.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,-1.0,1.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    1.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,1.0,0.0,1.0,-1.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,\
    0.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //8
  {
    -1.0,1.0,-1.0,1.0,-1.0,0.4,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.5,-1.0,1.0,-1.0,1.0,-1.0,1.0,-0.2,1.0,0.6,1.0,\
    1.0,1.0,0.8,1.0,0.1,1.0,0.9,1.0,0.3,1.0,0.5,0.5,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,-0.2,1.0,-0.9,\
    1.0,-0.1,1.0,0.7,1.0,1.0,1.0,0.7,1.0,-0.1,1.0,-0.9,1.0,-0.2,\
    1.0,0.0,1.0,-0.4,1.0,-1.0,1.0,-1.0,1.0,-1.0,0.3,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-0.6,-1.0,-0.6,-1.0,-0.2,-1.0,\
    -1.0,-1.0,-1.0,-0.2,-1.0,-0.6,-1.0,-0.5,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.5,-1.0,0.6,-0.6,0.0\
  },
  //9
  {
    -2.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-2.0,1.0,-1.0,1.0,0.0,1.0,\
    -1.0,1.0,0.0,1.0,-1.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,\
    0.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,2.0,2.0,0.0,1.0,1.0,0.0,\
    1.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,\
    1.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,2.0,-1.0,1.0,-1.0,1.0,0.0,\
    1.0,-1.0,2.0,-2.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,-1.0,-2.0,\
    0.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,-2.0,2.0,-1.0,0.0,-1.0,1.0,\
    -1.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-1.0,-2.0,-2.0,\
    -1.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0\
  },
  //6
  {
    -2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-2.0,1.0,\
    -1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,0.0,1.0,0.0,2.0,1.0,1.0,\
    0.0,1.0,1.0,0.0,1.0,-1.0,1.0,-1.0,2.0,-1.0,1.0,0.0,1.0,1.0,\
    0.0,1.0,-1.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,1.0,1.0,0.0,1.0,\
    1.0,1.0,1.0,1.0,2.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,-1.0,2.0,-1.0,1.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,\
    1.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-2.0,\
    0.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,0.0,-2.0,-2.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //2
  {
    -2.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,0.0,\
    -1.0,0.0,-2.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,2.0,0.0,1.0,\
    0.0,1.0,1.0,1.0,0.0,1.0,2.0,2.0,1.0,1.0,1.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,1.0,-1.0,1.0,0.0,2.0,-2.0,0.0,-1.0,1.0,-1.0,\
    1.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,2.0,0.0,\
    1.0,0.0,1.0,0.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,\
    0.0,-1.0,-1.0,0.0,-2.0,2.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-2.0,2.0,\
    -1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //4
  {
    -2.0,2.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,\
    0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,-1.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,0.0,1.0,0.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,\
    -1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,1.0\
  },
  //7
  {
    -2.0,1.0,-1.0,1.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,\
    1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,2.0,-1.0,\
    1.0,0.0,1.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,-1.0,\
    2.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,\
    -1.0,-1.0,0.0,-1.0,-2.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,\
    -1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,1.0\
  },
  //9
  {
    -4.0,-2.0,1.0,-4.0,-3.0,0.0,-3.0,3.0,-4.0,0.0,-4.0,-1.0,-3.0,-1.0,\
    2.0,4.0,-4.0,4.0,-2.0,3.0,-4.0,-1.0,3.0,2.0,0.0,4.0,0.0,4.0,\
    -2.0,3.0,-1.0,3.0,4.0,-1.0,3.0,4.0,-3.0,2.0,-2.0,1.0,0.0,3.0,\
    4.0,1.0,4.0,0.0,4.0,0.0,4.0,0.0,4.0,0.0,4.0,1.0,4.0,0.0,\
    4.0,0.0,3.0,0.0,4.0,0.0,4.0,1.0,4.0,0.0,4.0,0.0,4.0,0.0,\
    1.0,-4.0,1.0,-4.0,1.0,-4.0,-3.0,0.0,-1.0,3.0,-3.0,1.0,0.0,-4.0,\
    -2.0,3.0,-3.0,2.0,0.0,-4.0,-2.0,2.0,-4.0,1.0,-1.0,-3.0,-4.0,1.0,\
    -3.0,0.0,-1.0,-3.0,1.0,-4.0,3.0,-2.0,2.0,-3.0,-4.0,0.0,-2.0,-4.0,\
    -2.0,-4.0,3.0,-4.0,-3.0,0.0,-3.0,1.0\
  },
  //5
  {
    -5.0,0.0,-3.0,1.0,-3.0,-2.0,-2.0,2.0,-3.0,-2.0,-2.0,0.0,-4.0,1.0,\
    -2.0,-3.0,-1.0,4.0,0.0,5.0,1.0,4.0,0.0,5.0,1.0,5.0,3.0,5.0,\
    4.0,1.0,-1.0,-5.0,-3.0,-4.0,-1.0,-5.0,2.0,-4.0,5.0,-1.0,5.0,-1.0,\
    4.0,0.0,3.0,2.0,-1.0,5.0,0.0,5.0,2.0,5.0,5.0,4.0,4.0,1.0,\
    5.0,1.0,5.0,-1.0,5.0,-4.0,4.0,-5.0,1.0,-4.0,1.0,-5.0,0.0,-5.0,\
    -2.0,-5.0,-5.0,-5.0,-5.0,-2.0,-4.0,-1.0,2.0,4.0,2.0,3.0,4.0,0.0,\
    0.0,4.0,1.0,2.0,3.0,2.0,-1.0,5.0,-5.0,-1.0,2.0,4.0,-3.0,5.0,\
    -4.0,1.0,-1.0,-4.0,-3.0,2.0,-5.0,-1.0,1.0,-4.0,-1.0,-2.0,-4.0,0.0,\
    0.0,-5.0,4.0,-1.0,-3.0,-3.0,-2.0,-3.0\
  },
  //8
  {
    -2.0,-2.0,-2.0,-1.0,-2.0,-1.0,-2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,2.0,\
    -1.0,2.0,-1.0,2.0,0.0,1.0,-1.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,\
    0.0,2.0,1.0,2.0,1.0,2.0,1.0,2.0,2.0,1.0,1.0,1.0,2.0,0.0,\
    2.0,0.0,2.0,-1.0,2.0,-2.0,1.0,-2.0,2.0,0.0,2.0,2.0,1.0,2.0,\
    2.0,1.0,1.0,1.0,2.0,1.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,-1.0,\
    2.0,-2.0,1.0,-2.0,1.0,-2.0,0.0,-2.0,1.0,-1.0,0.0,-2.0,0.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,-1.0,-2.0,0.0,-2.0,-2.0,-2.0,\
    -1.0,-1.0,-2.0,-1.0,-2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,1.0,-1.0,1.0,\
    -2.0,2.0,-1.0,2.0,-2.0,0.0,0.0,-1.0\
  },
  //5
  {
    -1.0,-3.0,-1.0,-2.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,-1.0,-2.0,-3.0,1.0,\
    -2.0,1.0,-3.0,1.0,-2.0,0.0,-3.0,1.0,-1.0,1.0,0.0,3.0,0.0,2.0,\
    0.0,3.0,0.0,2.0,0.0,3.0,1.0,0.0,1.0,-2.0,0.0,-2.0,2.0,-2.0,\
    2.0,-1.0,3.0,-1.0,2.0,-1.0,3.0,1.0,1.0,2.0,1.0,3.0,1.0,2.0,\
    3.0,2.0,2.0,1.0,3.0,1.0,2.0,0.0,3.0,-1.0,2.0,-1.0,3.0,-2.0,\
    1.0,-2.0,1.0,-3.0,1.0,-2.0,0.0,-3.0,0.0,-2.0,-1.0,-3.0,-1.0,-2.0,\
    -1.0,-3.0,-2.0,0.0,-3.0,-1.0,1.0,1.0,3.0,3.0,1.0,2.0,1.0,3.0,\
    0.0,2.0,0.0,3.0,-1.0,2.0,-1.0,3.0,-2.0,2.0,-3.0,2.0,-2.0,0.0,\
    -3.0,0.0,-2.0,0.0,-3.0,-2.0,-2.0,-2.0\
  },
  //8
  {
    -2.0,-2.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,\
    -1.0,0.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,\
    1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,2.0,1.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,-1.0,2.0,-1.0,1.0,-1.0,1.0,1.0,0.0,1.0,\
    1.0,0.0,1.0,1.0,2.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,-1.0,2.0,0.0,1.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,\
    0.0,-2.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,-2.0,-1.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,0.0,\
    -1.0,1.0,0.0,1.0,-1.0,1.0,-1.0,-1.0\
  },
  //9
  {
    -2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,1.0,-2.0,1.0,\
    0.0,1.0,-1.0,2.0,0.0,1.0,0.0,2.0,1.0,1.0,1.0,2.0,1.0,0.0,\
    1.0,1.0,2.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,-1.0,1.0,0.0,2.0,-1.0,\
    1.0,0.0,1.0,-1.0,2.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,-2.0,\
    -1.0,-1.0,-2.0,-1.0,-1.0,0.0,-1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,\
    0.0,2.0,0.0,1.0,-1.0,1.0,-2.0,2.0,-1.0,0.0,-2.0,1.0,-1.0,0.0,\
    -2.0,0.0,-1.0,-1.0,1.0,-2.0,1.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,-2.0,\
    -1.0,-1.0,-2.0,-1.0,-1.0,0.0,-1.0,-1.0\
  },
  //2
  {
    -2.0,1.0,-2.0,1.0,-2.0,-1.0,-1.0,0.0,-2.0,-1.0,-1.0,-2.0,0.0,-2.0,\
    1.0,-1.0,1.0,-2.0,2.0,-1.0,1.0,0.0,1.0,-1.0,-1.0,-1.0,-2.0,1.0,\
    -1.0,0.0,-2.0,1.0,-1.0,2.0,-1.0,1.0,0.0,2.0,0.0,2.0,1.0,2.0,\
    1.0,1.0,2.0,1.0,2.0,1.0,1.0,0.0,2.0,-1.0,2.0,0.0,2.0,-1.0,\
    1.0,-1.0,2.0,-2.0,2.0,-1.0,1.0,-1.0,2.0,-2.0,2.0,-2.0,2.0,1.0,\
    0.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,2.0,0.0,\
    0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,-2.0,1.0,-1.0,0.0,-2.0,1.0,-2.0,2.0,-2.0,2.0,\
    -1.0,0.0,-2.0,2.0,-2.0,2.0,-1.0,1.0\
  },
  //8
  {
    -2.0,-1.0,-1.0,0.0,-2.0,-1.0,-1.0,-1.0,-2.0,1.0,-1.0,0.0,-1.0,1.0,\
    -2.0,2.0,-1.0,1.0,0.0,2.0,1.0,1.0,0.0,1.0,-1.0,2.0,0.0,1.0,\
    0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,\
    2.0,0.0,1.0,-1.0,1.0,0.0,1.0,-2.0,1.0,-1.0,2.0,-2.0,0.0,-1.0,\
    2.0,-2.0,0.0,-1.0,1.0,-1.0,2.0,-2.0,1.0,0.0,2.0,1.0,1.0,1.0,\
    1.0,0.0,2.0,1.0,1.0,0.0,2.0,-1.0,1.0,-1.0,2.0,-2.0,0.0,-1.0,\
    1.0,-1.0,1.0,-2.0,0.0,-1.0,1.0,-2.0,0.0,-1.0,0.0,-1.0,-1.0,-1.0,\
    -1.0,-1.0,-2.0,0.0,-1.0,0.0,-2.0,2.0,-1.0,0.0,-1.0,1.0,-2.0,2.0,\
    -1.0,1.0,-2.0,1.0,-1.0,0.0,-1.0,-1.0\
  },
  //5
  {
    -2.0,-1.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,-1.0,-2.0,-2.0,1.0,-2.0,1.0,\
    -2.0,0.0,-2.0,1.0,-2.0,0.0,-2.0,1.0,-2.0,2.0,1.0,2.0,0.0,2.0,\
    0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,1.0,-1.0,2.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,1.0,-2.0,2.0,-1.0,2.0,0.0,\
    0.0,2.0,0.0,2.0,1.0,2.0,1.0,1.0,2.0,0.0,2.0,-1.0,2.0,-1.0,\
    1.0,-2.0,1.0,-1.0,2.0,-2.0,2.0,-2.0,1.0,-1.0,1.0,-2.0,1.0,-1.0,\
    1.0,-2.0,2.0,0.0,0.0,2.0,2.0,-2.0,2.0,-2.0,1.0,-2.0,-1.0,-2.0,\
    -2.0,0.0,-1.0,2.0,-2.0,1.0,-1.0,2.0,-2.0,2.0,-1.0,2.0,-2.0,2.0,\
    -2.0,2.0,-2.0,2.0,-2.0,1.0,-1.0,1.0\
  },
  //2
  {
    -3.0,3.0,-2.0,2.0,-3.0,3.0,-2.0,2.0,-1.0,-2.0,0.0,-2.0,2.0,-3.0,\
    1.0,-2.0,2.0,-3.0,-1.0,-1.0,-3.0,3.0,-1.0,2.0,-2.0,3.0,0.0,2.0,\
    -1.0,3.0,-1.0,2.0,0.0,3.0,2.0,0.0,3.0,-2.0,1.0,-2.0,3.0,-2.0,\
    1.0,-2.0,3.0,-3.0,1.0,-2.0,3.0,-3.0,2.0,-2.0,3.0,-3.0,1.0,2.0,\
    1.0,3.0,1.0,2.0,1.0,2.0,2.0,3.0,1.0,2.0,-2.0,3.0,-2.0,0.0,\
    -1.0,3.0,1.0,2.0,2.0,1.0,1.0,-1.0,2.0,-3.0,0.0,-2.0,0.0,-3.0,\
    1.0,-2.0,-1.0,-3.0,-1.0,-2.0,-1.0,-3.0,0.0,-2.0,-1.0,-3.0,1.0,-2.0,\
    1.0,-3.0,2.0,-2.0,0.0,-3.0,-2.0,1.0,-3.0,3.0,-1.0,2.0,-3.0,3.0,\
    -1.0,2.0,-3.0,2.0,-2.0,2.0,-1.0,2.0\
  },
  //7
  {
    -2.0,1.0,-2.0,1.0,-2.0,2.0,-2.0,1.0,-2.0,2.0,-1.0,-2.0,0.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,2.0,-2.0,\
    1.0,0.0,0.0,-1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,0.0,1.0,0.0,2.0,\
    0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,\
    0.0,2.0,0.0,1.0,0.0,2.0,2.0,-1.0,2.0,-1.0,2.0,-2.0,2.0,-1.0,\
    2.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,0.0,2.0,-1.0,\
    2.0,0.0,2.0,-1.0,1.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,0.0,-2.0,\
    0.0,-2.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,0.0,-2.0,1.0,\
    -2.0,1.0,-2.0,1.0,-2.0,1.0,-1.0,1.0\
  },
  //1
  {
    -2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,-1.0,-1.0,-1.0,0.0,-2.0,\
    1.0,-1.0,-1.0,-1.0,-1.0,2.0,0.0,1.0,-1.0,2.0,0.0,2.0,-1.0,1.0,\
    0.0,2.0,-1.0,1.0,1.0,0.0,2.0,-1.0,1.0,-1.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,\
    1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,1.0,\
    2.0,1.0,1.0,1.0,0.0,2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,\
    0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,1.0,0.0,2.0,-2.0,2.0,\
    -1.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,\
    -2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //7
  {
    -1.0,0.0,-1.0,0.0,-1.0,0.2,-1.0,0.9,-1.0,0.5,-1.0,0.0,-1.0,0.0,\
    -1.0,-0.3,-1.0,-0.9,-0.5,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.3,-1.0,\
    0.9,-1.0,1.0,-1.0,0.6,-0.6,-0.6,0.6,-1.0,0.6,-1.0,0.0,-1.0,0.0,\
    -1.0,0.3,-1.0,0.9,-0.5,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.4,0.6,1.0,0.0,1.0,-0.6,\
    1.0,-0.8,1.0,-0.2,1.0,0.0,1.0,-0.1,1.0,-0.7,1.0,-0.7,1.0,-0.1,\
    1.0,0.0,1.0,-0.1,1.0,-0.8,0.6,-0.6\
  },
  //0
  {
    -1.0,0.0,-1.0,0.0,-1.0,0.6,-1.0,0.6,-1.0,0.2,-1.0,1.0,-1.0,0.2,\
    -1.0,0.6,-0.6,1.0,-0.2,1.0,-1.0,1.0,-0.2,1.0,0.0,1.0,0.0,1.0,\
    0.2,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,1.0,0.0,1.0,0.0,\
    1.0,0.8,1.0,0.4,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,-0.6,1.0,-0.6,1.0,0.0,\
    1.0,0.0,1.0,-0.8,1.0,-1.0,1.0,-1.0,0.8,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,-0.2,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-0.4,-1.0,-0.4,\
    -1.0,-0.8,-1.0,0.0,-1.0,-0.8,-1.0,-0.4,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-0.8,0.0\
  },
  //9
  {
    -3.0,0.0,-3.0,0.0,-3.0,0.0,-2.0,0.0,-3.0,1.0,-3.0,3.0,-2.0,3.0,\
    -1.0,2.0,-1.0,3.0,0.0,3.0,1.0,3.0,0.0,2.0,2.0,3.0,3.0,3.0,\
    2.0,1.0,3.0,1.0,3.0,1.0,3.0,0.0,2.0,0.0,3.0,0.0,3.0,0.0,\
    3.0,0.0,2.0,0.0,3.0,-1.0,3.0,-1.0,3.0,-1.0,2.0,-2.0,2.0,-2.0,\
    2.0,-3.0,1.0,-2.0,0.0,-3.0,0.0,-3.0,-1.0,-3.0,-1.0,-2.0,-2.0,-3.0,\
    -3.0,-2.0,-3.0,0.0,-1.0,0.0,0.0,3.0,2.0,2.0,3.0,2.0,1.0,2.0,\
    1.0,3.0,0.0,3.0,-1.0,2.0,-3.0,3.0,-3.0,2.0,-3.0,1.0,-2.0,0.0,\
    -3.0,0.0,-1.0,-2.0,3.0,-3.0,0.0,-2.0,1.0,-3.0,0.0,-3.0,-1.0,-3.0,\
    -1.0,-2.0,-2.0,-3.0,-3.0,-2.0,-2.0,-1.0\
  },
  //4
  {
    -3.0,3.0,-2.0,1.0,-2.0,2.0,-2.0,1.0,-2.0,2.0,-2.0,1.0,-2.0,2.0,\
    -2.0,1.0,-2.0,2.0,-1.0,2.0,0.0,3.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,3.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,1.0,2.0,0.0,2.0,0.0,2.0,2.0,0.0,\
    2.0,0.0,1.0,-1.0,0.0,-3.0,1.0,-2.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,0.0,-2.0,0.0,-2.0,-1.0,-1.0,-3.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,\
    0.0,-2.0,0.0,-3.0,0.0,-2.0,0.0,-2.0,-1.0,-1.0,-2.0,0.0,-2.0,0.0,\
    -2.0,1.0,-2.0,1.0,-2.0,2.0,-2.0,1.0\
  },
  //1
  {
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,0.0,-2.0,1.0,-2.0,\
    1.0,-2.0,1.0,-2.0,1.0,-2.0,0.0,-1.0,-2.0,0.0,-2.0,0.0,-1.0,2.0,\
    -1.0,2.0,-1.0,2.0,-2.0,2.0,-2.0,2.0,-2.0,2.0,-1.0,0.0,-1.0,2.0,\
    0.0,2.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,0.0,-2.0,0.0,-2.0,-1.0,-1.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //6
  {
    -2.0,0.0,-2.0,1.0,-1.0,0.0,-2.0,1.0,-2.0,1.0,-1.0,1.0,-1.0,2.0,\
    -1.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,1.0,2.0,1.0,2.0,1.0,0.0,\
    2.0,-1.0,-1.0,-2.0,-1.0,0.0,-2.0,-1.0,-1.0,-2.0,0.0,-1.0,0.0,-2.0,\
    1.0,-1.0,2.0,-2.0,2.0,-1.0,1.0,-1.0,2.0,0.0,2.0,0.0,1.0,-1.0,\
    2.0,1.0,0.0,1.0,-2.0,2.0,-1.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,\
    1.0,1.0,1.0,2.0,2.0,1.0,1.0,0.0,2.0,0.0,1.0,1.0,2.0,-1.0,\
    2.0,0.0,1.0,0.0,2.0,-2.0,1.0,-2.0,1.0,-1.0,0.0,-2.0,0.0,-2.0,\
    0.0,-1.0,-1.0,-2.0,-1.0,-1.0,-2.0,-2.0,-2.0,-1.0,-1.0,0.0,-2.0,0.0,\
    -2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //0
  {
    -2.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-2.0,1.0,-1.0,1.0,\
    -1.0,1.0,-1.0,1.0,0.0,1.0,-1.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,\
    2.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,1.0,\
    1.0,-1.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,-1.0,1.0,0.0,\
    1.0,-1.0,1.0,0.0,1.0,-1.0,1.0,-2.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,0.0,\
    -2.0,-1.0,-1.0,-1.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-2.0,0.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //5
  {
    -3.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,1.0,-3.0,0.0,0.0,2.0,0.0,2.0,\
    0.0,2.0,0.0,2.0,0.0,3.0,0.0,2.0,1.0,-1.0,0.0,-2.0,0.0,-3.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,2.0,-1.0,3.0,0.0,2.0,-1.0,2.0,0.0,\
    2.0,1.0,-1.0,2.0,-1.0,3.0,0.0,2.0,0.0,2.0,1.0,2.0,3.0,3.0,\
    2.0,0.0,2.0,1.0,2.0,0.0,2.0,-1.0,3.0,-2.0,1.0,-2.0,1.0,-2.0,\
    0.0,-2.0,0.0,-3.0,-1.0,-2.0,-2.0,-2.0,-2.0,-1.0,-2.0,0.0,1.0,3.0,\
    2.0,0.0,2.0,0.0,2.0,2.0,0.0,2.0,0.0,3.0,-2.0,2.0,-2.0,2.0,\
    -2.0,1.0,-3.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,-1.0,-1.0,-2.0,-1.0,-3.0,\
    0.0,-2.0,1.0,-2.0,2.0,-2.0,-1.0,-1.0\
  },
  //9
  {
    -3.0,-1.0,-2.0,0.0,-2.0,0.0,-3.0,1.0,-2.0,0.0,-2.0,1.0,-2.0,2.0,\
    -3.0,3.0,0.0,2.0,-1.0,2.0,0.0,3.0,0.0,2.0,1.0,2.0,1.0,2.0,\
    3.0,2.0,2.0,1.0,2.0,1.0,3.0,1.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    3.0,0.0,2.0,0.0,2.0,0.0,3.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,-1.0,\
    3.0,-2.0,2.0,-2.0,2.0,-2.0,1.0,-3.0,1.0,-2.0,0.0,-2.0,0.0,-2.0,\
    -1.0,-3.0,-1.0,-2.0,-2.0,-1.0,-2.0,3.0,2.0,1.0,2.0,1.0,2.0,2.0,\
    0.0,3.0,-1.0,2.0,-2.0,2.0,-3.0,3.0,-2.0,1.0,-2.0,1.0,-2.0,0.0,\
    -3.0,1.0,-2.0,-1.0,1.0,-2.0,1.0,-3.0,0.0,-2.0,0.0,-2.0,-1.0,-2.0,\
    -2.0,-3.0,-1.0,-2.0,-2.0,-1.0,-2.0,-1.0\
  },
  //2
  {
    -4.0,2.0,-3.0,0.0,-4.0,0.0,-3.0,0.0,-3.0,-2.0,-3.0,-4.0,0.0,-3.0,\
    1.0,-3.0,4.0,-4.0,3.0,-1.0,3.0,0.0,4.0,2.0,3.0,2.0,1.0,3.0,\
    0.0,-2.0,-1.0,-3.0,-2.0,-3.0,-4.0,-1.0,-3.0,0.0,-3.0,1.0,-4.0,3.0,\
    -1.0,3.0,-1.0,4.0,0.0,3.0,1.0,3.0,2.0,4.0,3.0,2.0,3.0,1.0,\
    4.0,0.0,3.0,-1.0,3.0,-1.0,4.0,-2.0,3.0,-3.0,3.0,-3.0,4.0,-4.0,\
    2.0,-3.0,3.0,-3.0,1.0,4.0,0.0,3.0,0.0,3.0,0.0,4.0,-1.0,3.0,\
    -4.0,3.0,3.0,-1.0,3.0,-1.0,3.0,-1.0,0.0,-3.0,0.0,-3.0,0.0,-4.0,\
    0.0,-3.0,0.0,-3.0,0.0,-4.0,0.0,-3.0,-3.0,3.0,-4.0,4.0,-3.0,2.0,\
    -3.0,3.0,-4.0,3.0,-3.0,2.0,-3.0,2.0\
  },
  //1
  {
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,\
    -1.0,-2.0,0.0,-2.0,0.0,-2.0,-1.0,0.0,0.0,2.0,-1.0,2.0,0.0,2.0,\
    -1.0,2.0,-1.0,2.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,2.0,1.0,2.0,1.0,2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,\
    0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,0.0,-1.0,2.0,-1.0,2.0,\
    -2.0,1.0,-2.0,0.0,-2.0,1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //1
  {
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,-2.0,1.0,-1.0,\
    1.0,-2.0,2.0,-2.0,0.0,-1.0,1.0,-2.0,-2.0,0.0,-1.0,0.0,-1.0,2.0,\
    -2.0,2.0,0.0,1.0,-2.0,2.0,-2.0,2.0,-1.0,1.0,-2.0,1.0,0.0,2.0,\
    1.0,1.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,\
    1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,2.0,0.0,1.0,0.0,0.0,-2.0,0.0,-2.0,-1.0,0.0,-2.0,0.0,\
    -2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-2.0,0.0,\
    -1.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //5
  {
    -4.0,0.0,-3.0,1.0,-3.0,0.0,-3.0,1.0,-3.0,1.0,-2.0,1.0,0.0,3.0,\
    0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,0.0,3.0,3.0,0.0,0.0,-3.0,\
    0.0,-3.0,0.0,-3.0,0.0,-3.0,0.0,-3.0,3.0,-1.0,3.0,-1.0,4.0,-1.0,\
    1.0,2.0,-1.0,3.0,0.0,3.0,0.0,3.0,2.0,3.0,2.0,3.0,3.0,2.0,\
    3.0,1.0,3.0,0.0,3.0,-1.0,3.0,-1.0,3.0,-2.0,3.0,-3.0,1.0,-3.0,\
    0.0,-3.0,0.0,-3.0,-1.0,-3.0,-2.0,-3.0,-3.0,-2.0,-4.0,-2.0,-1.0,2.0,\
    0.0,3.0,3.0,1.0,3.0,2.0,2.0,3.0,0.0,3.0,-1.0,3.0,-3.0,3.0,\
    -3.0,1.0,-3.0,0.0,-3.0,0.0,-3.0,-1.0,-3.0,-3.0,-1.0,-3.0,0.0,-3.0,\
    1.0,-3.0,3.0,-3.0,0.0,-3.0,-2.0,0.0\
  },
  //6
  {
    -2.0,0.0,-2.0,0.0,-2.0,1.0,-2.0,0.0,-1.0,1.0,-2.0,2.0,-1.0,2.0,\
    -1.0,2.0,0.0,2.0,0.0,1.0,0.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,\
    1.0,0.0,1.0,0.0,0.0,-2.0,-1.0,-1.0,-2.0,-1.0,-1.0,-1.0,-1.0,-2.0,\
    0.0,-2.0,1.0,-2.0,2.0,-2.0,1.0,-1.0,2.0,-1.0,2.0,0.0,2.0,0.0,\
    2.0,1.0,-1.0,1.0,-1.0,2.0,-1.0,2.0,0.0,2.0,0.0,2.0,1.0,1.0,\
    1.0,2.0,2.0,2.0,2.0,1.0,2.0,0.0,1.0,0.0,2.0,0.0,2.0,0.0,\
    2.0,-1.0,2.0,-2.0,1.0,-1.0,1.0,-2.0,0.0,-2.0,0.0,-2.0,0.0,-2.0,\
    -1.0,-1.0,-1.0,-2.0,-1.0,-2.0,-2.0,-1.0,-2.0,-1.0,-1.0,0.0,-2.0,0.0,\
    -2.0,0.0,-2.0,0.0,-2.0,0.0,-1.0,0.0\
  },
  //8
  {
    -1.0,-1.0,-1.0,-1.0,-1.0,-0.3,-1.0,0.0,-1.0,0.0,-1.0,0.3,-1.0,1.0,\
    -1.0,1.0,-1.0,1.0,-0.2,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,\
    0.1,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,1.0,0.0,1.0,0.0,\
    1.0,-0.2,1.0,-1.0,1.0,-1.0,1.0,-0.2,1.0,0.7,0.5,1.0,0.4,0.6,\
    1.0,0.3,1.0,0.9,1.0,0.0,1.0,0.0,1.0,0.0,1.0,-0.6,1.0,-0.5,\
    1.0,-0.3,0.8,-1.0,0.1,-1.0,0.9,-1.0,0.2,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-1.0,-0.1,-1.0,-1.0,-1.0,-0.1,-1.0,-0.7,-1.0,-1.0,-0.4,\
    -1.0,-0.5,-1.0,-0.7,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.8,-1.0,0.3,\
    -0.5,0.5,-0.4,1.0,-1.0,0.7,-0.9,0.0\
  },
  //6
  {
    -2.0,0.0,-1.0,1.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,-1.0,1.0,-1.0,2.0,\
    0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,2.0,1.0,\
    1.0,0.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,0.0,-1.0,1.0,-2.0,\
    0.0,-1.0,1.0,-1.0,1.0,0.0,1.0,-1.0,1.0,0.0,2.0,0.0,1.0,1.0,\
    -1.0,1.0,-1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,2.0,0.0,1.0,\
    1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,2.0,-1.0,1.0,0.0,\
    1.0,0.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-2.0,0.0,-1.0,-1.0,-1.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0\
  },
  //1
  {
    -2.0,0.0,-1.0,1.0,0.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,0.0,\
    0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,\
    1.0,0.0,1.0,0.0,1.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,1.0,0.0,\
    1.0,0.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,0.0,\
    -1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,-1.0,1.0,-2.0,0.0,\
    -1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,\
    -1.0,-1.0,1.0,-1.0,0.0,-1.0,1.0,-1.0\
  },
  //4
  {
    -2.0,1.0,-1.0,1.0,-1.0,1.0,-2.0,1.0,-1.0,0.0,-1.0,1.0,-2.0,1.0,\
    0.0,1.0,0.0,1.0,1.0,1.0,2.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,\
    1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,2.0,\
    0.0,1.0,1.0,0.0,1.0,-1.0,0.0,-1.0,1.0,-1.0,2.0,0.0,1.0,1.0,\
    0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-1.0,-1.0,-1.0,-1.0,0.0,\
    0.0,1.0,0.0,2.0,0.0,1.0,-1.0,1.0,-2.0,0.0,-1.0,-1.0,0.0,-1.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,-1.0,-1.0,-1.0,0.0,\
    -2.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,0.0\
  },
  //4
  {
    -2.0,0.0,-1.0,1.0,-2.0,1.0,-1.0,0.0,-2.0,1.0,-1.0,0.0,-1.0,0.0,\
    -2.0,1.0,-1.0,0.0,0.0,2.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,\
    0.0,2.0,0.0,1.0,2.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    2.0,0.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,\
    1.0,2.0,1.0,0.0,1.0,0.0,2.0,0.0,1.0,0.0,1.0,-1.0,1.0,-1.0,\
    1.0,0.0,2.0,0.0,1.0,0.0,0.0,-2.0,0.0,-1.0,0.0,-2.0,0.0,-1.0,\
    0.0,-1.0,-2.0,0.0,-1.0,0.0,-2.0,-1.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,\
    0.0,-1.0,0.0,-2.0,0.0,-1.0,-2.0,0.0,-1.0,0.0,-1.0,0.0,-2.0,0.0,\
    -1.0,0.0,-2.0,1.0,-1.0,0.0,-1.0,1.0\
  }
};
const double AsciiImage::patterns_norm[N_PATTERN]=
{
  23.0651,12.4900,10.4881,24.3721,23.0651,30.2655,28.4605,16.9115,23.3666,\
  23.4947,14.0000,9.3808,9.5917,16.9115,13.2665,10.8628,22.8910,12.9615,\
  10.0000,8.4113,16.9706,10.3923,16.8523,16.7929,9.4868,17.2047,18.2209,\
  18.0000,10.2956,8.7858,11.7473,10.9545,11.4891,9.0554,10.0995,29.9666,\
  35.7771,16.6132,20.9762,10.8628,13.2665,15.4272,13.6382,17.0880,22.9347,\
  16.0624,13.4907,8.1872,8.6741,23.4094,17.4356,15.6844,14.7648,10.7703,\
  18.8149,20.2485,29.3598,15.6205,14.2829,25.1794,15.6844,8.7710,10.5830,\
  9.1652,11.1355,11.9164\
};

int main(int argc, char *argv[])
{
  try
  {
    AsciiImage ascii_im(std::cin);

    ascii_im.recognize(std::cout);
  }
  catch(AsciiImage::bad_char e)
  {
    std::cerr<<"Input error: "<<e.what()<<std::endl;
    std::terminate();
  }
  catch(std::bad_alloc e)
  {
    std::cerr<<"Can't allocate memory: "<<e.what()<<std::endl;
    std::terminate();
  }
  catch(...)
  {
    std::cerr<<"Unknown exception!"<<std::endl;
    std::terminate();
  }

  return 0;
}
