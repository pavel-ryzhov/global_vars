#include <stdio.h>
#include <string.h>
#include <vector>
#include <list>
#include <queue>

#define REF_W 20 // ширина опорной картинки
#define REF_H 30 // высота опорной картинки
#define REF_N 10 // число возможных символов
#define NDIGITS 3 // число символов, подлежащих сканированию

using namespace std;

extern char fntData[]; // данные шрифтов

// перекодировка символа
// c - символ
// return - значение символа
int decodeNumber(char c)
{
	const char dc = '0'-'Z'+'a'-1;

	if(c <= 'Z') return c - '0';

	return c - dc;
}

// конфертация из char в float
float ascii2val(char c)
{
	return c == '.' ? 0 : 1.f;
}

// конфертация из float в char
char float2ascii(float x)
{
	return (x < 0.5f) ? '.' : '@';
}

// двумерная точка
class CPoint
{
public:
	//конструктор по умолчанию
	CPoint()
	{
		x = 0;
		y = 0;
	}
	//конструктор
	// x0, y0 - координаты точки
	CPoint(int x0, int y0)
	{
		x = x0;
		y = y0;
	}
	// оператор сравнения
	bool operator==(const CPoint& pt)
	{
		return x == pt.x && y == pt.y;
	}
	// оператор сравнения
	bool operator!=(const CPoint& pt)
	{
		return x != pt.x || y != pt.y;
	}
	int x, y; // координаты точки
};
// оператор сложения координат точек
CPoint operator+(const CPoint& pt1, const CPoint& pt2)
{
	return CPoint(pt1.x+pt2.x, pt1.y+pt2.y);
}

// интервал значений
class CInterval
{
public:
	//конструктор по умолчанию
	CInterval()
	{
		x1 = 0;
		x2 = 0;
	}
	//конструктор
	// X1, X2 - начальное и конечное значения
	CInterval(int X1, int X2)
	{
		x1 = X1;
		x2 = X2;
	}

	int x1, x2; // начальное и конечное значения интервала
};

// рамка изображения (задает видимую область изображения)
class CFrame
{
public:
	//конструктор по умолчанию
	CFrame()
	{
		resetFrameSize(0, 0);
	}
	//конструктор
	// w, h - ширина и высота рамки
	CFrame(int w, int h)
	{
		resetFrameSize(w, h);
	}
	//конструктор
	// x, y - координаты верхнего левого угла рамки
	// w, h - ширина и высота рамки
	CFrame(int x, int y, int w, int h)
	{
		x1 = x;
		y1 = y;
		x2 = x+w-1;
		y2 = y+h-1;
	}

	int frameWidth(){return x2-x1+1;} // ширина рамки

	int frameHeight(){return y2-y1+1;} // высота рамки

protected:
	// сброс параметров рамки
	// w, h - новые ширина и высота рамки
	void resetFrameSize(int w, int h)
	{
		x1 = 0;
		y1 = 0;
		x2 = w-1;
		y2 = h-1;
	}

public:
	int x1, x2, y1, y2; // координаты верхней левой и правой нинжней точек рамки
};

// Символьная картинка
class AsciiImage : public CFrame
{
public:
	// конструктор
	// buf - данные картинки
	// w, h - ширина и высота картинки
	AsciiImage(char* buf, int w = REF_W, int h = REF_H) : CFrame(w, h)
	{
		m_data = buf;
		m_width = w;
		m_height = h;
	}
	// конструктор по умолчанию
	AsciiImage()
	{
		m_data = 0;
		m_width = 0;
		m_height = 0;
	}

	// данные картинки
	char* data(){return m_data;}

	// полная ширина
	int width(){return m_width;}

	// полная высота
	int height(){return m_height;}

	// рчисло точек 
	int size(){return m_width*m_height;}

	// сброс рамки
	void resetFrame()
	{
		resetFrameSize(m_width, m_height);
	}

	// установка рамки
	void setFrame(CFrame& f)
	{
		x1 = f.x1;
		y1 = f.y1;
		x2 = f.x2;
		y2 = f.y2;
	}

	// утсановка значения точки
	// с - колонка (x)
	// r - ряд (y)
	// val - цвет точки
	void setPix(int c, int r, char val)
	{
		if(c >= 0 && c < m_width && r >= 0 && r < m_height)
		{
			m_data[r*m_width + c] = val;
		}
	}

	// утсановка значения точки
	// pt - координата точки
	// val - цвет точки
	void setPix(CPoint& pt, char val)
	{
		setPix(pt.x, pt.y, val);
	}

	// получение цвета точки
	// с - колонка (x)
	// r - ряд (y)
	// return - цвет точки
	char pix(int c, int r)
	{
		if(c >= 0 && c < m_width && r >= 0 && r < m_height)
			return m_data[r*m_width + c];
		return '.';
	}

	// получение цвета точки
	// pt - координата точки
	// return - цвет точки
	char pix(CPoint& pt)
	{
		return pix(pt.x, pt.y);
	}

	// проверка, что граница рамки f состоит из цвета с
	// f - исходная рамка
	// с - цвет, 0 - если любой кроме '.'
	// return - true, если граница рамки состоит из данного цвета, иначе false
	bool checkFrame(CFrame& f, char c)
	{
		CFrame tf = *this;
		setFrame(f);
		bool res = true;
		if(countV(x1, c) != frameHeight()) res = false;
		if(res && countV(x2, c) != frameHeight()) res = false;
		if(res && countH(y1, c) != frameWidth()) res = false;
		if(res && countH(y2, c) != frameWidth()) res = false;
		setFrame(tf);

		return res;
	}

	// очистка картинки за пределами рамки f
	void cleanOuter(CFrame& f)
	{
		for(int j = y1; j <= y2; j++)
		{
			for(int i = x1; i <= x2; i++)
			{
				if(i >= f.x1 && i <= f.x2 && j>= f.y1 && j <= f.y2) continue;
				m_data[j*m_width + i] = '.';
			}
		}		
	}

	// сглаживание углов
	void smooth()
	{
		for(int j = y1; j <= y2; j++)
		{
			for(int i = x1; i <= x2; i++)
			{
				char c = pix(i, j);
				if(c == '.' || c == '*') continue;
				c = pix(i+1, j+1);
				if(c != '.' && c != '*')
				{
					if(pix(i, j+1) == '.') setPix(i,j+1, '*');
					if(pix(i+1, j+1) == '.') setPix(i+1,j, '*');
				}
				c = pix(i-1, j+1);
				if(c != '.' && c != '*')
				{
					if(pix(i, j+1) == '.')setPix(i,j+1, '*');
					if(pix(i-1, j+1) == '.')setPix(i-1,j, '*');
				}
				c = pix(i+1, j-1);
				if(c != '.' && c != '*')
				{
					if(pix(i, j-1) == '.') setPix(i,j-1, '*');
					if(pix(i+1, j-1) == '.') setPix(i+1,j, '*');
				}
				c = pix(i-1, j-1);
				if(c != '.' && c != '*')
				{
					if(pix(i, j-1) == '.')setPix(i,j-1, '*');
					if(pix(i-1, j-1) == '.')setPix(i-1,j, '*');
				}
			}
		}		
		replaceColor('*', '#');
	}
	
	// копировать цвет c0 в данную картинку
	void copyColor(AsciiImage* dst, char c0)
	{
		for(int j = y1; j <= y2; j++)
		{
			for(int i = x1; i <= x2; i++)
			{
				dst->setPix(i, j, pix(i,j) == c0 ? c0 : '.');
			}
		}		
	}

	// замена цвета c0 на цет c1 в области текушей рамки
	void replaceColor(char c0, char c1)
	{
		for(int j = y1; j <= y2; j++)
		{
			for(int i = x1; i <= x2; i++)
			{
				char* pt = &m_data[j*m_width + i];
				if(*pt == c0) *pt = c1;
			}
		}		
	}

	// проверка, что данная точка одиночная (рядом с ней только '.')
	// x, y - координаты точки
	// r - радиус проверки
	// return - true, если точка одиночная, иначе false
	bool testDot(int x, int y, int r = 1)
	{
		for(int j = y-r; j <= y+r; j++)
		{
			for(int i = x-r; i <= x+r; i++)
			{
				if(i == x && j == y) continue;

				char c = pix(i,j);
				if(c != '.' && c != '*') return false;
			}
		}
		return true;
	}

	// сравнение двух картинок
	// предполагается совпадение размеров этих картинок
	// img - картинка, с которой сравнивается this
	// return - число несовпадающих пикселей
	int difference(AsciiImage* img)
	{
		int res = 0;
		for(int j = 0; j < m_height; j++)
		{
			for(int i = 0; i < m_width; i++)
			{
				if(pix(i, j) != img->pix(i, j)) res++;
			}
		}

		return (int)res;
	}

	// отображение рамки данной картинки в другую картинку (с другими размерами)
	// img - картинка, куда будет помещено масштабированное изображение рамки данной картинки
	void project(AsciiImage* img)
	{
		int W = img->width();
		int H = img->height();
		char* dst = img->data();

		float kx = frameWidth()/float(W);
		float ky = frameHeight()/float(H);

		for(int j = 0; j < H; j++)
		{
			for(int i = 0; i < W; i++)
			{
				float x = i*kx;
				float y = j*ky;

				int ix = (int)x; // целая часть
				int iy = (int)y;

				x -= ix; // дробная часть
				y -= iy;

				ix += x1; // смещение границы
				iy += y1;

				float q = 1.f - x;
				float p = 1.f - y;

				float c1 = ascii2val(pix(ix, iy));
				float c2 = ascii2val(pix(ix+1, iy));
				float c3 = ascii2val(pix(ix, iy+1));
				float c4 = ascii2val(pix(ix+1, iy+1));
				float col = c1*(q*p) + c2*(x*p) + c3*(q*y) + c4*(x*y); // аппроксимация цвета

				*dst = float2ascii(col);
				dst++;
			}
		}
	}

	// получение горизонтальных интервалов, соответствующих цвету с
	// с - исходный цвет
	// hInt - список, куда будут занесены полученные интервалы
	void getHIntervals(list<CInterval>& hInt, char c)
	{
		int left = -1;
		for(int i = x1; i <= x2; i++)
		{
			if(countV(i, c))
			{
				if(left >= 0) continue;

				left = i;
			}
			else
			{
				if(left < 0) continue;

				hInt.push_back(CInterval(left, i-1));
				left = -1;
			}
		}
		if(left >= 0)
		{
			hInt.push_back(CInterval(left, x2));
		}
	}

	// подсчет числа пикселей данного цвета на вертикали с координатой х
	// х - исходная x-координата
	// refCol - исходный цвет, 0 если все кроме '.'
	int countV(int x, char refCol)
	{
		int c = 0;
		if(refCol)
		{
			for(int j = y1; j <= y2; j++)
			{
				if(pix(x, j) == refCol) c++;
			}
		}
		else
		{
			for(int j = y1; j <= y2; j++)
			{
				if(pix(x, j) != '.') c++;
			}
		}
		return c;
	}

	// подсчет числа пикселей данного цвета на горизонтали с координатой y
	// y - исходная y-координата
	// refCol - исходный цвет, 0 если все кроме '.'
	int countH(int y, char refCol)
	{
		int c = 0;
		if(refCol)
		{
			for(int i = x1; i <= x2; i++)
			{
				if(pix(i, y) == refCol) c++;
			}
		}
		else
		{
			for(int i = x1; i <= x2; i++)
			{
				if(pix(i, y) != '.') c++;
			}
		}
		return c;
	}

	// заполнить текущую рамку указанным цветом
	// с - исходный цвет
	void fill(char c)
	{
		for(int i = x1; i <= x2; i++)
		{
			for(int j = y1; j <= y2; j++)
			{
				m_data[i+j*m_width] = c;
			}
		}
	}

	// получение первой не белой точки
	// (сканирование по вертикалям)
	CPoint firstPoint()
	{
		for(int i = x1; i <= x2; i++)
		{
			for(int j = y1; j <= y2; j++)
			{
				if(pix(i, j) != '.') return CPoint(i, j);
			}
		}
		return CPoint(-1, -1);
	}

protected:

	char* m_data; // данные картинки
	int m_width, m_height; // ширина и высота картинки
};

// картинка, полученнная со стандартного ввода
class InputImage : public AsciiImage
{
public:

	// чтение картинки со стандартного ввода
	void read()
	{
		char line[1024];

		image.clear();
		m_height = 0;

		while(gets(line))
		{
			if(!line[0]) break;

			if(!m_height) 
			{
				m_width = (int)strlen(line)*2;
				image.insert(image.end(), m_width+2, '.'); // верхняя граница
			}

			for(int k = 0; k < 2; k++) // увеличить вдвое
			{
				m_height++;
				image.push_back('.'); // левая граница
				for(int i = 0; i < m_width/2; i++)
				{
					image.push_back(line[i]);
					image.push_back(line[i]); // увеличить вдвое
				}
				image.push_back('.'); // правая граница
			}
		}

		image.insert(image.end(), m_width+2, '.'); // нижняя граница

		m_data = &image[0];
		m_width += 2;
		m_height += 2;

		resetFrame();
	}
		
private:
	vector<char> image; // данные картинки
};

// картика с собственными данными (не привязанными к внешнему источнику)
class CImage : public AsciiImage
{
public:
	// конструктор картинки размерами w * h
	CImage(int w, int h) : AsciiImage(0, w, h)
	{
		m_data = new char[w*h];
	}

	// конструктор картинки по рамке другой картинки
	CImage(AsciiImage* img)
	{
		m_width = img->frameWidth();
		m_height = img->frameHeight();
		m_data = new char[m_width*m_height];
		resetFrame();
		for(int j = 0; j < m_height; j++)
		{
			for(int i = 0; i < m_width; i++)
			{
				m_data[j*m_width+i] = img->pix(img->x1+i, img->y1+j);
			}
		}
	}

	// деструктор
	~CImage()
	{
		if(m_data) delete m_data;
	}

	// распаковка картинки из архива
	// src - указатель на элемент архива
	// return - указатель на следующий элемент архива
	char* decode(char* src)
	{
		const int sz = size();
		const int maxCount = 64;
		char* dst = m_data;

		int currVal = decodeNumber(*src++);
		int count = 0;
		bool flip = false;
		for(int i = 0; i < sz; i++)
		{
			if(count == 0)
			{
				if(flip) currVal = 1 - currVal;

				count = decodeNumber(*src++);

				if(!count) 
				{
					count = maxCount;
					flip = false;
				}
				else
				{
					flip = true;
				}
			}

			*dst++ = currVal ? '@' : '.';
			count--;
		}

		return src;
	}
};

// Образец шрифта
class CFontImage
{
public:
	// конструктор по архиву шрифта
	// изменяет указатель pData на следующий архив
	CFontImage(char** pData)
	{
		char* data = *pData;
		for(int i = 0; i < REF_N; i++)
		{
			digit[i] = new CImage(REF_W, REF_H);
			data = digit[i]->decode(data);
		}
		*pData = data;
	}

	// деструктор
	~CFontImage()
	{
		for(int i = 0; i < REF_N; i++)
		{
			delete digit[i];
		}
	}

	CImage* digit[REF_N]; // массив образцов шрифта
};

// Сканер картинки
class ImageScaner
{
public:
	// конструктор из исходной картинки
	ImageScaner()
	{
		img = 0;
		img0 = 0;

		char* data = (char*) fntData;
		unsigned long N = (data[0]-'0')*10 + data[1]-'0';
		data += 2;
		for(unsigned long i = 0; i < N; i++)
		{
			CFontImage* fi = new CFontImage(&data);
			fnt.push_back(fi);
		}
	}

	// деструктор
	~ImageScaner()
	{
		if(img) delete img;
		for(int i = 0; i < (int)fnt.size(); i++)
		{
			delete fnt[i];
		}
		fnt.clear();
	}
	
	// установка исходной картинки
	void setImage(AsciiImage* image)
	{
		if(img) delete img;

		img0 = image;
		img = new CImage(img0);
	}

	// запуск сканера
	// х - массив, куда будут помещены распознанные значения
	void run(int x[NDIGITS])
	{
// выделение символов
		CImage* d1[NDIGITS] = {0, 0, 0}; // изображения выделенных символов
		CImage* d2[NDIGITS] = {0, 0, 0};
		CImage* d3[NDIGITS] = {0, 0, 0};
		int x1[NDIGITS] = {-1, -1, -1}, x2[NDIGITS] = {-1, -1, -1}, x3[NDIGITS] = {-1, -1, -1};
		cleanImage();

		list<CInterval> cInt;
		img->getHIntervals(cInt, '@');
		int n1 = extractDigits(cInt, d1); // простой алгоритм 
		img->resetFrame();

		int n2 = extractDigitsPro(d2); // обход, все тона
		img->resetFrame();
		img0->copyColor(img, '@');
		img->smooth();
		int n3 = extractDigitsPro(d3); // обход, только черный

		int r1 = img->size(), r2 = r1, r3 = r1;
		int nRef;

		if(n1 >= n2)
		{
			r1 = scan(d1, x1);
			nRef = n1;
		}
		if(n2 >= n1)
		{
			r2 = scan(d2, x2);
			nRef = n2;
		}
		if(n3 > nRef)
		{
			r3 = scan(d3, x3);
		}
		int* src;
		if(r1 < r2)
		{
			src = r1 < r3 ? x1 : x3;
		}
		else
		{
			src = r2 < r3 ? x2 : x3;
		}

		// запись результата и очистка
		for(int i = 0; i < NDIGITS; i++)
		{
			x[i] = src[i];

			if(d1[i]) delete d1[i];
			if(d2[i]) delete d2[i];
			if(d3[i]) delete d3[i];
		}
	}

protected:

	// сканирование символов
	// d - картинки символов
	// х - результат
	// return - суммарная невязка
	int scan(CImage* d[NDIGITS], int x[NDIGITS])
	{
		// масштабирование
		AsciiImage* dp[NDIGITS] = {0, 0, 0}; // масштабированные изображения
		for(int i = 0; i < NDIGITS; i++)
		{
			if(!d[i]) continue; // ошибка выделения символов

			dp[i] = new CImage(REF_W, REF_H);
			d[i]->project(dp[i]);
		}

		int res = 0;

		// распознание: MIN(невязки)
		const int HUGE = img->size();					// заведомо большое число

		for(int i = 0; i < NDIGITS; i++)				// по 3 изображениям
		{
			if(!dp[i]) continue;

			int diMin = HUGE;							// минимальная невязка
			int fMin = -1;							  // индекс лучшего шрифта (DEBUG)
			for(int fi = 0; fi < (int)fnt.size(); fi++)		// по шрифтам
			{
				CFontImage* fImg = fnt[fi];

				for(int n = 0; n < REF_N; n++)			// по числам от 0 до 9
				{
					int d = dp[i]->difference(fImg->digit[n]);

					if(diMin > d)
					{
						diMin = d; // невязка
						fMin = fi; // шрифт
						x[i] = n;  // число
					}
				}
			}
			res += diMin; // сумма невязок
		}

		// очистка
		for(int i = 0; i < NDIGITS; i++)
		{
			if(dp[i]) delete dp[i];
		}

		return res;
	}

	// очистка картинки
	// в данной версии - удаление рамок (если есть)
	void cleanImage()
	{
		img->smooth();

 // удаление рамок
		while (1)
		{
			CFrame f0 = makeFrame(0);
			if(f0.frameWidth() < 2 || f0.frameHeight() < 2) break;

			img->setFrame(f0);
			int dx = img->frameWidth()/8;
			int dy = img->frameHeight()/8;
			CFrame f1(img->x1+dx, img->y1+dy, img->frameHeight()-dx-dx, img->frameHeight()-dy-dy);
			if(!img->checkFrame(f1, '.')) break;
			img->cleanOuter(f1);
			img->resetFrame();
			img->x1 = f0.x2+1;
		}

		img->resetFrame();
	}

	// выделение картинок каждой цифры ( простой алгоритм )
	// cInt - список горизонтальных интервалов
	// d - массив для полученных картинок
	// return - число цифр
	int extractDigits(list<CInterval>& cInt, CImage* d[NDIGITS])
	{
		joinIntervals(cInt);

		int n;
		list<CInterval>::iterator li = cInt.begin();
		for(n = 0; n < NDIGITS && li != cInt.end(); n++, li++ )
		{
			img->resetFrame();
			img->x1 = li->x1;
			img->x2 = li->x2;

			// серые границы
			bool bx1 = false, bx2 = false;
			for(int j = img->y1; j <= img->y2; j++) // слева
			{
				if(img->pix(img->x1-1, j) != '.' && img->pix(img->x1, j) != '.')
				{
				   img->x1--; 
				   bx1 = true;
				   break;
				}
			}
			for(int j = img->y1; j <= img->y2; j++) // справа
			{
				if(img->pix(img->x2+1, j) != '.' && img->pix(img->x2, j) != '.')
				{
					img->x2++; 
					bx2 = true;
					break;
				}
			}

			// сверху
			for(int j = img->y1; j < img->y2; j++)
			{
				if(img->countH(j, 0) > 0) 
				{
					img->y1 = j;
					break;
				}
			}
			// снизу
			for(int j = img->y2; j > img->y1; j--)
			{
				if(img->countH(j, 0) > 0) 
				{
					img->y2 = j;
					break;
				}
			}
			d[n] = new CImage(img);

			if(bx1 || bx2)
			{
				for(int j = img->y1; j <= img->y2; j++)
				{
					if(bx1 && img->pix(img->x1, j) != '.')
					{
						if(img->pix(img->x1+1, j) == '.') d[n]->setPix(d[n]->x1, j-img->y1, '.');
					}
					if(bx2 && img->pix(img->x2, j) != '.')
					{
						if(img->pix(img->x2-1, j) == '.') d[n]->setPix(d[n]->x2, j-img->y1, '.');
					}
				}
			}
		}

		return n;
	}

	// объединение интервалов если их больше 3
	// (по приципу объединения первых ближайщих)
	void joinIntervals(list<CInterval>& cInt)
	{
		while(cInt.size() > NDIGITS)
		{
			int d0 = img->height();
			list<CInterval>::iterator i0 = cInt.end();
			list<CInterval>::iterator j0 = i0;
			list<CInterval>::iterator i = cInt.begin();
			for(i++; i != cInt.end(); i++)
			{
				list<CInterval>::iterator j = i;
				j--; // предыдущий интервал

				int d = i->x1 - j->x2; // расстояние между ближайшими границами интервалов
				if(d < d0)
				{
					d0 = d;
					i0 = i;
					j0 = j;
				}
			}
			if(i0 == cInt.end()) return; // ошибка

			j0->x2 = i0->x2;
			cInt.erase(i0);
		}
	}

	// выделение картинок каждой цифры ( алгоритм обхода фигуры )
	// d - массив для полученных картинок
	// return - число цифр
	int extractDigitsPro(CImage* d[NDIGITS])
	{
		CPoint dr[4] = {CPoint(1, 0), CPoint(0, 1), CPoint(-1, 0), CPoint(0, -1)}; // направления движения

		int n;
		for(n = 0; n < NDIGITS; n++) // для каждой цифры
		{
		// обход фигуры
			CPoint pt0 = img->firstPoint();
			if(pt0 == CPoint(-1, -1)) break; // цифры кончились

			queue<CPoint> q;
			q.push(pt0);

			pt0.x--; // внешняя точка

			CPoint pt1 = pt0, pt = pt0;

			CFrame f(img->width(), img->height(), -img->width(), -img->height());

			img->setPix(pt0, '*');

			int dir = 0; // направление движения
			int turn = 0; // направление поворота
			do 
			{
				pt1 = pt + dr[dir];
				char c = img->pix(pt1);
				if(c == '.' || c == '*')
				{
					img->setPix(pt1, '*');
					turn = 1; // направо
				}
				else
				{
					q.push(pt1);
					turn = -1; // налево
				}
				dir += turn;
				if(dir < 0)
					dir += 4;
				else if(dir >= 4)
					dir -= 4;

				pt = pt1;

				// габариты фигуры
				if(f.x1 > pt.x) f.x1 = pt.x;
				if(f.y1 > pt.y) f.y1 = pt.y;
				if(f.x2 < pt.x) f.x2 = pt.x;
				if(f.y2 < pt.y) f.y2 = pt.y;

			} while(pt != pt0);

			img->setFrame(f);

		// копирование точек внутри области
			d[n] = new CImage(f.frameWidth()-2, f.frameHeight()-2);
			d[n]->fill('.');

			f.x1++;
			f.y1++;

			while(!q.empty())
			{
				pt = q.front();
				q.pop();
				char c = img->pix(pt); 
				if(c == '*') continue;

				img->setPix(pt, '*');
				d[n]->setPix(pt.x-f.x1, pt.y-f.y1, c);
				for(int i = 0; i < 4; i++)
				{
					pt1 = pt + dr[i];
					c = img->pix(pt1); 
					if(c != '*') q.push(pt1);
				}
			}

			img->replaceColor('*', '.');

			img->resetFrame();
		}

		return n;
	}

	// определение рамки исходя из данного цвета
	CFrame makeFrame(char refCol)
	{
		CFrame f = *img, f0 = f;

		// слева
		f.x1 = -1;
		for(int i = img->x1; i <= img->x2; i++)
		{
			if(img->countV(i, refCol) > 0) 
			{
				f.x1 = i;
				break;
			}
		}

		if(f.x1 == -1) return CFrame();

		// справа
		for(int i = f.x1+1; i <= img->x2; i++)
		{
			if(img->countV(i, refCol) == 0) 
			{
				f.x2 = i-1;
				break;
			}
		}

		img->x1 = f.x1;
		img->x2 = f.x2;

		// сверху
		f.y1 = -1;
		for(int j = img->y1; j <= img->y2; j++)
		{
			if(img->countH(j, refCol) > 0) 
			{
				f.y1 = j;
				break;
			}
		}

		if(f.y1 == -1) return CFrame();

		// снизу
		for(int j = f.y1+1; j <= img->y2; j++)
		{
			if(img->countH(j, refCol) == 0) 
			{
				f.y2 = j-1;
				break;
			}
		}

		img->setFrame(f0); // восстановить границы

		return f;
	}

	AsciiImage *img0, *img; // исходная картинка и ее текущее представление 
	vector<CFontImage*> fnt;
};

int main(int argc, char* argv[])
{
	InputImage mainImg; // входная картинка
	ImageScaner scaner; // сканер
	int out[NDIGITS] = {-1, -1, -1}; // результат

	mainImg.read(); // чтение картинки

	scaner.setImage(&mainImg);  // установка картинки для сканирования
	scaner.run(out);			// запуск сканера

	// вывод результата
	for(int i = 0; i < NDIGITS; i++)
	{
		if(out[i] >= 0) printf("%d", out[i]); 
	}
	printf("\n");

	return 0;
}

// Архив шрифтов
char fntData[] = "45"
// 0) MS Serif
"076<;852573844485348533;315;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;423;33485438456366525;67"
"0:3?5>6<89;9;7526>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6<:::5D"
"067:=7=63582558238722;6>6>6>6>6>6>6>5?5=5?5?4?3@4@3?3@3?5?4?3=12o1C1"
"0689>6>536653683287?5?5?5?3?5?4=7=5;<<:::=7?6>6?5?5?5?5?5?41595175717556;6"
"0=5?5?5=7<8<8;315;31595159335834564556455645553754385258523:520@=5?5?5?5?5?5?5?52"
"06=7=7=7;8<82B2@2B5?5>;9>6?<8?7?5?6?5?5@4A3A3A323:523:4178436455?6=:77"
"0:6;9;5>3?5?4?5?3@4@4@3?546551<251<2856168<8;;9;9;9;9;9;:862485348545555?6<;67"
"02B2B2A1C1C12>3?4@4@4@4?3A3A3A3?4@4@4@4?3A3A3A3@3A3A3A3?3A3A3A3:"
"0698>65555384449434:334:334:336834583465468138<::8>534934493386339;:8=7=7>6>6>321>233;334854384895"
"076<;8<75554566348533;315;9;9;9;9;9;9;::426662B3<1466446644@3?5?4?5?5?3?4>6>4;6:"
// 1) Arial
"076<;8=671746562585259424:514::;9;8<8<8<8<8<8<8<8<9;9;414:514:515951585356637276=8;:95"
"0?5>6<8;99;6>4e2@4<88<7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7"
"077;<7>572736653585159515:415:423;4?5?5?5>5>5>5>6=6<7<7<6=7<6=6=6>5>C1C1C1C"
"076;<7>572736653585249524:4?5?5>6>5:9;8<:9<>7?5?5@4@8<9;9:51595167618284>7<:95"
"0=4?5>6>6=7<8<8;9;414:42494349434844474546554646455644574448430@=4@4@4@4@4@4@43"
"04?4@4@4@44?5?5?5?4@4?>6@4A382825762496?5?5@4@4@413<9:::51585266637275>7<996"
"086;<7>662745653585249515:414@4@44484294A3B2856177<9;:9;414;414;414;415:415952585266547275>7<:85"
"10@?5>5>5>5?5>5>5?5>5?5?4?5>5?5?5>5?5?5>5?5?5?5?4@4@4@4;"
"076;<8=6627465545753494259425943485357545556=8;7>5@36662595159514;9;9;414;414:51595167537374?6=995"
"076;;8>58164665358524:415:9;9;9;9;:::96158616582B3<144:247454?5?514:424952495256637366=8;:87"
// 2) Arial Black
"077;;7>5@4A3A28381748175?5?5?5>6>6>6>6>6>6?5?5717571757174818381B3A3@5?6=995"
"0<8;9::9;8<6>5?20Z2@4>6:::::::::::::::::::::::::::::::"
"077:=6?5@3A3B18381847175717575357=7<8;8;9:9::9:9:9:99;8;8;B2B1C1C1C1W"
"077:<7>5@4@3819274727474457=7<7:::9;9;::;9;=8=7=7=>6?57174818292A3A4?6=8:5"
"0<6=7<8<8;9::::9;8<8<76166716662656364736464636562756200<<6>6>6>6>62"
"03@4@4@4@4@3A3A37=6>6329>6?4A3B2B28291748=7=7=7=7166?57174818282B3@5>7<9:5"
"086;<7>5@3A38182838174817=7=63557193B2C1C1:1B3@5?6>66167617661757184728192A4@4?7<9:4"
"100O<8<7<7=7<7=7<7=7<7=7=7<7=7=7=7<7=7=7=7<8<8<88"
"077:<7?4A3A2828274817571757175717473A3A4?5?4A2B283@5?5>6?5?5?4818291C1B3A4>8;4"
"067;<7>5@4@3B2747265?6>6>6>6>67174818291C2B2B3A5627=7=73548174728283@4@5>7<996"
// 3) Broadway
"094=9:53386436762486248723872298219821982199;9;9;9;9;9;9119911982198219821982287238634762575276348;:95"
"0B2=79;4@1W114>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>6>5?5?5?5?"
"095;<7536546642863297229712981298129812891289136:226:225:9;9;8;9;8;9;8;9;8;9;8;8<8;8;351C"
"085;=6528444842693269;9;9;9;9;9;8<79::8@7=9;9;::::::::::<8=7:127924584?7;5"
"0T1B2B2A3@4?5?5>6=7=7<8;9::::9;82198219722962396149524942594C1C89;9;9;9;93"
"05=7=729181B2B2B8<;8=7347=8<9;9;:226:136:127:127:118<8<8<8:118:127:12793269335853477<9:5"
"0:4=9963386436752585249;9:9;9;933591739123329721:8<8<9;9119911991199119821982288229623962485267338;:95"
"0DJ68;9;9;8;9;9:::9;9:::::9::::9;9;9:9;9;9;8;9;9;8<8;9;8<8<6"
"086;;8455548344;235:2279228822:622<332=133@4@4A4A3B3A2B2B123A4?6>8<::;712;523:443855=8;5"
"084=:942673475358426832792279218<8<8<8<8<8<8:127:127:224<2B451::::9;9;941684268525763468;:87"
// 4) Jokerman LET
"084>8;;8=6>6825493437123526222626621415:4178<234;1538451:11251=234;99;315812315771756285536743632235532145>7<9:;86"
"0@47=1W1C1C6>7=762576167526751775169416941694169;9;:::::::::9;9;9;9;9;9;9<82"
"067;<6537545644763386334133132423231329273818372223633323;8;315;323;8;8;8;7=6=6=6>5>594253;1C1C1q"
"029;A3B3A3@4744?5>5>4?5>5?413;8;:>9=7=6?5?532:523:;9;8734565?4?5?:613;251;3:"
"071C3@4@4?521<414;414:514:523:4@45375538413136613136622138332135C1C3A1@3@6716>6>6>6>6>3A3A3A37"
"02:;>6?653746653673647265?4@4@4@4@<8=8=73387329:226;126=7=::<:51461261321322614122927284?6=9:5"
"0=1A4>6=8;:9;8;89:9;7<7=6=6>5?529442;251=15143614235:232139232229273413272513353514:51496256646276=995"
"014@>6C1C1Q2<77=4?5>6>64465554655465446>6=7=6=7=313<8<313<8<314;414;8<8;9<8>57"
"075=:8535754556545655465546464556455646456=8<8=57273413192422122613:<6>6219;912511=12191522281612191B3A4?6=995"
"06161<2431378236>212?2B2756357624952495249;9;95347644573A231>22451692369236>6>6>6>6@4=7=7@4=7=43"
// 5) Viner Hand ITC
"0;5=8::::9<75266537455645564466357625671577157714871397139;9;96149614952485347634754465635574358;:8=6;"
"0@4>6<8;89:7<6>5627531135>5?4?4?5?4?5?4?5?4?5?5>6>6=7=7=7=7=6<9;9;4@"
"0T3?5=7<7<8;423;413;333;233@3A2A2A3A2A2A2A3A2A3A2A3@67249442;342<24142=135:138723:16"
"0B27=7=5>6<9236=4?4?6=;9<7=66111564647184@3?4?4?4>4?5>4=5?4>4?6>5>6>5?3A"
"0?1B2@4@4@3@4?5>6>5>6=313<323<232<242614342522542431912431V1A=3A2B2A3A3A3A3@4@3A2:"
"0:1B;8<7<8;95?4@4@5>9;::::::244?4@3@4@3@3@3@3@3@3?4@3@5>5>5@4@3@"
"0=3?5>6=7=6>5?5>6=6>6>5>5?4@4?4@4@3@4?466433;2B2:3517751595149515754>6=89;7;"
"0B13B1p231517>5?4@3@4@3@3@4@3@3A2A3A3A2A3A2A3A3@5?5?5?4@4@3A2>"
"07251;>5?4@4718375446635563654484439523:513<7=6>5@5?6=7<314;324:425933593448353925483359::9<7>4>"
"0M6=8:>6>541:44384447454743574447532:4?591467347354@3A3@3@3@4@4@4@3@4@412=7=7=6>4;"
// 6) Chiller
"071A6=8;9;831784258535583368335:325;314<8<7>6>6>213>213>213=313=313>223=223318233<243;24493547366439;;75"
"0=3>:9;7=3A5?3A2B1748174725671586>6>6>6>6>5?5?5?5?4@4@4@4@3A3A4@4@4A33"
"0:6;;8=6@392547544574@4@4@4?4?4?4?4?4?4?4@3@3A3@3@4@3@3A2A3@3A2AA35="
"05m1=142944?4@2@3A2A2A3@3@3@8;;9<::?6A3B2B3A3A3@3A3@4@382639334;77"
"073@6>6>6>5>5>5?5>512<423;42494349433944441351h3454@4@4@4@4A3A2B2B2B2B2B2B28"
"022A6=;22131W1A38=4@4@4@4@4@5?9;<9<A3B3A3B3A3A3@3@4@3@471658244:9<6<"
"0;3@6=7=6=5>6=5>6=5>6>5>5?5>5?4@47184547349433=132>131?13143813234;315<8=7716662A4?6=4"
"013@D1C1B5474@2A2A3A2A2B2B2A2B2B1B2B2B1B2B1C1B2B2B1C1B2B1C1C1B1="
"0<1A4?512:;95257554647364736392639264827382746358335>562755663584359326932693269326423335483647364747356733214<31685"
"0:2>::<7=7644566445843448444854295<125;1369238543@3A3@3A3@3A3@3@3@4@3@3@3A2A2B1A3;"
// 7) Algerian
"075=;8=641:441227431166241175241176167411158615991199119911991199119911951311951595158615861411741123117625731145564634116;126:128812:95"
"0:4?75249433:5?56185?8318<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8;:8=7>6?"
"074=:9>551:3B24115814116714117411141176171144111911241129272711273112212511471512;512;8;8:512;8;412<7=5:13311;215;31C1C1W2B"
"082>;8?441416341238265725762666275637441137375317129613:8@5;;>7?6>632117<8<8<86141165111411671745123=124<125413338:5"
"074@411>411=7=6>411>611;621119411121199119311131186131183112311852311731133117533116543116543115553115@3D;3241=15;315;31113;311>6=8<9;92"
"0?1B4B25>6?5=115;135=73A3A3A;9=7322265619411167527511>411>641963476158417841611651116662512374?6=722332:95"
"093>:8>5?5312373646111411731216711326725615761859254819271;193718551711641874187411158411158411167411167411256634114511441224116;1279128713;85"
"03@4A3A3?11311=11311=113111991183111685221192113485>5>6>5>6>6=411>411=7=6=511=511=511=7=7<8<8<8<8=76"
"0;1B4A3@211>311=411<4168>58174311313443118435744662114733116;128:9<732:34124726741113119:::;9;41311:414118526654634124<127;4"
"082>;8436641;43115636731126752584178417841867166716581511482@113:1411381611522324117337=411=7=411>6<7=6<7<78;9522<6;"
// 8) Stencil
"08212<514:51585356546554646472747274817481748174@4@4@4@4@4@4817481748174817481747364736465546563576168515:4136"
"05<3A4@5?7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=7=5@3C1C"
"06214:51766184638372927381928192B29182916493358;9;8;9;8:8;7<6=5>4;2B24:332B1C1V1C1B22684"
"07114;417751855383648274818381838174817482557=7<7:9;8<8?7=8=82468165@4@4@4@4?5815582728461874174"
"0=4?5>6>6=7=7<8<8<8:118:1189218831883187328633863385348435843583368381C1;171;98<8<8;:9=7="
"023=13A3A3@4?5>6=7;M2A3A322166313175718471934683189;9;92459164A3A3A3A3@4826482719461874165"
"08213<41595176545564645473647273827382746375447=74367273819281:27112817481748174817481748174826482648354746375617751694154"
"0759?221C1C1C1B2A324:337642=2@3@4?4?5?5>5>6=7=7<8<8;9;9;::::::::9<8<77"
"07313:616671747364737283728381838183818381837373737365717751586157627473728381838183A3A3A3A38183818382818381766163"
"07311<614871567355646374637472747184@4@4@48174817481:18291838184628<8516835482738273737373736464646456625851694146"
// 9) Century Gothic
"084=:9<76265565448434:424;323<413<8<7>6>6>6>6>6>6>6>7=7<413<413<414;324:4348454655>7;;86"
"04@2B1C;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9"
"085<;8=66364575349424;414;413=313=313<4@4@4?4?4?5>5?4?5>5>5>5>5>5>5>5>5>B1C1C"
"084=:9<76265565448434:424:4@4@3@4>6:9;8<9=8@5@5@4A3A3A7=313<414:5159436564?6=8:5"
"0@1B2A3A3@4?5?5>6=7=7<413;423;423:4339443854384537463656364735B1C1W>3A3A3A3A3A33"
"06>5?5?54@4@3A3A3@4@4@::<7?5?5295@5@4A3A3A3A3A7=7<8;5158526663?6=9:5"
"0Q4?4?5>5?4?4?5>5?4?5>5>5><8>5@3675259514;8<8<8=7<413<414:5159517564?6=8:5"
"1q@4?4?5?4@3@4?5?4?4@4?4@4?4@4?4?5?4?4@4@3@4?4@4?4?4@4A2@"
"085<;8=67174574449424:424:424:43494349435656=7<8<7?4575259514;8=7=7=7=7=314;4159525663@6=8;4"
"085<;7>5817366624:514;413<8<8<8<414;414:5158536564?7<9;>5?4?4?5>5?4?4?5>5?4?5@3<"
// 10) Juice ITC
"076<:945374646384449335933594259424:514:514:::::::::::::514:514:514:514:51594259434934484538364639434:86"
"0>3>6<7;98<7=4448<8<8=7=7=6>6>6>6>6>6>6>6>6>6>5?5@4@4@4@4@4@4;<3"
"086<:5223544674358434952495249523:522;522;431<4?4@4?4@4?4?4@3@3@3@4?491549253:243;233;323;413<H"
"0115773143546653585249524:423;512<512<4?5?4727382639::;92747284@7>6>6>6>7=8<8<9:416842214742143449:5"
"018553754655275627562747274637463737364736383547454745384311384221C1L3422<431<4@4@4?5?5?5?5?5?5?5>82"
"1D1C3673467346725582558164@4@4@4@3A217:=727651:5?6?6?6>6>6>7=7=8;:951212942213752134359:5"
"076<:3154522244664385349424;324;323=223=223=214>11445742:4764368425:414;9;9<413<413<413<414;423:52494438463657354995"
"1c<7=7=6=313<413<322<422<421=331<4?5?5>5?5?4?5?4?5>6>6=6>6>5>6=6>6=7=97"
"077:53474654484358524:424:424:424:42585348454746453:9::8465349434::;9;8<8<9;9;414:514:43484546564449:5"
"067<41584636474458434:424:414;414<8<8<8<414;414:515953476453323673411>411>412=412=413;423;424:4258435834664413334;95"
// 11) OCR-B 10 BT
"093<<7?4@4647348525852594259514:514:::::::::::::::::514:514:514:515951594258535753A3@5>7<4"
"0<8::8<6>4@1g2@4>6<8::8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8"
"083<<6@4B2738248713:611=5?5>6>6=7<7<8:8:9:9:8:8;8<7<7=6>5?5>6>0@"
"1C1C1C1C2B<8;8;8;8;8;8;8<::<8=<9>6?6?5?5?5?5?5>7<;871C1B2A5<6"
"095?5>5?5>5?5>5?5>5?5>5?5>5?54465546554556455645564457440@<4@4@4@4@4@44"
"01B2C1C1C15?5?5?5?5>6>=7@4A3B=8>7>6>6?5?5?5>6>6<8;89;1A3@4>6::"
"0;7=6<7<7<7=6=6=6=6=7=6==7?5@3B27562675259::::::::514:51595167536563@5?6=995"
"10@?5>6=6>5>6=6=6=6>5>6=6>5>6>5?5>5?5?5?4@4@4?5?5?5?5?5;"
"068:<7>5@46473575348534853566365556366=8;:99<7>573637562675259::::::::5158616671B3A4?7:5"
"092>:8>5@472826662585259::::::::515951586166727373A4@5>9;=6>6=6=6=6=7<7<7<7<7:"
// 12) OCR-A BT
"04=4B2C1b;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;H1C1C1B1"
"02;8<7=8<8<?5?5?5?5?5?5?5?5?5?5?5?5429534853485348534853485348534853485341C1W1C"
"02?4B1D1C1C@4@4@4@4@4@4@4@43A1C1C1B1B25?5?5?5?5?5?5?5?C1r"
"02?4B1D1C1C@4@4@4@4@4@4@4?55?4@4?5@5??5@4@4@4@4@4@4@41C1W1B1"
"022A4?5?5:23594258525852585258525852585258525852585258525852C10?>5?5?5?5?5?5?5?5?52"
"04>6@4@4@4?55?5?5?5?5?5?5?5?>6?5@4@4@@4@4@4@4@4@421=415:H1C1C4?1"
"023@6=7=7=6>5?5?5?5?5?5?5?5?5?5?5?A3C101;9;9;9;9;H1C1C1B1"
"02B10?14;421=4@4@4@4@4@4>6=7<7;8;8;7=6>5?5?5?5?5?5?5?5?5?5?48"
"0699<8=7=7=753575357535753575357535753575356?3B2C1b;9;9;9;9;9;9;9;H1C1C1B1"
"04=4B2C1b;9;9;9;9;H1C1C2B4@@4@4@4@4@4@4@4@4@4@4@4?5>6>6>6"
// 13) Playbill
"0689>4A3B20H1B4@4@4@4@4@4@4@4@4@4@4@40u2B2A4>4"
"098216;2B2B2B2B2B2B2B211@214=214=214=214=214=214=214=214=214=214=214=214=200Q"
"077:=6@3A2C1C1C1C1C18291838182918299:9:8;8;8:99:828282818381C1C10m"
"01C1C1C1C1C1C1C1C174817373727;7<7<:9=7>8229;917391739173g1C1C1C1C1B3@6=3"
"099::::9;8<7=7=6>6>4@4718381837282828273820@:8<8<89=7=7=7=7=7=7=7="
"03A3A3A3A2B2A3A3A37<8<8<7175@4A3B2C1649;91739173A3051C1B2B2A4?7;5"
"0689>5@3B2B20H3@4718<8165A3B2C192A4@4@4@40b1B2A3@6=4"
"100W7=5717472746=7<7<8;8<8;8<8;9;9:::::::::::9;9;9;97"
"0698?4A2C1C1C1C1C1C1829182918291B4?6<6@3C182B3A3A3B1051C1C1B3@5>3"
"0698>4B2B20a3A4@4@4A2C191C1C3A723818381820I1C1C1C2A4?2"
// 14) Abbess
"092?8;433:344836464646474457445752585258615861586158<8<8<86158615861586158615853575357454745473745483539433;86"
"01@4C2?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?4A2"
"0759>655553855286429541:631:6>6>6>6=7<8;8:9:998;4?3@2A3A2B142<21;5X1C1B211?413:5"
"074<<84467274727561955195?5?5>6>681469::9;::2279156?6>6>6?531;531;523:5149;95167644557=8:5"
"0>1B2B2A3A3@4?5>6=214<314<224;324:334:2449344844483544124543224542315542315591W;4@4@4@4@4@5>64"
"091=11?3A3@4?5>6229725492B2B234;219852673665286429541:6?5?5?5?531;531;522;522:614951586346565367;5"
"0;2?:9425835383727472649164?5177>5835475536752675258<8<9;9;951595159515951595159525753575447464638434:95"
"113790S1>3211384311>3A2A3@4?4?4?5>5>6>5>6=7=6=7=7<8<7<8<8<8;::;7"
"093=:953565554566357526752675267535753566455566168::<7536465635761586159;9;9;95159515951586257545548515:95"
"084=:94447464547544843585249524:514:::::::;9;951586158616672567264836286725743641955195428553746364662571198"
// 15) Ravie
"0;5<:8=6>5@3A3A2B2B1838167615:414<7=7>6>6>6=314;4159516761B3A3@5?5?6=8;:9<76"
"0B139352:262:252;162:17291837193@5?7427=7<8<8<7<8<8<8<8;9;9;9;9:;9;9<8>6>6>64:"
"085;<7>5466465628462936293629362:1738274637<8;97<6=6=6<41369315:414:51416441318431>3B1G142=1369237823943"
"086;;75455565474638362:263917391737374538:9:99::<<9=8<8444828371:271:271:2B2719371846274734485>7<4"
"0<1A3?5>7=7=7=7<8<8;9;:316424225434135353224354224354223368334;152<1C1?131915132545222365>6>6>7=9:9A32"
"0T2B3A32B3@4@5?567166>6>6?5?5177?5@45474187>6554629361:361:3A3@461856176535664?7:5"
"094<<6@384536481649163:163:154:154:1549157535447528551:4A3A3B3656349434:334:334:426753A3A4@5>7=9:3"
"10@158434853385446644655456545654466356=7=7=7<8<7=7=7<8<8<8<8<811:;9;9;8;93<"
"067;<7?4@4A375535843494339534665?5>7<9<7?4A2B166714:513=8<9;317751C1B2B3@5>7=8:5"
"065<<8>5?5@4A3A3486249524:424:434853A3A4@5?5:1467259245285529451:4@3A3@46184627472A4?7;5"
// 16) Blackadder ITC
"093@5>8;9;98635564637562576167=7=8<8<9;:;9;9;9;851684277428634754483558156=8;;9<7?47"
"0>6::7<6>5?5?6418<8<8;9:9;9;9::9::9;9;9;9;9;9:9;8<8;>5>5>5=6;98<"
"041B2B2C1A111@211@121C1C1C1B2B1C1C1B3@4@4?6>222>13200c1C1C1"
"0;3@5>7=8;;8319635653837255>6<8;9;:;:?5?5?5?5<6=7:988:7<6=5>4@2B2B1C1C"
"0<1A3?4@3?5?5>6>6>4@4@4?5?44394349424513;332B1B241;3358<5?5?3A3@4@3A3@3A3A2<"
"0I57357533A3@44@5?4?5?5>5?4@<8<8=7526645563665366>6>6?581649245834583359325:325:8<8:"
"0A2@5>6=7<413;423:441:4?4?5?3?524942593267?4@351;36842774187418831:632:442:442;244@6=:9;9<75"
"0C168245?5429444842657265>6>5?4?5?5?5?5?4?5?4@4?5?3?5?5?4@3A3A3?4>6<7=4@"
"041B3A3@211@211@211@4@3B2A2B3@5?122?122>231>231?131?131?211@211@4A2B200L"
"0>1A6<9:424934583547364736474547544754485249:;8>6?5>5>6>5>5?4@3@4?4@4?59153;234;8=5>"
// 17) Blackletter686 BT
"0<3?6;=2:16372223421422135214221352142213521422135214221352142213521422135214221352142213521422135214221352142213521422135214221352142213521422135214221352142213521422135214221352142214331=2516812314=4<"
"0739148712<511527473641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333641333713162D26242;318561"
"0<2?7:>1:261813243214221442142214421422144214221442142214472214562214742214=214=214<314;9:9:6=4?4?49243;233<23:343B2B12861218822A3"
"0=2@6<;3:163712244214212352142123521421235214212352142123662123752124<8;4>::22115823123923123923123>123>123>123>123>123>1236711243A24357<8154:"
"0;2A4@4?6=214=214<314;414:514:21214:21214922214823214233232141423321414143219143219143214161232141>1C17:214=214=214=214=2141293178212149236>46"
"065617=6>62756923633772B2B2B2B253:2373142231848174423146266>6>6>6>6>6>6>6>6734658163A35257;?3;"
"0<2@:7=2:1637184214346214=214=214=214=214=2144272142621221?221716321427421426521426521426521426521426521426521426521426521426521427331=25168127>4<"
"029:C1C12:4121;53134<12=322<413<323;332;4>5>5>6=6>5>6=214<214<314<223=223<314<314<3152363297227:215<7>4:"
"0<3?6;=39164622145213221362132213621322136213221362132213621322135722145>987A47221442142213521422135214221352142213521422135214221352142213521422135214221352142214331=2516812314=4<"
"0=2@5=;3:16371314421426521426521426521426521426521426521426521426521426521426431<3A3216267436>6>6>6>6>6>65726451;27148:9144;"
// 18) Bradley Hand ITC
"0<2?6=8<42395347472738353:333<233<232=223=223>122?113?112@112?211@211@4?5>312>222=322<332;342:3536572558;:7;"
"0;2A4@4?4?5>5=7881386339353A2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2>222:?122C1C"
"084=9:;7563549344:333<232>141>2B2B2B2A2B2A3A2A3A2@3A2A3@2;333:99::32782231576456478?5"
"0:2=<8=476345:143<232<241=2@4?4?4=5=6=5?4@9=9=117B3A3C1C1C1A3A7;412<4241121173?6=6"
"0>1@212?212?211?221>321>321>222=232<332<242;342:351:3528912511=471A87=231?1B2B2B2B2B2B2B2C1C1C26"
"0=1425?5<83B2A2B2B2A3A2B2A215<;9<83548193B2B2B2B2B241=241<251<251;361:272739262;9<6:"
"0<1A4>7=6=2A3@3@3A2A3A2B2A2B2:11142972285131265421154811143:11133;323;423:21212;31212:322128441126554457<99=3="
"0@1B342945>8921B2B1B2B2B1<332516>711611>2B1B2B1B2B1B2B1B2B1B2B1B1B2A2A2@3A"
"042@6=511=22121<161<161;161<161=141>131?211A3B1B111@221?131D1=151=151>6@11100a1D2"
"0?1?6<513;2539272828282836293628462632162524169417481C1B2B2B1B2A2B2B1B2A2A2A2A2@3@2?4;6>"
// 19) Brush Script MT
"0>3?6=8:;8<7=693257625672468245923683269325941694159425942495249424952485347634664456634764187<8;:8=6;"
"0A2?6<8::7=6>47184438;8;9:9:::9:9:9:::9:9:::9:9;9;8;9;8<8<7=7>6@4="
"0@2=98<6>6>5:235762468244934484474546455267<7;8;7;8;8;8;7<7=5>592446633494@4?6>6=7;8"
"0<5<:8<7>6>6482639264827283?5=6:98::7<6>9;::254B3A3A3@45195428552666>5>7<8;:8:"
"0B2@4?5=7;612:5238624763466346634654565446545555464555464645914691C1B3@4@4=8:@4@4@4?5?5@39"
"0;99;9;8;8<8;8;94?4@3A3169<8<9<8<8453B2A3A3@4?48255643663385>6>6=7<8:;7<"
"0R6<8;7<7;7<7<7=6=5>5239=6?5?4:2449344754466436653575356545654465544763476=7<9:;7>5;"
"0<49?4@3A2B2B15951396=6=6=6=6>5>5>6=6=6=7=6=6=7=6=7=6>6>6=8<7=7=5?"
"0<89;7=5?5>6>565364736463745384439433;8<7>6>5?5>7=7<323;423;333:34394439353934483449;:9<6<"
"0>3=9:;7=6>4@3;233:334851131874177<7516761666255834394@591476249334@4?4?5?4?4>5>6>5>5?4="
// 20) Calligraph421 BT
"086;<8<6?571835753495159514;414;414;8<8=7=7=7=7=7=7<9;414;414:515943494365547365>7=8:<76"
"0B21C1C69;8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8;>2q"
"047<:9<8=7=7=>6>6?5?5?5?5?5?5?4?5?4@4?4@4?4@4?4?4??5@2B1q"
"077;<7>5?5367>6>6>5?5?5>4?5>4=9;:;:<9<9=7=7>6>6>6>6=6>5328643574>6;9"
"0=2A3@4?5>6>6=7<314;414;324:334:3349344835483547364736463746q1734@4@4@4@4@4@4@4@27"
"08<6>5?5?57<4?4@4@4@6=9;::;<9<9<8>7>6>6?5@4@4@4@4?4?561756=7<8::"
"0A3>5=6=5>4>5>4>5?4?5>5>54385275A3A3486159;::::::;9;9;9;415951594357446555>8;4"
"01p1C2A>5?5>5?4?5?4?4@4?4@4?4@4?4@4@3@4@3@4@3A3@4@3A3@3A3?"
"095<;8=5555547543943494349435843584456456446=8;::;:841945393467257714::::;9;9;415:3268428454?7<4"
"086<:9<736554745385349433:523:523;423;424:424:424:425942594267536654:146>7624;135>5>5>5>5=6=6:8:7="
// 21) Colonna MT
"084?7<9:::353621263114572122213752213761212831215831883188318831883188318831883188318831215831212128312121376211375356312411263117343::;8=76"
"0>1@4:4245924592486249524:424:424:424:424:424:424:424:424:424:424:424:424:424:424:424:424:4249524952576257626392B29"
"074>99<?687146:144<13435513246413238723863296329453846283@4@4?4@3@4?4?49154835?4?4@FA3A2B2"
"03A2A4?4?5?5>53836283@3@4@3@3@5>7@521>8=412>313>6>6>312>312>7=8;31312:3122383132455124;21888"
"0@1B2A3A3?5>6=7=7<215;315:32593358345735572656275212285121V=5?5?5?5?4@4?4@4?3A2A29"
"0U33A3@H>6=73A2B2B2B2B8<:217344126177>313>6>6>312>313=312>312>612:31322931233765516117:;79"
"0?1?5=6=4@3@3@4?4>113>213>5>219821:721;113754112673121673121213881383141383141383121583121583121212862113753113631244631173431199<76"
"02?122B2>131?131?122B22:612:31312:31311;312>6=313=313=312>213=313=313=313=312=313=313=7=6>213=313=6=312<4>5?3>"
"093>9:;62135451137432137436742774231374231463431533541:64188436862668254@34452314741313941213:31213:31213:613:31213:3112493538365547<:96"
"084>891142411521352123213631222137212221282121312821612822422831422831512831212128312121283121213731222136312311;226:13842212>312>312>212>311?2A3@3@4?4>4@3;"
// 22) Consolas
"0:1?99=6>572745662585259514:51496148;8<6>5?47183638174?5=7<8;94159514:51594267535654@5>7<9:5"
"095=7;99;7=6>762574457265?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?57C1C1C1C"
"091>:8>5@4A35664296>6?5?5?5>6>5?5>6=6=6>6=6=5>5>5>5>5>6=6=0?"
"082;?5@4A362931:7?5?5?5?5>6=6=67=7;9=7?=7?6?5?5?5?5?5>6<71C1B2@4>6"
"0;5>6>6=7<8<8;414;414:514:424943494348444754474547454646454745474457440@<4@4@4@4@4@44"
"01B2B2B2B25?5?5?5?5?5?5?5?=7@4A3B<8>7>6?5?5?5?5>6=6=71B2A3@4=7"
"0=5:;7=6>59:7<6>5>5?5?5?4457@4A3B1:27168;::;414;414;414;415:415951595257537374?6=995"
"10T?5?4?5?5>5?5>5?5>5?5?4?5>5?5>5?5>6>5>6>5>6>5>6>5>6;"
"0:1>;7?4A3647258615951595159515861675364738175>8::;8=572746472586159::::::;9515861B3A4?6<4"
"0:1?99=6?47372675258614:514::::;9;414;415:416761C2B3A4;14?5?5?5>5?5>5=74?5>6<8:8"
// 23) Curlz MT
"091A3@314;317831234721212236317134324121433221112232432132413534413=313=313=7=7=7=7=7=313=313=223<324;243;243:2639273728452:432=67"
"0>25465454744296635?5?5?5?5@4@4@4@4@4@4@4@4@4@4@4@4@4A3A3A3A3A3?:4>65;"
"0:2>99445736463844324344316343316344311124457357174@4?4?4?5>4?4?3@3@2@3@393439532922312:12411;51119342=621=32225:2"
"077862745753495231555122213451312134528553665?5>5?4?3?4816498<;@6A5?5@5?54655294522344512131344294532226354647;7"
"054436925335315232133143313231433222314461414542413;423;333:433944384538363737363835393529M<3A3A3A3A3A3A3B2A78<776"
"0<4>314<322A24?5>62B3B2B2B2B3A;9>61:5@5@5@4@56284367423326413112174187413137423;42494438374449:6"
"0<4=994538373629352:342:433:333A3@4@4@4@445643944323624226514222149222248264414155414;414;414;424:33583557365538533;76"
"15?t4:1212>312>222=232<3A2A2A3@3A3@3@3@4?4@3@4@4?423:5159412229412328414128512129632::;77"
"0;1=;755544942463384627512327423137532514593466447374629442<7?4?8;33493556466348533:514;414;414;415:424:3448365539:4"
"091@8:44384546483539434:424:423;414<8<87238552414362414322314242232142432122434522457448263@4@4@3@4@36374547373638443:97"
// 24) DicotMedium
"085:?4@3B2C167;;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;414;416761C2A4?6>2"
"1000000000H"
"1>6B2C1C1D>6?5?5?5?5?5?5?56>3A2A2A3@37=5?5?5?5?5?5?5?0@"
"01=6B2C1X>6?5?5?5?5?5?5?57=7<8;9<8=?5?5?5?5?5?5?5>c1C1A3"
"0::9;9515861576257625663566355645555546553665366526751775168;9011C3A?5?5?5?5?5?5?5?5"
"010X?5?5?5?5?5?A3B2C1X?5?5@4@4@4@4@4@4?5>011B2"
"06>2B1C1c>5?4@4@4@4@A3B2C1c::;8<8<8<8<8<9;9;;761C1C2A4?2"
"01@30@?5?5>6>5>5?5>6>5>6>6>5>6>5>6>5?5>6>5>6>5>6>6>5>6>5:"
"0689?4A2C1I9:;9;9;9;9;9;9:51C1C2@3C1H::;9;9;9;9;9;;761C1C2A4?2"
"0689?4A2C1I8;;9;9;9;9;9;9;9;9:51C1C1C3A4@@4@4@4@4@4>011B2"
// 25) Edwardian Script ITC
"0>3?313;351:3629281829172:1639253:243;243;233<233;323<323<314;323<323<233;332<242;333;243:352:2629272828281:172:243<6;"
"0C1B2B1B2A2A3@3@4?4@3@112?113>113>212=313=123<314;224;233:334?4@4?5?4?5?4?5?5?4?5>"
"0>3?7;352927282827382639262:261812252:3527123518113617114616123716114715114813214:422=123@3?3@281829172:162:1657267516>613961757"
"0<6<342:272828272927261227162227152237151337141347534@3?4;7=313C2B2C28372657252:342;341<341<332;342:451:361847354:89"
"0T4?2A2B1B1B111A111@121B1@121S121?131?122>131?122>132=231>141=142318116128<7252:262A3A2B2B2A3;"
"0C1:11251:721:::135;1V1C1C1B1C4?7<252:27291828283A37463539352:342;242;342;342:35293629371748254:8:"
"0C1@4?2@2A2@3@3@3@3@3A3@3@42593124273126256725582459244:243;243:333:433:3439443935383727472639253;223;"
"0C161<167615;13422;516842831143;242;2A2A2A2A3@3?4@3@3@4?4?4@4?4?5?4@4?4@4@4?5?5?"
"0>3?7;352:1729281828282828273827293539343:413=5@3>7;334934483637373639262:262:252;252;252:352:271:181838262<7:"
"0=5=332;352837274726482639253:253:243:3439434943395339443756271136252147232238533@4?4?4@3@3@3@3@3?3?3?3A"
// 26) ESSTIXFourteen
"084>9:;8373647454744575321272122222721222227222122272221222722211327222113272333272333272333272311132723111327222122272221222722212227212321272123212721235754474637374449;;76"
"0;99;8<8633773368335414333614333434332534331454376433:433:433:433:433:433:433:433:433:433:433:433:433:433:433:433:433::::"
"085<;8=654644621433722323823312923312924592459242<242<242<242<233<224<214=213>5?4>5>4?<6>5?44:234;215<Z"
"076<;8=6447436314336323<323<332<332<332<323<314<78;9::;>7=314<324;333;342;342;342128345833313732414631435475>8:5"
"0:6>6=7=412<512<512;612;612:31312:313129323129323128333128333127343127343126353126353125363125363125273124=1C1C16:312>312>312>312>6>64"
"02A3A3A33;333;33A3A3A33A3A3A334:>6?5547436314<324;333;333;333;342;342;333119336832413732324631437185=9:5"
"0:6;;7=64?5?5>312>222=322=322=232=239623;333;33325523325213133252231232522312325232123252321232523213225232132252322222522323125223355213455564548;;85"
"01C1C1C=232<323<232<323<232<323<233;323<233;323<323<223<322<323<323;323<323<232<323<232<323<232<323<232<323<7=7<"
"085<;7>65554312521323225222232252231232523212325232123252231322522232225213365645556=7=6?4656232252231232522312325232123252353252321232523212325232132252232312521336555>8;4"
"085<:9<7554531255332255332252132232522222325226325226325232123252321232523213225232132252322652323543324;325:32751232=223=223=222>213>5?5?461757<8:7"
// 27) French Script MT
"091@4?;8=6?531;44125533226423326513<413=7=7=7=7=7=7=7=7=7=7=314<315;225;22693358356545>7<996"
"0A3?5=7;99;7=2L1?59;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;9;711"
"076;<65285367339532:523;512<51352451352451433442:3539353835?4>5>4>5>4?5>4?3A3<222>21313931<332B2A233;32675"
"086;<743664564395339523;423;42433442953484456536553?4=8;;@5?634852684187419684268;9;423:4348545466=8:6"
"0=2@4>6>5?4?5?421=7<8<314;414;324;324:334:244934492548354412364322=231B2A2368>4@4@4@4@4@4@27"
"042;2449355546>6<8;9215<2B2A3A352:3197?5?53764386?5?551:4358419641964143268;414;423:4339535556=9:6"
"0;7:;844464645464638354@3@3@4@4556348533;242=14153;13791298129812:712:8<8<8<314<315:3269336735?6<9:5"
"013A326621C1C1B236823;332;432:442:3@3@3@4?4?4@4?4?4@4?5?5?4@4@4@442:532:9;9<7=69"
"078:<7446537633:514;413<414;414;325:32683474557347;::8>63393468239;;9<8=7=7=7<414;3259346555=996"
"077;;7>64383476339622;612<8=7=7=7:218921883141473141634242<243:3447546463@4@3@4@34483547454556=8:;7:"
// 28) Gigi
"073A6=9:625574448633683368425:315;315<214=214=214=7=214<314<315;315;225;225:333;3359337734663564565458;:8>65"
"0:4@4>7=7;9::852664464466>5?5>6>6>7=6>6?5?5?5?5?5?5?5?5?5?6=6<8;>6>"
"066;<8=65275385341256231455322364331364465554657175>5?4?3?4?4@3@4?4?4?5?5>5?415612>222B3A268353="
"066<;8=753662232562233468256635?5?5>5>5=79;9:;236@5@4A4?637461:361:494348622613:5337734584=988"
"0:2B2A4@4?6>6=7=214=214<223;423<233;243:3439343711443621411243H1B4?:413<4@4@4@5?5@3A3B3B27"
"022B8534@4@4?5=74@4@3A3A4@<9=7554A5@4@5?526751:54125525122116251213152813151513182513262534133646267<:96"
"096;:9714763466=6>6>6=6>5?5>6>6>635662;162;1615582387233237232431142333312332333124232322242822252622452423457456177<:85"
"011=42C1C291733:3@3A3@4?4?5>5?4?5>5?4?5>5?5?4?5>6>5>5?5?5>6=6=7=7=114>"
"0B1B356632<332558157625:325:326833754564467249:;8<6?6>7;:8=6636555635753584359335853485357455458<996"
"084<;8815541156249614:514;413534845383313283223331341233313642422642424343448445654?5?5>5?4?5?5?4?5>5?3>699<5;"
// 29) Harrington
"094>8;25393547644575442145432327422<413<413=313=313=313=7=7=7=7=7=7=313=313=314;324;325:24493457365538;;77"
"0?5=7;<4i11344711:721:72197319731973188318741874178417841784169415:415:415:415;315;315;315<215=117=7=7571"
"077;;7375439523;423<413<41332741422741874277427654385>5?4?4?4>5>5>4>4?4?4@3@3@3<3221?1C1B13=31"
"055813B1B344842:3@3@3?3@3@3@7<;8=64565285@5@4@4A3A3@4@415::94169413;4239543755=998"
"0@1@4>5=412<322<332;333;243:252:25393539263917292729182521273431273611246611>2F172923737193A3A3A4@4@5?5@18"
"0@3A444844@4?532963A3A3449229721;6717547453945294A3A3A3A3A3A3@4@324;32594168432:4438455359:7"
"0;6<:8354737354754375448443@3A3@4547339532<331>231464142373143287>6>213>213>214=214=224;324;23593457366348;;76"
"0C12<331C1B22<322<331<3@3@3@3@4@3@3A3@3@4@3@4@3@4@4@4@4@4@4@4@5?6?4@2="
"0I?4@3@33A3@3:343;333;343:3448455547614;8<9:32674555385349523;413=7=7=7=412=323;42494447466168:6"
"086<:84457284538533:432<422<422<422=323<32363332373233364133454134<135:236833@3A3A3@3A2A3@36193547363737;:9:"
// 30) Informal Roman
"0A2A3?4>7<315:3349353836373736383629352:343:333;243:333;333;233;243:343:25392638353926383637284538433;8<7>5="
"0B2?5=7;8<8;224@3@4@3@4?4@4?4@3@4@4?4@3@4@3@4@4?4@4@3@8<9:8:5>3A"
"0<1B2A2B126:;953382828183728372747174@3@3@3@3@3@3@3@2@371838272827292629262386>6662548271:2B26"
"0=1B2B2A215;::4339272927291738263@3?4>4>4@6@6A3B3A3A36193629362845284626572467;9125;2B2B"
"0C1A3@4?4?5>5>6=6=313<314;323;323416333326233425243325343144339432;4;32371341363332335432;341<3@3A7=7<6<4@3="
"0C1C1B2=6::9452:261:352:2629361:2B2A9;:A3B2B2B2B2B2818372738182826391738244:9;114=2B2B"
"0C1B2A3?4>6<511<332;342:342:352936283@3A32683197>5654548343:343:2539352:3439353836382736393449415:8=6<"
"091B2B246721:7;8543826391729262:163:153A2A3@3A2A3A2A3A2A3@3A3@3A3@3A6>6=7<3@2B"
"0@2?5>6=323;343:2629362936293539353:324;8=4>6<413:4438363737363835393539352:253:253935383637383539424:9<6<"
"0?3?6<9:433:2539272837282827382728372837283736383458;;513A2A3@3A29173826391639244:234:8<6>1B2B2B"
// 31) Kunstler Script
"0@3?5=431;441:451946185528462747264817382648164825582548254835482548264826382738173827372827382639262:252;242=123>5>"
"0C1B2@3@4>5>6=312=313<313<232<233;242:3439343@4@3@4@3@3@4@3@4@3?5?4?4@4?4@4?4@"
"0?4>412<431;441:433943484448345834573458242138232139222149:;324?4?4@3@3@3@2A2A27285527642741233632323723313724672648"
"0?4>412<341;351;32121;23112:23212:22222:13122<323<223@3?4?4>6C1C2B2A2B2A3A3628372836364735571115481559235;8;"
"0@4@4?4?5>5?4?5>4?4?4@4?4?4438453745382638264726473547=313<232359;3@4?4@3@4?5?4@3="
"0=2B7<8;214=2A2B2A2B112?6>231=251<152;252;162B2A3A2A3A3@382738354835384448344911134:235;7=6="
"0@4>312=322;423:433:34393@4?4@3@3@413;4159413129722954285528543746373638363826473548354825492459235:234;224=5>"
"09113?6417922732773458264728281838182A2A2B2A2A2A3@3A3@3@3A3@3A2@4@4?4@4?4@3@4@3A"
"0>5=332;351;261:361:271936293629352:351;432;8<6=6<8;42394438453827372837283719281927283728282739163:162;233=6<"
"0@3>412<431;351:4429452936284538354736383547355734583458237823213:12214:9;413@4@3@3@3@4@3@3@3@3?4=5?"
// 32) La Bamba LET
"0:1@6<5149534844475545565457525852585259415:::::::::::::514:515951586248535753566455565358434:414<7>57"
"0@1?5=7::7=5?3458=7=7=7=7=7=6>6>6>6>6>6>6?5?5?5?5?5?4@4@4@5<98>1"
"024@::<8=742863574378238722:711<6>6?5?5>6>6=6>6=6>6=6=6=6=6>5617562647346733<142B1C"
"024@:9>642954574377339622;521;6=6=7<6<7;7;7?7?9<9=811<8=8=7<612;61387236924484>6<89:"
"0@1B2A3A3@4?5>6>5>6=7<8<8;315:415:325942584447453845374681B1C1B>3A3A3A3A3?7<92"
"02B2A3@4?548264?4@4@4@4@3A9;=7?9=;:<9<8=7?6>7<9::971478235844295=7;98;"
"0@2>4>4?4>5>5>5>5>5?4?523:42765195917384527751775169;9;9;95159515951585357545555636751699<67"
"01C1C1C146824;323<232<332;431<331<431<3@4?4@4@4?5>5?5>5>6>5>6>5>6>6=6>6=7?4A3;"
"0:1?9:;853565644575349424:4259426843665384459147;::9<652944582477249;::;9:::515852576355567159:<67"
"091@8:;86256645556535852585258;:::::5158615861577256726393;1468158524?5?5>5>5>5>5>5>4>4?3="
// 33) Magneto
"095<:9<7>6?473638363747275617661766176617661766167=6>6>6>6716671667165726572657273746285>6=8;:96"
"05=6@4@3A3A2B9;9:::9;9:::9:::9;9:9;9;9:9;9:9:::::9:::9;9:::9;9"
"0:2<=6@4@4A3A38273827382746374547=7=7<8<7<7<8;8<8;7;9;7;8:8<A3@3A3A3A3@3"
"04@4@3@4@4?5?5>=7<7=7<7=8;:9<::<8=8<8<8=73557274727471927292729173@5?5=8;7"
"054?655464638363835483548264826563566267436653664457355644654564C1C1W1B2B;5>6>6>5?5>6>6>66"
"06>6>6>6>5>6>6>66=6>6>6>;8>6?5?<9<8=7=7=73557274727471927292729174?5>6=8:8"
"0<5=6=6=6=6=7<7<7<7=7<7=745373827382739164@4@4@4@5?6>7616761765284638183@5>7<:86"
"03A2B2B2A2B2B2A24772477=6=7=6=7=7=7=6:=6>6>6=:7<7=7=6=7=7=6=7=7=79"
"0;2?99<7>5@48264745384538363746464646374@2A3@3A38462846274718471757175726482648264827284@5=8;:96"
"076;=7>4A382728471847175?5?5?5?5?4@481748182919192A4@5?6=;9:9:9;8;8;8;8;8;8:"
// 34) Matisse ITC
"0M4?7;:95167545565545743594169416:315;9<8<8<8<8<8<215<215;315;235:235925573557275529532;8=6@38"
"0<2@5=9::7>5@265;89;9::::9;9;9;9;8<9;9;9;9;9:::;9;8<8=6>6>6?4A25"
"044@9;<8=7>6?522<;9<8=7>6>6>6>6=6>6=6>5>5>5>5>5>4?4?3@2@<7=6><86"
"074<=8>6?6?531;>6?5?5?4@4?4?3?4?5@4@5@5@5?5>6=7;98;4?5?5=7;8::7="
"0A2A4?5=7<8;9::95158525662656364546464638362B1C::=7=7=7=7=7=7=6>6>6>6>6>6>53"
"01;9;9;94@4@;8?5A3B:;;:<8<8=7=7=7=7=7=6=7=6=6>5=6=6=6=5=6<6=4?"
"0<1A2@3@4?5=6=7=6=7<8<::>5@48282847185?6?6>6>65186518651946283648174?6=99<7>57"
"01W1B2B2945?4?5?5?4?4?5?5>5?5>6>5>6=6>6=6>6>5>6>6=6=7=7<7=6>6<"
"0:1A5>8;:95167536653665366536653666169::99=6717473727571676167<8<8<86157625663655554574359:<6?3:"
"0;2@6<99<7>572737372748175?5?5?5?5?571847283738184?6>9;;8=6>6>5>5>5?4@3@2B1;"
// 36) Mistral
"0<3;2188=6?5@3A365635752594259424:415:415:415:415:::::9;3169416941684268426752665464646365>7<9:;88"
"0?3?7<8::9;8<6>5>57174637364725671577139622:6>6=7=6=7=7=7=6>6>5>6>6=6>5?4@39"
"064<>5A3A3B2B2576249523:531;5?4?4?5?4?5>5>5>5>5>5>5>5>6=6>5>>1b1A3>5"
"0:77?4A3A2B2:163566=6=6>5>5>5>5>5>5>7=;9=9<;:>6>6<8:99:9:7;8:8:99;"
"073?5=6>6=7=6?5>57265563566356635654475356635654475447544752Y1A4>8<?4@4@4@4@4@4@37"
"0<5124@4@3@4@3>66=6>5?5?5?5?5@6>7>7>8>8=8>8>7>7>6?5=78<3@2A3?6<7"
"0A2@5=6<7<7<6<8;7<8;7<7<7=7<7=8<51496167626655555564566348634763486347636654@5?6=9:3"
"13A::=8>6@6?;:?6?5>6>6=7=7=6=7=7=6=7=6>6=6>5>6>5>6>6>5?5>5?49"
"0<1=;8=6?3B276523;432;423:514961496148615771657363756186<9:;8<8;:9<7725564556454655455556267;9:9"
"0>3>8;99:99:8;83447543746364726481639252;152<1;252:353656>5?5?4?5?5?4?5?5?4?4@4@3@48"
// 37) Old English Text MT
"092@7<9:;9<722:52675277329623:613:613;513<413<8<8=7=8<314<315;316:316932783376358426=8<9:;8=67"
"072@7;:9;7=7329<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8;:235?5=99=56"
"091A5>8;;881458452856176625763296>6>6=7=6=7=6=6=6=5=6=5>5>4?3@3386B1C1C1B15852"
"082@7<:9=59262846365643765186=7=6=6<79::;>8>7>7>6>622;514:5159=751865293549157<99<67"
"0;3A4?5>7<8<8;225:325:23592458255825572656275528552854D1C1C1C1C;5?5?5?5>712:::9<6?44"
"04?5>6>6>6=63A2B2B271:2567248533:422=3213293558239621;6?5?5@4@4@423;4169=641;434:245>8:;77"
"0:2@6=9:<7>63196355638264@4?48354754458343;242F4>7<9:;415:415:416941783377338535;127<9:;8=67"
"04@3A3A2A3@34:242;341;342;2A3@3@4?4@4@4?4?5?5>6>5>6>6>6>5>6>6>6>6>6=4="
"086<;8=6?4A327823:523:514;324:425933;225?5A4A4A3A236914;413=313>6>7=8;217932A3@5=8;:97"
"092@7<9:;8=632:43683377239713:613:;:::;8616671823241<342:44376444746284@461846463673379136=8;;8>58"
// 38) Papyrus
"0:3?7;;9;74466284538542:432<422=313=312>312>312>312>311?311?311?6>222>223=223<324;324:34493556367257;::;77"
"0=7::5g511?318<8<8<7=7=7=7=7=8<8<8<::::8<8<8<8<7=7=8<7=7=5?5<21"
"063@7;;83377257?5?5@4@3A3A3@3A3@3A3@3A3A2A2A3A2A3A2A2A3@3=12B2Z42172"
"0=26>5?5257?4?5>5?4?9:=6@255822:6@4@4@4@4@4@4@3@3@4?4@2@3@4>4<6<7<5>"
"0<1B3A3@4?5?5>6>212>223<233;333:342:44261253:1R2214112212B2B2B2B2B2B2B2B3A3A3@4@3A28"
"0C19;7<83111592A3A2A9:<7?43683297>6?5@3@4@4@3@3A3@3@3@3@3?4?4?3?4=6=5?"
"0C1A3@4?3?3@3@3@3@3@3@3A2A2A2A3A244931:621;531255349434:423;423<323<225:33493457366348::98"
"0B265185>5>5483@3A3@3A2A3A2A3@3A2A3A2A2A3A2A3A2A3@3A2A3A3@3A3@3@3A"
"0=1A7;:9;843663655474538454735564663387239:;::;75275376339532;423;413<413<8<8<324:3358347445>7<998"
"0=1@8:;83376266528542:433:433:424:42594349346645:1369239523A3@3@3A2A2A3@3@3@3@3@3@3?4>5?"
// 39) Poor Richard
"093>9:;853565555474457525942595159514;414;9;9;9;9;9;9;9;414;414:515951595158535754474555565358;:95"
"0<4>7:99:7=5?5519<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8;96C1C"
"076;<7?447533:523;512<8<8<8<8<513;51775177526655275?5>5>4?4?4?4?3@4?372747363835?5?5?2"
"04=6>6=7;9263@3A3@3A6=9:;9246?5@5?5@4@4@4@4@4?5?5?4?5>52395347644467<998"
"0>2A3A3@4?5?5>6=7<314;324;324:3349344934483547364631:5C1F79=4@4@4@4@4@4@4@4=9;:1"
"0=27=7<8::3A3A3269=7?55474385438632:6?5?5@4@4@4@4@4@4?5?5>5>613:5247644566=997"
"086;;9<7464558245?4?5?53575195A34135425:415::::::;9;9;414;414:515951595159434944474555565358;:86"
"10?13<323;341<3@3@4@3@4@3@4@4?4@4@3@4@4?5?4@4@4?5?5?5?5?6>8<86"
"084=:9<75456464557355735573565466356=8;:;9<7>54483468148713:9<8<8=7<512<513;51496247645376=995"
"076<:9<746455744485259424:514:514::;9;9;9;9;414;414;415:42553143444144:155825?5>5?54195537554557<:86"
// 40) Ruach LET
"0:2A321=315:;11775168311158321157444484448434943494259424:415:415:414:514:514:::415:4159425942594259335745455644212752598:"
"0B1>7;9::9:9;7=7<6>4429;9;8<8;8;7<8;6>5>6>6>6>521;9;9:::9:9;9<8=7;"
"0;3=;8435735653844394529443943494348443944484448363746373@4@3A2A3@3A2A2@3?4?4>9:C1U2::"
"0<3?8;:531;4A3A455645564565456572649164@3?4?4?4@3?4=9:<7>5@4269=7>6>631:61571132A35195"
"0>2@4?423;324:3169416842684267435744574456446635654556457346733754465445744484@4?49311246646383?113A2B2B2B16"
"0:1546>5>5>5::6?4@3@4@3A3@4A6>9;<:;=9=7>6?5>5>5?4>5>5>5=4?4>4?2A"
"0C1?5>6=6<8<7<413;423:53295?4?4?5?4447518551;35123625133625124615125615115625762584268336635653664386248::8;"
"021639>141C1B19632684267453846184@4@3A3@3A3@3A3A2A3@3A3A3@321>5>312>6>5?5>5?4@211;"
"0<1@6<9:244216353225492549263836473744574359414;8<7>5?5>7<8;31693358346636553844395339525911226:2368332;3?44"
"0>1A5<8;323135537457435752585258515951586157<7=781469145:1435161;2@45276311>6>6=6>312=4118252216442;513;8=69"
// 41) Scruff LET
"0@172:1639344942685163235161<2A4564638272:172:261<152<152<242<242<242<242<162:253:24582467429462C161516249532:451;2B22"
"072B252;234;225;612;612:31312851312641213124432131242521312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;21312;97?466622>2"
"055>8:425314349443854385473647273738174@4A3B2A3A4<8<921821261847192819<7=7311211111721111211111631111211111541111211111451111211111331211112111111C1C1"
"062A5>;:5348535>7>6>6>6;9;9<7>5=6<6?521@4?4?222C1C4419623:24422345422337=8223427232=2B1@"
"0;1C1B2A3A111<13121<521<431;531;441;351:45194619461937171227171217451118211511C:42211;261;171;1C1C1C1D1C1C1@83"
"031C11211<C11141155211411534114115251141151611411<11411<11412;11412;11412;11412;11412;11412;11412;11=56123531141254A4A3?122@11214;415:317922782367355547;7"
"0;1@5?4@5>224;252:2A3A2A2A3A2A3A2B25941535322428312323255321644321743321512333215123332232231113272311233333212473322=2439364548;4"
"0:19K1?1m1C1?135>B2B1B2A3A3A2A2A2A4@4@4@2A2B1A3A3A3@2B2B1B2<"
"0:3>895525772559172:253424244334133124232458282827453632233732313:224=213?312=33:3262333285429362334352424532:213229813748;<8A3B26"
"0:4=:927354:23525421924221413523114:22113;225<12113<12132:22132:21242822243542178419452B1B2B2B2A2B2A2B2>311>6=6>6?47"
// 43) SWGothe
"0=1A4=87A363834664474547454745474547454745474547454745474547454745474547454745474547454745474376429362B68=4;"
"082?7;:7=7=8<::;9<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<88@3X6;<65"
"081B4>88A3:254745?5?5?5?5?5?5?5?57=6>54?3@3A2B2A3A2B2B277423A2m15942"
"081A5>:6C1:363755?5?5?5?5?5?5?5<889;7=<=7?5?5?5?5?5?54385195@2K59<59"
"0<1B3@5>7<8;314<224;324:334934483547364727463745474547454745474547454743Z;432;432;4>7<:::=5@35"
"02@4@4?5?5=72B2B2B2:172936285524<2B2827>5?5?5?5?5?5?5?5?5?56365384539263A69=4:"
"0<1A4=88?5528544664@4@4@4@472745564493A3A3654547454745474547454745474547454745474376429362B68=4;"
"031>226571C1C1?123<23A2A2A3@3@3@3@4?4@3@4@4?4@4@4@4?5?5?5?6>6?5?5?4@3:"
"0>1B3@6;;3A38264474547454745474547454745474563689<6:>66365474547454745474547454745474376429362B68=4;"
"0=1A4=87A3638346644745474547454745474547454745474547445473A2=14475464647274@4@4@47274475448264@78>3:"
// 44) Victorian LET
"085<:9<8=6?4@4A264825672487149614:514::::;9;9;::415:416941775185529363A3@5?5>7=8;:95"
"0=2@5<87=4@4@6>8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<8<7>4B1D"
"0868?4A3B26571757167=32271613271:27283728283547<8;8;8;8;8;7<7<6=662567345744@3A3A3B2C1C"
"0959=6@3918275626671632262613262:1648265626<7<6;:9<8=:;<926481847193A3A3=214=7=6816483@5>7<4"
"0>2@4<8<8<8<7=7=6=712:613:613::9;9;8<841774276446545645563X1C;6>6>6>6=8:;9<"
"0A165555?5>6>5>6<8424:4@334:3188>5@4A35393378237851772657185@4?5?5<7=76166727284?5>8;5"
"0:6;;8=6>5627553745464564554385275619452:351<251<16133616134<126;127=7;1264169417841874186439353@5?6=8;:95"
"032A6842B2A2B2A2A49157444?5>5>5>6>6=6>6=7=7=7<8<8<8<8<8<8<9;9;::;9<4"
"076;<7>5@4646366626662666262937193A4>6;:<9=8=9<4A27381757167=7<8<861676166717473@5>7<4"
"075<;8=6?5@3A3548256814521714531;6>6?5:154:1=151=152<152;253:2557355194465538453844465547364?5>7<997"
// 45) Vivaldi
"0=5<9::935473646383629352:343:342;333;332<233<232=232<332<323<232<332<332<242;333;243:253935482737284448;:9<6;"
"0C1@49;9325?5>6>5>5?5?4?5?4?5>5?5?5>5>5?5?4?4@4?5>5?5>5>5?5>5>4@"
"0=4>8:34492638363828282828273A3@3A3A2A3A2A2A3A2A2A3@3@2A3@3@3@3@381738263826>5>6"
"0>4=9934483638273737372838183@3@3?4;7<5>4@5?8B3B2C2C1C1B2B2B241<252:353836>7;:8:"
"095@4@4@4@361:3439333;323<223<323;323<323;332<233;243316253315253323@4?4>?3A3@3A3A3@3A3A3@3A3;"
"0;9:::::9:2B2B1B2B1B2B2B2B2A3A4A4@4A4@5@4A3A3B2A3A2819192729343:9<6="
"0T4>3?3@3@3@3@2A3@3A2A2A3@3A323;316:61492123385528211628462756273827372837283638353:342;8=5="
"06>6>6>62:252;161;261:2B2A2A3@3@3@3@4?4?3@4?4>4@3@3@3A2A2B2A2B2B1C2B3A"
"0>3>8;23592638273827373737283728373638311348::9<4A4=7;4249354736464745384539353935392548363827373745399<7:"
"0=5>7;315:25482738273728372711263746365636563611364421284131387239532A3A2A3@3A2A2B1A3@3@3@3?3?4=5?"
// 46) Whimsy TT
"0:4=9:;9<7=6?5717465536752684259416:316:316:31784178=6@3021B2B2B2A4@5>6=8;;77"
"095==6>4@3A1V1C2B341<8<8<8;9;9;9::::::::::::9;9;8<8<8<8<8<8<76"
"093<<6?4A2C262;23693179;9;9;9;9;9;8<8;8<7<7=6=6=63465185?4@3A2B1C1C1C1C"
"0@36=3A3@4@4?5?4?5?5>6275?4?5>7=9:<8=7>7148<8=7139713971487246825493@5>7<995"
"0?1?5>6=8;9;9::9;84177517742755375447445736473A30Z56>6=7=7=7=7=7=7=73"
"0>3::6>3A3A4@4@4@4@4@4@45@4@4@>6@4A4A8<::::::::::::8<5>6=7<8;4"
"0L3@4?7<9;9:9:8<7=6=6>5?4??5A3A3B263@6=7=7=5A1<1C1C1B2A4?6=8:6"
"0B29;3U1B2B2B2B2A4@493445654294@4?5?4@4@4?5?4@4@4?4@4@4@4?4@4@4@47"
"0997=6>5>46>56185537634763396149:;9<:;;8=6?4A262:254?6=8<9;9;:614:5168517653A4?7<3"
"075<;7?4B2B20H4?7=75177518552B3A5>8<;215>6<7;8::6=7<9::9<6?4@2>";
