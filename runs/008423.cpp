#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 65
#define d_m 48
#define window_n 5
#define window_m 3
#define destroy_rate 3.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{1,13,2,24,0,23,2,56,1,2},
{1,16,10,35,0,29,2,77,1,3},
{17,18,19,49,4,55,9,68,16,12},
{31,30,29,54,7,66,21,72,24,40},
{51,43,50,72,20,66,38,74,49,63},
{59,51,66,72,34,62,45,74,58,63},
{59,51,68,84,52,67,49,74,64,59},
{57,60,67,84,48,80,47,65,68,66},
{59,71,71,82,46,82,62,76,75,68},
{65,70,71,87,54,75,65,75,75,79},
{69,66,69,84,50,75,71,75,69,80},
{68,78,65,78,51,75,67,77,65,58},
{31,70,27,55,51,75,45,77,46,39},
{18,58,22,48,46,71,37,78,22,17},
{2,56,9,41,24,66,26,78,13,12},
{1,56,0,18,18,43,24,76,11,2},
{18,32,16,32,0,23,9,51,12,24},
{24,41,43,50,0,30,24,53,27,39},
{55,41,62,60,7,62,37,58,57,62},
{58,43,62,55,14,61,45,57,57,57},
{57,56,56,59,33,56,44,57,63,53},
{62,60,59,59,55,56,49,57,60,53},
{59,69,57,62,49,72,46,57,57,60},
{52,72,59,68,49,71,53,57,60,56},
{51,75,59,68,57,70,55,68,55,59},
{49,81,68,69,53,70,54,72,58,58},
{52,77,70,71,50,70,52,81,65,64},
{56,80,71,81,63,73,64,82,63,75},
{69,80,77,85,62,71,67,76,68,78},
{57,62,74,85,50,71,50,78,68,72},
{30,55,34,42,26,59,38,75,46,56},
{17,49,9,14,15,15,11,62,9,43},
{24,31,31,42,0,24,16,32,25,52},
{58,38,50,50,4,51,41,34,51,63},
{59,41,49,45,22,63,64,36,65,47},
{62,52,47,37,29,61,59,31,66,53},
{62,56,50,43,54,57,50,27,61,57},
{66,57,50,38,50,55,49,29,58,52},
{54,58,48,39,53,61,49,33,54,35},
{29,62,57,39,50,50,50,40,27,21},
{29,75,57,52,52,48,44,55,28,36},
{43,71,59,55,50,35,47,66,32,57},
{48,70,56,61,59,35,52,71,41,61},
{47,78,60,56,64,27,38,78,46,62},
{49,80,67,73,62,27,39,81,53,71},
{64,59,72,54,46,28,38,77,71,80},
{58,52,71,48,19,24,37,74,55,82},
{31,39,35,19,15,8,18,11,29,43},
{50,41,45,38,0,25,28,28,30,62},
{59,43,45,44,22,56,64,26,58,51},
{64,45,47,46,37,66,64,26,70,62},
{63,49,44,38,54,59,51,26,64,60},
{65,44,46,41,50,58,48,25,62,42},
{61,41,46,35,58,57,49,23,54,34},
{46,38,44,46,62,59,58,27,37,31},
{20,44,36,51,51,45,36,52,20,19},
{16,59,41,54,59,46,37,55,17,20},
{34,68,47,62,61,34,47,58,26,57},
{40,71,57,58,63,32,32,68,45,61},
{44,74,62,55,64,31,33,74,53,61},
{49,71,65,51,62,28,37,75,59,66},
{50,59,73,46,49,26,26,62,61,77},
{70,42,72,42,19,12,25,39,57,71},
{57,38,51,19,14,0,17,10,32,52},
{58,28,26,7,11,34,61,3,30,65},
{64,39,42,14,29,51,64,19,53,63},
{70,40,36,37,42,53,66,19,64,64},
{68,29,28,37,53,48,55,2,56,49},
{61,29,28,45,59,55,51,6,65,40},
{58,28,28,57,55,66,60,4,61,36},
{39,46,24,45,51,50,56,26,46,42},
{15,51,26,54,49,57,49,38,30,28},
{15,59,29,62,56,59,39,49,36,31},
{32,71,48,63,68,65,36,54,48,55},
{37,68,54,63,74,52,44,73,46,61},
{43,75,63,49,75,44,40,65,53,63},
{47,71,67,56,70,35,40,59,61,65},
{49,45,74,53,38,26,12,57,51,74},
{65,39,69,33,18,23,17,10,37,74},
{69,35,38,12,12,8,15,7,21,65},
{64,27,17,2,26,35,64,0,9,68},
{71,27,18,20,41,48,69,0,28,60},
{69,28,15,21,59,49,68,0,54,60},
{65,26,17,33,67,52,58,0,66,65},
{59,26,17,51,55,55,66,13,70,47},
{52,32,17,59,46,66,71,17,68,46},
{39,47,17,57,42,57,61,41,68,42},
{15,54,30,61,45,55,52,49,62,32},
{15,57,53,58,40,61,57,54,55,48},
{32,71,61,64,67,76,60,63,60,54},
{36,68,62,67,82,86,66,60,62,61},
{44,75,68,63,75,86,51,59,58,51},
{46,57,67,65,58,66,50,58,59,69},
{53,45,70,38,38,59,48,34,44,74},
{65,36,45,19,18,29,33,7,12,66},
{66,35,26,2,13,23,7,0,0,59},
{65,24,1,11,41,26,66,0,23,27},
{71,24,15,11,68,41,70,0,47,52},
{64,25,15,12,74,30,72,0,51,47},
{59,26,14,16,76,31,73,16,58,52},
{55,30,14,31,70,30,69,17,74,51},
{52,41,17,49,50,46,61,41,73,48},
{39,47,35,63,33,32,50,52,60,43},
{15,57,59,65,48,34,39,54,65,46},
{15,59,59,60,53,45,34,59,60,64},
{31,67,62,61,73,67,43,53,62,64},
{36,65,69,68,84,74,51,59,65,56},
{44,65,72,72,87,69,60,58,67,72},
{52,57,64,71,75,74,70,43,60,63},
{53,45,40,59,57,70,58,8,48,63},
{65,35,25,33,49,64,50,0,37,59},
{62,35,2,9,35,40,26,0,9,57},
{71,24,0,7,39,20,70,0,40,28},
{71,24,0,7,62,27,72,0,55,40},
{63,25,20,9,66,23,72,12,56,47},
{55,28,23,13,59,21,66,19,60,36},
{54,39,33,21,50,20,59,26,66,38},
{52,41,38,19,36,14,44,52,59,38},
{40,45,67,32,33,14,33,42,45,53},
{15,61,67,33,52,33,20,41,27,47},
{15,60,68,38,49,41,15,53,33,41},
{31,67,63,45,71,52,26,59,36,45},
{37,56,62,55,83,57,42,58,52,62},
{49,55,43,65,72,68,45,54,48,59},
{51,57,34,68,69,71,67,24,54,56},
{54,45,27,71,52,70,55,7,60,59},
{60,35,0,70,41,68,55,0,59,59},
{61,35,0,53,31,55,50,0,46,55},
{70,24,6,15,46,30,71,0,56,16},
{71,25,9,27,48,22,85,12,64,19},
{64,28,15,25,49,23,81,19,64,19},
{56,39,32,15,43,20,60,26,64,37},
{53,39,37,26,43,19,46,52,43,40},
{52,41,60,22,45,20,43,51,36,39},
{40,48,62,34,52,27,42,39,35,35},
{15,62,52,43,70,32,29,54,21,15},
{15,60,56,50,62,25,25,59,27,29},
{31,58,51,49,86,44,36,60,36,56},
{45,52,49,43,82,61,51,57,33,54},
{49,55,30,46,64,64,53,48,41,50},
{52,57,25,59,59,67,71,2,51,52},
{49,41,17,73,47,68,62,0,54,59},
{61,35,17,75,39,61,65,0,60,56},
{56,31,17,72,37,61,62,0,60,50},
{62,24,9,48,28,52,69,12,60,24},
{70,27,16,49,29,47,85,17,73,27},
{60,38,38,49,27,42,72,26,69,32},
{57,39,38,42,30,39,61,43,56,29},
{54,39,58,48,25,46,55,49,38,26},
{53,41,58,44,28,45,44,40,36,38},
{41,53,58,44,35,32,42,55,23,42},
{17,61,54,35,53,28,31,58,14,32},
{25,54,50,42,61,44,25,58,27,29},
{42,58,41,42,82,55,32,60,33,51},
{48,46,41,46,80,59,42,53,44,49},
{51,55,42,52,63,60,45,33,52,47},
{48,54,36,63,59,63,69,0,47,53},
{53,38,33,73,51,60,53,0,56,57},
{57,35,37,71,46,61,63,0,60,53},
{33,31,35,67,41,58,54,0,53,43},
{34,25,31,53,12,56,43,20,71,27},
{70,37,40,52,12,61,87,26,75,37},
{65,38,49,57,12,60,76,41,57,37},
{58,39,61,48,12,49,52,54,54,32},
{57,39,68,49,12,47,48,40,36,49},
{53,45,65,38,21,40,44,56,30,45},
{54,54,60,41,22,46,45,61,41,50},
{29,49,61,40,40,39,35,60,30,27},
{35,54,58,49,56,50,31,60,24,28},
{47,54,55,50,71,61,40,59,46,43},
{50,46,53,51,60,53,51,35,54,46},
{44,55,45,58,59,55,64,1,58,50},
{44,53,49,67,54,59,68,0,47,56},
{58,38,42,69,40,61,49,0,51,53},
{46,32,47,64,35,56,49,0,53,32},
{23,31,48,28,29,27,29,0,33,29},
{18,46,49,53,0,55,23,22,34,4},
{34,47,54,69,0,70,45,38,58,42},
{62,48,79,72,0,74,66,49,76,59},
{64,49,70,66,0,74,60,47,68,47},
{64,53,66,53,1,57,64,55,58,53},
{66,53,66,56,10,52,60,58,53,51},
{63,45,66,56,11,52,59,60,49,48},
{52,51,68,57,45,50,54,60,51,53},
{53,47,68,58,58,57,53,59,50,56},
{38,54,66,54,71,53,54,56,52,58},
{42,56,67,57,57,55,50,33,55,51},
{57,62,59,67,58,61,62,0,50,53},
{58,64,59,69,55,61,65,0,53,49},
{41,45,60,33,38,30,42,0,51,31},
{19,42,58,22,26,23,23,0,31,28},
{11,41,36,7,20,11,7,0,10,21},
{0,48,35,19,0,16,0,23,6,6},
{2,50,55,47,0,34,11,41,17,11},
{4,58,53,44,0,42,19,48,20,9},
{23,58,53,63,0,38,33,41,48,31},
{49,58,56,70,1,64,54,35,50,66},
{68,47,56,74,9,67,71,58,65,66},
{62,50,58,71,21,63,51,59,64,57},
{55,51,59,66,49,62,52,60,65,52},
{59,53,59,63,57,61,67,50,50,55},
{53,53,54,42,68,47,57,36,53,46},
{57,58,54,33,58,42,63,12,48,33},
{24,58,51,13,59,18,42,0,26,29},
{1,65,64,5,59,2,20,0,12,4},
{1,61,60,0,45,0,17,0,1,2},
{1,59,44,0,28,0,17,0,1,0},
{0,53,39,0,23,0,15,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
//            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
