#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {-0.0318856,-0.422724,0.147597,0.189871,-0.235291,0.148381,-0.0934646,0.118959,0.0721158,-0.769093,0.0369514,-0.292853,0.224722,-0.14723,-0.368284,-0.436888,-0.606346,0.268784,0.204066,-0.0742666,0.540177,-0.741649,0.52138,0.916465,-0.73381,-0.505607,0.429475,0.35849,1.0141,-0.0383843,-0.437544,-0.377205,-0.239633,-0.840369,0.4435,0.337522,0.188931,-0.299849,0.791694,-0.569138,0.616353,-0.467529,0.0396725,-0.222736,-0.326314,-0.686788,-1.21256,0.226128,-0.488754,-0.591768,-0.0826428,-1.06798,0.1276,1.00352,-0.756608,0.0688022,0.119361,0.389529,1.27778,0.401271,-0.310036,0.271125,-0.271186,-0.305443,0.0355877,-0.109204,0.170034,-0.673254,0.162986,0.273576,0.211746,-0.790508,0.237952,0.133859,-0.354248,0.229469,-0.0989534,0.507054,-0.087448,-0.0685505,0.029308,-0.232138,0.0954212,-0.499293,0.0184607,-0.0954311,-0.00206886,0.627112,0.156318,-0.683246,0.28712,-0.315311,0.320207,0.549547,-0.0901583,0.433789,-0.610331,0.198213,0.228042,-0.114428,0.238478,0.585038,-0.00816703,0.288034,-0.168318,-0.201971,0.159609,0.255136,0.740659,-0.0358888,0.095138,-0.0255062,0.706284,0.26577,-0.121075,-0.590532,0.0437164,-0.0230402,0.49086,0.225658,0.443467,-0.752986,-0.503019,0.521104,-0.577354,0.453973,-1.0434,1.19537,0.434294,-2.59266,0.3959,0.867653,0.403569,-0.341889,0.727545,-1.39526,-0.384253,-1.07767,0.616555,0.159886,0.142836,-0.483109,0.144503,0.846375,-0.305603,0.281191,-0.108234,0.157892,1.03585,1.25706,-0.0175534,-0.224438,0.172026,-0.531078,0.536501,0.76612,-0.0128596,-0.68611,0.849935,-0.0918086,0.019438,-0.155548,0.044907,-0.246916,-0.241375,0.427913,-0.382187,0.79374,-0.0382118,-0.261612,-0.235781,-0.440253,0.291487,0.415936,0.044333,-0.0311501,0.206608,0.0635081,0.551264,-0.0747635,0.0853941,0.0427543,-0.15721,-0.446544,0.150967,-0.0805962,-0.458151,-0.320144,0.290624,0.154505,-0.102444,-0.520331,-0.358203,0.175136,0.10757,0.554924,-0.543281,-0.0718902,-0.563263,-0.345397,0.0745542,-0.430217,-0.51381,0.126336,0.164082,-0.10095,-0.433308,0.400157,0.360657,-0.269286,0.00408283,0.469726,-0.392291,0.371535,-0.344145,0.107405,-0.369905,0.477735,0.00741434,-0.877364,-0.179668,0.0500993,0.341487,0.294106,0.257198,0.282095,-0.487158,-0.0799209,-0.359355,0.363072,0.568229,-0.76334,0.451112,0.345057,0.0867452,0.226695,0.61948,0.793868,0.487959,-0.253915,-0.676352,0.344001,0.315364,0.075153,0.104469,-0.295354,0.547539,-0.0566655,-0.0608788,1.28893,-0.139738,-1.00475,0.378835,0.560665,-0.864596,0.0842119,-0.154517,0.650178,-0.153215,0.193122,0.437344,-0.365117,0.0029308,0.431803,0.107644,-0.446713,0.0308681,0.729844,0.0853016,-0.249089,0.242256,-0.940964,0.181046,0.64719,-0.318667,0.832926,-0.746307,-0.138225,0.280741,-1.1318,-0.288273,0.485308,-0.00861354,0.0878661,-0.186741,-0.256921,0.322507,-0.512078,0.993581,0.239357,0.396989,-0.0193333,0.0929431,-0.179413,-0.0422026,-0.750913,-0.225552,-0.562601,0.229306,0.79464,-0.195244,0.0358869,-0.623091,-0.934332,0.378843,0.467515,0.0203942,-0.745401,0.481947,-0.366808,-0.148587,-0.503159,0.0640561,-0.358714,-0.289595,0.431213,0.269172,0.294631,-0.496075,-0.161307,-0.358179,-0.128516,0.00637392,-0.603807,0.765465,0.22215,0.0731941,-0.0811774,0.290048,-0.577949,0.298643,0.0710587,-0.689802,-0.406638,-0.430937,-0.327022,-0.361362,0.371997,-0.20108,-1.12413,0.337684,0.0676463,-0.287784,-0.514237,0.947256,-0.368174,0.0702236,-0.613083,-0.410465,-0.202072,-0.468339,0.126206,-0.760863,-0.522526,0.487376,0.630212,-0.436948,0.124002,-0.0346437,-0.0847437,0.377632,0.566518,0.173986,0.272463,-0.439629,-0.0540728,-0.89388,0.839516,-0.355164,-0.482184,-0.427488,0.489995,-0.236448,0.377017,0.529683,0.13388,-0.847243,-0.737338,-0.728293,-0.0993484,0.93593,-0.584942,0.307773,0.791289,0.371736,-0.305801,0.170566,0.8143,0.445716,0.180447,-0.876132,0.0617281,0.882704,0.541672,-0.151259,-1.01329,0.708004,-0.297585,-0.424231,1.2323,-0.0554523,-0.884712,0.890797,0.328953,-1.34782,0.235847,-0.238928,0.966013,0.14553,0.0889925,0.832184,-0.219359,0.566379,0.0466758,-0.433784,-0.765313,0.158403,0.377005,-0.182247,-0.666591,-0.567958,0.25199,0.0127817,-0.33208,-0.108596,-0.262256,0.478193,-0.986861,0.125539,0.557731,-0.301378,-0.859626,0.408584,0.341867,-1.04388,1.2058,0.457305,0.677646,0.140898,0.014637,0.391264,0.235645,-0.0480403,-0.963125,0.662429,-0.626107,-0.0884053,0.285789,-0.214722,-0.808907,-0.421293,0.0643733,-0.727879,-0.0018552,0.199996,0.198703,-0.0380395,0.810526,0.466237,-0.703276,-0.0160705,-0.389422,0.307634,-0.673656,0.324235,-0.0848054,0.663759,-0.349773,-0.509672,1.1141,-0.796822,0.155795,-0.204378,-0.537347,0.806419,1.08107,0.446882,-0.346059,0.0821272,0.0524538,0.616572,0.0455152,-1.05022,-0.774397,0.192741,0.204538,0.0546579,0.264349,-0.141789,-1.47962,0.818341,1.00672,-0.395652,-1.24931,1.39223,0.0408742,0.978961,0.215953,-0.0117521,-0.208485,-1.38945,0.86029,-0.254925,-0.715095,0.301653,0.763854,0.196741,-0.405876,0.000844299,-0.599001,0.650749,0.170945,0.00120763,-0.170267,-0.0379267,-0.0275504,-0.360223,-0.124843,-0.452533,0.0133147,0.190545,0.924158,-0.756267,-0.060297,0.581487,0.079656,-0.272892,0.193483,-0.638234,-0.662626,-0.281788,0.142177,0.12251,0.0991484,-0.287866,0.067544,-0.0467962,-0.0975609,-0.0995285,-0.170721,-0.264084,-0.122081,0.73368,-0.167466,-0.0255098,-0.321288,0.596646,-0.683502,-0.147372,0.694749,0.431085,-0.120156,0.513147,0.0888703,-0.765448,-0.207793,-0.0610685,0.723016,0.476633,-0.605258,0.152363,-0.014236,0.0765273,0.193628,-0.609972,-0.639818,-0.235362,0.176344,-0.0539254,-0.032611,-1.16775,0.977196,-0.317078,-1.20884,0.169078,-0.705384,0.868335,-0.86383,0.165392,0.770428,-0.0947927,-1.75092,0.928903,0.140282,-0.971003,1.36555,-0.0354744,1.11025,-1.14781,0.0380966,0.439442,-0.256882,0.0116904,-0.656437,1.12308,0.145381,0.507341,0.993576,0.140668,-1.63863,-0.676479,0.0655886,-0.561607,1.61667,-0.540963,-0.537242,-0.12356,2.75521,0.0815367,-1.21108,-0.349532,-0.612851,0.533418,-0.632241,1.01752,-1.66419,0.614161,-1.38051,0.168468,2.2248,-0.830521,0.678704,-0.444773,-0.252805,0.173318,1.12261,-0.0882724,-0.180245,-0.531073,1.16948,0.0619505,0.0986638,-0.859549,-0.431759,0.136008,0.451241,0.36121,0.323816,0.393653,-1.05979,1.0057,0.694081,-0.344912,-1.07293,0.503179,-0.0985238,0.97606,0.130225,-0.0129499,0.0659624,-1.25033,0.346536,0.199936,-0.382296,0.352844,1.20732,0.856427,-0.573535,-0.0649477,-0.477485,1.03392,-0.0451552,0.647692,0.574671,0.215352,0.716527,-0.75349,-0.487124,-0.370374,-0.476409,-0.56491,1.39103,-0.889646,-0.00717704,0.372454,1.02744,0.352228,0.572863,0.629522,-0.522588,-0.23875,0.476449,1.18061,-0.134222,-0.569587,-0.878655,0.159259,-0.493543,0.457109,-0.429543,0.355427,0.00508635,0.332652,-0.301068,-0.0127134,0.6979,0.185775,0.224406,0.238693,-0.0932141,0.569108,0.508165,-0.399316,-0.127252,-0.169086,-0.276662,-0.3121,-0.591098,0.419715,0.126701,-0.406966,-0.51188,-0.147552,0.561017,0.192424,0.531318,-0.262524,-0.494576,-0.00584297,0.79263,-1.21603,1.0123,-0.504236,-0.362389,-0.11628,-0.659492,0.801957,0.913114,0.196623,-0.219572,-0.201732,-1.74997,0.892185,-0.273595,-0.276715,0.250894,-0.290895,0.116658,-1.18269,0.942172,0.105964,-0.890112,-0.0897822,0.107161,1.05192,0.911898,0.806441,1.29482,0.544566,-0.757175,-0.108295,-0.672521,0.195161,1.88854,-0.309283,-1.0335,0.387867,1.37485,0.277142,-0.145404,0.468167,0.209706,0.783161,-0.779799,1.35323,-1.53776,1.72864,0.103539,1.56378,1.09572,-1.09161,2.03085,-0.716689,-1.17882,-0.427837,0.647834,-0.95905,-0.603668,-1.84955,0.719786,-0.284063,-0.0406808,-0.355199,-0.0995264,-0.0362093,0.556372,1.04257,-0.771499,-0.555648,-0.61465,0.725384,0.176579,-0.133982,-0.695586,-0.329984,0.526752,1.71743,0.876034,0.661632,0.40994,-0.383339,0.930747,1.01551,-1.25437,-0.571812,0.522485,1.20561,-1.57157,-0.453335,-0.900996,0.101832,-0.393426,0.00780107,-0.555963,0.219253,1.02288,0.202715,-0.83907,-0.0179964,-1.48969,-0.44865,0.364178,-0.199193,-0.837284,-0.577286,0.959965,0.904394,0.922201,0.177073,0.0245422,-0.326018,0.0409052,1.12879,-0.938746,-0.454632,-0.105685,1.19614,-0.842491,0.131648,-0.742687,0.175339,-0.185501,0.563432,-0.0874702,0.120998,0.812689,0.384022,-0.0503708,-0.427288,-0.223551,0.0209903,0.884124,-1.05206,-0.122158,-0.20814,-0.122459,-0.308526,-0.464926,-0.142451,-0.252371,-0.441224,-0.210228,0.269509,0.580001,-0.31515,0.202349,0.160295,-1.23952,0.210609,0.706564,0.0165077,0.188896,0.17016,0.251736,0.306795,-0.0637996,-0.430783,1.20346,0.179967,-0.730672,-1.33474,-0.0794601,-0.396724,-0.737445,-0.00984431,-0.28325,-0.390974,-0.038095,-0.835921,0.502479,-0.639403,-0.559277,0.370634,1.06962,0.373541,0.196187,0.349025,-0.0427937,0.484447,-0.204831,0.302338,-0.662914,0.129803,0.700099,0.229637,-0.406074,0.398436,-0.484302,0.402109,0.587094,0.730258,1.02234,0.797415,-0.715038,1.11789,-0.613251,2.2063,0.945545,1.91097,0.118589,-0.994341,2.54688,-0.877659,-1.8216,-0.300932,0.0932314,-1.30832,-0.80969,-2.03784,-0.16148,-0.166183,0.0536081,-0.30843,0.0104801,-0.328575,-0.563095,0.658145,-0.296787,-0.496402,0.0910542,0.806422,-0.295509,0.545306,-0.20419,0.225036,-0.499364,0.468456,0.457914,0.535003,0.0343321,0.172017,0.661222,-0.146968,-0.430753,-0.481861,0.106958,0.144635,0.354048,-0.217473,-0.541994,-0.522449,0.226373,-0.13958,0.0471756,-0.231642,0.013286,1.2331,0.359782,-0.892822,-0.415362,0.999157,-0.323472,0.798115,0.0799217,-0.188766,-0.344882,0.407521,0.403416,0.212001,0.422634,0.54069,0.105288,0.602646,-0.343721,-0.855442,0.681225,1.08127,-0.0731763,-0.0128989,-0.275836,0.791209,0.172043,0.0579965,0.0725526,0.172206,-0.00766066,-0.482183,0.39712,-0.420837,0.0289617,-0.00889554,1.19691,-0.542004,-0.148847,0.691899,0.15707,-0.104339,-0.421184,-0.400622,-0.339486,-0.241991,0.421866,0.146692,0.409071,-0.00471259,0.220337,-0.0682226,-0.453335,0.0435564,-0.0980691,0.584012,0.0507529,0.826074,-0.0204963,1.18771,0.347178,-0.5393,0.601578,0.858028,0.030693,-1.31903,0.70128,-0.842215,-0.883451,-0.197673,-0.171817,-0.583376,0.576539,-0.398587,-0.52303,-1.50329,-0.467651,0.557771,1.65291,0.128755,-0.465854,0.241485,-0.214114,0.599176,-0.0893573,0.350009,-0.186264,0.113326,-0.583162,0.43347,0.0613313,-0.12921,-0.338873,0.767701,0.274978,-0.10022,0.159708,0.000942648,-0.463212,0.4222,-0.478001,0.135794,0.390917,0.261103,-0.806234,-0.620904,0.54319,-0.341798,-0.076934,0.257492,-0.112021,-0.484698,0.144752,-0.333947,0.047995,-0.570774,0.124597,-0.709039,-0.107169,-0.444627,-0.730182,-0.271679,0.202572,0.368226,0.317191,0.323992,-1.20128,0.590057,0.181892,0.17045,-0.303889,-0.134672,-0.826221,-0.110875,0.318244,0.170388,-0.350986,-1.10513,-0.4908,0.4798,0.306086,-0.483619,0.896218,-0.348724,0.664202,-0.545565,0.233277,0.144683,0.312718,-0.622216,-0.189646,0.780047,0.628038,-0.419035,-0.111839,0.471336,-0.609637,0.614392,0.698006,0.0837061,-0.800822,-0.475265,-0.379244,-0.103512,0.29646,0.909484,-0.446697,0.171329,0.425317,-0.443269,0.0423141,0.205657,0.685271,0.227636,0.362242,0.143326,0.0641022,0.0159756,0.0621005,0.0201881,-0.201293,-0.56651,0.34788,-0.488153,-0.0936489,-0.535824,0.672753,-0.38959,-0.341897,0.121222,0.37403,-0.0283059,-0.04638,-0.595538,-0.400907,-0.262205,0.0911609,0.337308,0.403608,0.06394,-0.296363,-0.0013824,-0.249998,0.0180023,-0.402982,0.472552,-0.192468,0.498889,-0.356568,0.800728,0.601314,-0.311825,-0.3496,1.03802,0.272753,-0.576546,0.284818,-0.654415,-0.355882,0.0540789,-0.0337052,-0.238345,0.160633,-0.00989981,-0.578345,-0.819422,-0.169312,-0.134969,0.54517,0.513165,-0.198967,-0.377128,-0.321735,0.148621,0.568158,-0.0747584,0.170049,-0.142113,-1.16056,0.463176,0.624913,0.0733735,-0.833881,0.841258,0.940235,0.182874,-0.326532,-0.362328,0.169306,-0.410168,0.0941501,-0.749066,-0.116578,-0.481021,-0.661898,-0.194375,-0.651508,-0.520758,0.434391,0.575798,0.426364,-0.244918,-0.0220225,0.239196,0.577344,-0.0319753,-0.0430563,-0.767282,-0.103297,0.0758081,0.233803,-0.809844,-0.379804,1.32872,0.415265,0.34313,-0.720467,0.231093,0.348989,0.165991,0.0139304,-0.274766,-1.06699,0.105844,0.324792,0.1374,-0.273466,-1.49429,-0.667089,1.35626,0.396576,-1.35459,0.669179,-0.402667,0.944191,-0.167152,-0.393988,0.0168967,0.613997,-0.347307,-0.0585363,-0.417309,0.313392,0.392507,0.552536,0.241299,-0.615306,0.171425,0.672524,-0.0400686,-0.460052,-0.456144,-0.755354,0.147916,0.393746,0.478278,-0.487481,-0.127409,0.396919,-0.162293,-0.122014,-0.49478,0.387759,0.0336708,0.889505,-0.0723616,0.238976,0.280438,0.614902,-0.242797,-0.72638,-0.0833694,0.722509,-0.292601,0.679322,-0.479377,0.20798,-0.314002,0.259762,0.0426466,-0.14312,-0.0535037,-0.406321,-0.105436,0.459919,0.108369,0.127451,-0.252407,0.056923,0.0551757,-0.0522467,-0.0593669,-0.229748,-0.487949,0.0439029,0.227074,0.121646,-0.225907,-0.64977,-0.128438,0.500422,0.0980532,-0.97799,0.190493,0.40397,0.537372,0.138104,-0.0833414,0.464883,-0.108588,0.266569,-0.153317,-0.815203,0.107266,-0.124884,0.263508,0.145459,-1.02084,-0.593819,0.949305,0.543988,-0.811345,-0.147836,-0.462454,0.923866,-0.279439,0.756046,-0.109088,0.033103,-0.19378,-0.253622,0.21069,-0.392376,-0.551043,1.40771,0.469065,-0.548721,-0.235537,1.45856,-0.192945,0.776319,-0.957882,-1.01941,-0.835546,0.283338,1.32055,-0.655317,-0.544191,-0.152334,0.401151,0.364114,-0.421557,0.705,0.0299309,0.201894,0.453435,0.171926,-0.13385,-0.537761,0.612326,0.90747,-0.858351,-0.590113,1.11238,0.46083,-0.071924,0.232699,-0.504203,0.187236,-0.127666,0.884578,-0.929408,-0.38746,-0.842142,-0.600455,-0.148621,-0.802655,-0.228579,0.437684,0.835048,-0.0532059,-0.545554,0.28534,0.692268,0.267088,0.453985,-0.208321,-0.00114788,0.119977,0.535108,0.307111,-0.422475,-0.147244,1.05295,0.51341,0.120723,0.27833,-0.109172,0.214204,0.607037,0.0962028,-0.203709,-0.081704,0.171219,-0.302235,-0.319311,0.313649,-0.53895,-0.225798,0.371515,0.13932,-0.980733,0.213071,-0.352335,0.791864,0.532113,0.645135,-0.0353588,0.918488,-0.998548,-0.62481,0.125094,0.854157,-1.90238,0.171555,-0.100206,1.16097,-0.371361,1.06851,0.780457,0.130504,-0.128226,-1.39315,-0.126052,0.113523,0.931737,0.556131,-0.181244,-0.267657,0.0842167,0.252915,-0.00142818,0.155705,-0.567373,0.07982,0.123194,0.906705,-0.294543,0.916584,-1.25062,-0.467817,0.267902,0.5189,-1.69508,-0.407188,0.134479,0.328176,0.197527,1.27232,0.395684,0.840578,0.0181134,-1.20047,-0.319206,0.786947,1.59371,0.0536141,-0.0933435,-0.739848,0.277789,0.54435,0.404384,0.445376,-0.0912753,-0.185738,0.203029,0.15498,-0.0867126,-0.103149,0.364737,0.0379524,-0.261018,0.0914528,0.379551,0.352516,0.0196847,0.179956,0.0701644,0.0151273,0.107237,0.406105,0.0983658,-0.451032,-0.10574,-0.055355,-0.188349,0.247603,-0.556918,0.0661984,0.70123,0.303847,-0.399625,0.114336,-0.112366,0.477109,-1.91368,0.497056,-1.5434,0.132056,-0.649906,0.552559,0.458424,-1.21681,1.09468,-1.87702,0.389021,0.688826,0.85261,-0.45288,-0.803256,-0.350977,-2.02759,-2.05356,-1.04015,0.307214,-0.939303,-0.781938,-1.21695,1.98674,0.749905,-1.39692,-0.867325,0.143725,-1.28633,-1.06335,0.143649,0.973804,-1.50966,-0.986033,0.855601,-1.84621,1.79214,0.0537525,-2.91311,-1.8046,-0.390071,-2.21462,-1.53014,1.60337,-0.857039,-0.151123,-0.695971,-0.729802,0.664149,0.456611,-3.57533,-0.67956,-1.33351,0.108766,-1.24273,0.2729,0.0429574,0.419742,1.13767,0.46144,-0.00252673,-1.329,0.885881,-1.40132,2.42478,-1.50927,-2.41056,-0.263405,-0.388084,0.275604,1.38854,1.03139,-1.66939,-2.08988,0.264012,1.47781,0.584593,-0.808112,-4.50092,-0.184449,0.0751568,-4.16849,-1.08285,1.11377,-3.31345,0.217684,0.0966752,1.18582,-0.0287052,0.50006,1.08383,-2.91993,2.25023,3.26072,0.245215,-2.05996,-1.74563,-2.06996,-0.773836,-2.09085,-0.205622,-2.28142,1.46627,-2.29718,0.0837392,-0.474751,-0.821082,0.432211,1.18954,-1.20983,-2.99943,1.33903,-2.5985,-0.576045,0.673225,0.993532,1.14732,-1.82905,1.96879,-2.3718,1.7937,-1.24002,0.229969,-2.22248,-0.614779,-1.37963,-0.985625,1.56711,-0.925787,-0.071416,-0.890674,0.841831,2.58377,-0.0471346,-0.958634,-1.522,-0.93195,-0.148794,-1.74055,-2.74853,1.19922,0.385337,-1.25262,-2.11634,0.146808,1.99629,0.745814,-1.43665,0.580208,-2.04702,-1.11835,0.806176,0.413967,1.05073,-1.79029,-1.81284,-1.30171,-2.81246,1.83384,0.834516,0.754675,-1.92401,-0.792393,-2.29423,1.01246,-3.22213,1.40124,-0.688772,1.38568,0.284891,0.612798,-1.54117,-1.74381,1.28439,1.02134,-2.54988,-2.35444,0.471882,2.02676,1.13647,-0.981129,-1.68236,-0.701957,-1.26208,0.826578,-2.74605,1.41413,1.60349,0.344417,-2.02252,0.544492,-0.34612,-0.20531,-2.37029,0.220955,-1.40779,1.41597,-0.411565,-2.45319,1.13596,-1.53027,2.29575,2.03867,-1.61865,-0.712578,-2.37039,-1.48584,0.995421,-1.68447,-2.19307,1.17623,-1.81009,-0.845652,-1.36588,1.52691,-2.10274,1.38357,-1.06756,1.34697,-2.27224,-2.12444,1.55683,-2.05656,0.217158,1.46428,-1.23987,-1.97435,0.495389,-0.105772,0.827075,-1.64969,0.329112,-1.89764,1.32405,-0.531402,2.88291,-1.69267,0.920137,-2.90072,-0.582534,0.270889,-0.916067,1.15067,-0.44911,-3.81045,0.250494,-0.133661,-2.33427,-0.328254,0.616976,0.0506888,-1.31561,0.217033,-2.82053,-0.150237,1.50728,-0.0305805,-1.6458,-0.101386,1.08122,-1.58304,1.62489,-0.77074,-1.03615,1.23174,-0.510888,-2.58352,0.0277562,-0.344327,2.69867,1.49869,0.898245,0.942687,0.126934,-2.75639,-0.200422,-2.52587,0.496889,-1.6272,-0.713135,-2.34813,1.7147,-0.845469,-0.115032,-1.10548,1.25744,-2.7745,0.903386,-1.19575,0.620435,-1.65978,-1.81471,-0.196608,-0.535,-0.991763,1.27703,2.18719,0.643581,-2.15325,-1.90149,0.738129,0.804911,0.758666,0.644142,0.457597,0.923907,1.24291,0.571738,0.909883,0.840367};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    for (size_t i = 0; i < numbers.size(); ++i) {
      size_t height = numbers[i].size();
      size_t width = numbers[i][0].size();
      if (width > 1.2 * height) { // Bad cut
        vector<string> temp = numbers[i];
        Prune(0, width / 2 + 1, 0, height, &numbers[i]);
        vector<size_t> points;
        FindBestCuttingPoints(numbers[i], true, &points);
        Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
        Prune(width / 2 + 1, width, 0, height, &temp);
        points.clear();
        FindBestCuttingPoints(temp, true, &points);
        Prune(0, temp[0].size(), points[0], points.back(), &temp);
        numbers.insert(numbers.begin() + i + 1, temp);
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
