#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;

float weights_input_0[] = {-0.00199,-0.00420,-0.00859,-0.12269,-0.32425,-0.31213,-0.36189,-0.14492,-0.11775,0.02846,0.06006,-0.03710,-0.14467,-0.18916,-0.30272,-0.21965,-0.09871,-0.01035,-0.00208,-0.00853,-0.06673,-0.01853,-0.11078,-0.32850,-0.13574,-0.29136,-0.06030,0.01124,-0.02449,-0.19715,-0.23509,-0.12061,-0.26763,-0.26233,-0.09741,-0.03624,-0.01327,0.01812,0.02632,0.16943,-0.11281,-0.14123,-0.20129,-0.17804,-0.17480,0.01437,0.07866,-0.01691,-0.14274,-0.08561,-0.28983,-0.22430,-0.07607,-0.05498,0.04702,0.02689,0.03639,0.11622,-0.01015,-0.09538,-0.28850,-0.09562,0.02803,0.19178,0.29411,0.11600,-0.04144,0.02126,-0.18885,-0.12383,-0.04372,-0.00470,-0.01114,0.02597,0.01538,0.13964,-0.01586,0.10086,0.05543,0.05280,0.04850,0.21159,0.27220,0.14502,0.13637,0.01571,-0.06625,-0.00191,-0.03590,0.00407,-0.01415,-0.03174,0.03204,0.17158,0.05509,0.17200,0.20314,0.00129,-0.02141,0.37949,0.23005,0.04647,0.17791,0.17485,0.05319,0.03791,-0.02643,0.00333,-0.01410,-0.03239,-0.01670,0.04370,-0.01209,0.16870,-0.11894,-0.11349,-0.00424,0.29690,0.12153,-0.05643,0.11077,0.27697,0.04365,0.04111,-0.03222,0.00298,-0.01454,-0.04054,-0.04124,0.05466,0.02382,0.10829,-0.18126,-0.26038,-0.18164,0.01353,-0.33296,-0.05285,0.11624,0.18078,0.03003,-0.04044,-0.03541,-0.00615,-0.00554,-0.03268,0.00101,0.02780,0.01050,0.02369,-0.18933,-0.33274,-0.26138,-0.19359,-0.28517,0.06781,0.17793,0.23430,-0.04548,-0.10952,-0.07685,-0.01301,-0.00449,-0.03118,0.00335,0.07173,0.06031,0.01711,-0.20531,-0.24828,-0.32158,-0.16770,-0.09320,-0.00383,0.05258,0.09710,-0.15096,-0.11820,-0.08255,-0.01166,-0.03899,-0.06854,-0.04650,0.01049,0.00308,0.05344,-0.17083,-0.12011,-0.07092,0.22005,0.28210,-0.07834,-0.15631,-0.10789,-0.27719,-0.12575,-0.10734,-0.05647,-0.04449,-0.07768,-0.05157,-0.00191,0.07506,-0.02189,-0.02743,0.00538,0.17727,0.43037,0.32658,-0.16005,-0.14346,-0.25000,-0.35825,-0.16209,-0.10909,-0.05430,-0.06241,-0.08684,-0.05126,-0.01662,-0.04434,-0.02342,0.04580,0.23038,0.43236,0.43830,0.20963,-0.17780,-0.17687,-0.15399,-0.14839,-0.12141,-0.10440,-0.04446,-0.05721,-0.08588,-0.07970,-0.08355,-0.10546,-0.02959,-0.02460,0.18590,0.07811,0.18780,0.16440,-0.15525,-0.17806,-0.04107,-0.12496,-0.03449,0.01260,-0.00772,-0.00281,-0.08987,-0.09486,-0.06775,-0.14962,-0.02279,0.04637,-0.09705,-0.09668,-0.01681,0.20431,-0.05843,-0.05493,0.01764,0.13299,0.16211,-0.00262,0.07346,-0.01070,-0.05662,-0.06282,0.03335,0.06286,0.10175,-0.01759,-0.12673,-0.02124,0.16043,0.16537,0.01876,0.21596,0.24306,0.14033,0.12301,-0.04929,0.00145,0.00145,-0.04900,0.03471,-0.02879,0.03176,-0.06657,-0.05003,-0.22743,-0.26398,-0.11943,0.10402,0.10166,0.36958,0.36024,0.31342,-0.01320,0.01180,-0.02593,0.00221,0.02863,0.07243,0.12983,0.21321,0.04921,-0.04807,-0.20824,-0.37724,0.01148,0.34137,0.44995,0.50250,0.54540,0.34787,0.04366,0.01343,0.00046,-0.06612,};
float weights_input_1[] = {0.00500,-0.00157,0.00275,0.00305,0.23547,0.24836,0.32860,0.20867,-0.10192,-0.28221,-0.16551,-0.02510,0.09139,0.05786,0.23044,0.16608,0.07200,0.06662,0.00366,-0.03925,-0.02284,0.19095,0.13761,0.09432,0.03390,0.03743,-0.10954,-0.13590,-0.04883,0.03030,0.13958,0.20964,0.36704,0.17667,0.06287,0.01027,-0.03721,-0.09282,0.01307,-0.10215,0.14789,-0.10201,0.01287,-0.10322,-0.00013,0.14872,-0.15085,0.04475,0.01325,0.22481,0.34431,0.14611,0.06219,-0.05017,-0.04443,-0.06673,-0.03942,-0.15863,0.01925,-0.28404,-0.08613,-0.17217,-0.05143,-0.16223,-0.12992,-0.02818,0.08351,0.26512,0.30172,0.07762,0.03966,0.00219,-0.03607,-0.06579,-0.00090,-0.16808,-0.03866,-0.32314,-0.37466,-0.19658,-0.19446,-0.06961,-0.24926,0.06857,0.20676,0.14225,0.08055,0.01573,-0.00222,-0.01402,-0.03980,-0.06146,0.00835,-0.20241,-0.19599,-0.33620,-0.20339,0.06802,0.11181,-0.02223,0.17012,0.15222,0.18940,-0.04588,0.04262,0.00106,-0.01627,-0.04073,-0.03936,-0.06093,0.00187,-0.08484,-0.22072,-0.33041,0.06232,-0.02110,-0.01682,-0.24684,0.15714,0.22708,0.21104,-0.09832,-0.05348,-0.01893,-0.01769,-0.04234,-0.04034,-0.04989,-0.04037,-0.14050,-0.15446,0.02395,0.05873,0.09747,-0.34516,-0.39347,0.15882,0.11475,-0.06676,-0.24229,-0.13212,-0.07900,-0.01224,-0.05330,-0.04032,-0.04883,0.04460,-0.16434,0.06138,0.11100,0.31071,-0.02823,-0.28024,-0.21172,0.11433,-0.01630,-0.12029,-0.15003,-0.18269,-0.10472,-0.09600,-0.05546,-0.03866,-0.04886,0.06170,0.08872,0.21871,0.24300,0.44478,0.09039,-0.03565,0.05142,0.15382,0.06602,-0.06576,-0.13225,0.03430,-0.05681,-0.09649,-0.00499,-0.03534,-0.05522,0.17278,0.09403,0.11715,0.23561,0.22773,0.01039,0.00395,0.08303,-0.00668,0.05685,-0.01121,-0.10430,0.00083,0.03878,-0.05552,-0.08183,-0.04483,-0.04083,0.27509,0.20518,0.11715,0.17898,0.05839,0.09464,0.07548,0.19260,0.09190,0.14065,-0.17038,-0.17285,-0.02243,0.04612,-0.04240,-0.08411,-0.02826,0.02872,0.31147,0.24858,0.25292,0.16344,0.25834,0.36413,0.27543,0.47640,0.32074,0.19174,-0.01039,0.08523,0.26284,0.21500,0.00148,-0.06240,-0.00321,-0.02202,0.15474,0.04517,-0.03093,0.04822,0.16393,0.28347,0.29523,0.40337,0.17010,0.23589,0.06844,-0.10627,0.07357,0.04662,-0.05386,0.01234,0.01055,-0.02762,0.03261,-0.25869,-0.24394,-0.25699,-0.25695,0.00832,0.07373,0.07841,0.12931,0.20496,-0.19541,-0.30829,-0.07237,-0.02539,-0.08748,-0.10447,-0.04159,-0.07478,-0.02175,-0.35756,-0.34769,-0.38662,-0.27758,-0.23437,-0.11530,-0.04595,-0.05314,-0.03260,-0.25848,-0.39238,-0.13761,-0.07844,-0.03954,-0.01258,-0.00053,-0.09995,-0.05030,-0.15437,-0.33051,-0.26914,-0.28959,-0.29141,-0.22672,-0.12278,-0.17941,-0.10835,-0.13715,-0.09172,-0.05833,-0.09865,0.00134,-0.08817,0.00024,-0.02441,-0.07712,-0.24726,-0.43233,-0.33326,-0.20710,-0.17332,-0.23025,-0.33016,-0.29643,-0.01508,-0.20593,-0.21134,0.00373,-0.10142,-0.00397,0.00088,-0.00939,};
float weights_input_2[] = {-0.00111,-0.04802,-0.04851,0.06026,-0.11489,-0.18870,-0.37643,-0.19087,0.03174,-0.17858,-0.09120,-0.16037,-0.01657,0.06589,0.20326,0.45037,0.04317,0.01020,-0.00131,-0.02753,-0.12016,-0.00841,-0.31996,-0.20989,-0.21800,0.15865,-0.25299,-0.20836,-0.07761,0.08778,0.05914,-0.35891,-0.02675,0.31803,0.05001,0.05480,-0.00918,-0.01267,-0.08977,-0.27602,-0.13123,-0.40952,-0.18529,-0.11007,0.20150,0.07566,-0.28303,-0.09615,-0.11105,-0.28226,0.09995,0.07447,0.03570,0.10458,-0.01171,0.00597,-0.00030,-0.14907,-0.04727,0.03734,0.14260,-0.08489,0.10079,-0.14608,-0.55072,-0.45559,-0.30360,-0.16468,-0.03303,0.01162,0.02631,0.05258,-0.00767,0.00630,0.00354,-0.13575,0.29344,0.23163,-0.03871,0.13822,-0.04386,-0.25075,-0.44209,-0.71885,-0.22553,-0.15535,-0.03211,-0.00955,0.04578,0.05515,-0.00391,0.02045,0.08308,0.01367,0.25061,0.25124,0.17583,0.21402,0.18855,-0.50684,-0.40704,-0.32246,-0.45348,-0.43425,-0.06025,-0.03140,0.09954,0.04821,0.00260,-0.02905,0.13738,0.10454,0.39170,0.41252,0.55097,0.55878,0.14083,-0.13273,0.04356,-0.02325,-0.29603,-0.37273,-0.05446,0.04466,0.10643,0.05197,0.00224,-0.02124,0.03195,0.17635,0.44089,0.52708,0.49071,0.74496,0.34858,0.00735,0.34837,0.15602,-0.05399,-0.31193,0.06730,0.10200,0.10608,0.05949,0.03127,0.01650,-0.00329,0.01065,0.52477,0.46067,0.36575,0.08483,-0.06272,-0.06664,-0.13444,0.23768,-0.45655,-0.19138,0.43669,0.22307,0.12232,0.06157,0.02825,0.01861,-0.00770,0.07501,0.27148,0.33668,0.86693,0.09065,-0.20980,-0.52738,-0.07097,0.04123,0.17624,0.20888,0.51203,0.27684,0.11264,0.06328,0.12006,0.09632,0.17277,0.08453,0.13082,0.43335,0.69312,0.42375,0.13693,0.01280,0.25774,-0.04754,0.00154,0.30911,0.47182,0.17297,0.18839,0.06838,0.07881,0.09219,0.23550,0.20586,0.05258,0.30786,0.28422,0.25399,-0.04489,-0.03546,0.08412,0.21741,0.04922,0.20187,0.49142,0.06011,0.07064,0.07386,0.09812,0.13126,0.20050,0.06989,0.21750,0.16111,0.13331,0.09045,-0.26163,-0.16529,0.25683,0.38011,0.17228,0.37027,0.50050,0.05860,0.05265,0.02770,0.09894,0.10742,0.04716,-0.08584,-0.08001,-0.02413,-0.04926,-0.17706,-0.03981,0.01492,0.29211,0.58040,0.09386,0.38835,0.34343,0.00996,-0.01255,0.01368,0.00477,0.08022,-0.15137,-0.32179,-0.32147,-0.36447,-0.36276,-0.14634,0.02843,0.19692,0.00658,0.19416,-0.08748,0.13100,-0.06224,-0.14336,-0.02975,0.01749,-0.00794,-0.01660,-0.17632,-0.44148,-0.22467,-0.33188,-0.19733,-0.28032,-0.09027,-0.31510,0.12244,-0.02909,-0.17122,-0.16485,0.05727,-0.19559,-0.09570,0.03831,-0.00046,-0.01662,-0.30969,-0.41213,-0.34851,-0.07189,0.06782,0.01161,0.15280,0.07867,-0.27357,0.17266,-0.23477,-0.17068,-0.19566,-0.25583,-0.00835,0.06853,-0.00440,-0.00929,-0.16723,-0.09824,0.03569,-0.13901,-0.06360,0.03437,0.29076,-0.02091,0.06211,0.11544,-0.29946,-0.43112,-0.26512,-0.20574,-0.00973,0.00058,-0.19040,};
float weights_input_3[] = {-0.00079,-0.02967,-0.02729,-0.06306,-0.21435,-0.43188,-0.41697,-0.63712,-0.35027,0.17599,0.32165,0.44327,-0.08312,-0.36089,-0.12465,-0.30100,-0.16538,-0.01152,0.00006,-0.04786,-0.04143,-0.02424,-0.07194,-0.29396,-0.67519,-0.44739,-0.25633,-0.04037,-0.08787,-0.11173,-0.21136,-0.04378,-0.11442,0.05476,-0.05783,-0.02235,-0.01883,-0.04354,-0.02241,-0.03379,-0.20872,-0.37518,-0.34135,-0.13402,0.11393,0.10804,0.12154,-0.05984,-0.07277,-0.21774,-0.24270,-0.08570,-0.10385,0.01851,-0.00646,0.00081,-0.03257,-0.11506,-0.05912,-0.13869,-0.41700,-0.07160,0.11180,0.01002,0.15816,0.22250,0.05240,-0.06984,-0.01801,0.00338,-0.06029,0.06337,-0.02087,-0.00084,0.00462,-0.06306,-0.01262,0.12423,-0.13279,0.19934,0.24680,0.16295,0.25097,0.19664,0.17264,-0.04086,0.15385,-0.08028,0.04023,0.05354,-0.01939,-0.01328,0.03373,-0.15249,0.10845,-0.03337,0.02861,0.10762,0.12326,0.35570,0.32632,0.15047,0.07345,-0.36270,-0.20091,-0.25908,0.19197,0.06221,-0.01715,-0.03528,0.09662,-0.11838,0.08164,-0.19586,-0.10560,-0.32239,-0.26364,0.09874,-0.02987,-0.39080,-0.32001,-0.25491,-0.13770,-0.20245,0.21539,0.05502,-0.01675,-0.03466,0.07251,0.02304,0.43150,0.12560,-0.10116,-0.50579,-0.35569,0.07488,-0.43538,-0.37643,-0.14596,0.04208,0.19531,0.10779,0.16274,0.06895,-0.01379,0.04383,0.10970,0.23107,0.40270,0.43454,-0.25402,-0.36433,-0.31059,-0.60271,-0.25621,-0.05217,0.22018,0.55223,0.48197,0.26858,0.16606,0.06710,-0.01698,0.03763,0.12529,0.51397,0.09643,-0.20565,-0.49035,-0.46659,-0.37540,-0.30946,-0.12215,-0.51985,-0.09599,0.17087,0.39593,0.22885,0.12945,0.06115,-0.02075,0.03660,0.15568,0.47485,0.37096,0.32833,0.01842,-0.40140,-0.43088,-0.26728,-0.59201,-0.56017,-0.36636,-0.35045,-0.27904,-0.22485,0.08878,0.05880,-0.02049,0.02675,0.09884,0.22579,0.47816,0.70498,0.29519,-0.37823,-0.33167,-0.29139,-0.36968,-0.72453,-0.27947,-0.34373,-0.43130,-0.30905,0.07957,0.05973,-0.05493,-0.00491,0.05359,0.08110,0.23725,0.77583,0.37095,0.22328,0.16539,0.03697,0.05134,-0.28963,-0.28931,-0.26074,-0.35886,-0.25771,0.10780,-0.01395,-0.05865,-0.01552,-0.04393,-0.17746,-0.19888,0.55099,0.52456,0.54128,0.43704,0.27865,0.25769,-0.08169,-0.03061,-0.18443,-0.30677,-0.19694,0.00700,0.00522,-0.02776,-0.02131,-0.03771,-0.24669,-0.24544,0.42561,0.55878,0.41293,0.22295,0.10850,0.28017,0.04604,0.08926,0.05096,-0.40261,-0.03756,0.01020,0.00549,-0.01611,-0.09821,-0.08079,-0.33498,-0.13935,0.23388,0.56078,0.33268,0.29770,0.19651,0.17727,-0.03998,0.12160,-0.10723,-0.11494,0.09689,0.08823,-0.01426,0.00072,-0.04163,-0.03446,-0.17064,0.11026,-0.23910,0.34447,0.11588,0.13223,0.31870,0.42603,0.49966,0.26759,0.16041,0.29538,0.16556,0.02200,-0.02136,0.00119,0.06124,0.06567,0.06154,0.06443,0.07919,-0.18631,0.14422,0.54803,0.44948,0.73017,0.52168,0.51070,0.76850,0.39365,0.07458,0.02156,-0.00040,-0.21529,};
float weights_input_4[] = {0.00251,0.04023,0.03988,-0.05204,0.10235,0.13884,0.25400,0.09309,-0.14650,-0.03398,-0.06940,0.12855,0.25233,0.05970,0.09937,-0.05045,0.04298,0.04338,0.00378,-0.01077,0.03038,0.03056,0.07048,0.20269,-0.00658,-0.00715,0.04969,0.10072,0.06727,0.10452,0.02795,0.25837,0.22742,-0.00601,0.00186,-0.01993,-0.03615,-0.11028,0.01083,-0.02606,0.10484,-0.02735,0.25687,0.01439,0.08731,0.22596,0.05590,0.11381,0.09508,0.15586,0.07072,0.06175,0.01202,-0.11375,-0.09180,-0.09181,-0.02645,0.01204,0.04962,0.02152,0.09923,0.09922,0.08202,0.16552,0.11923,0.04302,0.15657,0.06865,0.09858,-0.00109,-0.00680,-0.04506,-0.03628,-0.09209,-0.00006,-0.05160,-0.03705,0.01992,-0.20322,-0.25494,-0.13985,0.10169,0.15662,0.16336,0.25487,0.13303,-0.06891,-0.08879,-0.03623,-0.05288,-0.03891,-0.03956,-0.04481,-0.19202,0.07730,-0.01723,-0.37503,-0.15230,-0.02185,0.46598,0.33533,0.14890,0.23867,0.02987,-0.08067,-0.04176,-0.01760,-0.05844,-0.03824,-0.00496,-0.01947,0.04375,0.05294,-0.21622,-0.20589,-0.31518,-0.00679,0.18825,0.21321,0.14992,0.22540,-0.11143,-0.10532,-0.03707,-0.01283,-0.05741,-0.03739,-0.00472,0.02747,0.01898,-0.07007,-0.13849,-0.19456,-0.33461,-0.14399,0.03072,0.16651,0.01264,-0.12520,-0.10099,-0.16900,-0.02316,-0.00705,-0.07370,-0.04942,-0.02243,0.06457,-0.00001,0.08207,0.04896,0.03578,-0.00678,0.12326,0.10950,-0.01374,-0.14784,-0.04512,-0.09563,-0.28696,-0.06699,-0.05326,-0.07846,-0.05135,-0.02173,0.06893,0.10696,0.15329,0.17420,-0.10459,-0.14472,0.21768,0.34725,0.07154,0.09789,-0.06694,-0.08758,0.06076,-0.07424,-0.08013,-0.05009,-0.06998,-0.04241,0.05340,0.08665,0.02613,-0.08532,-0.17625,-0.23075,0.00618,-0.02599,-0.11001,0.01856,0.12720,0.18814,0.16040,0.10770,-0.07146,-0.09067,-0.05584,-0.02161,0.10958,0.11090,-0.02638,-0.20330,-0.45756,-0.08241,-0.09768,0.03496,0.09605,0.18609,0.05482,0.24145,0.13096,0.23619,-0.00982,-0.09442,-0.07130,-0.00377,0.13839,0.18939,0.06658,-0.17540,-0.33331,-0.10991,-0.17009,0.24328,0.42305,0.30927,0.12547,0.28471,0.18337,0.30186,-0.00501,-0.07644,-0.04585,-0.00959,0.15649,0.27582,0.08706,-0.11537,-0.18753,-0.13228,-0.05076,0.27906,0.25667,0.14860,0.29224,-0.00871,0.10436,0.13588,-0.10096,-0.00736,-0.00235,-0.00188,0.12096,0.09766,-0.07729,-0.20242,-0.62228,-0.22694,-0.05061,0.12929,0.24910,0.22028,0.08549,-0.22061,-0.14919,-0.16427,-0.10673,-0.13020,-0.03728,-0.03825,0.07663,0.08894,-0.36173,-0.45819,-0.44729,-0.31394,-0.31714,0.04795,0.01167,0.17536,-0.12892,-0.27448,-0.32000,-0.16960,0.03255,-0.04682,0.00004,-0.06956,0.03007,0.03488,-0.19227,-0.26765,-0.35586,-0.07494,-0.03967,0.08092,0.05470,-0.16308,0.17462,-0.03415,-0.09250,0.02582,0.02792,-0.10901,-0.00087,-0.05212,-0.12243,-0.24363,-0.34891,-0.11653,-0.03496,-0.12009,-0.37087,-0.07539,-0.12465,-0.14531,-0.03498,-0.06874,0.00634,-0.00226,0.01490,-0.00250,-0.11796,};
float weights_input_5[] = {0.00756,0.01205,0.00908,0.12333,0.38603,0.40993,0.42851,0.17694,-0.00611,-0.05087,-0.06019,0.01830,0.12938,0.29688,0.34741,0.20910,0.09842,0.03195,0.00918,-0.01539,0.07405,0.14232,0.26465,0.23674,0.20075,0.16999,0.08543,0.02137,-0.03523,0.00524,0.15513,0.29478,0.39215,0.24152,0.06531,0.02497,-0.02925,-0.04945,0.05146,0.07443,0.15028,0.11121,0.21831,0.16271,0.32057,0.22952,-0.00848,-0.07905,0.03884,0.18068,0.35123,0.19539,0.07271,-0.01740,-0.04709,-0.01616,-0.00787,0.02100,-0.00166,-0.00337,0.15884,0.14915,0.18435,0.06337,-0.13055,-0.06099,0.03760,0.14701,0.19521,0.09807,0.04821,-0.02129,-0.02947,-0.01369,-0.01049,0.00269,0.01316,-0.06857,-0.09267,-0.08019,-0.11501,-0.20213,-0.21779,0.01188,0.04687,0.02315,-0.00579,0.01673,0.02469,-0.03492,-0.03648,-0.00627,-0.00534,-0.04050,0.03310,-0.15151,-0.15298,-0.15119,-0.14395,-0.23475,-0.10054,0.07356,-0.02002,-0.10667,-0.07122,-0.01048,-0.00642,-0.03572,-0.03631,-0.00570,0.00362,0.02465,-0.01995,-0.13519,-0.11247,-0.16834,-0.11669,-0.20594,-0.04261,0.10344,-0.01768,-0.17627,-0.11791,-0.04976,-0.00425,-0.03705,-0.03525,-0.00767,-0.00273,-0.00657,-0.03797,-0.11737,-0.20277,-0.18150,-0.09331,-0.13483,0.20863,-0.00021,-0.11217,-0.16035,-0.09926,-0.01007,0.00400,-0.02998,-0.03241,-0.00417,-0.00661,-0.00445,-0.05689,-0.09273,-0.17965,-0.17282,-0.22457,-0.07209,0.15242,-0.10759,-0.14630,-0.13275,-0.09549,-0.00486,-0.00430,-0.03683,-0.03278,-0.00352,-0.00654,-0.02465,-0.08813,-0.12191,-0.13495,-0.14655,0.03513,0.10341,-0.08606,-0.12644,-0.09085,-0.11531,-0.03252,-0.01086,0.00305,-0.00047,-0.03241,-0.00467,-0.01661,-0.04584,-0.10869,-0.13126,-0.10502,-0.06757,0.24778,0.01206,-0.26893,-0.12683,-0.10415,-0.09796,-0.03680,-0.00991,0.04155,0.00842,-0.03645,-0.00680,-0.02352,-0.06434,-0.09832,-0.13884,-0.12301,0.07392,0.15376,0.01150,-0.16891,-0.09681,-0.19120,-0.10720,-0.04955,-0.01465,0.03037,0.00057,-0.04063,-0.01360,-0.03356,-0.07297,-0.14025,-0.18905,-0.08967,-0.06452,-0.03308,0.02868,-0.08566,-0.13688,-0.22129,-0.21066,-0.14150,-0.02164,0.03323,0.00484,-0.04126,-0.01418,-0.03546,-0.06743,-0.18099,-0.16840,0.00401,-0.00915,0.12204,0.06714,-0.08545,-0.15256,-0.20520,-0.23198,-0.14177,-0.08377,-0.02912,0.00051,-0.03768,-0.01157,-0.03159,-0.10619,-0.15760,-0.14182,-0.12042,0.13428,0.16749,0.08053,-0.05625,-0.10694,-0.16350,-0.14783,-0.17467,-0.09099,-0.06855,-0.10601,-0.03887,-0.03884,-0.03706,-0.12745,-0.21325,-0.20601,-0.11140,0.04142,0.01215,-0.03628,-0.20383,-0.22860,-0.26492,-0.23104,-0.17204,-0.07579,-0.00108,-0.03414,0.00139,-0.04232,-0.04419,-0.11247,-0.19934,-0.14930,-0.08061,0.04847,-0.07334,-0.16535,-0.25878,-0.22374,-0.21324,-0.15390,-0.15370,-0.02891,0.00092,-0.03223,0.00067,-0.01611,-0.05179,-0.14462,-0.31334,-0.21775,-0.16436,-0.17389,-0.13422,-0.27222,-0.36317,-0.37757,-0.28246,-0.22530,-0.16056,-0.08248,-0.00594,-0.00129,0.06217,};
float weights_input_6[] = {0.00132,0.00141,0.00023,-0.06190,-0.14286,-0.20846,-0.25391,-0.26795,-0.19497,0.00596,-0.01042,0.01379,0.15004,0.09515,-0.08879,-0.07020,-0.00738,0.00124,-0.00087,-0.02711,-0.01757,-0.04310,-0.09403,-0.21319,-0.26233,-0.21906,-0.02418,0.03938,0.04247,-0.16086,-0.11866,0.07894,-0.05360,-0.04487,-0.04537,-0.00667,-0.03196,-0.03687,-0.01183,-0.01951,-0.14287,-0.23041,-0.03164,-0.02371,0.10915,0.15557,-0.04158,-0.19634,-0.11907,-0.08847,-0.08415,-0.04634,-0.01346,-0.04808,-0.03155,-0.00295,-0.00552,-0.00923,-0.11101,-0.01805,0.01830,0.22104,0.22676,0.23161,0.15409,-0.14481,-0.10076,-0.16303,-0.13996,-0.03889,-0.00371,-0.03031,-0.02515,-0.00256,-0.00198,-0.03332,0.05072,0.09656,-0.01907,-0.02396,0.12014,0.20968,0.17474,-0.16836,-0.04326,-0.13080,-0.13106,-0.03412,-0.01016,-0.03030,-0.02781,-0.00015,0.02209,-0.02403,0.03911,0.12779,-0.14794,-0.13951,-0.03044,0.48555,0.07491,-0.12165,-0.08229,-0.09422,-0.11926,-0.03871,-0.01239,-0.03057,-0.02806,0.00423,0.02012,0.03859,0.02983,-0.04535,-0.26976,-0.14109,0.07293,0.47083,0.02677,-0.02779,-0.07979,-0.16159,-0.13185,-0.03036,-0.01135,-0.03102,-0.02505,-0.00349,0.01991,0.04427,-0.03027,-0.09314,-0.23861,-0.32733,0.18429,0.34066,0.04838,0.01771,-0.07335,-0.13067,-0.11252,-0.02159,-0.01102,-0.03906,-0.02665,-0.00137,0.02093,0.03927,-0.07747,-0.19372,-0.34931,-0.19364,0.08289,0.14946,-0.05575,0.04562,-0.05532,-0.08010,-0.07838,-0.04112,-0.01183,-0.03916,-0.02613,-0.00244,0.02038,-0.07854,-0.14721,-0.14884,-0.33645,-0.30218,0.02828,0.09994,-0.06874,-0.09694,-0.17757,-0.06126,-0.05369,-0.03949,-0.01224,-0.03910,-0.05539,-0.02885,-0.09728,-0.12446,-0.14150,-0.24856,-0.24722,-0.22580,0.09836,0.05598,0.00619,-0.13119,-0.19902,-0.03322,-0.05953,-0.03542,-0.01055,-0.04192,-0.04676,-0.04605,-0.13277,-0.15664,-0.12944,-0.31416,-0.37138,-0.14884,0.01659,0.11138,0.19183,-0.02789,-0.19085,-0.05352,-0.06855,-0.03834,-0.01256,-0.04014,-0.05602,-0.07652,-0.16362,-0.18635,-0.33474,-0.39771,-0.43470,-0.26800,-0.06132,0.09992,0.21299,-0.01178,-0.27977,-0.19965,-0.17088,-0.05281,0.00793,-0.02021,-0.06152,-0.03585,-0.07686,-0.09478,-0.23981,-0.24404,-0.25669,-0.13065,-0.05979,0.05184,0.09379,-0.22680,-0.22865,-0.17954,-0.14731,-0.02220,0.00645,-0.01430,-0.02597,-0.03654,-0.05219,-0.01594,-0.10677,-0.21640,-0.33757,-0.03459,0.05527,0.12225,0.11791,-0.11256,-0.05542,-0.11688,-0.15469,-0.02332,-0.01380,-0.03875,-0.02721,-0.04494,-0.06065,0.00776,-0.02878,-0.07344,-0.13855,0.00484,-0.00131,0.09523,0.01296,-0.06911,0.02939,0.00065,-0.02380,0.00447,0.00637,-0.03110,0.00049,-0.06158,-0.05646,-0.05437,0.03609,0.03217,0.06841,0.14466,-0.04710,-0.12221,-0.06597,-0.13544,0.21327,0.22698,0.20768,0.07758,0.03537,-0.03654,0.00153,-0.01562,-0.08137,0.02898,0.13535,0.17156,0.06893,-0.00285,-0.22458,0.01411,0.14271,0.12008,0.28182,0.29688,0.27679,0.05527,0.03364,-0.00111,0.13351,};
float weights_input_7[] = {0.00255,0.01348,0.00929,0.02945,0.02625,0.36030,0.26185,0.35482,0.21825,0.13412,0.03569,-0.13830,0.07164,0.17993,0.16034,0.20916,-0.14859,0.01023,0.00237,0.05337,-0.06481,-0.04850,0.12544,0.17212,0.35967,0.17016,0.20428,0.22297,0.07178,-0.07239,-0.01109,-0.01140,0.21958,0.13229,-0.10635,-0.04973,0.01971,-0.03800,0.04333,0.14175,0.10594,0.27904,0.32142,0.29130,0.09375,0.28709,0.29481,0.06394,-0.01470,0.03580,0.09380,-0.04927,-0.14599,-0.06645,0.01971,-0.04352,0.16736,0.13672,0.03920,0.13444,0.04481,0.21593,0.16922,0.41154,0.06169,0.02100,-0.06575,-0.09402,-0.16814,-0.20144,-0.14144,-0.00618,0.04413,-0.04238,0.03871,0.28988,-0.00893,0.18528,0.11665,0.05119,-0.21602,0.09132,-0.10874,-0.07347,-0.29837,-0.29141,-0.38020,-0.18674,-0.08788,0.02148,0.04437,-0.04226,0.09441,0.24757,-0.00724,0.16120,0.22298,-0.15422,-0.50240,-0.10120,-0.12994,-0.05442,-0.21798,-0.33060,-0.20260,-0.08196,0.01283,0.02202,0.04244,-0.04104,0.06299,0.08703,-0.08082,0.40447,-0.06910,-0.06092,-0.29838,0.07249,-0.03044,0.07823,-0.15460,-0.12313,-0.15926,0.03353,0.00935,0.06198,0.04543,-0.05186,0.05024,0.13015,0.00928,-0.07742,-0.04872,0.06349,0.00291,0.24594,0.08669,0.13035,0.12667,0.15867,0.13388,0.21267,0.05336,0.02306,0.06507,-0.08358,-0.07834,0.00237,0.10411,0.23492,0.20250,-0.01185,-0.57439,-0.36172,-0.14092,0.33522,0.38370,0.48308,0.25212,0.25534,0.04968,0.01935,0.04623,-0.07930,-0.10318,-0.30949,0.01412,0.03154,0.02077,-0.22291,-0.54216,-0.13648,-0.16685,0.33132,0.52111,0.23479,0.29488,0.09413,0.04561,0.02176,0.04608,-0.10242,-0.22868,-0.62266,-0.69334,-0.37333,-0.30234,0.04997,0.41995,0.49698,0.34341,-0.00292,-0.03088,-0.09244,0.05746,0.07619,0.02483,0.02930,0.03413,-0.11414,-0.24003,-0.77729,-0.83265,-1.14645,-0.33118,0.11017,0.59670,0.56374,0.07559,-0.09615,-0.11232,-0.12483,-0.12504,0.06212,-0.05059,0.02906,0.03462,-0.12798,-0.25775,-0.55033,-0.53211,-0.78534,-0.33962,-0.32999,0.11067,0.22584,-0.24671,-0.16722,-0.08303,-0.24173,-0.12691,0.00784,-0.13809,0.08509,0.02974,-0.11712,-0.15337,-0.24281,-0.15739,-0.34243,-0.06033,-0.19856,0.16139,0.20229,-0.07625,-0.09498,-0.13328,-0.09695,-0.03773,-0.04443,-0.05324,0.01560,0.02111,-0.12737,-0.12687,-0.06063,0.07099,-0.19429,0.02857,0.07496,0.17292,0.21375,0.30351,-0.09473,-0.12714,-0.12625,0.00672,-0.17640,-0.10927,-0.00408,0.01674,-0.04529,0.00711,0.13488,0.39675,0.10255,-0.27513,-0.48805,-0.13226,-0.07639,0.16870,0.07254,0.03189,0.01643,-0.19239,-0.35380,-0.03473,0.04068,0.00014,-0.04695,-0.01442,0.04783,0.43305,0.29974,0.01667,0.02459,-0.09942,-0.10722,-0.24379,-0.18524,-0.17592,-0.21702,-0.38206,-0.23797,0.00995,-0.01976,0.00104,0.01783,0.07538,0.21354,0.24537,0.44289,0.21668,-0.06487,-0.35690,-0.32161,-0.16059,-0.27473,-0.11842,-0.15226,-0.11040,-0.04305,0.01016,0.00158,0.15564,};
float weights_input_8[] = {-0.00387,-0.08215,-0.08929,0.16769,0.03855,-0.68175,-0.63999,-0.59473,-0.12088,-0.08508,0.15138,0.16600,-0.15649,-0.36112,-0.42954,-0.10283,0.09683,-0.01252,-0.00157,-0.04321,-0.01762,-0.02352,-0.19879,-0.41261,-0.43856,-0.09785,-0.33220,-0.16532,0.02708,0.16949,-0.12563,-0.43942,-0.49909,-0.18105,0.02149,0.09170,0.02573,0.06671,-0.01275,-0.02526,-0.23405,-0.39359,-0.20541,-0.32440,0.01887,-0.19075,-0.40923,-0.20541,-0.24725,-0.29995,-0.06612,-0.00131,-0.02663,0.10518,0.02689,0.08045,0.07482,0.10742,-0.06695,0.03954,-0.14152,-0.24267,-0.35075,-0.07095,-0.18917,0.00183,-0.13374,0.07651,0.08071,0.24105,0.04881,0.05622,0.02665,0.08366,0.10052,0.09678,0.15877,0.06980,-0.23248,-0.02366,0.00241,-0.19179,0.08689,-0.15470,0.16298,0.34981,0.55037,0.24069,0.09774,0.05895,0.03420,0.09967,0.13655,0.16090,0.25553,0.04467,0.05533,-0.02671,0.26928,-0.10136,-0.01695,0.06439,0.25071,0.46860,0.39804,0.11180,0.11228,0.06123,0.03865,0.03413,0.16692,0.34790,0.33178,0.34681,0.40935,0.27929,0.10732,-0.32637,-0.20263,0.07764,0.13210,0.28993,0.20116,0.12374,0.11192,0.06618,0.03942,0.03951,0.00903,0.38998,0.51224,0.49082,0.84608,0.49429,0.44514,-0.07436,-0.02211,-0.03300,-0.05171,-0.28841,0.15484,0.08173,0.07966,0.07823,0.05054,0.04961,-0.01363,0.20845,0.43278,0.16969,0.09367,0.12343,0.14581,-0.04025,-0.18691,-0.18115,-0.45772,-0.40707,0.28288,0.08213,0.08178,0.08055,0.05144,0.05152,-0.01724,0.25579,0.16322,0.35929,0.72259,0.16919,0.17668,-0.07501,0.10850,-0.04732,-0.33875,0.09633,-0.00032,0.27997,0.07604,0.08079,0.05190,0.04592,0.03621,0.47204,0.49271,0.91954,0.99464,0.80732,0.45407,0.23189,0.31371,0.13193,-0.16886,0.33288,0.11195,0.02471,0.11279,0.07525,0.03311,0.04753,0.11549,0.55008,0.62123,1.04807,0.69990,0.36442,-0.04935,-0.12738,0.17206,0.20828,-0.07897,0.32746,0.11837,-0.16999,0.07566,0.08238,-0.02010,0.01946,0.13610,0.28233,0.30425,0.49071,0.11643,0.12679,-0.17141,-0.37921,0.24916,0.23311,0.00722,0.31745,0.09755,-0.18014,0.12325,0.06150,-0.02301,-0.02110,-0.04359,-0.07488,-0.21238,-0.14610,-0.23232,-0.14738,-0.04923,-0.16579,0.20649,0.24765,0.01191,0.23142,-0.13090,-0.21805,0.07537,0.04311,0.02920,-0.04125,-0.15652,-0.17297,-0.36431,-0.33346,-0.24074,-0.23272,-0.18760,-0.03132,-0.28698,-0.04205,-0.04131,-0.08241,-0.39230,0.07912,0.05512,0.03248,0.03256,-0.01620,-0.20353,-0.38429,-0.42525,-0.30561,0.05597,0.05819,-0.03422,-0.26928,-0.18518,-0.10103,-0.31413,-0.44424,-0.06175,0.15295,0.00982,0.04253,0.00043,0.05638,-0.27746,-0.41532,-0.74192,-0.18774,-0.13143,-0.12356,-0.17186,-0.34301,-0.13504,0.18732,-0.33444,-0.12996,0.05267,0.11329,-0.00333,0.14343,-0.00221,-0.01677,-0.08729,-0.28628,-0.29896,-0.41543,-0.28833,0.00232,0.09326,-0.26934,0.33464,0.30038,0.06184,0.09546,0.17097,-0.02672,-0.00365,-0.00133,-0.13162,};
float weights_input_9[] = {-0.00323,0.00806,0.00767,-0.16465,-0.16422,-0.08898,-0.06031,-0.06354,-0.25293,-0.29677,-0.34178,-0.07548,-0.07716,0.03785,0.06572,0.13836,0.16046,-0.00231,-0.00134,-0.07806,0.00963,-0.06243,-0.14658,0.01518,-0.16112,-0.03203,-0.28886,-0.41599,-0.25052,-0.11016,0.16467,0.06629,0.01107,0.13566,0.03220,0.01872,-0.06246,-0.04267,-0.08127,-0.22358,-0.02192,-0.04797,-0.38005,-0.12141,-0.19826,-0.30749,-0.32717,-0.03859,-0.11888,-0.11485,0.05597,0.06925,0.13309,-0.09020,-0.06394,0.04162,-0.10131,-0.17858,-0.20334,0.04603,-0.14345,0.04569,-0.02553,-0.00065,0.12318,-0.21946,-0.16260,-0.21086,-0.08672,-0.11615,0.04617,-0.16094,-0.06371,0.04064,-0.08043,-0.24427,0.04165,-0.12635,0.00749,0.12404,0.37048,0.10098,-0.18250,-0.16533,-0.25654,-0.27535,-0.15172,-0.11903,-0.19311,-0.16487,-0.02759,0.04029,-0.07112,-0.21022,-0.09936,0.02759,-0.14649,0.07848,0.20612,0.11924,-0.36429,-0.51031,-0.25767,-0.29717,-0.26323,-0.29325,-0.39551,-0.18011,-0.02859,0.04272,-0.11362,-0.21365,-0.05068,-0.28058,-0.00633,0.15588,0.61511,0.50757,0.10814,-0.28250,-0.25555,-0.45050,-0.37715,-0.29564,-0.35456,-0.18933,-0.02902,0.07871,-0.06822,-0.46527,-0.11719,-0.18761,-0.03343,0.45612,0.81434,0.55377,0.36689,0.24207,0.33609,-0.15116,-0.45277,-0.43797,-0.36031,-0.26123,-0.05566,0.03759,-0.03234,-0.31677,-0.31233,-0.42655,-0.04842,0.36885,0.74185,0.79416,0.55102,0.34245,0.08756,-0.41603,-0.43477,-0.33124,-0.25226,-0.20324,-0.05696,0.03597,-0.03551,-0.33386,-0.09132,-0.24888,0.09503,0.54846,0.49748,0.18669,0.10583,0.03209,-0.02920,-0.21083,-0.34424,-0.10682,-0.08889,-0.23002,-0.04958,0.04236,-0.01830,-0.09570,0.18726,-0.17121,0.12533,-0.00297,-0.21651,-0.25084,0.03356,0.24158,0.27676,0.06393,0.18294,0.06447,0.08302,-0.13258,-0.02789,0.07893,-0.03154,-0.08013,0.13131,0.21294,-0.15221,-0.34148,-0.23537,-0.12742,0.12737,0.16205,0.32983,0.20399,0.39795,0.13743,0.10397,-0.13263,0.02517,0.08771,-0.01662,-0.15117,0.12098,0.03286,-0.09657,-0.26128,-0.09687,-0.06588,-0.09243,-0.03300,0.24746,0.14624,0.18987,0.10564,0.10155,-0.08229,0.02183,0.09911,0.11783,0.01948,0.24579,0.04610,-0.06038,-0.07785,-0.21413,-0.19158,-0.36894,-0.23574,0.06989,0.12317,0.26630,0.18110,0.12012,0.01778,-0.07025,0.12165,0.18699,0.25657,0.23386,0.06538,-0.10865,-0.09219,-0.02256,-0.21164,-0.40866,-0.07194,0.22336,0.23329,0.15760,0.17727,0.28000,-0.03545,-0.06082,0.04726,0.18065,0.18922,0.01959,-0.07622,0.02645,0.19897,0.13340,-0.03717,-0.24109,-0.00251,0.07064,0.41928,0.33715,0.30161,0.18224,-0.08943,-0.00078,-0.01345,0.10898,0.34654,0.14895,0.02521,0.11723,0.13064,0.30735,0.10832,0.11872,0.06635,0.24584,0.33412,0.15662,0.27578,-0.00195,-0.06949,-0.00218,-0.00332,-0.10008,0.11889,0.27328,0.04147,0.23074,0.21651,0.25603,0.28907,0.10626,0.27457,0.11994,-0.04985,-0.27175,-0.04737,-0.00187,-0.00007,0.28199,};
float weights_input_10[] = {0.00224,-0.00491,-0.01019,0.02641,0.08758,0.23985,0.13659,0.21460,-0.01449,0.03587,0.02199,-0.14527,-0.02880,0.20087,0.20426,0.02009,0.03463,0.00771,0.00272,-0.02857,0.02910,0.09493,0.23830,0.04960,0.20817,-0.04386,0.10045,0.09044,0.06462,-0.18089,-0.03533,0.15768,0.25869,0.03064,-0.00674,0.01213,-0.09550,-0.04497,0.06748,0.12875,0.00425,0.17848,-0.11060,0.07172,0.15296,0.24658,0.15037,-0.07964,-0.02463,0.10595,0.17852,-0.03170,0.01521,-0.02663,-0.03794,0.00190,0.03849,-0.01065,0.05824,-0.16322,-0.19718,0.04174,0.27381,0.16634,0.04477,0.03832,-0.07090,0.19314,0.13028,-0.10647,0.02428,-0.02055,-0.09259,-0.00058,-0.10639,0.02902,0.01202,-0.06351,0.05423,0.09186,0.09528,0.03539,-0.07100,0.12103,0.02871,0.05666,-0.01467,-0.02498,0.02073,-0.02622,-0.09440,-0.05946,-0.08363,0.16227,-0.05341,0.02023,0.13349,-0.09461,-0.11705,0.04705,0.04141,0.25217,0.14402,0.16835,0.05260,-0.04305,-0.07325,-0.02520,-0.09407,-0.06977,-0.07800,0.00159,-0.18371,-0.07929,-0.23604,-0.20566,-0.05621,0.09501,-0.00988,0.20066,0.06989,0.17713,0.05652,-0.09856,-0.07349,-0.02561,-0.09479,-0.08267,-0.08695,-0.04553,-0.14149,-0.21643,-0.34275,-0.40370,-0.12312,-0.04778,-0.14679,0.04138,-0.04263,0.14949,0.06114,-0.08562,-0.07190,-0.01882,-0.02198,-0.00944,-0.08096,-0.04158,-0.32629,-0.17655,-0.27630,-0.24386,-0.26643,-0.10473,0.07820,0.11306,0.05806,0.15848,0.06664,-0.12781,-0.06904,-0.02123,-0.02357,-0.00932,-0.07980,-0.20236,-0.12510,-0.22844,-0.39261,-0.31233,-0.18609,0.11077,-0.05016,-0.07356,-0.09532,0.00498,-0.22456,-0.14567,-0.06910,-0.01356,-0.03214,-0.01742,-0.14866,-0.21541,-0.10828,-0.20251,-0.21367,-0.03664,0.34935,0.35187,0.09610,-0.08117,-0.29911,-0.36727,-0.48924,-0.16181,-0.08204,-0.00661,-0.09171,-0.09238,-0.18390,-0.25481,0.07459,-0.08706,0.07521,0.08741,0.37261,0.37578,0.04428,-0.31431,-0.42222,-0.50079,-0.40325,-0.26306,-0.08906,-0.00775,-0.10647,-0.12044,-0.21282,-0.31056,-0.14923,-0.12648,0.26643,0.25120,0.63250,0.40020,-0.21707,-0.53104,-0.49808,-0.55468,-0.33998,-0.17545,-0.06712,0.01017,-0.11302,-0.10184,-0.19013,-0.28550,-0.10244,0.05242,0.34857,0.42793,0.27498,0.16728,-0.25318,-0.39793,-0.45203,-0.32049,-0.23734,-0.08476,0.05650,0.00301,-0.09563,-0.10449,-0.15685,-0.22366,-0.00227,0.12060,0.49415,0.26853,0.06496,-0.06857,-0.05219,-0.15229,-0.11956,-0.01235,0.11127,0.14134,-0.04822,-0.04664,-0.09466,-0.11077,-0.07310,-0.08989,0.20847,0.24126,0.19319,0.12569,0.11527,0.15709,-0.08792,-0.15675,0.16864,0.17455,0.14896,0.13920,0.00111,-0.02551,-0.00079,-0.04465,0.03086,-0.00711,0.06735,-0.03991,0.02258,0.01709,-0.08691,-0.06474,0.02420,0.11063,0.16221,0.15397,0.14178,0.02673,0.00633,-0.01624,0.00262,0.01808,0.10070,0.10480,-0.03660,-0.09051,-0.14790,-0.29371,-0.20741,-0.02562,0.03648,0.11869,0.21685,0.15940,0.11409,0.01399,0.00522,0.00021,0.14224,};
float weights_input_11[] = {-0.00034,0.02265,0.01957,0.08543,0.19881,0.16077,-0.06257,0.00413,0.11289,0.15907,0.19436,-0.12230,-0.03426,-0.12572,-0.26147,-0.24001,0.06286,-0.01413,0.00033,0.07846,0.09619,-0.02389,0.23596,0.24954,0.39506,-0.10880,0.08988,0.25200,0.24838,0.05865,-0.15254,-0.01799,-0.12631,-0.38803,0.01267,0.03327,0.05574,0.14199,0.07280,0.20945,0.09388,0.36450,0.15691,0.04462,-0.13533,-0.01743,0.18284,-0.12390,0.10464,0.23612,0.03880,0.04934,-0.03556,0.03485,0.05596,0.05509,0.05899,0.16035,0.07349,0.01571,-0.07600,0.10738,-0.12934,0.31729,0.22471,0.39842,0.19926,0.23165,0.15880,0.19709,0.01379,0.03399,0.05792,0.05619,-0.02521,0.07695,-0.22255,-0.11996,0.14333,-0.12678,-0.00137,0.02140,0.50060,0.55088,0.11952,0.41421,0.30666,0.28594,0.05494,0.04566,0.04702,0.05179,-0.09849,0.11091,-0.03976,-0.13381,-0.03673,0.00206,-0.19205,-0.04652,0.40662,0.62445,0.42073,0.97223,0.51330,0.42197,0.01494,0.06261,0.04220,0.08782,-0.13828,0.00915,-0.23177,-0.24576,-0.29335,-0.12571,-0.14692,-0.07967,-0.17078,0.48353,0.56223,0.86297,0.47373,0.36632,-0.03368,0.07056,0.04079,0.06922,-0.09297,-0.06854,-0.30507,-0.43438,-0.04668,-0.29364,-0.07780,0.05291,-0.18948,0.22173,0.17770,0.42116,0.06787,0.15044,-0.04869,0.07152,0.03885,0.05416,-0.18395,-0.15121,-0.42751,-0.54629,-0.04228,0.17253,0.36753,0.26123,-0.01703,-0.36626,0.20870,-0.08920,-0.35378,-0.23142,-0.08567,0.04817,0.04800,0.06320,-0.18997,-0.35164,-0.30602,-0.03815,-0.09650,0.17875,0.19925,0.43211,-0.04557,0.22417,-0.16606,-0.14200,-0.30191,-0.31525,-0.15906,0.04505,-0.00668,0.01677,-0.26158,-0.22387,-0.11827,-0.10332,0.03401,0.09872,0.16924,0.26408,0.27057,0.23354,0.01797,0.05215,-0.04247,-0.16952,-0.25160,0.01732,0.00073,-0.00028,-0.20022,-0.16103,0.06961,-0.32266,-0.16018,0.22412,0.23647,0.16076,0.11477,0.03096,-0.09090,0.12620,-0.03376,0.02814,-0.21398,0.01859,-0.05329,-0.05103,-0.19409,-0.03112,-0.00388,-0.37057,-0.30734,-0.00284,0.05504,-0.14306,-0.30327,-0.19229,-0.10446,-0.03277,-0.19008,-0.05700,-0.18837,0.03005,-0.05356,-0.06085,-0.22549,-0.03033,0.02085,-0.41319,-0.30075,-0.12883,-0.07913,-0.24355,-0.27341,-0.25567,-0.23248,-0.05357,-0.18634,-0.11744,-0.10859,-0.05565,0.05506,-0.04778,-0.09461,0.23101,0.16629,0.07964,0.19746,-0.04075,-0.19238,-0.20637,-0.20627,-0.35769,0.08126,-0.09257,0.20276,-0.04064,-0.12954,-0.04269,0.05643,0.05728,0.04786,0.29237,0.21220,0.16414,0.25171,0.06512,-0.26202,-0.10806,-0.35566,-0.01282,0.00126,0.08454,0.00454,-0.06760,-0.09147,0.03980,-0.00100,0.12267,0.06479,0.20719,-0.04742,0.29017,-0.04829,0.07165,-0.28068,-0.31163,-0.10498,-0.12751,-0.13807,0.06851,-0.10688,-0.02541,-0.01619,0.10250,0.00138,-0.01879,0.11168,0.11856,-0.09250,0.14447,0.08375,0.01495,-0.35798,-0.32472,-0.36057,-0.53136,-0.06840,-0.09442,0.02898,0.15475,-0.01544,-0.00031,0.23533,};
float weights_input_12[] = {0.00112,0.03679,0.03807,-0.14118,-0.18165,-0.16862,-0.02609,-0.08721,-0.17631,-0.02734,0.02301,0.14564,0.04998,-0.29675,-0.22230,-0.37872,-0.07802,0.00388,0.00155,-0.00119,0.02359,0.00395,-0.08149,0.05761,-0.16504,-0.29122,-0.04897,-0.00626,-0.02937,-0.03911,-0.20677,0.00757,-0.17500,-0.30333,-0.07272,-0.06527,-0.02847,-0.07260,0.02433,0.00227,0.07863,-0.01243,0.04289,-0.11437,-0.34924,-0.12739,0.03244,0.15355,-0.00840,-0.08085,-0.41877,-0.14023,-0.02501,-0.10910,-0.04268,-0.07118,-0.02790,0.00398,-0.00932,0.00868,-0.06327,-0.01541,-0.08832,0.04087,0.32422,0.19868,0.19118,-0.23597,-0.21692,-0.06508,-0.02536,-0.04199,-0.02814,-0.07237,-0.01525,-0.03047,-0.10118,-0.04336,-0.10850,-0.23242,-0.02454,0.26086,0.33667,0.21783,0.13764,-0.09254,-0.13381,-0.08117,-0.04080,-0.04229,-0.03040,-0.06223,-0.08179,-0.19773,-0.13111,-0.02891,-0.35618,-0.15231,-0.02370,0.67268,0.43558,0.09300,0.18326,0.04247,-0.12791,-0.01388,-0.05051,-0.04236,-0.03164,-0.02385,-0.08266,-0.10612,-0.18425,-0.40618,-0.33133,-0.37348,0.01379,0.29566,0.19873,0.04656,0.15941,0.07108,-0.03060,-0.03281,-0.05202,-0.04437,-0.02975,-0.02388,-0.00994,-0.12554,-0.21828,-0.24651,-0.20160,-0.38179,-0.16816,0.04484,-0.10842,-0.07080,0.05138,0.10058,-0.10787,-0.05434,-0.04571,-0.05525,-0.03970,-0.03455,0.02555,-0.03517,-0.03678,-0.05533,-0.00834,0.06133,0.21964,0.13308,-0.12951,-0.20027,0.15037,0.03456,-0.28569,-0.08601,-0.06834,-0.05964,-0.03729,-0.03629,0.03103,0.07629,0.03454,0.02563,-0.24702,-0.01833,0.22768,0.26023,0.04567,0.06275,-0.09882,-0.13042,-0.02753,-0.11354,-0.07786,-0.05990,-0.05122,-0.04564,0.01819,0.02897,-0.08662,-0.29472,-0.37763,-0.32006,-0.37326,-0.22806,-0.13681,-0.01803,0.13473,0.09640,0.08003,0.02967,-0.09857,-0.08154,-0.03680,-0.03100,0.08736,0.00932,-0.16143,-0.28206,-0.44324,-0.33362,-0.39069,-0.12342,0.13694,0.05748,0.14930,0.26824,0.06677,0.23266,-0.00765,-0.08206,-0.03530,0.00259,0.12851,0.12553,0.08344,-0.03050,-0.24050,-0.17125,-0.18231,0.21401,0.44712,0.19262,0.20726,0.32746,0.15303,0.28905,-0.01380,-0.06605,-0.01373,0.00176,0.21057,0.26072,0.24165,0.06914,-0.18437,-0.14565,-0.14261,0.25128,0.33056,0.02622,0.36718,0.08246,0.12777,0.18699,-0.05601,-0.02364,0.00621,0.01944,0.21629,0.20974,0.12249,0.00751,-0.39971,-0.28767,-0.06559,0.10853,0.28180,0.10425,0.22270,-0.07356,0.03510,-0.04443,-0.05328,-0.09385,-0.02604,-0.00669,0.19786,0.23911,-0.19697,-0.26405,-0.28086,-0.23189,-0.15738,0.23449,0.12410,0.34153,0.09910,-0.04075,-0.10566,-0.01763,0.06175,-0.03429,-0.00111,-0.03955,0.16674,0.19367,-0.05139,-0.28661,-0.36089,-0.17626,0.01708,0.16310,0.28685,0.00241,0.28525,0.08226,0.03877,0.08216,0.01652,-0.10385,0.00064,-0.03153,-0.04076,-0.13430,-0.23451,-0.06124,0.00601,-0.10461,-0.23564,0.09995,0.21269,0.11897,0.18197,0.10146,0.12884,0.04482,0.01313,-0.00067,0.08122,};
float weights_input_13[] = {-0.00173,0.01727,0.01607,-0.20625,-0.35824,-0.35773,-0.30051,-0.15156,-0.28803,-0.25588,-0.37116,0.14800,0.20412,0.16955,0.13720,0.19704,-0.09031,0.00483,-0.00236,-0.02935,-0.14269,-0.09138,-0.31085,-0.57897,-0.61177,-0.01364,-0.28506,-0.46476,-0.44483,-0.08379,0.13638,0.14669,-0.11748,0.40007,-0.09977,-0.08060,-0.04696,-0.13381,-0.08349,-0.02780,-0.16936,-0.38681,-0.37416,-0.18878,0.09451,0.06889,-0.17284,0.32607,-0.06616,-0.18189,-0.06095,-0.01762,-0.04964,-0.18696,-0.04628,-0.08553,-0.11504,-0.01558,-0.39080,-0.01561,-0.14741,-0.00432,0.00796,0.20103,0.10542,-0.27349,-0.07647,-0.08833,-0.30415,-0.27854,-0.04308,-0.16099,-0.04611,-0.08750,-0.11217,0.10493,0.05953,0.15431,-0.10562,0.09912,0.15093,0.18574,-0.37398,-0.39277,-0.24244,-0.22182,-0.64721,-0.46244,-0.27782,-0.16761,0.00030,-0.08549,0.08030,0.09417,0.11130,0.22680,-0.13337,-0.15041,0.04985,0.31245,-0.44788,-0.69366,-0.45085,-0.95612,-0.84774,-0.69975,-0.42538,-0.19363,0.00024,-0.08503,0.10187,0.16130,0.30437,0.39043,0.02295,-0.09928,0.00740,0.54619,0.27993,-0.36353,-0.63664,-0.99022,-0.96799,-0.59700,-0.31658,-0.19504,0.00240,-0.03762,0.06440,0.09336,0.39170,0.35796,-0.26785,0.10512,0.37889,0.45951,0.42659,0.20418,0.29648,-0.17041,-0.37912,-0.39877,-0.33782,-0.29848,0.00255,-0.05178,0.09646,0.21061,0.44803,0.41985,0.15018,0.15752,-0.03092,0.15620,0.17220,0.84254,0.35462,0.42982,0.30328,0.16137,-0.30437,-0.19237,-0.00046,-0.05526,0.09355,0.22896,0.48469,0.04766,0.19177,0.15784,-0.17029,-0.17728,-0.06308,0.10049,0.54795,0.34737,0.20263,0.34014,-0.03430,-0.18269,0.00918,-0.04291,0.06774,-0.02752,-0.00205,-0.10791,-0.16809,0.18920,-0.04426,-0.05901,-0.14371,-0.07726,0.13710,0.05496,0.10115,0.23565,0.20197,-0.15430,0.01290,-0.02398,0.02683,-0.09294,-0.25482,-0.20086,0.01925,-0.27205,0.20746,0.28560,-0.06271,-0.02514,0.17762,-0.00987,0.10452,0.11853,0.13221,-0.15545,0.07247,-0.01642,0.00979,-0.11557,-0.24390,-0.07988,0.03802,-0.14660,0.19430,0.47533,0.04770,0.03321,0.21338,0.08168,0.11639,0.21513,0.01211,-0.04365,0.06889,-0.01841,0.04825,-0.07087,-0.25510,-0.00505,0.04491,0.05278,0.13669,0.41847,-0.04244,-0.13409,0.03461,0.24007,0.15082,0.30517,0.15036,0.11981,-0.05500,-0.02337,-0.01876,-0.16083,-0.44668,-0.30068,-0.28651,0.05757,0.26749,0.27253,0.10863,0.23171,-0.00699,0.28847,-0.22451,0.08079,0.26923,0.01862,-0.04732,-0.04745,-0.10985,-0.22850,-0.26053,-0.18074,-0.22110,-0.07983,0.11471,-0.02734,-0.00307,-0.05931,0.23253,0.37448,-0.07120,0.16365,0.21547,-0.04487,-0.00081,-0.14692,-0.08149,-0.20966,-0.00281,-0.21959,-0.06715,-0.04577,0.18172,0.15604,-0.24104,-0.08466,0.33890,0.17473,0.10954,0.22663,0.01180,-0.13219,-0.00139,0.00013,-0.14787,0.10800,0.40909,-0.06523,0.07754,0.00395,-0.16559,0.13918,0.03224,0.47939,0.28642,0.44945,-0.00726,-0.09848,0.00967,-0.00013,0.03914,};
float weights_input_14[] = {0.00266,-0.00020,-0.00056,0.00256,0.15975,0.14996,0.18878,0.10976,-0.11316,-0.17402,-0.07173,0.07120,0.13468,0.07741,0.18314,0.13979,0.06145,0.05516,0.00410,-0.01903,-0.02056,0.08650,0.06084,0.00283,-0.05830,-0.00898,-0.10646,-0.10918,0.00311,-0.01190,0.04517,0.19530,0.31771,0.12709,0.04589,0.01652,-0.02267,-0.06468,0.00678,-0.08822,0.01978,-0.17749,-0.01170,-0.11487,0.07369,0.19928,-0.09878,-0.02757,-0.08847,0.14464,0.28292,0.10532,0.03500,-0.04197,-0.02856,-0.04430,-0.03659,-0.12452,-0.05230,-0.27058,-0.08783,-0.06503,0.06791,0.03319,0.00984,-0.07462,-0.02280,0.15990,0.22557,0.06063,0.02816,0.01080,-0.02019,-0.04334,0.00085,-0.13654,-0.08551,-0.23233,-0.28855,-0.12857,-0.03709,0.08794,-0.04577,0.04137,0.17079,0.09209,0.06982,0.00165,-0.01097,0.00184,-0.02203,-0.03696,0.00940,-0.16279,-0.13973,-0.25474,-0.20225,0.00346,0.12119,0.20432,0.20144,0.14281,0.13812,-0.03488,0.04385,-0.01444,-0.02076,-0.02278,-0.02136,-0.03622,0.00485,-0.04816,-0.17538,-0.21983,-0.02076,-0.04145,0.06555,-0.00257,0.15686,0.19665,0.12672,-0.09547,-0.05260,-0.01838,-0.02219,-0.02310,-0.02430,-0.03447,-0.03431,-0.09018,-0.13639,0.01603,0.01259,-0.04850,-0.15248,-0.15755,0.13857,0.14815,-0.10192,-0.22101,-0.11224,-0.07480,-0.01803,-0.04068,-0.02295,-0.03349,0.04104,-0.12554,0.04913,0.05092,0.10717,-0.13103,-0.19696,-0.12465,0.06772,0.04569,-0.11568,-0.12252,-0.17323,-0.11304,-0.09762,-0.04305,-0.02186,-0.03604,0.05322,0.02542,0.11601,0.17751,0.20169,-0.05194,-0.02263,0.04088,0.10879,0.04915,-0.11491,-0.09535,0.01607,-0.06593,-0.09696,-0.00423,-0.03655,-0.05138,0.08421,0.06719,0.09253,0.17187,0.11858,-0.01478,0.15060,0.18227,0.06652,-0.00151,-0.09725,-0.07816,-0.02191,-0.00164,-0.06338,-0.07811,-0.03695,-0.04800,0.15165,0.14556,0.12870,0.07415,-0.03860,0.06338,0.19180,0.29408,0.19011,0.06017,-0.22745,-0.17882,-0.05416,-0.00433,-0.05674,-0.07947,-0.03524,-0.01087,0.17727,0.16779,0.10527,0.00080,0.03869,0.22488,0.33790,0.48566,0.37507,0.12748,-0.14578,-0.04088,0.13480,0.12013,-0.01438,-0.05435,-0.01755,-0.03025,0.09830,0.04479,-0.06674,-0.02184,0.01869,0.19891,0.34186,0.42869,0.26051,0.10010,-0.05936,-0.15609,0.02083,0.00941,-0.05076,0.02120,0.02220,-0.03766,-0.01160,-0.19263,-0.27566,-0.27700,-0.34950,-0.03206,0.12533,0.16454,0.19612,0.08935,-0.22145,-0.31067,-0.10477,-0.02410,-0.07108,-0.06697,-0.02472,-0.05318,-0.06767,-0.28249,-0.31146,-0.36203,-0.28048,-0.23094,-0.05702,0.01143,-0.04282,-0.07449,-0.19976,-0.33788,-0.12129,-0.06033,-0.03498,0.00247,-0.00126,-0.08385,-0.09022,-0.17884,-0.29217,-0.21755,-0.26910,-0.24969,-0.23689,-0.15434,-0.16863,-0.11706,-0.06702,-0.04081,0.00208,-0.05460,0.01086,-0.06013,0.00068,-0.02842,-0.08316,-0.19009,-0.28137,-0.18203,-0.16160,-0.18777,-0.29791,-0.23811,-0.12806,0.07981,-0.04981,-0.03702,0.11142,-0.02695,0.00385,-0.00143,-0.04436,};
float weights_input_15[] = {0.00276,0.00145,0.00117,-0.06044,0.05020,0.01445,0.07002,-0.09366,-0.26533,-0.14963,-0.04446,0.18999,0.28276,0.21450,0.08695,0.10579,0.06986,0.05206,0.00392,-0.05533,-0.04047,0.11300,0.06980,-0.11988,-0.24681,-0.17460,-0.08534,-0.07832,-0.00401,0.02308,0.06729,0.32990,0.28210,0.18236,0.02459,-0.00372,-0.05826,-0.11344,-0.00173,0.08118,0.01844,-0.27458,-0.03995,-0.13211,0.15388,0.22561,-0.05781,0.00838,-0.10552,0.16739,0.21421,0.14792,0.04333,-0.10553,-0.06526,-0.05196,-0.05460,0.05166,-0.02659,-0.23247,-0.10198,0.07521,0.24527,0.22656,0.19112,-0.07253,-0.05136,0.17247,0.13957,0.04169,0.03192,-0.04091,-0.05834,-0.05159,-0.00485,-0.00354,0.07574,-0.16108,-0.37718,-0.15187,0.01048,0.17604,0.08083,0.03045,0.17922,0.15707,-0.05155,-0.03605,-0.02474,-0.05519,-0.06117,-0.04934,0.01974,-0.03764,0.05344,-0.18260,-0.34456,-0.09717,0.04813,0.45211,0.14911,-0.01387,0.16037,0.02343,-0.08219,-0.06929,-0.03738,-0.06676,-0.06029,-0.04846,0.01485,0.10575,0.05749,-0.16107,-0.21218,-0.16061,0.04175,0.21163,0.18225,0.09307,0.15106,-0.10167,-0.21300,-0.06464,-0.03794,-0.06819,-0.06041,-0.04800,-0.03428,0.08026,0.03383,0.09918,-0.17786,-0.29158,-0.16351,0.01059,0.23610,0.08382,-0.04285,-0.19359,-0.23332,-0.08264,-0.03606,-0.09106,-0.06019,-0.04715,0.05004,0.07675,0.13880,0.05271,-0.12476,-0.27771,-0.18184,0.05867,0.14812,0.01387,-0.11279,-0.10835,-0.26140,-0.12396,-0.08065,-0.09443,-0.06117,-0.04709,0.05876,0.17989,0.23576,0.23616,0.01580,-0.17234,0.01725,0.16780,0.13898,-0.04440,-0.10777,-0.02841,-0.04155,-0.08852,-0.07604,-0.07610,-0.10705,-0.09373,0.01146,0.12669,0.23876,0.18972,0.00108,-0.15093,0.13630,0.24318,0.00450,-0.12629,-0.11059,0.04737,-0.05562,-0.05083,-0.06316,-0.11682,-0.10376,-0.09445,0.06044,0.20089,0.22297,0.12865,-0.18123,-0.09091,0.13412,0.40686,0.21888,0.00599,-0.19458,-0.04976,-0.11670,-0.06078,-0.06287,-0.12316,-0.11662,-0.07841,0.07475,0.17781,0.14491,0.02133,-0.11741,0.01856,0.26338,0.60739,0.45193,0.07710,-0.15829,0.03617,0.03194,0.03351,-0.02269,-0.09054,-0.09935,-0.08251,0.02932,0.08768,-0.01594,-0.08044,-0.07269,0.02041,0.21338,0.46135,0.27508,-0.00963,-0.02370,-0.07914,-0.08500,-0.06252,-0.05395,-0.00606,-0.02920,-0.08531,-0.06289,-0.10138,-0.27871,-0.31610,-0.50428,-0.12226,0.09130,0.23411,0.22341,0.03194,-0.13841,-0.22459,-0.25620,-0.07516,-0.05944,-0.07996,-0.06078,-0.10667,-0.11542,-0.14850,-0.24937,-0.31495,-0.33481,-0.25310,-0.14681,0.05899,-0.01895,-0.08116,-0.05067,-0.18097,-0.17855,-0.03039,0.01815,-0.05011,-0.00038,-0.14336,-0.11500,-0.20331,-0.21436,-0.21824,-0.22710,-0.21061,-0.27492,-0.19912,-0.16186,-0.17656,0.18066,0.16819,0.07630,0.04897,0.04465,-0.11114,-0.00064,-0.03888,-0.16167,-0.23161,-0.28991,-0.22433,-0.19133,-0.21201,-0.41150,-0.20388,-0.04314,0.17930,0.16171,0.20908,0.16492,-0.00574,0.03809,-0.00234,-0.13672,};
float weights_hidden_0[] = {-0.26640,-0.44537,1.75214,5.31489,-0.71811,-0.28282,-0.25263,-2.02314,2.09736,-3.19660,-0.49120,-0.70513,-0.77110,-3.26330,-0.50119,-0.69544,-0.89433,};
float weights_hidden_1[] = {2.40271,-1.01661,-2.21842,1.03628,1.48632,-0.11255,2.87418,0.59271,-1.56503,-0.47155,0.97223,-0.32532,1.82771,1.97818,0.10756,2.05225,1.49205,};
float weights_hidden_2[] = {2.03556,-0.74808,-1.95875,1.81872,-1.75424,-0.83473,-0.83213,1.93251,-1.53918,-1.68686,3.73991,1.73044,-0.87796,-0.88817,-0.79131,-1.46075,-0.76455,};
float weights_hidden_3[] = {-1.18467,-0.60547,-3.17327,-1.43890,1.30470,-0.59117,-0.45345,-0.21310,-2.91440,2.32451,-1.45230,2.75566,2.46186,-1.13465,-0.97314,-1.04291,-1.93555,};
float weights_hidden_4[] = {0.90397,2.69943,0.88736,-0.09076,1.49057,-0.72613,-0.30742,-1.77456,1.03810,-0.12880,-1.36634,-2.38245,1.43200,0.99731,2.53120,2.25082,1.56781,};
float weights_hidden_5[] = {-0.60843,-0.14895,2.58994,-2.26880,-0.14672,-0.00568,-0.19176,1.61579,-3.70940,2.24370,-0.63223,-2.13597,-0.72965,3.19763,-0.58186,-0.65655,-1.34750,};
float weights_hidden_6[] = {-0.84350,-1.12710,0.12845,2.23877,-1.79970,-0.30991,-0.16878,-2.25200,2.97767,2.61229,-0.76657,-3.16046,-1.45759,4.21977,-0.96779,-0.72282,1.33743,};
float weights_hidden_7[] = {-1.37424,2.13462,-1.46513,-1.04408,1.12368,3.47532,-0.36573,1.09564,-1.31594,-1.75073,1.85911,0.61707,-0.50535,-1.28680,1.56578,1.14878,0.16526,};
float weights_hidden_8[] = {-0.78198,-0.34584,1.54615,-3.29719,-0.84048,-0.29100,-0.24976,-3.24888,2.99118,3.48615,-0.27089,1.75111,-1.17966,-2.56556,-0.21702,-0.24595,0.09559,};
float weights_hidden_9[] = {-0.28717,-0.34526,1.90884,-2.26418,-0.13328,-0.35637,-0.05541,4.34091,1.92400,-3.48297,-1.56821,1.84702,-0.28267,-1.24430,-0.10478,-0.59757,0.21216,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};

/*
 * Scanner class
 * */


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


