// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={30,21,33,0,5,2,9,2,-2,-7,5,-8,-1,-7,-21,-6,16,17,-11,1,11,-4,-7,-14,-12,-3,3,-17,-10,-6,-19,-10,10,-1,8,-2,3,16,-7,-15,-12,5,21,-3,11,5,-6,-4,12,8,-1,-16,-5,-1,4,-37,4,10,6,-12,1,-20,-2,-16,8,-9,0,12,27,26,6,13,-4,16,19,2,6,15,19,25,3,-7,9,10,17,9,-5,-8,-4,-2,5,3,-3,-3,13,12,18,16,20,7,11,1,-9,-17,-16,-5,-24,-36,-21,-2,9,36,36,19,-5,-21,0,-12,1,-15,-23,-24,-14,-15,-16,-29,-15,8,25,17,-10,-20,-9,-2,4,-19,-9,1,-7,-15,-4,-13,28,-1,22,16,1,-16,-15,-15,-5,-13,-10,-13,-13,-10,2,3,7,-20,17,39,10,10,4,-5,6,1,-5,-11,-1,-5,10,-5,5,-5,18,9,4,15,2,-1,2,-4,-2,6,-2,-9,3,-6,-19,-8,21,4,5,8,10,14,6,-4,-2,4,7,5,0,7,17,-31,-6,1,7,15,5,19,26,15,-8,16,6,-4,-1,0,-4,-24,6,9,4,-2,6,14,4,-4,-13,0,8,-12,-2,7,-7,-13,13,-9,-11,-7,-24,-35,-4,-12,-17,-13,-10,-12,-7,10,-20,-6,11,26,-10,7,-56,-1,-14,5,-23,-10,-4,12,32,40,26,27,-17,32,32,12,-33,7,-5,-3,-30,-11,-5,-25,-27,-20,-2,26,26,36,13,-8,11,20,14,4,-26,9,-8,0,9,-10,-13,35,31,-22,12,-16,3,27,42,-14,-9,26,-5,-14,9,-40,-36,18,-5,-20,19,-8,7,36,20,27,15,39,6,21,12,-4,-6,10,-6,13,2,-22,6,24,6,-1,-1,4,-27,13,-18,-17,3,28,22,43,-7,-4,-4,-19,15,1,-14,9,-8,-4,-30,-1,-3,23,30,15,14,-20,-24,-29,-1,15,-6,-37,-25,-33,-20,-42,-24,5,16,-20,-25,-28,-11,16,-13,16,-4,13,10,11,-7,-39,-15,29,2,2,-51,-23,6,-19,3,23,-17,19,-6,-30,-6,-9,25,7,-10,14,0,-29,-4,9,12,-11,-7,-2,7,13,12,42,10,-19,-2,-53,-1,-4,-5,3,-5,16,1,0,6,8,9,22,-31,-27,1,-53,7,-15,21,15,-1,13,4,-23,4,41,48,34,9,-37,7,8,-15,-30,-6,-1,1,20,-14,-7,-3,20,-4,-19,-11,-20,9,-6,-4,-28,-10,-9,11,24,-16,18,12,23,-7,23,29,24,26,-11,16,26,-11,-37,-16,-25,6,-31,-11,-8,-10,20,35,75,15,0,9,-2,15,0,15,-6,3,-17,-13,-11,-20,-5,1,-14,1,-3,-10,5,-23,-20,5,5,-16,-2,-16,8,0,-6,-25,0,17,-7,3,2,-5,-3,-19,-10,-23,-18,-6,-9,12,-2,-10,-2,8,-7,-11,4,1,7,-7,-9,-9,-13,-5,7,9,-1,13,-1,-4,-4,-10,-9,17,13,9,-1,8,-1,0,0,8,0,0,18,16,9,1,-4,9,-3,-10,-10,11,-9,-4,0,-2,5,18,11,8,33,8,-11,-1,-1,-22,0,-3,-11,6,-6,9,-2,35,7,8,-3,-20,-4,0,-15,-20,-29,-6,-23,-2,-7,2,5,14,-13,0,1,3,-2,0,-4,-13,-6,-4,-10,20,5,6,5,-8,-40,4,25,15,4,5,12,5,-1,-7,-4,0,-15,-2,-14,-15,-38,11,-1,-8,13,17,6,4,-9,-11,-5,3,-9,-19,-17,-25,-37,18,-12,-6,-11,-2,6,12,3,3,5,1,-10,-6,-18,-6,3,23,3,-6,-1,11,27,17,2,12,2,-13,-8,18,-8,8,11,21,3,-14,8,14,24,35,-6,-2,7,5,6,0,-15,14,27,18,26,8,15,2,-3,4,6,11,19,-6,-6,-14,8,16,46,12,45,23,-13,-16,-16,0,-10,0,-1,-8,3,-6,17,43,21,116,45,79,18,-30,59,16,-16,-13,-22,14,-21,-68,-8,-33,-31,0,25,-26,5,-2,-26,23,-4,-54,-4,-14,-7,-10,-5,-4,-78,23,34,31,-41,44,22,5,5,13,8,-40,-17,9,9,-9,-44,31,-13,25,-10,-4,-9,8,10,-1,-4,-1,-21,-14,-37,2,27,0,-45,36,-52,17,55,51,6,-22,17,-1,-3,25,-14,56,48,17,-35,-4,-32,-5,-67,54,20,28,38,31,31,0,4,29,33,42,-28,-61,-78,19,-47,-18,10,-4,-38,-22,1,-22,7,-26,-8,56,-3,-33,-63,34,-23,34,40,-24,-53,5,11,-9,-8,-33,-69,59,-6,26,-23,-40,-19,8,28,29,16,31,6,7,1,7,2,15,-62,21,-41,-4,-48,-14,7,-39,7,20,5,11,65,39,27,53,37,23,-27,-25,-25,-10,-51,25,-30,26,-16,36,16,102,-8,5,-10,-33,10,7,-10,-2,-50,-6,-38,-11,21,6,-29,-17,79,31,22,-7,-5,39,32,-27,-51,21,4,37,15,-13,-28,58,16,76,23,3,18,-15,72,18,-40,-25,-32,-3,-70,17,-20,-18,-12,26,12,-55,5,-43,9,21,11,28,22,20,-22,8,-22,6,-4,106,86,-22,16,-44,-4,-12,-11,-59,9,-38,-39,-46,10,-55,-17,11,9,9,3,-6,-14,-3,3,-4,-19,-11,-3,5,-8,-2,-4,7,-4,-7,-9,-11,-16,1,-12,-14,-9,0,-12,-4,4,1,-1,11,-14,3,-15,-4,-12,-9,-20,-9,2,4,-13,1,3,0,0,8,-6,-11,-19,-8,-15,-13,-25,-1,-16,-8,-9,-7,-16,-10,-8,6,-6,-1,-2,-10,0,2,-3,-8,-8,4,7,9,-4,-3,-6,10,-13,1,-7,4,4,-3,-3,3,0,9,6,12,-6,-6,-13,1,-1,-6,8,0,11,-6,14,-2,1,-1,-6,2,2,-4,-13,0,2,-1,6,6,3,-5,-11,-8,5,2,-8,8,-5,2,-10,5,14,9,12,15,10,7,-2,5,0,6,1,2,2,12,1,17,15,23,16,6,9,2,4,9,7,0,-4,5,6,2,3,4,21,6,14,4,11,13,6,10,15,2,4,5,-8,1,-6,6,13,4,2,6,6,17,11,14,15,10,5,4,-9,11,-2,21,7,-17,-7,10,23,6,8,12,14,13,8,-6,6,3,-3,6,-4,-9,-19,-4,-4,-4,4,0,-6,9,-3,-4,-5,4,5,15,-11,-10,-23,-19,-20,-23,-16,-3,-4,-5,4,-6,-5,5,15,16,6,3,-21,-9,-37,-21,-22,2,-10,8,0,9,19,36,6,90,-9,11,37,39,-8,9,-45,-8,-56,5,-44,-24,-2,65,-8,5,-48,51,18,26,30,17,-13,-37,-61,-31,-39,-36,-8,43,37,2,16,26,-24,-9,-2,21,12,-35,20,36,34,-10,-54,13,-16,-19,-1,0,26,43,12,1,-42,7,-10,14,-12,11,-50,-22,-38,-49,-11,-52,10,23,-31,6,27,-4,-18,-34,11,13,-16,-46,5,49,-8,54,10,5,36,9,-31,10,3,0,-15,13,-12,28,4,14,23,-18,4,9,57,10,-22,11,29,23,-49,-40,-18,-8,54,-10,-11,18,61,-19,19,0,6,-4,11,19,56,9,4,10,5,71,8,20,38,-53,-17,2,-64,-2,-5,-27,20,-14,-30,-58,34,18,3,-38,-42,-7,50,-63,-26,12,17,-11,-69,-3,-28,21,-17,-39,-26,-28,-52,-4,45,-30,-25,16,-31,-6,-42,44,31,-6,33,25,-69,16,24,10,-34,-38,-8,29,-10,14,-16,2,14,-52,-9,32,-2,18,27,-20,28,-6,-1,33,6,11,16,-20,41,39,23,78,19,-8,-35,-20,1,9,18,41,7,-3,-1,-14,2,27,4,41,36,2,-3,-14,-70,-11,22,0,35,-32,60,-16,3,12,-67,41,14,4,47,-19,-15,-21,-3,-11,5,-26,-17,4,-7,-16,-17,38,19,18,-9,-11,18,2,-19,-6,-10,-11,2,2,-2,-5,19,11,-8,-27,-15,-1,-1,-6,-20,-33,9,-32,-3,-13,-32,14,-33,-1,2,-26,-4,20,-3,-4,-8,14,-6,-36,-27,-4,-44,-8,45,0,-33,-9,-2,1,-14,-22,-32,-2,22,-23,-38,-13,10,-19,47,44,-18,19,0,9,13,7,18,46,-1,-10,-24,-16,10,-28,-6,38,0,-3,5,9,-10,14,-16,20,12,-4,-37,-25,-20,-44,-38,51,37,8,-21,-12,-14,-1,-16,2,12,12,27,-11,-8,-11,-31,35,37,-18,-17,12,-12,11,23,-12,15,10,-7,4,12,28,-29,19,52,21,-7,-7,-19,2,-13,1,10,4,1,10,21,7,-11,14,24,22,14,2,-15,3,-16,-23,-2,21,14,14,0,21,-5,14,47,63,12,9,25,16,-11,6,-20,4,1,12,15,9,-16,2,7,24,7,-13,20,4,-10,-2,-6,-3,-13,8,-32,-12,-19,-1,6,14,-20,-21,12,6,-14,-3,-14,-15,12,19,-24,36,19,-6,-3,27,50,29,24,27,-11,23,9,-10,-9,2,4,-21,-11,-13,-8,24,-6,11,-1,12,-18,20,-11,-7,-9,-46,-6,47,38,38,5,11,5,-12,-15,4,14,-34,-46,-27,-15,5,8,-1,-5,23,30,48,29,10,5,-9,-10,-13,-4,-1,-5,-6,-2,8,24,16,6,-2,-6,12,7,6,-15,5,1,3,-18,-17,2,10,24,15,15,14,-2,7,6,5,13,9,-3,-4,-18,-5,1,12,13,-8,18,-2,-8,4,-2,-7,13,7,1,3,-25,-6,5,18,8,24,11,9,-16,9,15,9,2,13,10,3,-11,1,13,-6,-9,12,4,4,1,5,-3,-5,-16,-6,-11,5,-2,-7,18,9,-12,17,2,-7,-5,-22,4,-11,-6,-8,-5,-6,-23,-11,0,-29,-10,17,11,-12,-10,-20,-16,-3,6,3,1,13,-10,-8,-9,-7,23,10,-4,-12,-18,11,-14,-8,-5,-8,1,-9,-3,6,-1,-4,0,2,3,1,1,13,7,-4,-14,-9,-4,-2,-2,-9,-12,0,2,13,17,1,-7,17,15,-4,10,15,-8,1,-1,2,-10,4,-8,18,8,-6,6,2,42,26,2,-1,11,-1,19,-8,-14,-16,0,12,-3,7,11,13,8,3,-4,-5,6,-5,8,-1,0,-2,-8,2,1,-7,-5,5,8,-4,4,-5,11,-1,-9,-6,-16,-12,11,8,-1,8,-4,6,-1,5,8,-3,-8,-5,-18,-4,-20,-6,-10,7,-8,7,-30,-26,11,3,-8,-17,-13,-2,-24,-3,-24,-20,-2,58,30,10,23,3,1,19,-19,-22,-9,1,-15,-15,-33,-1,-4,29,6,-10,2,-16,-18,-12,-11,-36,-17,-8,-37,-8,-22,-26,2,4,11,-1,6,10,21,3,-17,1,-36,-13,-52,12,-20,-5,11,31,-16,29,9,-4,-5,7,-50,16,-9,-9,-30,23,-12,0,-33,5,23,15,-10,15,28,-16,11,-40,-6,-8,-2,-2,-19,37,16,10,15,11,11,12,-21,8,-8,-40,-25,4,1,0,12,48,26,-26,14,9,30,14,57,35,4,40,4,-1,-34,2,17,1,0,-23,-61,-16,-11,-13,23,49,-22,-24,18,-10,-29,-10,-36,5,-77,-26,-12,-17,-42,17,8,-11,16,39,19,6,5,7,-1,18,-11,20,7,55,29,33,15,-7,20,23,18,19,5,3,-3,3,-29,63,45,39,-12,25,5,-12,-20,22,21,13,25,13,-6,17,-29,19,23,-5,-21,-26,-7,-43,-20,1,-15,5,-8,-18,16,-25,7,58,29,28,-3,2,10,10,-25,-16,-25,-3,-1,-17,13,-7,7,38,13,-5,-26,-17,-14,7,6,-7,1,-4,0,-15,6,-25,20,-4,25,-6,29,10,21,-2,-13,17,-11,-24,-28,-12,3,18,18,50,-15,-23,-7,-18,-42,-8,-5,-33,-23,-40,-44,-35,38,-9,-12,23,26,7,5,16,19,23,-8,-10,15,3,0,3,-46,-15,20,40,10,23,-19,-28,-3,-9,-3,-2,9,-1,-43,-23,-7,-16,-25,37,9,-5,0,9,6,4,1,-30,8,9,6,-7,-17,-4,2,36,6,13,-1,-12,-1,2,-48,1,13,13,-4,15,-32,-19,9,19,-1,19,-14,22,-4,-17,4,10,5,12,-32,11,0,11,9,40,11,28,2,3,10,2,-11,15,-5,16,1,-16,-19,9,27,29,21,18,17,2,7,12,-6,-34,-12,13,-4,-15,7,22,34,13,10,26,-26,26,-1,-1,-7,-6,1,-22,-11,17,-1,5,32,-10,-1,13,22,8,8,9,-7,1,3,-24,1,-5,-3,17,19,-28,-42,4,9,4,27,38,9,15,-5,-1,-23,1,3,8,-1,5,-24,-33,-39,-10,19,26,4,17,17,4,-3,1,12,12,17,-11,-27,4,-13,3,-36,23,0,-7,4,-11,-6,7,-10,-24,-9,26,-1,8,-7,-9,-10,-14,12,10,13,-15,1,17,1,18,-23,25,3,10,-9,3,-12,-1,2,-18,14,1,-5,9,-4,-21,-19,8,13,-4,-6,-11,3,7,-26,-30,-22,0,-14,12,-18,9,0,20,-14,-3,-5,-5,-31,0,-17,-24,-21,-21,-29,-23,-16,-8,-4,};
class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool pe=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt<m-6) pe=true;
		}
		
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])-4&&pe) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1&&pe) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3&&pe) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3&&pe) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

