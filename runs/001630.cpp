#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#define MAX_HEIGHT 70
#define MAX_WIDTH 400
#define LITTLE_SIZE 16
#define FONTS_NUMBER 1

//------------------------------------------
//----------------perceptron----------------
//------------------------------------------
int perceptron(unsigned char *check, unsigned char *etolon)
{
int i;
unsigned int answer = abs((*check - *etolon) * 100);


for (i=1; i<=99; i++)
    answer += abs(*(check + i) - *(etolon + i));
return (answer);
}

//------------------------------------------
//------------------resize------------------
//------------------------------------------
void resize(unsigned char big_pic[MAX_HEIGHT][MAX_WIDTH], int crop_l, int crop_r, int crop_b, unsigned char little_pic[LITTLE_SIZE][LITTLE_SIZE])
{
int rewrite;
unsigned long int pixel;
int x, y, b_x, b_y;	//little x, y & big x, y
int crop_t = 0;	//t - top
int crop_h, crop_w;	//height width
int i, ii, summ = 0;

  //---------------crop detect------------------
  //left
while (1)
    {
    for (i = 0; i <= crop_b; i++)
        summ += big_pic[i][crop_l];
    if (summ != 0)
        break;
    crop_l++;
    }
  //right
summ = 0;
while (1)
    {
    for (i = 0; i <= crop_b; i++)
        summ += big_pic[i][crop_r];
    if (summ != 0)
        break;
    crop_r--;
    }
  //top
summ = 0;
while (1)
    {
    for (i = crop_l; i <= crop_r; i++)
        summ += big_pic[crop_t][i];
    if (summ != 0)
        break;
    crop_t++;
    }
  //bottom
summ = 0;
while (1)
    {
    for (i = crop_l; i <= crop_r; i++)
        summ += big_pic[crop_b][i];
    if (summ != 0)
        break;
    crop_b--;
    }

  //resize pic
for(y = 0; y < LITTLE_SIZE; y++)
    for(x = 0; x < LITTLE_SIZE; x++)
        {
        rewrite = 1;
        b_y = crop_t + (((1 + crop_b - crop_t) * y) / LITTLE_SIZE);
        ii = crop_t + ((1 + crop_b - crop_t) * (y + 1)) / LITTLE_SIZE;
        do
            {
            b_x = crop_l + (((1 + crop_r - crop_l) * x) / LITTLE_SIZE);
            i = crop_l + ((1 + crop_r - crop_l) * (x + 1)) / LITTLE_SIZE;
            do
                {
                summ = rewrite ? (big_pic[b_y][b_x]) :\
                                 ((summ + big_pic[b_y][b_x]) / 2);
                rewrite = 0;
		b_x++;
                }
            while(b_x < i);
            b_y++;
            }
        while(b_y < ii);

	little_pic[y][x] = summ;
        }
}

//-----------------------------------------
//--------------------input----------------
//-----------------------------------------
int input(unsigned char input_array[MAX_HEIGHT][MAX_WIDTH], long int *width, long int *height,long int an_str_h_summ[4][MAX_WIDTH], char *file_addr)
{
*height = 0;
*width = MAX_WIDTH;
  //0 of all chars in string is '.'
short int top_bottom;
short int one_char;
short int i;
FILE *f_handle;

for (i = 0; i < MAX_WIDTH; i++)			//1:0 1:2 1:3 1:6
    {
    an_str_h_summ[0][i] = 0;
    an_str_h_summ[1][i] = 0;
    an_str_h_summ[2][i] = 0;
    an_str_h_summ[3][i] = 0;
    }


  //can`t open file
if (file_addr && (!(f_handle = fopen(file_addr, "r"))))
    return (-1);

do
    {
    if (*height >= MAX_HEIGHT) break;	//to high
    i = 0;
    top_bottom = 0;
    do
        {
        one_char = file_addr ? getc(f_handle) : getchar();
        if (i >= *width) continue;	//to long
        switch (one_char)
            {
            case '.': input_array[*height][i] = 0; i++; break;
            case '%': input_array[*height][i] = 33; top_bottom = 1; i++; break;
            case '#': input_array[*height][i] = 66; top_bottom = 1;
		      an_str_h_summ[0][i]++;
		      if(i + *height/6 < *width)
		          an_str_h_summ[1][i + *height/6]++;
		      else if(i + *height/3 < MAX_WIDTH) 
		          an_str_h_summ[2][i + *height/3]++;
		      else if(i + *height/2 < MAX_WIDTH)
		          an_str_h_summ[3][i + *height/2]++;
		      i++; break;
            case '@': input_array[*height][i] = 100; top_bottom = 1;
		      an_str_h_summ[0][i] += 8;
		      if(i + *height/6 < *width)
		          an_str_h_summ[1][i + *height/6] += 8;
		      if(i + *height/3 < MAX_WIDTH)
		          an_str_h_summ[2][i + *height/3] += 8;
		      if(i + *height/2 < MAX_WIDTH)
		          an_str_h_summ[3][i + *height/2] += 8;
		      i++; break;
            }
        }
    while (one_char != (int)'\n' & one_char > 0);

    if (!top_bottom)	//all elements is '.'
        continue;

    if (!(*height))	//first line lenght
        *width = i;
    (*height)++;
    }
while (one_char > 0);
return 0;
}


//------------------------------------------
//--------------detect element--------------
//------------------------------------------
int det_element(long int an_str_h_summ[4][MAX_WIDTH], long int width, unsigned int element_index, long int element[3])
{
long int i, ii, min_summ[5] = {0, 0, 0, 0, 0};	//1:0 1:2 1:3 1:6
long int elements[4][2] = {0, 0, 0, 0, 0, 0, 0, 0};	//[*][0] - number, [*][1] - len


element[0] = 0;
  //get min delay
for(ii = 0; ii < 4; ii++)
    {
    min_summ[4] = 0;
    for (i=0; i < width; i++)
        if (an_str_h_summ[ii][i] < 8)
            {
            if (elements[ii][1])
                min_summ[4]++;
            }
        else
            {
            elements[ii][1]++;
            if (min_summ[4] != 0)
                {
                elements[ii][0]++;
                if (elements[ii][0] + 1 == element_index)
                    element[0] = i;
                }
            else if (elements[ii][0] + 1 == element_index)
                    element[1] = i - 1;
            if (min_summ[4] > 0 &&\
               (min_summ[ii] > min_summ[4] || min_summ[ii] == 0))
                min_summ[ii] = min_summ[4];
	    min_summ[4] = 0;
            }
    if (min_summ[ii])
        {
        element[2] = ii;
	break;
        }
    }     

if (ii == 4)
    {
    element[0] = 0;
    element[1] = width - 1;
    element[2] = 0;
    }
else
    {
  //come closer
    while(1)
        {
        if (element[0] - 1 >= 0 &&\
            an_str_h_summ[element[2]][element[0]] >\
            an_str_h_summ[element[2]][element[0] - 1])

            element[0]--;
	else
            break;
        }
    while(1)
        {
        if (element[1] + 1 <= width &&\
            an_str_h_summ[element[2]][element[1]] >\
            an_str_h_summ[element[2]][element[1] + 1])

            element[1]++;
	else
            break;
        }
    }

if (element_index <= elements[element[2]][0] + 1)
    return (elements[element[2]][0] + 1);
return (-1);
}

//------------------------------------------
//---------------------main-----------------
//------------------------------------------
int main(int argc, char **argv)
{
  //str height & width
long int width, height;
  //iterator
long int i, ii, iii;
long int res;
unsigned char e_con;
  //array with input word
unsigned char analog_str[MAX_HEIGHT][MAX_WIDTH];	// letter 1:4 - 1:1
unsigned char little_pic[LITTLE_SIZE][LITTLE_SIZE];

long int an_str_h_summ[4][MAX_WIDTH];	//analog str height summ

long int element[3];	//0 - start pos, 1 - stop pos, 2 - naklon
     //0 - numbet, 1 - perceptron answer
unsigned short int digi_element[2] = {0, 16*16*100};



unsigned char element_fonts[FONTS_NUMBER][10][16][16] = {\
  //font 1
  0,  0,  0,  0,  0,  0,  2,100,100,100, 62,  6,  0,  0,  0,  0,
  0,  0,  0,  0,100,100,100,100,100,100,100,100,100, 42,  0,  0,
  0,  0, 31,100,100,100, 72,  0,  0,  0,  0,100,100,100, 66,  0,
  0, 14,100,100,100, 55,  0,  0,  0,  0,  0,  0,100,100,100,  0,
  0,100,100,100, 83,  0,  0,  0,  0,  0,  0,  0,100,100,100, 30,
  0,100,100,100, 52,  0,  0,  0,  0,  0,  0,  0, 14,100,100,100,
 32,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0, 32,100,100,100,
100,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  3,100,100,100,
100,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0, 52,100,100,100,
100,100,100, 85,  0,  0,  0,  0,  0,  0,  0,  0, 75,100,100,100,
 99,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0, 95,100,100, 46,
 60,100,100,100,  0,  0,  0,  0,  0,  0,  0,  6,100,100,100,  0,
  2,100,100,100, 15,  0,  0,  0,  0,  0,  0, 84,100,100, 90,  0,
  0, 66,100,100,100,  0,  0,  0,  0,  1, 99,100,100,100,  0,  0,
  0,  0, 47,100,100,100,100,100,100,100,100,100, 61,  0,  0,  0,
  0,  0,  0,  0,  0, 78,100,100,100, 81, 21,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,100, 60, 72,  5,
  0,  0,  0,  0,  5, 25, 50, 58,100,100,100,100,100,100,100, 31,
  0, 46, 79, 46, 38, 24, 87,100,100,100,100,100,100,100,100,  4,
  0,  0,  0,  0,  0, 52, 70,100,100,100,100,100,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0, 28,100,100,100,100,100,100, 78,  0,
  0,  0,  0,  0,  0,  0,  0, 42,100,100,100,100,100,100, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 21,100,100,100,100,100, 93, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 12,100,100,100,100,100, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 20,100,100,100,100, 83, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 20,100,100,100,100, 80, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 21,100,100,100,100, 75, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 36,100,100,100, 92, 75, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 72,100,100,100, 78, 75, 75, 41,  0,
  0,  0,  0,  0,  0,  0,  0, 85,100,100,100, 83, 75, 75, 41,  0,
  0,  0,  0,  0,  0,  8, 14,100,100,100,100,100, 83, 84, 84, 11,
  1, 51, 55, 49, 44, 98, 81, 15, 39, 33, 88,100,100,100,100, 94,

  0,  0,  0,  0,  0,  0, 32,100,100, 91, 50,  0,  0,  0,  0,  0,
  0,  0,  0, 85,100,100,100,100,100,100,100,100,100, 48,  0,  0,
  0,  0,100,100,100,100, 90,  0,  0, 39,100,100,100,100, 38,  0,
  0, 64, 74, 21,  3, 22,  0,  0,  0,  0, 40,100,100,100,100,  7,
  0, 14, 24,  0,  0,  0,  0,  0,  0,  0,  0, 80,100,100,100,  4,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 85,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 68,100,100, 64,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39,100,100, 56,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0, 49,100,100, 67,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  3, 87,100,100, 48,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 24,100,100, 76,  7,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0, 38,100,100, 40,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0, 14,100,100, 62, 17,  0,  0,  0,  0,  0,  0,  1,  0,
  0,  0, 73,100,100,100, 95, 27, 20,  3,  0,  0,  0,  5,  3,  0,
  0,100,100,100,100,100,100,100,100,100,100,100,100,100,100, 43,
100,100,100, 93, 93, 83, 90, 79, 93,100,100,100,100,100,100, 30,

  0,  0,  0,  0,  0, 16, 77,100,100,100, 33, 24,  0,  0,  0,  0,
  0,  0, 56,100,100,100,100,100,100,100,100,100,100,100, 33,  0,
  0, 79,100,100, 29,  0,  0,  2,  0,  0, 58,100,100,100,100,  0,
  0, 69, 53,  0,  0,  0,  0,  0,  0,  0,  0, 43,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13,100,100, 94,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,  0,  0,
  0,  0,  0,  0,  0,  0,  0, 19, 40,100,100,100,100, 64,  0,  0,
  0,  0,  0,  0,  0,  0,100,100,100,100,100,100,100, 56,  4,  0,
  0,  0,  0,  0,  0,  0, 12,  0,  0, 76, 99,100,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100, 64,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 84,100,100,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 82,100,100, 54,
  7, 13,  6,  0,  0,  0,  0,  0,  0,  0,  0, 36,100,100,100,  0,
  0, 69, 79, 19, 10, 24,  0,  0,  0,  0, 94,100,100,100, 43,  0,
  0,100,100,100,100,100,100,100,100,100,100,100,100,  0,  0,  0,
  0,  0, 46, 32,100,100,100, 80, 72,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 79,100, 13,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,100,100,100,100,  3,  4,
  0,  0,  0,  0,  0,  0,  0,  0, 17, 82,100,100,100,100,  7,  0,
  0,  0,  0,  0,  0,  0,  0, 11, 85, 79,100,100,100, 80,  1,  0,
  0,  0,  0,  0,  0,  0, 55, 80, 51,100,100,100,100, 65,  0,  0,
  0,  0,  0,  0,  0, 61,100, 57, 74,  0, 93,100,100, 59,  0,  0,
  0,  0,  0,  0, 71,100, 75, 33,  0,  0,100,100,100, 77,  0,  0,
  0,  0,  0,100,100,100, 86,  0,  0, 69,100,100,100, 59,  0,  0,
  0,  5,100,100,100, 34,  0,  0,  0, 33,100,100,100,  0,  0,  0,
  0, 46,100,100,  0,  0,  0,  0,  0, 12,100,100,100,  0,  0,  0,
 58,100,100, 79, 52, 39, 39, 39, 36,100,100,100,100, 73, 39, 11,
100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  3,100,100,100,100,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  7, 75,100,100,100,  0,  0,  0,

  0,  0, 11, 64, 74, 90,100,100,100,100,100,100,100,100,100, 45,
  0,  0, 32,100,100,100,100,100,100,100,100,100,100,100,100, 51,
  0,  0, 42,100,100, 82,  0, 23, 83, 29, 33, 29, 55, 30,  7,  0,
  0,  0, 49,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,100,100,100, 75, 76,  6,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,100,100,100,100,100, 88, 93,100, 72,  0,  0,  0,  0,  0,
  0,  0, 21, 24, 75,100,100,100,100,100,100,100,100, 34,  0,  0,
  0,  0, 19, 15, 23, 13, 16, 23, 29, 37,100,100,100,100, 68,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,100,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 51,100,100,100, 45,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 58,100,100,100, 79,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 58,100,100,100, 55,
  4,  0,  0,  0,  0,  0,  0,  0,  0,  0, 45, 67, 65,100, 98,  0,
  0, 65, 41,  0,  0,  0,  0,  0,  0, 39, 79,100,100,100,  0,  0,
  1,100,100,100,100,100,100,100,100,100,100, 92, 63,  0,  0,  0,
  0,  0, 72, 73,100,100,100,100, 79,  0,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 70, 65,  1,
  0,  0,  0,  0,  0,  0,  0, 44,100,100,100,100,100,100, 24,  0,
  0,  0,  0,  0,  0, 32,100,100,100, 38, 30,  0,  0,  0,  0,  0,
  0,  0,  0, 28,100,100,100, 12,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0, 28,100,100,100, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  7,100,100,100, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,100,100,100,100,  0,  0,  0,  5, 27, 15,  0,  0,  0,  0,  0,
  0,100,100,100,100,100, 65, 95,100,100,100,100, 93, 45,  0,  0,
 58,100,100,100,100, 82,100,100,100,100,100,100,100,100, 62,  0,
 90,100,100,100,100, 48,  0,  0,  0,  0,  7, 98,100,100,100,  0,
100,100,100,100,  0,  0,  0,  0,  0,  0,  0,  9,100,100,100,100,
 70,100,100,100,  0,  0,  0,  0,  0,  0,  0,  9, 67,100,100,100,
 20,100,100,100,  0,  0,  0,  0,  0,  0,  0,  9,100,100,100,  0,
  0, 73,100,100,100, 12,  0,  0,  0,  0, 41,100,100,100,100,  0,
  0,  0, 65,100,100,100,100,100,100,100,100,100,100, 62,  0,  0,
  0,  0,  0,  0,  0, 84,100,100,100,100,100,  0,  0,  0,  0,  0,

  0, 27, 54, 96,100,100,100,100,100,100,100,100,100,100,100, 75,
 20, 54, 75,100,100,100,100,100,100,100,100,100,100,100,100, 75,
 24, 54, 96, 96, 37, 37, 41, 37, 41, 41, 37, 37, 96, 96, 96,  4,
 26, 45, 31,  0,  0,  0,  0,  0,  0,  0,  0, 16,100,100, 75,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 61,100,100, 10,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 96, 96, 44,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52,100, 75, 10,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 75,100, 10, 10,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  7, 15, 96, 84,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0, 30, 75,100, 10,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  5, 75, 75,100, 10,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  5,  0, 96, 88, 31,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  1,  0, 75,100, 54, 10,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 28, 75,100, 54, 10,  0,  0,  0,  0,  0,
  0,  0,  1,  0,  0, 10, 54, 96, 31, 31,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0, 11,  5, 55, 81, 10, 10,  0,  0,  0,  0,  0,  0,

  0,  0,  0,  0, 10, 54,100,100,100,100,100, 83, 21,  0,  0,  0,
  0,  0, 31, 96,100, 75, 75, 54, 54, 54, 75, 75,100, 96, 51,  0,
 10, 10,100,100, 96,  0, 14,  0,  0,  0,  0, 21, 96,100,100, 10,
 10, 74,100,100, 60, 11, 26,  0,  0,  0,  0,  3, 96,100,100, 13,
 10, 75,100,100, 91, 31, 17,  0,  0,  0,  0, 17, 96,100,100, 10,
 10, 10,100,100,100, 96, 87,  8,  0,  0, 10, 75,100, 96, 46,  0,
  0,  0, 31, 96,100,100,100, 96, 75, 75,100,100, 50,  0,  0,  0,
  0,  0,  0,  0, 61,100,100,100,100,100, 75, 49,  0,  0,  0,  0,
  0,  0,  0, 40, 54, 96, 96, 96,100,100,100,100, 75,  7,  0,  0,
  0, 16, 54, 54, 96, 55, 31, 10, 54, 55,100,100,100, 75, 59,  0,
  0, 54, 96, 96, 31,  0,  0,  0, 10, 10, 54,100,100,100,100, 24,
 75, 75,100, 95, 10,  0,  0,  0,  0,  0, 10, 44,100,100,100, 96,
 96, 96,100, 94, 10,  0,  0,  0,  0,  0,  0, 14, 75,100,100, 59,
 50, 96,100,100, 10,  0,  0,  0,  0,  0, 10, 54, 75,100,100, 31,
 10, 28,100,100, 96, 54, 54, 54, 54, 54, 54, 54, 75,100, 54, 10,
  0,  0, 10, 11, 65,100,100, 86, 86, 59, 78, 31, 31, 10, 10,  0,

  0,  0,  0,  0,  0,  0, 70,100,100,100,  0,  0,  0,  0,  0,  0,
  0,  0,  0,100,100,100,100,100,100,100,100,100,100, 33,  7,  0,
  0, 42,100,100,100,100, 30,  0,  0,  0, 25,100,100,100, 64,  0,
  0,100,100,100, 33,  9,  0,  0,  0,  0,  0, 38,100,100,100,  0,
100,100,100, 80,  9,  9,  0,  0,  0,  0,  0,  0,100,100,100, 32,
100,100,100,100,  9,  7,  0,  0,  0,  0,  0,  0,100,100,100,100,
 36,100,100,100, 58, 58,  0,  0,  0,  0,  0, 50,100,100,100,100,
  0,100,100,100,100,100,  7,  0,  0, 16, 92, 92,100,100,100, 74,
  0,  0, 58,100,100,100,100,100,100,100,100,100,100,100,100, 44,
  0,  0,  0,  0, 19, 59, 87,100,100, 63,  0, 71,100,100,100,  0,
  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  4, 84,100,100, 58,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,100,100, 69, 22,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,100,100, 61, 33,  0,  0,
  0,  0,  0,  0,  0,  0,  5,  2, 60,100,100, 39,  3,  0,  0,  0,
  0,  4, 67, 67, 73,100,100,100,100, 45, 17,  0,  0,  0,  0,  0,
  2, 59,100, 95,100, 82, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,
};



if (argc == 1)
    {
    input(analog_str, &width, &height, an_str_h_summ, NULL);

    for(i = 1; i <= 3; i++)
        {
        if (det_element(an_str_h_summ, width, i, element) <= 0) break;
        resize(analog_str, element[0], element[1], height - 1, little_pic);
        digi_element[1] = 16*16*100;
//        output(&little_pic[0][0], LITTLE_SIZE, LITTLE_SIZE, 0);
	for(ii = 0; ii < FONTS_NUMBER; ii++)
            for(iii = 0; iii < 10; iii++)
                {
                res = perceptron(&little_pic[0][0],\
			         &element_fonts[ii][iii][0][0]);
                if (res < digi_element[1])
                    {
                    digi_element[0] = iii;
                    digi_element[1] = res;
                    }
                }
        fprintf(stdout,"%d", digi_element[0]);
        }	 
    fprintf(stdout,"\n");
    }

return 0;
}

