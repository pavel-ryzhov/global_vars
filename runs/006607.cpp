#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {2.45957,-0.573242,-1.56499,1.75913,1.31332,-0.641726,1.21921,-2.78376,-0.499676,1.95902,0.493639,-0.0942174,0.682222,1.20285,-1.51111,-0.428074,0.129107,0.761,0.754866,-1.0795,0.677432,-1.88507,-0.0280942,-0.93055,-0.357369,0.518866,-0.792251,-0.199127,-0.619532,-1.20474,1.90607,-0.399016,-0.686723,0.835631,-1.27023,1.08207,0.349618,0.311186,-1.46564,-0.783535,0.128003,-0.895815,1.31142,0.0692385,-0.00803425,0.474021,-0.85763,0.897775,-1.89128,-1.36339,1.09898,-0.285071,-0.349633,-1.20743,0.206026,0.617116,0.529621,0.271991,-2.53232,0.16651,0.146469,1.00537,0.648941,0.198974,0.0138182,-0.517786,0.00180163,-0.775572,0.470291,1.61556,-1.46329,0.590093,0.649244,-0.515401,1.61251,-0.576108,-0.40523,0.960788,0.376632,0.231865,1.84329,-0.373518,-0.512357,-0.477599,0.0309379,1.0785,1.24236,-2.76427,1.14302,3.93817,-0.836751,0.0421014,1.38866,0.335524,0.536166,-0.574094,-1.0375,0.734122,1.41087,0.0115084,2.05555,-0.760315,-0.0877988,1.29265,0.809109,-0.155804,0.073442,-0.657941,-1.25748,0.104617,1.54233,0.329832,0.684699,0.920841,-0.475135,-0.495633,0.055111,0.150353,-0.802506,-1.0165,1.1967,-1.13404,-0.558481,0.485951,0.00267175,0.512412,-1.05155,-0.177229,-0.420658,-0.417919,1.76728,0.0398931,-0.149781,0.787813,-1.15075,0.126844,-0.16504,-0.074027,-0.710635,-0.552385,-0.00515679,0.626918,0.136422,0.622676,-0.0040086,1.40287,0.459408,-1.67906,1.05059,1.01197,-0.435432,-0.900104,0.257598,0.483217,-0.311337,1.47108,-0.114739,0.579981,0.244017,-1.88752,0.507636,-0.576944,1.00147,0.951892,1.46131,0.252175,1.54278,0.187607,-0.688736,0.205257,1.02975,-0.149008,0.898162,2.0725,0.374571,0.47275,0.235499,-0.339016,-0.42468,-1.46664,1.29798,-1.49099,-1.21761,0.125381,1.12882,0.677828,1.89244,-0.410724,-1.30902,1.45608,-0.0329996,-0.315889,0.749564,-1.14853,-0.3013,-0.986871,-1.39106,0.175214,0.88082,1.09903,-0.479623,0.146643,-0.744839,-1.0798,-0.638318,0.939174,-1.05307,1.26871,0.0426677,-1.57023,1.62193,-0.000629187,-0.979831,0.347061,0.784449,0.308156,0.165708,-0.551899,-0.650319,-0.307473,-0.00112974,-1.16103,0.428026,-1.5871,-0.611431,0.525343,-1.30824,-0.276145,1.1298,1.10788,-0.499024,-0.0751296,-0.435842,0.997828,0.218471,1.02487,0.0258855,-0.211545,0.291411,0.382589,-0.586694,-0.830258,1.31919,0.275036,1.80612,-1.52877,-0.370387,-1.75274,0.762814,2.01438,-1.37227,-0.0599803,-0.0650777,0.653789,0.354569,1.14701,0.597432,0.0971297,0.893238,0.151676,-1.48928,0.174211,-0.578179,1.07201,1.917,-0.518497,1.47467,1.30049,-1.42807,-0.726386,-0.422252,-1.56775,-0.360204,-0.0725312,-0.865665,-0.205513,1.36821,-0.978944,0.669859,0.138811,-1.10816,-0.621697,-0.623759,1.10212,2.31388,-0.994773,1.16662,2.93578,-1.44906,-1.87743,0.70747,-1.95712,-0.377982,0.401228,-1.48528,1.16995,0.881562,-0.898525,0.0121212,0.102397,-1.7415,1.73712,-0.269986,-2.77641,-2.885,2.97202,-0.209006,0.239021,1.7139,0.762771,0.336939,0.0880971,-0.127886,0.0500953,2.17504,0.795231,-0.765695,-1.1851,-0.317803,-0.648394,-0.0588993,0.0019593,1.17958,-1.26562,-1.3003,0.710152,-0.684592,0.536245,0.516808,-1.14419,-1.25738,0.096014,-0.660439,-1.3303,1.19886,0.842561,-0.988962,0.0200619,-0.460688,0.774963,0.360802,-0.652894,1.79056,0.143793,0.765582,-2.34655,-0.852137,-0.169268,-0.390882,0.621986,-0.65936,1.53383,0.126606,0.984037,1.28804,-0.915449,0.238078,0.275689,-1.32665,0.0496377,0.0525549,-0.740817,-0.246226,0.779123,0.36594,-1.21111,0.487611,1.81535,-0.262508,-1.32199,0.00162597,0.81618,-1.33699,-1.62982,-1.96364,-0.460847,1.24447,0.98741,0.260056,1.05863,-1.26714,-0.949862,-0.477814,0.145152,1.60082,-0.59223,0.510223,2.19806,-1.3345,-3.3452,0.692966,-2.67659,-0.529385,1.03521,-1.33027,3.37354,2.19306,-0.305478,0.208551,-0.364878,-1.03605,3.82416,0.0984997,0.119515,-2.2095,1.9889,0.39448,-0.2065,1.77124,1.66239,0.938643,0.179749,0.937402,-0.635969,1.03265,-0.103111,-0.961915,-1.89785,-0.635255,-0.378098,-0.514078,0.0680909,1.56947,-1.03747,-1.42823,0.147822,-1.12032,0.435211,-1.71888,-1.423,-0.206924,1.23709,-0.441346,-0.347908,1.7775,1.03558,-0.484548,0.110033,-2.64766,-0.254736,0.954559,-1.91483,1.62029,-0.360914,0.394423,-1.65582,-0.598116,0.73954,-1.22065,0.25853,-0.332221,2.10904,1.00623,0.844819,1.70142,-1.51575,-0.516769,0.874933,-1.07868,-0.127016,-0.37057,-0.896497,-0.727145,-0.108764,-1.07329,0.667474,0.164701,0.0590914,0.944937,0.000134574,0.747835,0.984053,0.166064,0.492157,0.238832,0.236569,0.260341,0.872487,1.24766,-0.941999,-1.9241,0.812144,-0.145613,-1.60715,-0.984268,0.945564,0.0534012,0.00373592,0.254246,-0.875532,0.00393783,-1.47435,0.0995919,1.43373,0.395226,2.44751,1.84285,-1.58522,0.0451327,-0.784485,-0.161562,4.30891,-0.530279,2.05002,-2.1268,0.797832,1.29998,0.609347,1.7923,0.187747,0.237915,-0.651881,0.612932,-3.60512,0.440951,-2.11708,-1.4544,-1.75207,0.114367,2.75016,-0.150946,1.9748,-1.28936,0.225945,-1.40898,0.369579,1.05886,0.715434,-1.7169,-0.74089,-0.580033,-0.191676,0.970414,-1.85082,1.48469,-1.32791,-1.89255,-0.773933,-0.034294,1.6679,-0.662278,-0.216061,-0.00109659,-0.0805492,-0.350582,-1.36742,0.71183,1.90793,-1.32455,-1.44454,-0.0992752,0.515166,0.945263,-1.11015,1.9304,0.060057,-0.788828,0.773517,0.317899,1.25993,1.41216,-0.319314,-0.539064,0.390221,-0.906174,-0.216833,0.681616,-0.257578,0.680943,0.111193,0.681741,1.21806,0.0145666,-0.216257,0.99873,-0.497439,-0.879115,1.24586,0.122959,-0.753861,0.937259,1.4974,0.548206,-0.00481211,-0.894598,-0.31398,-0.0237724,-1.01235,0.356146,0.500615,0.707397,-0.372006,1.72553,0.980072,1.39862,-0.454354,0.210542,-1.84215,-0.804242,-1.90291,0.543417,2.15221,0.858105,1.59757,-2.12973,0.723277,0.409279,1.81519,1.03333,-1.5594,1.38877,-0.596534,0.116806,-5.27305,0.444803,-1.28989,-1.26881,-0.0303254,-0.155799,3.93179,-1.49755,0.438325,-0.686499,-0.360943,-0.923804,0.648126,0.698476,-0.29288,-0.375273,-0.137896,-1.03117,-1.47739,0.334109,-0.819757,-0.0284762,-0.214897,-0.74118,-0.22936,1.24763,1.60097,-0.254657,-0.645383,-1.02031,0.471258,-0.362703,-0.511899,1.4265,0.165262,0.483446,-0.52196,-0.627664,-0.278542,0.673823,-0.735417,1.81132,0.437819,-1.72647,2.29028,2.33405,1.99418,1.20871,1.53984,1.49214,-1.12608,-1.71529,-0.157036,1.39928,-1.10434,-0.300918,1.05475,-0.810334,0.830468,1.19879,0.0196136,2.6197,-0.835513,-1.14012,-0.482075,-1.57596,-1.50583,2.09255,0.214778,2.13415,0.0471138,-0.659259,-0.666822,-0.213872,-1.033,0.361553,1.79174,-0.208133,1.04255,1.80016,1.07949,0.87426,-0.895876,0.371548,-0.518042,-1.63127,-2.22391,0.43926,-0.101623,0.503443,0.663294,0.0723716,-1.15961,-0.381238,0.590304,-0.562979,-1.07058,0.573438,0.0923207,0.68554,-1.94049,-0.671563,-0.202497,-0.0442665,0.40769,-0.204387,0.727732,-0.693923,-0.294726,-1.09817,1.16068,0.471496,0.174718,-0.16519,0.23837,0.916496,-0.030259,0.633002,-0.554803,-0.939345,-1.96063,-2.92442,-0.663803,-0.0631627,-0.146153,0.846323,1.92554,-1.15231,0.688939,-1.82708,-0.30847,0.649344,-1.13575,1.51687,-0.0768711,-0.125575,-0.656795,-0.880948,-1.53745,1.00018,0.927375,0.316121,0.313425,-0.194191,0.342934,2.45951,0.384127,-0.383065,0.519963,0.423366,-0.790355,-0.975767,-0.27843,0.72058,-0.528863,-0.450943,-0.757353,-0.47979,-0.612964,0.514348,0.575578,0.45087,0.485977,0.659751,-0.0422271,-0.356426,-1.14582,1.96863,-0.96798,0.258426,1.05921,-0.370265,-0.134127,-0.874459,0.00244033,1.15068,0.390006,1.32056,1.93527,-1.00226,-0.6337,-0.465893,-1.56383,-0.0954095,0.531405,-1.37996,-0.228619,-0.10814,-2.11209,-0.538565,-1.21711,0.154506,0.411099,-1.06661,-0.467978,-0.919888,-0.54344,0.928151,0.774074,0.46785,1.45468,-0.657269,0.374576,0.647014,0.569965,0.384936,-0.787448,1.15931,-1.12031,-0.254459,0.903457,0.210736,1.88142,-2.28813,-0.239651,0.527092,1.32885,1.92832,0.699133,-0.834075,0.216695,-1.45019,0.568887,-0.149279,0.123362,-0.941198,0.59858,-0.270263,-0.366255,-0.0717316,0.566177,1.32654,-0.6347,-1.03931,-0.857143,-0.43017,0.882664,-0.502521,-0.16772,-0.439258,0.928388,0.358313,0.0303085,-0.157956,0.471204,0.859593,0.0367882,-1.41127,-0.19861,0.201729,0.0394223,0.523114,-0.116424,-1.25497,-0.333359,0.998184,0.0286764,-0.541382,-0.6407,-0.154198,1.02883,-1.15688,0.919061,1.44322,0.0706368,0.521176,-0.705372,-1.82769,-2.01,-0.216853,-0.622103,0.729612,0.364165,-1.90882,0.598225,0.371505,0.0378927,0.286446,1.70548,-1.44146,0.685464,0.246186,-0.243048,0.715975,0.32719,0.0731077,0.96611,-1.0707,-1.47668,-0.143676,-0.121751,1.2459,0.15831,-1.33249,0.108688,0.26796,-0.413748,0.695578,0.318521,0.199242,2.21455,-1.24509,0.627958,1.43857,0.843704,1.20657,0.00123671,1.29271,-1.96579,0.735473,-0.112064,1.32042,0.616043,-2.00132,-1.35043,-0.493917,1.71747,1.3954,1.20069,0.102562,3.22876,-1.15444,0.182472,0.581398,0.495773,-0.783636,-1.32089,0.96142,0.594974,1.43397,1.12192,-0.349817,0.253596,-1.47109,-0.112269,1.53138,0.770541,0.888875,0.45062,-0.562738,-0.587004,-1.21904,0.0131589,-0.33357,0.0449352,-1.64663,0.521862,-2.30973,1.05024,0.0983327,-0.183332,0.371878,-1.64495,-0.34867,0.200268,1.94962,0.820917,-2.56793,-0.0914359,0.844689,-0.601596,0.588289,-0.184457,0.202673,1.57009,2.41126,1.21192,-4.70174,0.710036,-0.340218,-0.176187,0.900673,-0.897359,-1.41412,1.3435,1.12391,-0.191792,-2.80734,-0.37279,-0.117103,-0.208304,1.38837,0.020794,1.09807,0.564308,2.92252,2.82781,0.829449,0.150521,1.42679,0.437279,-0.241793,-0.447943,-0.31663,0.464835,0.917615,0.64872,0.736283,1.08618,0.264337,0.434719,1.33599,0.297333,0.469057,0.697506,-1.06408,-0.991164,-1.93464,-5.22139,-4.81198,2.73463,-1.91884,1.88966,0.0955356,3.94422,2.52927,-2.55379,2.59986,-3.00678,-3.51005,-2.15563,2.60779,-4.25534,2.62915,-1.14495,-6.65457,0.979075,1.80584,-0.209166,-4.78162,2.03085,-2.15987,-0.439327,-0.805871,-4.82837,0.658317,-0.357237,0.43407,-3.65585,-0.332201,2.73292,0.81615,-4.96031,-0.450604,1.20277,-0.546928,-3.58446,0.500178,2.27998,1.20216,3.99752,-2.74774,-5.58391,-1.62415,0.895054,-2.6909,-2.35098,0.865047,-2.8098,0.572454,-6.03855,-2.96481,2.01827,1.23654,0.330509,1.26486,0.599148,-1.44385,-1.07137,-3.52284,-2.78829,4.10191,-2.0061,-3.47528,5.10335,-1.67928,0.511759,-0.274385,-3.6685,1.86687,0.134483,1.19856,-5.62637,-2.436,-4.39277,2.0715,2.24487,2.27692,-2.76969,0.766219,-2.61197,0.714288,3.58241,1.48997,-1.77886,-3.74476,-4.65699,-1.90457,2.67796,-4.05233,-0.897406,-2.22057,1.79846,4.26483,-0.0962866,-4.73799,-4.92911,-0.933156,-7.04071,0.998764,-0.490478,-3.63659,-0.867374,-1.27015,0.578596,1.71909,-0.473565,-5.23379,-1.49386,-1.43362,1.35284,-1.08064,1.11763,2.92659,-2.90801,0.143991,-0.353806,-1.13943,1.0856,-4.14972,-1.89501,1.44801,-1.46345,-1.58594,1.17624,-2.68235,-0.389414,-4.60637,3.68494,0.232013,1.71143,-3.62095,3.02579,-4.28144,-0.502169,-5.27004,3.81261,-5.63509,3.46071,-2.9138,-3.11642,0.30765,-0.1562,0.160012,-4.40964,2.09289,2.2996,3.10376,1.34466,0.988838,-1.34758,-3.35366,1.50238,-5.17404,-0.870666,-1.67232,2.45434,0.976747,0.963759,1.93041,1.25279,-1.60794,-1.88124,-3.03244,-3.03684,-3.11291,0.839219,-4.09512,-1.31265,1.50382,0.412954,0.278358,0.841232,-3.84916,0.223873,1.88698,-2.58763,-3.50336,2.9632,3.67812,-4.99873,2.24148,-0.465622,-2.25181,1.00525,-2.86301,-3.42419,2.89253,-1.28461,1.25703,-5.36411,1.31938,-3.62533,2.28741,-1.43103,3.40969,-4.88195,0.778248,0.87855,1.02099,2.07935,1.18687,1.5874,1.62303,0.662251,0.425364,0.923516};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }
    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      //numbers[i].swap(vector<string>(numbers[i].begin() + points[0], numbers[i].begin() + points.back()));
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    // image->swap(vector<string>(image->begin() + start_y, image->begin() + end_y));
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      //(*image)[y].swap(string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x));
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
    size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    random_shuffle(width.begin(), width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    random_shuffle(height.begin(), height.end());
    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }
        result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
      }
    }
  }

};


int main() {  
  srand(100589);
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
