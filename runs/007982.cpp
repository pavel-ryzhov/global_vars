#include <iostream>
#include <fstream>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <set>

using namespace std;

char image[200][1000];
bool c[200][1000];
int width = 0;
int height;

//----------------------------------------------------------------------------------------------------------------------
//                                                     SPLITING IMAGE
//----------------------------------------------------------------------------------------------------------------------

struct pixel_set{
    set<pair<int, int> > s;
    double xc, yc;
    int left, top, right, bottom;
    pixel_set()
    {
        xc = yc = right = bottom = 0;
        left = top = 1e9;
    }
    void add_pixel(int x, int y)
    {
        s.insert( make_pair(x, y) );
    }
    void merge(pixel_set &b)
    {
        for(set<pair<int, int> >::iterator it = b.s.begin(); it != b.s.end(); it++)
            s.insert(*it);
        calculate_info();
    }
    void calculate_info()
    {
        xc = yc = 0;
        for(set<pair<int, int> >::iterator i = s.begin(); i != s.end(); i++)
        {
            xc += i->first;
            yc += i->second;
            left = min(left, i->first);
            right = max(right, i->first);
            top = min(top, i->second);
            bottom = max(bottom, i->second);
        }
        xc /= s.size();
        yc /= s.size();
    }
};

struct digit{
    char mat[100][100];
    int width, height;

    digit(){memset(mat, 0, 100*100);}
    digit(pixel_set s)
    {
        memset(mat, 0, 100*100);
        width = s.right - s.left + 1;
        height = s.bottom - s.top + 1;
        for(set<pair<int, int> >::iterator it = s.s.begin(); it != s.s.end(); it++)
        {
            mat[it->first - s.left][it->second - s.top] = image[it->first][it->second];
        }
    }
    void print()
    {
        for(int i = 0; i < width; i++)
        {
            for(int j = 0; j < height; j++)
            {
                switch(mat[i][j])
                {
                    case 0: cout << '.'; break;
                    case 1: cout << '%'; break;
                    case 2: cout << '#'; break;
                    case 3: cout << '@'; break;
                }
            }
            cout << "\n";
        }
        cout << endl;
    }
};

int dx[] = {0, 0, 1, -1, 1, -1, 1, -1};
int dy[] = {1, -1, 0, 0, 1, 1, -1, -1};

bool check(int i, int j)
{
    return i >= 0 && i <= height && j >= 0 && j <= width;
}

void dfs(int i, int j, int min_color, pixel_set &cur_set)
{
    if(!c[i][j])
    {
        c[i][j] = 1 ;
        cur_set.add_pixel(i, j);
        for(int k = 0; k < 8; k++)
        {
            int ni = i + dx[k];
            int nj = j + dy[k];
            if(check(ni, nj) && image[ni][nj] >= min_color)
                dfs(ni, nj, min_color, cur_set);
        }
    }
}

bool inside(pixel_set s, double x, double y)
{
    return y >= s.top && y <= s.bottom;
}

bool can_merge(const pixel_set &a, const pixel_set &b)
{
    return inside(b, a.xc, a.yc) || inside(a, b.xc, b.yc);
}

void bfs_add(pixel_set &s, int len)
{
    queue<pair<int, int> > q;
    int dist[200][1000];
    memset(dist, 0x0f, 200*1000*4);
    for(set<pair<int, int> >::iterator it = s.s.begin(); it != s.s.end(); it++)
    {
        dist[it->first][it->second] = 0;
        q.push(*it);
    }

    while(!q.empty())
    {
        pair<int, int> p = q.front();
        q.pop();
        if(dist[p.first][p.second] < len)
        {
            if(image[p.first][p.second] == 1)
            {
                bool bad = 0;
                for(int k = 0; k < 8; k++)
                {
                    int ni = p.first + dx[k];
                    int nj = p.second + dy[k];
                    if(check(ni, nj) && image[ni][nj] > 2)
                        if(s.s.find(make_pair(ni, nj)) == s.s.end())
                        {
                            bad = 1;
                            break;
                        }
                }

                if(!bad)
                    s.add_pixel(p.first, p.second);
            }
            for(int k = 0; k < 8; k++)
            {
                int ni = p.first + dx[k];
                int nj = p.second + dy[k];
                if(check(ni, nj) && image[ni][nj] == 1 && dist[ni][nj] > 100)
                {
                    q.push(make_pair(ni, nj));
                    dist[ni][nj] = dist[p.first][p.second] + 1;
                }
            }
        }
    }
    s.calculate_info();
}

void dfs_set(int i, int j, pixel_set &s, pixel_set &cur_set)
{
    if(!c[i][j])
    {
        c[i][j] = 1;
        cur_set.add_pixel(i, j);
        for(int k = 0; k < 8; k++)
        {
            int ni = i + dx[k];
            int nj = j + dy[k];
            if(s.s.find( make_pair(ni, nj)) != s.s.end() )
                dfs_set(ni, nj, s, cur_set);
        }
    }
}

pixel_set make_one_component(pixel_set &s)
{
    vector<pixel_set> sets;
    pixel_set cur;
    memset(c, 0, 200*1000);
    for(set<pair<int, int> >::iterator it = s.s.begin(); it != s.s.end(); it++)
    {
        int x = it->first;
        int y = it->second;
        if(!c[x][y])
        {
            dfs_set(x, y, s, cur);
            cur.calculate_info();
            if(cur.s.size() > 10)
                sets.push_back(cur);
            cur = pixel_set();
        }
    }
    if(sets.size() == 1)
        return sets[0];
    return sets[1];
}

vector<digit> split_image()
{
    vector<pixel_set> sets;
    vector<digit> res;

    pixel_set cur;

    for(int j = 0; j < width; j++)
        for(int i = 0; i < height; i++)
            if(image[i][j] >= 2 && !c[i][j])
            {
                dfs(i, j, 2, cur);
                cur.calculate_info();

                sets.push_back(cur);
                cur = pixel_set();
            }
    //cerr << "found " << sets.size() << " sets\n";

    bool *merged = new bool[sets.size()];
    memset(merged, 0, sets.size());

    vector<pixel_set> blacks;
    for(size_t i = 0; i < sets.size(); i++)
        if(!merged[i])
        {
            cur = sets[i];
            for(size_t j = i+1; j < sets.size(); j++)
            {
                if(can_merge(cur, sets[j]))
                {
                    cur.merge(sets[j]);
                    merged[j] = 1;
                }
            }

            if(cur.s.size() > 10)
                blacks.push_back(cur);
            merged[i] = 1;
        }

    delete[] merged;

    for(size_t i = 0; i < blacks.size(); i++)
    {
        memset(c, 0, 200*1000);
        pixel_set s = blacks[i];
        bfs_add(s, 5);
        res.push_back(digit( make_one_component(s) ));
    }

    return res;
}

digit scale(digit d, int w, int h)
{
    digit res;
    res.width = w;
    res.height = h;

    for(int i = 0; i < w; i++)
        for(int j = 0; j < h; j++)
        {
            res.mat[i][j] = (d.mat[i*d.width/w][j*d.height/h] > 0 ? 3 : 0);
        }

  	for(int i = 0; i < d.width; i++)
        for(int j = 0; j < d.height; j++)
        {
            int ii = (double)i * w / d.width;
            int jj = (double)j * h / d.height;
            if(d.mat[i][j] == 3)
	            res.mat[ii][jj] = 3;
        }
    return res;
}

//---------------------------------------------------------------------------------------------------------------------------------------
//                                                       PARSING DIGITS
//---------------------------------------------------------------------------------------------------------------------------------------

struct Neuron{
    int *w;
    int s;
    int m;
    Neuron(){}
    Neuron(int m) : m(m)
    {
        w = new int[m];
        s = 50;
    }
    int transfer(vector<int> x)
    {
        return activator(adder(x));
    }
    void initWeights(int n)
    {
        for (int i = 0; i < m; i++) {
            w[i] = rand() % 10;
        }
    }
    void changeWeights(int v, int d, vector<int> x)
    {
        for (int i = 0; i < m; i++) {
            w[i] += v*d*x[i];
        }
    }
    int adder(vector<int> x)
    {
        int nec = 0;
        for (int i = 0; i < m; i++) {
            nec += x[i] * w[i];
        }
        return nec;
    }
    int activator(int nec)
    {
        if (nec >= s) return 1;
        else return 0;
    }
};

struct Perceptron{
    Neuron *neurons;
    int n, m;
    Perceptron(int n, int m) : n(n), m(m)
    {
        neurons = new Neuron[n];
        for(int i = 0; i < n; i++)
            neurons[i] = Neuron(m);
    }
    vector<int> recognize(vector<int> x)
    {
        vector<int> y(n);

        for (int j = 0; j < n; j++) {
            y[j] = neurons[j].transfer(x);
        }

        return y;
    }
    void initWeights() {
        for (int j = 0; j < n; j++) {
            neurons[j].initWeights(10);
        }
    }

    int teach(vector<int> x, vector<int> y)
    {
        int d;
        int cnt = 0;
        int v = 1; // скорость обучения

        vector<int> t = recognize(x);
        while (t != y) {

            // подстройка весов каждого нейрона
            for (int j = 0; j < n; j++) {
                d = y[j] - t[j];
                neurons[j].changeWeights(v, d, x);
            }
            t = recognize(x);
            cnt++;
        }
        return cnt;
    }
};

//---------------------------------------------------------------------------------------------------------------------------------------
//                                                       MAIN PROGRAM
//---------------------------------------------------------------------------------------------------------------------------------------

/*int a[][18*24]={{-29, -185, 10, 36, 174, 196, 173, -100, 116, 31, -52, -205, -158, 22, -11, -215, 11, -370, -137, 132, -32, 85, -142, -51, 179, -94, -20, 9, -250, -85, -215, 0, 40, 80, -72, 8, 76, 246, -34, -26, -174, 10, 95, -3, 147, -89, 43, -83, -66, 41, -74, -212, -25, -14, -71, -24, 15, 7, -81, -4, 81, -34, 45, 2, -7, -54, -138, 83, -92, -37, 111, 119, 63, -51, -63, -240, 117, 7, -87, 122, 42, 75, 19, -116, -72, -39, 45, 57, 73, -157, 64, -9, -90, -99, -107, 212, 35, 104, -18, 121, -27, 68, 147, 38, 121, 6, 40, 132, -84, 30, -185, -40, 22, -106, 57, 9, 43, 0, 40, 8, 162, 96, -71, 78, 20, 91, -67, -152, 121, -85, -96, 0, 7, -68, -57, 33, -89, 115, 142, 82, 58, 190, 57, 204, 140, 246, -12, 29, 22, 59, -55, 39, -153, -96, -105, -103, -6, -134, -13, -37, 207, 372, 97, 88, 158, 63, 125, 61, -7, 15, -56, -129, -8, -33, -57, -197, -61, 3, 155, 61, 40, 136, -153, 42, 95, 86, -81, -52, -35, -308, 50, -30, -10, -21, -95, -71, 99, 130, 45, 82, -21, -135, 89, 70, -69, -51, -162, -243, -73, -51, -110, -118, -32, 138, 342, 104, 110, 173, -174, -3, -18, -50, -71, 27, -112, -207, -40, -85, -156, -75, -127, -74, 138, -10, 6, 67, -34, -31, -70, -67, -13, 6, -210, -119, 47, -38, -64, -160, -120, -11, -163, 16, 8, 47, 146, 42, -34, -15, 38, 60, -27, 23, -77, -66, -239, -103, 5, -2, -98, -6, 154, 222, 182, 78, -1, -154, -42, -15, -123, -39, -8, 47, 25, -51, -25, -234, -7, -124, 80, 200, 239, 243, 19, 61, -34, 50, -81, 37, -20, 18, -96, -33, -103, -139, -157, -100, -125, 6, 130, 41, 119, 117, 92, 111, 129, 27, -30, -18, 115, 120, 57, -203, -96, -69, 72, -88, 145, -9, 6, 122, 59, 74, 203, 202, -5, 112, 48, 115, 33, -75, -165, -25, 257, 138, 71, -112, 47, 92, -117, -39, -104, -70, 21, 29, -29, 25, 69, -4, 84, 76, -28, -99, 99, 63, 16, -3, -37, -45, -96, -5, 121, -3, 59, 21, -12, 114, 112, -46, -289, 206, 208, -67, 44, 130, -22, -109, -92, -62, -74, -38, 115, -44, -118, 129, 222, 78, -224, 49, -31, -152, -117, -87, -57, -82, -4, -16, -124, -75, -168, -152, -7, -57, -119, -148, -198, 88, 63, -160, 58, -110, 69, 62, 101, 144, 41, -11, -187, -46, -31, -63, -278, -75},
{-107, -285, -201, -299, -3, -186, -46, 6, -230, -174, -153, -68, -64, -6, 471, 250, 299, 196, 111, 212, 246, 118, -151, 47, 37, -102, -184, -42, 202, 217, -40, -386, -204, -154, -93, 520, 0, -33, -309, -74, 0, 5, 60, 115, -48, 125, -233, -99, 80, -66, -250, 55, -200, -194, -115, -2, 15, -37, 66, 69, -55, -175, -9, 18, 19, -59, -10, 41, -47, 30, 2, 33, -189, -243, 97, 340, -2, -107, 90, -156, 222, 112, 47, 27, 258, 25, -166, 96, -135, 66, -73, -109, 41, 61, -62, -189, -124, 177, 153, 66, 82, 73, 64, 104, 78, 61, -35, 78, 69, -37, -177, -68, 338, 168, 406, -5, 53, 45, -34, 225, 255, -31, 3, -192, 111, 223, 78, 16, 13, -113, -216, 13, -84, 68, 187, 134, 34, 252, 143, 88, -18, 111, -153, -313, 120, 35, -54, 65, -180, -244, 52, 37, -53, 23, -2, 138, -85, 117, 139, 165, -347, 53, -182, 137, 170, -73, 81, -127, 370, -119, -95, 107, 21, 38, -197, 48, -99, 16, -121, -84, -66, -145, -99, -20, 117, -29, -47, -41, 147, -105, -117, -97, 92, 62, -47, -36, -45, 28, 101, -19, -97, 38, 160, -56, 22, 182, 71, 168, -60, 33, 9, -63, 200, -175, -163, 396, -14, -442, 68, 14, 189, 28, 15, 47, -154, 72, -110, -96, 66, -256, -147, -314, -44, 57, -341, -286, -187, -195, 68, -19, -212, 100, -21, -102, -127, 278, -40, 76, 177, -120, 106, -53, -461, -533, -6, -120, 120, 94, -89, -17, 197, 30, -3, -22, -35, -56, 98, 111, 150, -166, -500, -161, -19, 291, 11, -63, 85, 67, 46, 39, -5, -240, -69, -99, -522, -47, 93, 225, -281, -310, -501, -33, 19, -53, -22, 68, 144, 35, 71, 63, 117, 248, -79, -53, -71, -238, 118, -23, -54, 38, 26, -139, -153, 68, -105, -112, 30, -43, -12, 28, -157, -177, -88, -265, 23, 81, -158, 0, -160, -10, 41, -101, -51, 39, 157, -78, 180, -104, 66, -279, -133, -40, 383, -9, -200, -46, -48, 223, 108, 129, 24, 214, 53, -175, -106, -198, -17, -25, 271, -187, -372, 120, -141, -204, -93, -216, -73, -29, -66, -42, 26, -351, 56, -109, -78, 222, 106, 203, -57, -240, 61, -6, -62, 20, -286, -213, -290, -181, -97, 43, -33, 174, 103, -124, 145, 341, -94, -471, 89, -228, -19, 29, -117, -123, 156, 96, 43, 170, -30, 11, 197, -228, 311, 360, -27, -125, 43, 250, 285, -31, -48, -85, 23, 143, -19, -62, 120, -17, 128, 148, 304, 249},
{-51, -45, -16, -17, 93, 27, -45, 2, 23, 41, 42, 31, 36, 61, 21, -84, -19, -182, -68, -48, 24, -13, -42, 15, -70, -52, 45, -13, -26, -71, -60, -6, -66, -42, -70, -95, -36, -10, 35, -21, -8, 15, -88, -6, -32, -57, -37, -39, -40, -3, -41, -66, -55, -62, -68, -16, -34, -12, -13, -39, 14, 14, -17, -66, -23, -11, 14, 37, 15, 0, 38, 36, 16, -45, 23, 45, -38, -44, 16, 14, -1, -25, 18, 21, 44, -1, 5, 34, 23, 6, -14, 10, -39, 14, 4, -44, -67, -24, -9, 5, -24, -64, -47, -70, -24, -36, 12, 83, -17, 3, -51, -3, 5, -14, 68, -36, -5, -55, -59, -101, -45, -41, -27, 14, 56, 83, 9, -36, -45, 11, -15, -18, 42, 12, 30, 21, -74, -34, -45, 1, 13, 5, 96, 54, 33, 75, 12, 28, 16, -8, 30, 21, -20, 26, -5, -11, 18, 26, -22, 54, 55, -8, -25, -4, 3, 40, 63, -19, -76, -31, -41, -44, 31, 35, -6, -3, 22, 120, 133, -9, -12, 9, -66, -28, 10, -31, 41, 53, -59, -61, -44, -20, 48, 50, 41, 52, 80, -31, 15, -6, -13, -18, -1, -9, -3, -16, -72, -66, -85, -18, -4, -4, 57, 44, 13, -4, 4, -37, -70, -107, -67, -33, -22, -6, -28, -51, -46, -7, -22, 0, -16, -40, 20, -89, -21, -26, -79, -44, 5, 13, 15, -33, -15, -37, 26, 27, -3, -33, -84, -137, -67, -85, -67, -49, -86, -11, 26, 33, 58, -3, -40, -3, 11, -48, -61, -10, -71, -43, -76, -85, -74, -72, -46, -11, 7, -1, 34, -5, -12, 66, 3, -72, -111, -54, 11, -54, -20, -96, -47, -97, -81, 12, 88, 91, 52, 27, -4, -55, -5, 22, -23, 15, -65, -30, 32, -58, -134, -52, -67, 24, 74, 64, 69, 15, 15, -55, 30, -9, 43, 36, -66, -23, -5, -24, -36, 32, 56, 83, 60, 117, 23, 57, 34, 15, -12, 4, -15, -9, 29, 3, 3, 28, -28, -13, 74, 31, 35, 57, -6, 56, 7, 6, 9, 20, -7, 19, 38, -17, -11, -2, -13, -19, 0, -5, 11, 22, 47, 46, 46, -18, -16, 23, -11, -21, 12, 1, 31, 26, 11, 0, 26, -1, -19, 22, 29, 8, 65, 108, 15, 61, 46, 30, -3, -16, 44, 75, 84, 3, -38, -73, -80, -49, -45, -23, 4, -2, 18, 47, 52, 84, 9, 56, 93, 2, 41, 42, -24, -8, -28, -33, -63, -40, -20, 0, 10, 45, 9, 34, 79, 95, 74, 4},
{-273, 45, 161, 31, -15, 4, -14, 125, 21, -59, 113, 98, -7, -28, 47, -155, 66, -57, 31, 102, 11, 49, -123, 51, 89, -71, -75, -32, -43, -35, -138, -39, -140, -82, 44, -138, 1, 11, 52, 61, 81, 14, 10, -8, 21, -63, -23, -6, -75, -46, -75, -110, -85, -105, -7, -94, 33, 112, 135, 59, 19, 38, 111, -54, -51, 93, -4, 69, -13, -154, -26, -11, 44, 36, -137, 2, 80, -134, 10, 6, -41, 104, 44, 109, -3, 114, 112, -25, -147, 158, -49, -25, -123, -102, 6, 24, -3, -7, -58, -49, 48, 105, 60, 14, 72, 66, 61, 116, -4, 11, -112, 54, -62, -44, -148, 44, 121, -19, -64, -7, -104, -38, 42, 30, 59, 253, -33, -18, -34, 26, 36, -98, 64, 69, 103, -3, 169, 54, 4, 24, 24, 41, 205, 139, 72, 16, -93, -130, -198, -166, -7, -60, -79, -5, 15, -50, 96, 37, 68, -126, -18, -25, -173, -202, -282, -120, -145, -87, 10, -47, 15, 33, -24, -71, -81, -3, -93, -28, -31, 3, -148, -204, -105, 57, -191, -31, 12, 29, 88, -118, -62, -63, -114, -65, -39, -44, -109, -305, -141, -74, -207, -36, -66, 9, -30, 185, 146, 58, 58, 45, -106, -69, -42, -154, -62, -240, -162, -129, -175, -31, -197, 58, 39, -35, -63, -18, -98, -40, 36, -66, 2, 62, 13, 113, -90, -114, -94, 29, -90, -229, -65, -63, 139, -21, -86, -40, -85, -3, -36, 141, 10, 185, 57, 107, -34, 30, -159, -74, -82, -148, -35, 93, -52, -73, 79, 48, 61, 129, -110, 61, -105, 90, 97, 46, -150, -223, -132, -138, -230, -163, 60, -14, -63, 122, 165, 25, 133, 75, 65, 14, 30, -119, -33, -23, -16, -4, -12, 109, 2, 2, -55, 60, 22, 1, 149, 90, 68, -45, -63, -78, -57, 44, -5, -70, -221, -28, 21, 10, 44, 86, 36, -17, 13, 13, 44, 51, 28, -19, 94, 37, -43, 51, 111, -39, 48, 65, 72, 150, -22, -13, 13, -54, 96, 67, -22, 6, 28, 46, 194, 119, 79, -3, -145, 49, -45, 76, 73, 182, 85, 64, 119, 5, -15, 10, 57, 44, 55, -114, -64, -1, -18, 41, 48, -70, 10, 147, 69, 47, 219, 49, -47, 12, 2, 33, 21, 12, 55, -37, -33, -86, -39, -60, 19, 25, -60, -63, 57, 140, -37, -36, 19, 50, 36, 94, 112, 6, -20, -22, -196, -133, -6, -66, -91, -203, 20, -21, 27, -43, -22, 36, -38, -33, 3, -2, -123, -59, -99, -127, -99, -101, -246, -298},
{-17, -19, -12, -20, -16, 15, 17, -5, -16, -27, 6, -10, -75, -30, -15, -24, -56, -63, -16, -13, -22, 0, 31, 16, -11, -14, -18, -41, -18, -2, -53, -23, 8, 10, -34, -66, -19, -11, -2, 10, -32, 3, -34, 2, -21, -45, -31, -5, -52, -1, 44, -6, -47, -50, -39, -29, -38, -14, 6, -71, -32, -7, -26, -19, -21, -14, -29, -4, 44, 25, -59, -89, -34, -33, 6, -15, -60, -21, 6, -7, -5, 0, 8, 4, -18, -9, 5, -12, 4, -21, -21, -30, -9, -3, -36, -49, -28, -17, -18, -4, -21, -12, -10, -10, 7, 14, 39, -48, -58, -28, 14, -66, -19, -1, -4, -10, 3, 24, 31, 23, 29, 9, 12, -9, 62, -6, -66, -21, -62, -6, -32, 9, -10, -22, -6, 10, 20, 42, 7, 29, 16, -13, 56, -9, -73, -66, -52, 12, 23, 2, 12, -19, -11, 23, 32, 38, 29, 29, 22, -17, 36, -9, -82, -24, -21, 23, 6, -9, 15, 24, 20, 1, 28, 16, 35, 36, 15, 15, 22, -25, -24, -33, 42, 22, 23, 10, 24, 12, 2, -23, 6, 3, 26, -5, 16, 28, -27, -9, 36, 3, 3, 21, 26, 27, 22, -13, -5, -24, -9, 12, 20, 11, 18, 27, -13, -13, 43, 57, 36, 35, 53, 33, -9, -24, 2, 8, 7, 14, 13, 34, 36, -11, -20, -5, 77, 86, 61, 53, 65, 19, 2, 15, 29, 13, 7, 15, 9, 22, 10, -5, -23, -31, 76, 81, 46, 84, 61, 50, 31, 41, 27, 20, 28, 23, 14, 19, -10, 2, -48, -49, 18, 11, 5, 1, 26, 34, 29, 38, 34, 6, 30, 19, -17, 3, 26, 2, -47, -35, -39, 12, -15, 7, -9, -51, 7, -4, 14, 6, 6, -12, -46, -30, -31, -35, -15, -9, -5, 17, -20, -14, -27, -13, 6, 14, 40, 1, 6, -6, -41, -7, -19, -48, -26, 5, 4, 33, -36, -18, -26, -24, -22, 8, 28, 23, -18, -8, -26, -23, -57, -64, -39, -14, -27, -40, 21, 9, -22, -20, -38, 16, 6, -6, -42, -14, -8, 3, 6, -29, -37, -29, -6, -32, -24, -24, -60, -45, -30, -23, 18, 14, -33, -27, -4, 9, 8, 32, -30, -27, -70, -71, -75, -69, -82, -22, -49, -38, 9, 2, -8, -30, -33, -14, -21, -6, -7, -20, -64, -29, -86, -75, -20, -14, -24, -9, -15, -9, 29, 38, 39, 18, 1, 17, 21, 18, -43, -44, -69, -58, -46, -24, -15, 14, -22, -2, 26, 40, 32, 40, 42, 47, 12, 10},
{89, 154, 135, 150, 255, -6, 323, 232, -75, 69, -322, -161, -108, -1, -95, 236, 291, 191, -168, -182, -184, -110, -14, -246, 236, -7, 159, -39, -1, -206, -276, -45, -19, 209, 132, -45, -137, -61, 71, 202, -135, -12, -159, -27, 129, -72, -268, -173, -251, -201, -139, -74, 5, -2, 104, -7, 57, 74, 75, 81, -265, 326, 23, -1, -46, -142, -8, 44, 112, 6, 185, 287, 62, -38, -98, 19, -15, 119, 54, -9, 244, -129, 25, -13, -111, -134, -154, -213, -190, -282, -53, 246, 56, -125, -60, -12, 10, 70, -15, 248, -97, -207, -88, -114, -90, -305, -185, -401, 36, 26, 125, -87, 59, 339, 174, -15, -70, -106, -24, 115, 18, 185, 117, -131, -73, -593, -69, 25, 57, 66, -175, 33, -28, 26, -136, -57, -268, 94, 123, -166, -286, 8, -384, -198, 65, 39, 217, 9, 242, 160, 175, 179, 140, -17, -192, -178, -51, 11, -57, 7, -81, -99, 47, -83, 108, -97, -21, -70, 184, -56, 47, 167, 67, -42, 81, -98, -29, -12, 201, 162, 240, -276, -221, -201, -228, -161, 36, -88, -69, -32, -81, -232, 109, -74, 121, 21, 24, 61, -51, -189, 192, 171, 304, 87, -211, -90, 19, 2, 73, -6, 87, -20, 186, -12, 83, -185, -76, -44, 103, 37, 223, -165, -206, -144, 131, 117, 0, 22, -211, -19, 138, 20, -54, -178, -196, -156, -97, -250, 97, 31, 40, -90, -204, -197, -111, -64, 174, 53, -24, -31, 52, 232, -204, -91, -97, -96, -145, -178, 72, -23, 22, 3, 252, -49, 147, 347, 297, 87, -32, 384, -582, -110, -257, -226, -158, 101, 129, -7, -270, 298, 129, 22, 147, -76, 71, -252, 186, 105, 12, -141, -29, -44, -5, 139, -118, 250, 189, 33, 136, 12, -9, 68, -90, -11, 191, 172, 140, 99, -42, -47, 64, 96, 22, -69, -245, -60, 121, 65, -33, 125, -30, 74, 39, -84, 91, -165, 83, -29, -109, 42, -51, 60, -66, 83, -66, 117, -21, 116, 253, 177, -77, 105, 358, 57, 212, -57, 27, 81, -19, 196, -67, 131, -20, -22, 55, 47, -157, -124, 23, 29, 66, 93, -184, -90, -55, 155, -93, -67, -40, -86, -100, -192, -218, 78, 58, -62, -10, 24, 238, 268, 91, 12, 226, 147, -9, 37, 261, -187, -94, 38, -22, -175, -111, -97, 142, -229, -16, 68, -107, -160, -210, 13, -36, -114, -47, -43, -42, 83, -39, 23, -8, 144, 122, -166, -214, 173, -133, 6, 135, -124, 52, 35, -16, -54, -56, -223, -119, -116, -298, -244, -183, -135},
{-55, -189, -127, -158, -42, -51, -146, 5, 94, -44, -33, -131, -76, 14, -133, 35, 67, -150, -137, 94, -165, -104, -2, 66, -11, 44, -150, -193, -137, -36, -113, -191, -35, -5, -18, -97, 83, -9, 49, -37, -73, -195, 106, -150, -42, 14, -30, -122, -93, -133, -134, -19, 46, 85, -38, -30, 14, -142, -162, -22, -3, -119, -96, -100, -78, -145, 15, -11, -51, -220, 155, -64, 52, 73, -71, -248, -152, -147, -71, -26, 91, -28, -200, -3, -46, 80, -117, -274, -242, 7, -23, 69, -245, -174, 20, 58, -15, 125, -78, 11, -73, -165, -3, -55, -39, 49, 147, 117, 65, -43, -115, 115, -29, -186, 97, -78, -14, 46, -7, -176, -46, -61, 50, 247, -11, -87, 105, 69, -96, 197, 37, -132, 39, -38, -79, 74, 71, -216, -134, -90, -81, -559, -194, -381, 156, -35, 67, -10, -114, -107, 26, -11, 84, 145, 149, 9, -14, -56, -245, -176, -299, -416, 216, 284, 169, 12, -66, 38, -49, -159, 0, 65, -118, -84, -69, 21, -27, 19, 110, -286, 182, -89, -60, -39, 21, -17, 116, -47, -66, -4, 24, 81, 110, 28, -2, 35, 36, 69, 74, -114, 67, 2, 135, 16, -17, 70, 16, -44, -72, 105, 15, -18, 55, 135, 56, 192, 204, 183, 26, 144, -96, 60, 146, 139, -36, -51, -92, -15, 5, -122, -181, 21, 41, 32, 139, 279, 111, 72, 48, 49, 56, -53, -102, 53, -5, 6, 45, -8, 75, -6, 23, -214, -35, 207, 54, 82, -42, 165, 4, 126, 90, 25, 48, -65, 64, -123, -26, -22, -53, 4, 186, 183, 214, 53, 48, 80, 24, -149, -192, -66, -150, -104, -42, -71, -163, -1, -80, 229, 154, 177, 37, 27, 50, 8, 31, -165, -237, -17, 160, 3, 88, 7, 11, -71, 137, 13, -16, 3, -59, 55, 73, 87, 53, -36, -50, -63, 78, 193, 118, 94, 56, -140, 42, -155, 104, 3, -57, -54, -50, 72, 60, 30, 39, -56, -4, -37, 171, 64, -29, 43, 150, 3, 103, -2, 34, 56, -26, 20, 223, -77, 191, 71, 103, 10, 110, 54, 91, 153, 81, -39, -172, 33, 144, 205, 179, 24, 55, 45, -11, -56, -196, 96, 92, 42, -27, 139, 87, 21, 132, -108, 135, -3, 72, -37, 69, 72, 117, -141, -95, -136, 42, 37, 7, -12, 240, 186, -5, 59, 45, 22, 55, 107, -60, -60, 8, -30, 63, 16, -36, -1, -76, 44, -30, -82, -225, 37, -62, 95, -33, 147, 21, -52, 66, -180, -18, -68, -263, -188, 42, 98, -181, -126},
{210, 249, 312, 325, 129, -98, 25, 151, -157, 214, 1, 239, -290, -13, -253, -320, -108, 231, 246, 141, -21, -265, -102, 102, 55, 15, -37, 240, 24, -45, -103, -79, 70, -248, 67, 283, -28, -165, 91, 204, -93, 112, -51, 8, -100, 148, -33, -36, 71, -301, -17, -698, 370, 71, 34, -48, 297, 77, 199, -8, 103, 30, 164, -84, -51, 98, -51, 25, -169, 132, -20, 173, -53, -147, -121, 121, -135, 139, -182, -74, -57, -132, 189, -29, -7, 119, 237, 153, -322, 127, 234, 59, -274, 22, 198, 139, 6, -93, 145, -76, 36, 170, -150, -49, -115, -34, 466, 22, 148, -257, 173, 66, -63, -120, -328, -32, 75, 33, 2, 52, -53, 29, -116, 117, -213, 39, 113, -83, -123, 81, -2, -3, -70, 8, -63, -42, 56, 108, 278, 67, -213, 162, 159, 234, -24, -131, -98, -115, -94, 11, -3, 77, -4, -81, 54, 71, 17, 112, -37, 32, -218, 15, 137, -206, -280, -39, -43, -90, -181, 56, 0, 33, -31, 24, -34, -32, -61, -7, 96, 192, 281, -96, 209, -173, -66, 53, -52, -113, -82, -117, 81, 128, -109, 109, -126, -22, 12, 25, 193, -38, 42, -181, 12, 92, 40, -39, 14, 124, 63, -8, -88, 231, 90, 136, 193, 116, 141, 117, -80, 126, -331, 61, -33, 25, 1, 126, 152, -32, -89, -121, -98, 28, -196, -3, 138, 12, 180, -65, -144, 114, -49, -24, -137, 27, -187, -252, 43, -79, -48, 62, -96, 110, -53, -75, 29, 55, -259, 14, -16, 99, 51, -22, 104, 199, 75, -24, 153, -170, 48, 141, -58, 49, -261, 23, 77, 37, -201, 132, 18, -89, 9, 178, -12, -160, 9, 40, -245, 303, 107, 243, 58, -75, -97, 294, 7, 120, -20, -89, 147, 12, 49, -121, 31, -183, -129, 61, -113, -34, 222, 235, 199, 24, 153, -72, -54, -26, -205, -19, 32, -112, -81, -40, -17, 220, 78, 105, -66, -26, 51, 186, 73, -74, -19, 34, -180, -238, 99, 72, -235, -86, 37, 342, -17, -66, -26, 177, -48, 169, 58, 161, 271, -48, -131, 76, 10, 59, -202, 4, 137, 83, 49, -54, -82, -105, 4, -136, 98, 24, -23, 136, -20, 123, 180, 82, -4, -453, -187, 55, 64, -29, -222, -56, -72, -123, -152, -45, 17, 49, -88, -51, -69, -4, -239, -323, 436, 209, 115, -67, -18, -94, -158, 57, -360, -134, 37, -251, -353, -249, -157, 100, -21, -421, -505, -264, 177, -225, 129, 25, -159, -71, -86, -81, 66, -28, 65, 90, -112, -206, 227, -219, -526, -429},
{179, 458, -137, 57, 252, -386, 233, 202, -10, -86, 103, -85, -103, -91, -117, 0, -348, 135, -621, -70, -161, 78, -148, -459, 91, 321, -68, -549, -390, -261, -194, -339, -95, -117, 136, -793, 308, -213, -175, 265, -436, -17, -59, -2, -99, 7, 37, -139, -262, -126, -223, -127, -258, 217, 270, 161, 102, 110, 75, -169, 282, 270, -195, -238, -121, 168, 98, -153, -188, -279, 27, 18, 14, 380, 79, -110, -143, -65, 143, -468, -175, -165, -153, -295, -128, -262, -145, -117, -123, 235, 3, -183, -196, 323, 68, 97, 189, 278, 145, -235, 33, 49, 204, 180, 188, -19, -265, 303, -132, 241, 190, 34, -478, 34, -201, 163, -479, 150, -342, -195, -98, 95, 146, 216, 372, 124, -43, 9, -17, 12, -241, 264, 362, -196, -264, 211, 78, -110, -70, 197, 72, 387, 529, 111, 77, 44, 113, -123, 6, 204, 331, 190, 232, -131, 130, 41, 48, 8, -147, 212, 209, 87, 607, 264, -254, 279, 264, 334, 213, 202, 164, -96, -133, -151, 208, 20, 34, -5, 180, 40, -603, -405, -462, -58, 453, -11, -244, -225, 258, 164, 159, 188, -440, -140, -239, -116, 33, -675, -13, -378, -224, -257, -277, -237, 260, 49, -32, 101, 286, -217, -214, -204, -229, -552, 172, -720, -7, 501, -47, 434, 219, 70, -197, 81, 508, 250, -136, -69, -296, -75, -165, 5, -172, -449, -506, 260, 5, -138, 188, 524, 299, -217, 68, -1, 68, -341, 60, 94, 48, -159, -1, 327, -63, 124, 61, 194, 225, 96, 153, 134, -33, -166, 105, 241, -32, -292, 21, 76, -31, -48, 261, -173, -231, 447, 292, -49, 60, -99, -108, -53, 411, -176, -234, 117, -351, 55, 13, 103, -10, 273, 447, -19, -205, 239, 182, -582, -174, 5, -395, -175, 204, 291, -48, -27, -71, -116, 155, 138, -107, 12, 129, -14, -404, -78, 183, 316, 30, 57, 121, -36, -295, 120, -67, 57, 58, -210, -101, -376, -75, -302, 110, 64, -3, -181, -79, -66, -170, 57, 208, 265, -17, -135, 308, -145, -363, 150, 170, 117, 193, -138, -138, 231, 66, 116, 54, -5, -175, -120, 250, 172, 135, 236, 8, 55, -191, 150, -264, 93, 9, -242, 28, -120, 113, -42, 35, -147, 23, 132, 145, 55, -347, -161, 320, 171, -81, 10, 200, -273, -351, -80, 352, 190, 150, -292, 321, 93, 373, -35, 101, 449, -373, -49, -160, -76, 222, 25, -309, 159, -386, 85, 78, 92, 288, -156, -466, -252, -93, -57, 249, 91, 322, -138, 151, 29, 14, -110, -171, -35, -101, -150, -354, -725},
{-81, -91, -7, 28, -39, -41, 17, 56, 67, 11, -6, 13, 23, 16, -71, -97, -102, -158, -85, 94, 19, -73, -71, -58, 11, 16, 12, 19, -81, -8, -49, -40, -64, -5, 29, -138, 21, 52, 69, -44, -68, 0, -29, -6, 3, -35, 23, -64, -5, -50, -73, -2, 7, -117, 12, 103, 123, 66, -116, -26, -25, -26, -49, -21, -10, -57, -76, -60, -54, 59, 93, -19, -5, 57, -15, 7, -51, -36, -10, -39, -4, 9, 18, -22, -9, 93, 56, 102, 102, 54, 6, 68, -39, 66, 26, -10, 48, -19, -15, -47, 42, 19, -27, -41, 30, 35, 90, 162, -68, 24, -8, 5, 75, 27, 2, 2, -86, -45, 33, 65, 43, -21, -7, -20, 84, 116, 15, -34, 4, -21, 47, 60, -22, 12, -45, -30, 59, -15, -36, 72, 61, 48, 90, 153, 150, 30, 17, -25, 22, 28, -13, 3, -9, -89, -50, -54, 16, -68, 18, 4, 60, 118, 113, 2, 8, -19, -2, 61, 74, 4, 8, -33, -39, -52, -3, -25, -36, 30, 55, 119, 121, 61, 10, -48, 14, 36, 30, 57, 44, -72, -6, 4, -23, -31, -13, 53, -20, 167, -60, 99, 23, -44, 41, 37, 46, 24, -49, -104, -46, -37, -21, 22, 69, 54, 33, 57, -48, 43, 83, -1, 69, 50, 52, 63, 7, 41, -5, -30, -26, -24, -22, -8, -99, -72, -15, 5, 12, 34, 16, 28, 67, -4, 63, 56, 37, 4, -9, -10, -40, 43, 21, -44, -187, -179, -11, -10, 46, 105, 42, 37, 18, 69, 23, 45, 28, 0, 44, 13, -33, 56, -297, -194, -4, 105, 112, 62, 111, 79, 30, 44, -48, -32, 59, 37, 18, -1, 43, 97, -316, -193, -225, -221, -122, -12, -161, -9, 33, 74, 36, -22, -34, 23, -17, -82, -8, 41, 36, 53, 9, 4, -56, 13, -102, -41, 21, 14, -68, 3, 55, -6, 41, 12, 8, 42, 11, -4, -15, 23, -41, -40, -63, 36, -4, -2, 9, 36, 68, -33, -46, 22, 60, 14, 35, 87, -26, -24, -4, 35, -37, 25, -22, -47, -43, 30, 5, -3, -62, 24, 38, -37, -50, 12, -22, 35, -24, -27, 17, 3, -27, -7, -122, 9, -12, -67, -44, 4, -27, -42, -4, -1, -3, -39, -24, -6, -11, -27, -14, -85, -64, 26, 9, -85, -75, -34, -7, 12, -54, 102, 56, 59, 11, -50, -78, -34, -6, -91, -45, -6, -91, -124, -103, -94, -24, -123, 13, -27, -107, -35, -40, -85, -55, -68, -69, -85, -101, -99, -81, -89, -117, -96, -190, -131},
};*/

int a[][18*24]={{-29, -185, 10, 36, 174, 196, 173, -100, 116, 31, -52, -205, -158, 22, -11, -215, 11, -370, -137, 132, -32, 85, -142, -51, 179, -94, -20, 9, -250, -85, -215, 0, 40, 80, -72, 8, 76, 246, -34, -26, -174, 10, 95, -3, 147, -89, 43, -83, -66, 41, -74, -212, -25, -14, -71, -24, 15, 7, -81, -4, 81, -34, 45, 2, -7, -54, -138, 83, -92, -37, 111, 119, 63, -51, -63, -240, 117, 7, -87, 122, 42, 75, 19, -116, -72, -39, 45, 57, 73, -157, 64, -9, -90, -99, -107, 212, 35, 104, -18, 121, -27, 68, 147, 38, 121, 6, 40, 132, -84, 30, -185, -40, 22, -106, 57, 9, 43, 0, 40, 8, 162, 96, -71, 78, 20, 91, -67, -152, 121, -85, -96, 0, 7, -68, -57, 33, -89, 115, 142, 82, 58, 190, 57, 204, 140, 246, -12, 29, 22, 59, -55, 39, -153, -96, -105, -103, -6, -134, -13, -37, 207, 372, 97, 88, 158, 63, 125, 61, -7, 15, -56, -129, -8, -33, -57, -197, -61, 3, 155, 61, 40, 136, -153, 42, 95, 86, -81, -52, -35, -308, 50, -30, -10, -21, -95, -71, 99, 130, 45, 82, -21, -135, 89, 70, -69, -51, -162, -243, -73, -51, -110, -118, -32, 138, 342, 104, 110, 173, -174, -3, -18, -50, -71, 27, -112, -207, -40, -85, -156, -75, -127, -74, 138, -10, 6, 67, -34, -31, -70, -67, -13, 6, -210, -119, 47, -38, -64, -160, -120, -11, -163, 16, 8, 47, 146, 42, -34, -15, 38, 60, -27, 23, -77, -66, -239, -103, 5, -2, -98, -6, 154, 222, 182, 78, -1, -154, -42, -15, -123, -39, -8, 47, 25, -51, -25, -234, -7, -124, 80, 200, 239, 243, 19, 61, -34, 50, -81, 37, -20, 18, -96, -33, -103, -139, -157, -100, -125, 6, 130, 41, 119, 117, 92, 111, 129, 27, -30, -18, 115, 120, 57, -203, -96, -69, 72, -88, 145, -9, 6, 122, 59, 74, 203, 202, -5, 112, 48, 115, 33, -75, -165, -25, 257, 138, 71, -112, 47, 92, -117, -39, -104, -70, 21, 29, -29, 25, 69, -4, 84, 76, -28, -99, 99, 63, 16, -3, -37, -45, -96, -5, 121, -3, 59, 21, -12, 114, 112, -46, -289, 206, 208, -67, 44, 130, -22, -109, -92, -62, -74, -38, 115, -44, -118, 129, 222, 78, -224, 49, -31, -152, -117, -87, -57, -82, -4, -16, -124, -75, -168, -152, -7, -57, -119, -148, -198, 88, 63, -160, 58, -110, 69, 62, 101, 144, 41, -11, -187, -46, -31, -63, -278, -75},
{-107, -285, -201, -299, -3, -186, -46, 6, -230, -174, -153, -68, -64, -6, 471, 250, 299, 196, 111, 212, 246, 118, -151, 47, 37, -102, -184, -42, 202, 217, -40, -386, -204, -154, -93, 520, 0, -33, -309, -74, 0, 5, 60, 115, -48, 125, -233, -99, 80, -66, -250, 55, -200, -194, -115, -2, 15, -37, 66, 69, -55, -175, -9, 18, 19, -59, -10, 41, -47, 30, 2, 33, -189, -243, 97, 340, -2, -107, 90, -156, 222, 112, 47, 27, 258, 25, -166, 96, -135, 66, -73, -109, 41, 61, -62, -189, -124, 177, 153, 66, 82, 73, 64, 104, 78, 61, -35, 78, 69, -37, -177, -68, 338, 168, 406, -5, 53, 45, -34, 225, 255, -31, 3, -192, 111, 223, 78, 16, 13, -113, -216, 13, -84, 68, 187, 134, 34, 252, 143, 88, -18, 111, -153, -313, 120, 35, -54, 65, -180, -244, 52, 37, -53, 23, -2, 138, -85, 117, 139, 165, -347, 53, -182, 137, 170, -73, 81, -127, 370, -119, -95, 107, 21, 38, -197, 48, -99, 16, -121, -84, -66, -145, -99, -20, 117, -29, -47, -41, 147, -105, -117, -97, 92, 62, -47, -36, -45, 28, 101, -19, -97, 38, 160, -56, 22, 182, 71, 168, -60, 33, 9, -63, 200, -175, -163, 396, -14, -442, 68, 14, 189, 28, 15, 47, -154, 72, -110, -96, 66, -256, -147, -314, -44, 57, -341, -286, -187, -195, 68, -19, -212, 100, -21, -102, -127, 278, -40, 76, 177, -120, 106, -53, -461, -533, -6, -120, 120, 94, -89, -17, 197, 30, -3, -22, -35, -56, 98, 111, 150, -166, -500, -161, -19, 291, 11, -63, 85, 67, 46, 39, -5, -240, -69, -99, -522, -47, 93, 225, -281, -310, -501, -33, 19, -53, -22, 68, 144, 35, 71, 63, 117, 248, -79, -53, -71, -238, 118, -23, -54, 38, 26, -139, -153, 68, -105, -112, 30, -43, -12, 28, -157, -177, -88, -265, 23, 81, -158, 0, -160, -10, 41, -101, -51, 39, 157, -78, 180, -104, 66, -279, -133, -40, 383, -9, -200, -46, -48, 223, 108, 129, 24, 214, 53, -175, -106, -198, -17, -25, 271, -187, -372, 120, -141, -204, -93, -216, -73, -29, -66, -42, 26, -351, 56, -109, -78, 222, 106, 203, -57, -240, 61, -6, -62, 20, -286, -213, -290, -181, -97, 43, -33, 174, 103, -124, 145, 341, -94, -471, 89, -228, -19, 29, -117, -123, 156, 96, 43, 170, -30, 11, 197, -228, 311, 360, -27, -125, 43, 250, 285, -31, -48, -85, 23, 143, -19, -62, 120, -17, 128, 148, 304, 249},
{-51, -45, -16, -17, 93, 27, -45, 2, 23, 41, 42, 31, 36, 61, 21, -84, -19, -182, -68, -48, 24, -13, -42, 15, -70, -52, 45, -13, -26, -71, -60, -6, -66, -42, -70, -95, -36, -10, 35, -21, -8, 15, -88, -6, -32, -57, -37, -39, -40, -3, -41, -66, -55, -62, -68, -16, -34, -12, -13, -39, 14, 14, -17, -66, -23, -11, 14, 37, 15, 0, 38, 36, 16, -45, 23, 45, -38, -44, 16, 14, -1, -25, 18, 21, 44, -1, 5, 34, 23, 6, -14, 10, -39, 14, 4, -44, -67, -24, -9, 5, -24, -64, -47, -70, -24, -36, 12, 83, -17, 3, -51, -3, 5, -14, 68, -36, -5, -55, -59, -101, -45, -41, -27, 14, 56, 83, 9, -36, -45, 11, -15, -18, 42, 12, 30, 21, -74, -34, -45, 1, 13, 5, 96, 54, 33, 75, 12, 28, 16, -8, 30, 21, -20, 26, -5, -11, 18, 26, -22, 54, 55, -8, -25, -4, 3, 40, 63, -19, -76, -31, -41, -44, 31, 35, -6, -3, 22, 120, 133, -9, -12, 9, -66, -28, 10, -31, 41, 53, -59, -61, -44, -20, 48, 50, 41, 52, 80, -31, 15, -6, -13, -18, -1, -9, -3, -16, -72, -66, -85, -18, -4, -4, 57, 44, 13, -4, 4, -37, -70, -107, -67, -33, -22, -6, -28, -51, -46, -7, -22, 0, -16, -40, 20, -89, -21, -26, -79, -44, 5, 13, 15, -33, -15, -37, 26, 27, -3, -33, -84, -137, -67, -85, -67, -49, -86, -11, 26, 33, 58, -3, -40, -3, 11, -48, -61, -10, -71, -43, -76, -85, -74, -72, -46, -11, 7, -1, 34, -5, -12, 66, 3, -72, -111, -54, 11, -54, -20, -96, -47, -97, -81, 12, 88, 91, 52, 27, -4, -55, -5, 22, -23, 15, -65, -30, 32, -58, -134, -52, -67, 24, 74, 64, 69, 15, 15, -55, 30, -9, 43, 36, -66, -23, -5, -24, -36, 32, 56, 83, 60, 117, 23, 57, 34, 15, -12, 4, -15, -9, 29, 3, 3, 28, -28, -13, 74, 31, 35, 57, -6, 56, 7, 6, 9, 20, -7, 19, 38, -17, -11, -2, -13, -19, 0, -5, 11, 22, 47, 46, 46, -18, -16, 23, -11, -21, 12, 1, 31, 26, 11, 0, 26, -1, -19, 22, 29, 8, 65, 108, 15, 61, 46, 30, -3, -16, 44, 75, 84, 3, -38, -73, -80, -49, -45, -23, 4, -2, 18, 47, 52, 84, 9, 56, 93, 2, 41, 42, -24, -8, -28, -33, -63, -40, -20, 0, 10, 45, 9, 34, 79, 95, 74, 4},
{-273, 45, 161, 31, -15, 4, -14, 125, 21, -59, 113, 98, -7, -28, 47, -155, 66, -57, 31, 102, 11, 49, -123, 51, 89, -71, -75, -32, -43, -35, -138, -39, -140, -82, 44, -138, 1, 11, 52, 61, 81, 14, 10, -8, 21, -63, -23, -6, -75, -46, -75, -110, -85, -105, -7, -94, 33, 112, 135, 59, 19, 38, 111, -54, -51, 93, -4, 69, -13, -154, -26, -11, 44, 36, -137, 2, 80, -134, 10, 6, -41, 104, 44, 109, -3, 114, 112, -25, -147, 158, -49, -25, -123, -102, 6, 24, -3, -7, -58, -49, 48, 105, 60, 14, 72, 66, 61, 116, -4, 11, -112, 54, -62, -44, -148, 44, 121, -19, -64, -7, -104, -38, 42, 30, 59, 253, -33, -18, -34, 26, 36, -98, 64, 69, 103, -3, 169, 54, 4, 24, 24, 41, 205, 139, 72, 16, -93, -130, -198, -166, -7, -60, -79, -5, 15, -50, 96, 37, 68, -126, -18, -25, -173, -202, -282, -120, -145, -87, 10, -47, 15, 33, -24, -71, -81, -3, -93, -28, -31, 3, -148, -204, -105, 57, -191, -31, 12, 29, 88, -118, -62, -63, -114, -65, -39, -44, -109, -305, -141, -74, -207, -36, -66, 9, -30, 185, 146, 58, 58, 45, -106, -69, -42, -154, -62, -240, -162, -129, -175, -31, -197, 58, 39, -35, -63, -18, -98, -40, 36, -66, 2, 62, 13, 113, -90, -114, -94, 29, -90, -229, -65, -63, 139, -21, -86, -40, -85, -3, -36, 141, 10, 185, 57, 107, -34, 30, -159, -74, -82, -148, -35, 93, -52, -73, 79, 48, 61, 129, -110, 61, -105, 90, 97, 46, -150, -223, -132, -138, -230, -163, 60, -14, -63, 122, 165, 25, 133, 75, 65, 14, 30, -119, -33, -23, -16, -4, -12, 109, 2, 2, -55, 60, 22, 1, 149, 90, 68, -45, -63, -78, -57, 44, -5, -70, -221, -28, 21, 10, 44, 86, 36, -17, 13, 13, 44, 51, 28, -19, 94, 37, -43, 51, 111, -39, 48, 65, 72, 150, -22, -13, 13, -54, 96, 67, -22, 6, 28, 46, 194, 119, 79, -3, -145, 49, -45, 76, 73, 182, 85, 64, 119, 5, -15, 10, 57, 44, 55, -114, -64, -1, -18, 41, 48, -70, 10, 147, 69, 47, 219, 49, -47, 12, 2, 33, 21, 12, 55, -37, -33, -86, -39, -60, 19, 25, -60, -63, 57, 140, -37, -36, 19, 50, 36, 94, 112, 6, -20, -22, -196, -133, -6, -66, -91, -203, 20, -21, 27, -43, -22, 36, -38, -33, 3, -2, -123, -59, -99, -127, -99, -101, -246, -298},
{-17, -19, -12, -20, -16, 15, 17, -5, -16, -27, 6, -10, -75, -30, -15, -24, -56, -63, -16, -13, -22, 0, 31, 16, -11, -14, -18, -41, -18, -2, -53, -23, 8, 10, -34, -66, -19, -11, -2, 10, -32, 3, -34, 2, -21, -45, -31, -5, -52, -1, 44, -6, -47, -50, -39, -29, -38, -14, 6, -71, -32, -7, -26, -19, -21, -14, -29, -4, 44, 25, -59, -89, -34, -33, 6, -15, -60, -21, 6, -7, -5, 0, 8, 4, -18, -9, 5, -12, 4, -21, -21, -30, -9, -3, -36, -49, -28, -17, -18, -4, -21, -12, -10, -10, 7, 14, 39, -48, -58, -28, 14, -66, -19, -1, -4, -10, 3, 24, 31, 23, 29, 9, 12, -9, 62, -6, -66, -21, -62, -6, -32, 9, -10, -22, -6, 10, 20, 42, 7, 29, 16, -13, 56, -9, -73, -66, -52, 12, 23, 2, 12, -19, -11, 23, 32, 38, 29, 29, 22, -17, 36, -9, -82, -24, -21, 23, 6, -9, 15, 24, 20, 1, 28, 16, 35, 36, 15, 15, 22, -25, -24, -33, 42, 22, 23, 10, 24, 12, 2, -23, 6, 3, 26, -5, 16, 28, -27, -9, 36, 3, 3, 21, 26, 27, 22, -13, -5, -24, -9, 12, 20, 11, 18, 27, -13, -13, 43, 57, 36, 35, 53, 33, -9, -24, 2, 8, 7, 14, 13, 34, 36, -11, -20, -5, 77, 86, 61, 53, 65, 19, 2, 15, 29, 13, 7, 15, 9, 22, 10, -5, -23, -31, 76, 81, 46, 84, 61, 50, 31, 41, 27, 20, 28, 23, 14, 19, -10, 2, -48, -49, 18, 11, 5, 1, 26, 34, 29, 38, 34, 6, 30, 19, -17, 3, 26, 2, -47, -35, -39, 12, -15, 7, -9, -51, 7, -4, 14, 6, 6, -12, -46, -30, -31, -35, -15, -9, -5, 17, -20, -14, -27, -13, 6, 14, 40, 1, 6, -6, -41, -7, -19, -48, -26, 5, 4, 33, -36, -18, -26, -24, -22, 8, 28, 23, -18, -8, -26, -23, -57, -64, -39, -14, -27, -40, 21, 9, -22, -20, -38, 16, 6, -6, -42, -14, -8, 3, 6, -29, -37, -29, -6, -32, -24, -24, -60, -45, -30, -23, 18, 14, -33, -27, -4, 9, 8, 32, -30, -27, -70, -71, -75, -69, -82, -22, -49, -38, 9, 2, -8, -30, -33, -14, -21, -6, -7, -20, -64, -29, -86, -75, -20, -14, -24, -9, -15, -9, 29, 38, 39, 18, 1, 17, 21, 18, -43, -44, -69, -58, -46, -24, -15, 14, -22, -2, 26, 40, 32, 40, 42, 47, 12, 10},
{89, 154, 138, 153, 258, -9, 320, 229, -75, 69, -322, -161, -108, -1, -98, 233, 288, 188, -168, -182, -181, -107, -17, -249, 233, -7, 159, -39, -1, -206, -276, -45, -19, 206, 129, -48, -137, -61, 71, 196, -138, -15, -162, -27, 129, -72, -268, -173, -251, -201, -139, -74, 2, -5, 104, -7, 57, 71, 72, 78, -268, 326, 23, -4, -49, -145, -11, 44, 112, 6, 185, 281, 62, -38, -98, 16, -18, 116, 51, -9, 244, -126, 28, -13, -117, -140, -157, -216, -193, -282, -53, 246, 50, -128, -63, -15, 10, 70, -9, 251, -94, -207, -94, -120, -96, -308, -185, -401, 36, 26, 119, -90, 56, 336, 174, -15, -67, -103, -27, 112, 12, 179, 111, -131, -73, -593, -69, 25, 57, 60, -178, 30, -28, 26, -133, -54, -271, 91, 120, -169, -286, 8, -384, -198, 65, 39, 217, 3, 239, 160, 175, 179, 143, -20, -195, -181, -54, 14, -54, 7, -81, -99, 47, -83, 108, -97, -24, -70, 184, -56, 44, 167, 67, -36, 87, -95, -26, -12, 201, 162, 240, -276, -221, -201, -231, -164, 36, -88, -72, -35, -81, -226, 115, -68, 127, 21, 24, 61, -51, -189, 192, 171, 307, 84, -214, -93, 16, -1, 79, 0, 93, -14, 189, -9, 83, -185, -76, -44, 103, 37, 223, -168, -209, -147, 125, 117, 6, 28, -205, -16, 141, 23, -51, -178, -196, -156, -97, -250, 91, 25, 37, -93, -210, -197, -111, -58, 177, 56, -21, -28, 55, 235, -204, -91, -97, -102, -151, -184, 66, -26, 19, 0, 252, -49, 147, 350, 300, 90, -29, 387, -582, -110, -257, -232, -164, 95, 123, -10, -273, 295, 126, 25, 150, -73, 74, -249, 189, 108, 15, -138, -35, -50, -11, 133, -115, 247, 186, 27, 130, 9, -6, 71, -87, -8, 194, 175, 143, 96, -45, -50, 61, 99, 25, -66, -248, -66, 115, 65, -30, 128, -27, 77, 42, -81, 94, -168, 80, -29, -103, 45, -48, 63, -72, 80, -72, 117, -21, 119, 256, 180, -74, 108, 358, 54, 209, -57, 30, 84, -19, 190, -73, 128, -23, -22, 58, 50, -154, -121, 26, 32, 60, 93, -184, -90, -55, 155, -93, -73, -46, -89, -97, -189, -215, 81, 61, -59, -7, 24, 235, 265, 91, 12, 226, 147, -12, 34, 258, -184, -91, 41, -19, -172, -108, -94, 142, -229, -22, 65, -110, -160, -210, 10, -39, -117, -44, -40, -39, 86, -36, 26, -5, 144, 122, -166, -214, 170, -136, 3, 129, -127, 49, 32, -13, -51, -53, -220, -116, -113, -298, -244, -183, -135},
{-55, -189, -127, -158, -42, -51, -146, 5, 94, -44, -33, -131, -76, 14, -133, 35, 67, -150, -137, 94, -165, -104, -2, 66, -11, 44, -150, -193, -137, -36, -113, -191, -35, -5, -18, -97, 83, -9, 49, -37, -73, -195, 106, -150, -42, 14, -30, -122, -93, -133, -134, -19, 46, 85, -38, -30, 14, -142, -162, -22, -3, -119, -96, -100, -78, -145, 15, -11, -51, -220, 155, -64, 52, 73, -71, -248, -152, -147, -71, -26, 91, -28, -200, -3, -46, 80, -117, -274, -242, 7, -23, 69, -245, -174, 20, 58, -15, 125, -78, 11, -73, -165, -3, -55, -39, 49, 147, 117, 65, -43, -115, 115, -29, -186, 97, -78, -14, 46, -7, -176, -46, -61, 50, 247, -11, -87, 105, 69, -96, 197, 37, -132, 39, -38, -79, 74, 71, -216, -134, -90, -81, -559, -194, -381, 156, -35, 67, -10, -114, -107, 26, -11, 84, 145, 149, 9, -14, -56, -245, -176, -299, -416, 216, 284, 169, 12, -66, 38, -49, -159, 0, 65, -118, -84, -69, 21, -27, 19, 110, -286, 182, -89, -60, -39, 21, -17, 116, -47, -66, -4, 24, 81, 110, 28, -2, 35, 36, 69, 74, -114, 67, 2, 135, 16, -17, 70, 16, -44, -72, 105, 15, -18, 55, 135, 56, 192, 204, 183, 26, 144, -96, 60, 146, 139, -36, -51, -92, -15, 5, -122, -181, 21, 41, 32, 139, 279, 111, 72, 48, 49, 56, -53, -102, 53, -5, 6, 45, -8, 75, -6, 23, -214, -35, 207, 54, 82, -42, 165, 4, 126, 90, 25, 48, -65, 64, -123, -26, -22, -53, 4, 186, 183, 214, 53, 48, 80, 24, -149, -192, -66, -150, -104, -42, -71, -163, -1, -80, 229, 154, 177, 37, 27, 50, 8, 31, -165, -237, -17, 160, 3, 88, 7, 11, -71, 137, 13, -16, 3, -59, 55, 73, 87, 53, -36, -50, -63, 78, 193, 118, 94, 56, -140, 42, -155, 104, 3, -57, -54, -50, 72, 60, 30, 39, -56, -4, -37, 171, 64, -29, 43, 150, 3, 103, -2, 34, 56, -26, 20, 223, -77, 191, 71, 103, 10, 110, 54, 91, 153, 81, -39, -172, 33, 144, 205, 179, 24, 55, 45, -11, -56, -196, 96, 92, 42, -27, 139, 87, 21, 132, -108, 135, -3, 72, -37, 69, 72, 117, -141, -95, -136, 42, 37, 7, -12, 240, 186, -5, 59, 45, 22, 55, 107, -60, -60, 8, -30, 63, 16, -36, -1, -76, 44, -30, -82, -225, 37, -62, 95, -33, 147, 21, -52, 66, -180, -18, -68, -263, -188, 42, 98, -181, -126},
{210, 249, 312, 325, 129, -98, 25, 151, -157, 214, 1, 239, -290, -13, -253, -320, -108, 231, 246, 141, -21, -265, -102, 102, 55, 15, -37, 240, 24, -45, -103, -79, 70, -248, 67, 283, -28, -165, 91, 204, -93, 112, -51, 8, -100, 148, -33, -36, 71, -301, -17, -698, 370, 71, 34, -48, 297, 77, 199, -8, 103, 30, 164, -84, -51, 98, -51, 25, -169, 132, -20, 173, -53, -147, -121, 121, -135, 139, -182, -74, -57, -132, 189, -29, -7, 119, 237, 153, -322, 127, 234, 59, -274, 22, 198, 139, 6, -93, 145, -76, 36, 170, -150, -49, -115, -34, 466, 22, 148, -257, 173, 66, -63, -120, -328, -32, 75, 33, 2, 52, -53, 29, -116, 117, -213, 39, 113, -83, -123, 81, -2, -3, -70, 8, -63, -42, 56, 108, 278, 67, -213, 162, 159, 234, -24, -131, -98, -115, -94, 11, -3, 77, -4, -81, 54, 71, 17, 112, -37, 32, -218, 15, 137, -206, -280, -39, -43, -90, -181, 56, 0, 33, -31, 24, -34, -32, -61, -7, 96, 192, 281, -96, 209, -173, -66, 53, -52, -113, -82, -117, 81, 128, -109, 109, -126, -22, 12, 25, 193, -38, 42, -181, 12, 92, 40, -39, 14, 124, 63, -8, -88, 231, 90, 136, 193, 116, 141, 117, -80, 126, -331, 61, -33, 25, 1, 126, 152, -32, -89, -121, -98, 28, -196, -3, 138, 12, 180, -65, -144, 114, -49, -24, -137, 27, -187, -252, 43, -79, -48, 62, -96, 110, -53, -75, 29, 55, -259, 14, -16, 99, 51, -22, 104, 199, 75, -24, 153, -170, 48, 141, -58, 49, -261, 23, 77, 37, -201, 132, 18, -89, 9, 178, -12, -160, 9, 40, -245, 303, 107, 243, 58, -75, -97, 294, 7, 120, -20, -89, 147, 12, 49, -121, 31, -183, -129, 61, -113, -34, 222, 235, 199, 24, 153, -72, -54, -26, -205, -19, 32, -112, -81, -40, -17, 220, 78, 105, -66, -26, 51, 186, 73, -74, -19, 34, -180, -238, 99, 72, -235, -86, 37, 342, -17, -66, -26, 177, -48, 169, 58, 161, 271, -48, -131, 76, 10, 59, -202, 4, 137, 83, 49, -54, -82, -105, 4, -136, 98, 24, -23, 136, -20, 123, 180, 82, -4, -453, -187, 55, 64, -29, -222, -56, -72, -123, -152, -45, 17, 49, -88, -51, -69, -4, -239, -323, 436, 209, 115, -67, -18, -94, -158, 57, -360, -134, 37, -251, -353, -249, -157, 100, -21, -421, -505, -264, 177, -225, 129, 25, -159, -71, -86, -81, 66, -28, 65, 90, -112, -206, 227, -219, -526, -429},
{179, 458, -137, 57, 252, -380, 239, 208, -4, -80, 109, -79, -97, -85, -111, 6, -342, 141, -621, -70, -161, 78, -142, -453, 97, 327, -62, -543, -384, -255, -188, -333, -89, -111, 142, -787, 308, -213, -175, 271, -430, -11, -53, 4, -93, 13, 43, -133, -256, -120, -217, -121, -252, 223, 270, 161, 102, 116, 81, -163, 288, 276, -189, -232, -115, 174, 104, -147, -182, -273, 33, 24, 14, 380, 79, -104, -137, -59, 149, -462, -169, -165, -153, -295, -122, -256, -139, -111, -117, 235, 3, -183, -190, 329, 74, 103, 195, 284, 145, -235, 33, 49, 210, 186, 194, -13, -265, 303, -132, 241, 196, 40, -472, 40, -195, 169, -479, 150, -336, -189, -92, 101, 152, 216, 372, 124, -43, 9, -17, 18, -235, 270, 368, -190, -264, 211, 84, -104, -64, 203, 72, 387, 529, 111, 77, 44, 113, -117, 12, 210, 337, 196, 232, -125, 136, 47, 54, 8, -147, 212, 209, 87, 607, 264, -254, 279, 270, 340, 219, 208, 170, -90, -127, -151, 208, 20, 34, -5, 180, 40, -603, -405, -462, -58, 459, -5, -238, -219, 264, 170, 165, 188, -440, -140, -239, -116, 33, -675, -13, -378, -224, -257, -277, -231, 266, 55, -26, 107, 286, -217, -214, -204, -229, -552, 172, -720, -7, 501, -47, 434, 219, 76, -191, 87, 514, 256, -136, -69, -296, -75, -165, 5, -172, -449, -506, 260, 5, -138, 194, 530, 305, -211, 74, 5, 74, -341, 60, 94, 48, -159, -1, 327, -63, 124, 61, 200, 231, 102, 159, 140, -27, -160, 111, 241, -32, -292, 21, 76, -31, -48, 261, -173, -231, 453, 298, -43, 66, -93, -102, -47, 417, -176, -234, 117, -351, 55, 13, 103, -10, 273, 453, -13, -199, 245, 182, -576, -168, 11, -389, -169, 204, 291, -48, -27, -71, -116, 155, 144, -101, 18, 135, -14, -404, -78, 189, 322, 36, 57, 121, -36, -295, 120, -67, 57, 58, -204, -95, -370, -75, -302, 110, 64, 3, -175, -73, -66, -170, 57, 208, 265, -17, -135, 308, -139, -357, 156, 170, 117, 193, -132, -132, 237, 72, 116, 54, -5, -175, -120, 250, 172, 141, 242, 14, 61, -185, 156, -258, 99, 15, -236, 28, -120, 113, -42, 35, -147, 23, 132, 151, 61, -341, -155, 326, 177, -75, 16, 206, -273, -351, -80, 352, 190, 150, -292, 321, 93, 379, -29, 107, 455, -367, -43, -154, -70, 222, 25, -309, 159, -386, 85, 78, 92, 288, -156, -466, -246, -87, -51, 255, 97, 328, -132, 151, 29, 14, -110, -171, -35, -101, -150, -354, -725},
{-81, -91, -7, 28, -39, -41, 17, 56, 67, 11, -6, 13, 23, 16, -71, -97, -102, -158, -85, 94, 19, -73, -71, -58, 11, 16, 12, 19, -81, -8, -49, -40, -64, -5, 29, -138, 21, 52, 69, -44, -68, 0, -29, -6, 3, -35, 23, -64, -5, -50, -73, -2, 7, -117, 12, 103, 123, 66, -116, -26, -25, -26, -49, -21, -10, -57, -76, -60, -54, 59, 93, -19, -5, 57, -15, 7, -51, -36, -10, -39, -4, 9, 18, -22, -9, 93, 56, 102, 102, 54, 6, 68, -39, 66, 26, -10, 48, -19, -15, -47, 42, 19, -27, -41, 30, 35, 90, 162, -68, 24, -8, 5, 75, 27, 2, 2, -86, -45, 33, 65, 43, -21, -7, -20, 84, 116, 15, -34, 4, -21, 47, 60, -22, 12, -45, -30, 59, -15, -36, 72, 61, 48, 90, 153, 150, 30, 17, -25, 22, 28, -13, 3, -9, -89, -50, -54, 16, -68, 18, 4, 60, 118, 113, 2, 8, -19, -2, 61, 74, 4, 8, -33, -39, -52, -3, -25, -36, 30, 55, 119, 121, 61, 10, -48, 14, 36, 30, 57, 44, -72, -6, 4, -23, -31, -13, 53, -20, 167, -60, 99, 23, -44, 41, 37, 46, 24, -49, -104, -46, -37, -21, 22, 69, 54, 33, 57, -48, 43, 83, -1, 69, 50, 52, 63, 7, 41, -5, -30, -26, -24, -22, -8, -99, -72, -15, 5, 12, 34, 16, 28, 67, -4, 63, 56, 37, 4, -9, -10, -40, 43, 21, -44, -187, -179, -11, -10, 46, 105, 42, 37, 18, 69, 23, 45, 28, 0, 44, 13, -33, 56, -297, -194, -4, 105, 112, 62, 111, 79, 30, 44, -48, -32, 59, 37, 18, -1, 43, 97, -316, -193, -225, -221, -122, -12, -161, -9, 33, 74, 36, -22, -34, 23, -17, -82, -8, 41, 36, 53, 9, 4, -56, 13, -102, -41, 21, 14, -68, 3, 55, -6, 41, 12, 8, 42, 11, -4, -15, 23, -41, -40, -63, 36, -4, -2, 9, 36, 68, -33, -46, 22, 60, 14, 35, 87, -26, -24, -4, 35, -37, 25, -22, -47, -43, 30, 5, -3, -62, 24, 38, -37, -50, 12, -22, 35, -24, -27, 17, 3, -27, -7, -122, 9, -12, -67, -44, 4, -27, -42, -4, -1, -3, -39, -24, -6, -11, -27, -14, -85, -64, 26, 9, -85, -75, -34, -7, 12, -54, 102, 56, 59, 11, -50, -78, -34, -6, -91, -45, -6, -91, -124, -103, -94, -24, -123, 13, -27, -107, -35, -40, -85, -55, -68, -69, -85, -101, -99, -81, -89, -117, -96, -190, -131},
};

char str[100];
Perceptron p(10, 432);

int main()
{
    for(int i = 0; i < 10; i++)
        for(int j = 0; j < 18*24; j++)
            p.neurons[i].w[j] = a[i][j];

    while(cin.getline(image[height], 1000))
        height++;
    width = strlen(image[0]);

    for(int i = 0; i < height; i++)
        for(int j = 0; j < width; j++)
            switch(image[i][j])
            {
                case '.': image[i][j] = 0; break;
                case '%': image[i][j] = 1; break;
                case '#': image[i][j] = 2; break;
                case '@': image[i][j] = 3; break;
            }

    vector<digit> digits = split_image();
    cerr << "splited";
    for(size_t j = 0; j < digits.size(); j++)
    {
        //digits[j].print();
        digit d = scale(digits[j], 24, 18);
        //d.print();
        vector<int> x;
        for(int i = 0; i < 24; i++)
            for(int j = 0; j < 18; j++)
                x.push_back( d.mat[i][j] );
        vector<int> y = p.recognize(x);

        for(int j = 0; j < 10; j++)
            if(y[j])
            {
                cout << j;// << "\n\n";
                break;
            }
    }
    return 0;
}

int main1()
{
    p.initWeights();
    for(int i = 0; i < 10; i++)
        for(int j = 0; j < 18*24; j++)
            p.neurons[i].w[j] = a[i][j];

    for(int k = 0; k <= 100; k++)
    {
        cerr << "stage " << k << endl;
        int errors = 0;
        for(int i = 0; i <= 2; i++)
        {
            if(i % 100 == 0)
                cerr << i <<  " ";
            sprintf(str, "D:/study/yandex/base/%d.num", i);
            freopen(str, "rt", stdin);
            ifstream fin(str);
            int num;
            fin >> num;
            //cerr << num << endl;
            fin.close();

            sprintf(str, "D:/study/yandex/base/%d.inp", i);
            fin.open(str);
            //cerr << string(str) << " " << endl;

            width = height = 0;

            while(fin.getline(image[height], 1000))
                height++;
            width = strlen(image[0]);
            //cerr << "read";
            fin.close();

            for(int i = 0; i < height; i++)
                for(int j = 0; j < width; j++)
                    switch(image[i][j])
                    {
                        case '.': image[i][j] = 0; break;
                        case '%': image[i][j] = 1; break;
                        case '#': image[i][j] = 2; break;
                        case '@': image[i][j] = 3; break;
                    }
            //cerr << "parse " << width << " " << height << endl;

            memset(c, 0, 200*1000);
            vector<digit> digits = split_image();
            digit d = scale(digits[0], 24, 18);

            //cerr << "splited \n";

            //d.print();

            vector<int> x;
            for(int i = 0; i < 24; i++)
                for(int j = 0; j < 18; j++)
                    x.push_back( d.mat[i][j] );
            vector<int> y(10);
            y[num] = 1;

            errors += (p.teach(x, y) != 0);
        }
        cerr << endl << "errors       " << errors << endl << endl;

        ofstream fout("perceptron");
        fout << "int a[][18*24]={";
        for(int i = 0; i < 10; i++)
        {
            fout << "{";
            for(int j = 0; j < 18*24; j++)
            {
                fout << p.neurons[i].w[j];
                if(j != 18*24-1)
                    fout << ", ";
            }
            fout << "}," << endl;
        }
        fout << "};";
        fout.close();
    }


    return 0;
}
