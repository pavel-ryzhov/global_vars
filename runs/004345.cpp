#include <cstdlib>
#include <vector>
#include <deque>
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <string.h>

using namespace std;

unsigned int num_of_nodes, length, height;
vector< vector<unsigned int> > picture;
unsigned int num_of_digits;
vector<unsigned int> color;
vector< vector<unsigned int> > digit;
vector<unsigned int> digit_left, digit_right, digit_top, digit_bottom;
vector< vector<unsigned int> > graph;
vector<bool> used;
vector<unsigned int> dsu;

const unsigned int template_digit_num=11;
const unsigned int template_digit_l=20, template_digit_h=30;
const unsigned int num_of_nodes_templ=600;
vector< vector<unsigned int> > template_digit(template_digit_num);

void make_set(unsigned int node);

unsigned int find_set(unsigned int node);

void unite(unsigned int node1, unsigned int node2);

void bfs(unsigned int start_node);

void compare();

void init_templates();

int main(int argc, char** argv) {
	picture.clear();

	//reading of input data
	char ch;
	unsigned int ch_n;
	vector<unsigned int> temp_vec;
	temp_vec.clear();
	scanf("%c", &ch);
	ch_n=(int)ch;
	while( ch_n != 10 ) {
		while( ch_n != 10 ) {
			switch( ch_n ) {
			case 46:
				temp_vec.push_back(0);
				break;
			case 37:
				temp_vec.push_back(1);
				break;
			case 35:
				temp_vec.push_back(2);
				break;
			case 64:
				temp_vec.push_back(3);
				break;
			}
			scanf("%c", &ch);
			ch_n=(int)ch;
		}
		picture.push_back(temp_vec);
		temp_vec.clear();
		scanf("%c", &ch);
		ch_n=(int)ch;
	}

	height=picture.size();
	length=picture.at(0).size();
	num_of_nodes=length*height;
	color.resize(num_of_nodes);
	graph.resize(num_of_nodes);
	used.resize(num_of_nodes);
	dsu.resize(num_of_nodes);

	unsigned int i, j, k;
	for( i = 0; i < height; i++ )
		for( j = 0; j < length; j++ ) {
			k=i*length+j;	
			if( ( i > 0 ) && ( j > 0 ) )
				graph.at(k).push_back(k-length-1);
			if( i > 0 )
				graph.at(k).push_back(k-length);
			if( ( i > 0 ) && ( j < length-1 ) )
				graph.at(k).push_back(k-length+1);
			if( j > 0 )
				graph.at(k).push_back(k-1);
			if( j < length-1 )
				graph.at(k).push_back(k+1);
			if( ( i < height-1 ) && ( j > 0 ) )
				graph.at(k).push_back(k+length-1);
			if( i < height-1 )
				graph.at(k).push_back(k+length);
			if( ( i < height-1 ) && ( j < length-1 ) )
				graph.at(k).push_back(k+length+1);
			used.at(k)=false;
			color.at(k)=0;
			dsu.at(k)=k;
		}

	//Segmentation
	bfs(0);
	num_of_digits=0;
	digit.resize(3);
	digit_left.resize(3);
	digit_right.resize(3);
	digit_top.resize(3);
	digit_bottom.resize(3);
	unsigned int left, right, top, bottom;
	for( j = 0; j < length; j++ ) {
		for( i = 0; i < height; i++ ) {	
			k=i*length+j;
			if( dsu.at(k)!=k ) {
				if( color.at(dsu.at(k))==0 ) {
					if( num_of_digits>0 ) {
						digit_left.at(num_of_digits-1)=left;
						digit_right.at(num_of_digits-1)=right;
						digit_top.at(num_of_digits-1)=top;
						digit_bottom.at(num_of_digits-1)=bottom;
					}
					num_of_digits++;
					if( num_of_digits > digit.size() ) {
						digit.resize(num_of_digits);
						digit_left.resize(num_of_digits);
						digit_right.resize(num_of_digits);
						digit_top.resize(num_of_digits);
						digit_bottom.resize(num_of_digits);
					}
					color.at(dsu.at(k))=num_of_digits;
					digit.at(color.at(dsu.at(k))-1).push_back(dsu.at(k));
					color.at(k)=num_of_digits;
					digit.at(color.at(k)-1).push_back(k);
					if( dsu.at(k)/length < k/length ) {
						top=dsu.at(k);
						bottom=k;
					}
					else {
						top=k;
						bottom=dsu.at(k);
					}
					if( dsu.at(k)%length < k%length ) {
						left=dsu.at(k);
						right=k;
					}
					else {
						left=k;
						right=dsu.at(k);
					}
				}
				else {
					color.at(k)=color.at(dsu.at(k));
					digit.at(color.at(k)-1).push_back(k);
					if( top/length > k/length )
						top=k;
					if( bottom/length < k/length )
						bottom=k;
					if( left%length > k%length )
						left=k;
					if( right%length < k%length )
						right=k;
				}
			}
		}
	}
	digit_left.at(num_of_digits-1)=left;
	digit_right.at(num_of_digits-1)=right;
	digit_top.at(num_of_digits-1)=top;
	digit_bottom.at(num_of_digits-1)=bottom;



	//vector<double> xC, yC, Ux, Uy, Uxy, C, Amax, Amin, E;
	//xC.resize(num_of_digits);
	//yC.resize(num_of_digits);
	//Ux.resize(num_of_digits);
	//Uy.resize(num_of_digits);
	//Uxy.resize(num_of_digits);
	//C.resize(num_of_digits);
	//Amax.resize(num_of_digits);
	//Amin.resize(num_of_digits);
	//E.resize(num_of_digits);
	//for( k = 0; k < num_of_digits; k++ ) {
	//	xC.at(k)=0;
	//	yC.at(k)=0;
	//	for( vector<unsigned int>::iterator it=digit.at(k).begin(); it != digit.at(k).end(); ++it ) {
	//		xC.at(k)+=*it/length;
	//		yC.at(k)+=*it%length;
	//	}
	//	xC.at(k)=xC.at(k)/digit.at(k).size();
	//	yC.at(k)=yC.at(k)/digit.at(k).size();
	//	Ux.at(k)=0;
	//	Uy.at(k)=0;
	//	Uxy.at(k)=0;
	//	for( vector<unsigned int>::iterator it=digit.at(k).begin(); it != digit.at(k).end(); ++it ) {
	//		Ux.at(k)+=(xC.at(k)-*it/length)*(xC.at(k)-*it/length);
	//		Uy.at(k)+=(yC.at(k)-*it%length)*(yC.at(k)-*it%length);
	//		Uxy.at(k)+=(xC.at(k)-*it/length)*(yC.at(k)-*it%length);
	//	}
	//	Ux.at(k)=(double)Ux.at(k)/digit.at(k).size()+(double)1/12;
	//	Uy.at(k)=(double)Uy.at(k)/digit.at(k).size()+(double)1/12;
	//	Uxy.at(k)=(double)Uxy.at(k)/digit.at(k).size()+(double)1/12;
	//	C.at(k)=sqrt((Ux.at(k)-Uy.at(k))*(Ux.at(k)-Uy.at(k))+4*Uxy.at(k)*Uxy.at(k));
	//	Amax.at(k)=2*sqrt(2*(Ux.at(k)+Uy.at(k)+C.at(k)));
	//	Amin.at(k)=2*sqrt(2*(Ux.at(k)+Uy.at(k)-C.at(k)));
	//	E.at(k)=2*sqrt((0.5*Amax.at(k))*(0.5*Amax.at(k))-(0.5*Amin.at(k))*(0.5*Amin.at(k)))/Amax.at(k);
	//}

	init_templates();
	compare();

	picture.clear();
	color.clear();
	graph.clear();
	used.clear();
	dsu.clear();

	return 0;
}

void make_set(unsigned int node) {
	dsu.at(node) = node;
}

unsigned int find_set(unsigned int node) {
	if( node == dsu.at(node) )
		return node;
	else
		dsu.at(node)=find_set(dsu.at(node));
	return dsu.at(node);
}

void unite(unsigned int node1, unsigned int node2) {
	node1=find_set(node1);
	node2=find_set(node2);
	//if(rand() & 1)
	if( node1%length < node2%length )
		dsu.at(node2)=node1;
	else if( node1%length > node2%length )
		dsu.at(node1)=node2;
	else if( node1/length < node2/length )
		dsu.at(node2)=node1;
	else
		dsu.at(node1)=node2;
}

void bfs(unsigned int start_node) {
	unsigned int current_node, ignited_node;
	deque<unsigned int> current;
	current.clear();
	current.push_back(start_node);
	used.at(start_node)=true;
	while( !current.empty() ) {
		current_node=current.front();
		current.pop_front();
		for ( vector<unsigned int>::iterator it = graph.at(current_node).begin(); it != graph.at(current_node).end(); ++it ) {
			ignited_node=*it;
			if( picture.at(current_node/length).at(current_node%length)+picture.at(ignited_node/length).at(ignited_node%length) >= 4 )
				unite(current_node, ignited_node);
			if ( !used.at(ignited_node) ) {
				used.at(ignited_node)=true;
				current.push_back(ignited_node);
			}
		}
	}
}

void compare() {
	vector< vector<unsigned int> > nodes_inside, nodes_outside;
	nodes_inside.resize(digit.size());
	nodes_outside.resize(digit.size());
	unsigned int i, j, k, m, digit_length, digit_height;
	double k_l, k_h;
	for( k = 0; k < num_of_digits; k++ ) {
		nodes_inside.at(k).resize(template_digit_num);
		nodes_outside.at(k).resize(template_digit_num);
		for( m = 0; m < template_digit_num; m++ ) {
			nodes_inside.at(k).at(m)=0;
			nodes_outside.at(k).at(m)=0;
		}
		digit_length=digit_right.at(k)%length-digit_left.at(k)%length;
		digit_height=digit_bottom.at(k)/length-digit_top.at(k)/length;
		k_l=(double)template_digit_l/digit_length;
		k_h=(double)template_digit_h/digit_height;
		if( ( 9*digit_length*digit_height/10 < digit.at(k).size() ) ||
			( 3*digit_length < digit_height ) )
			nodes_inside.at(k).at(10)++;
		else
			for( vector<unsigned int>::iterator it = digit.at(k).begin(); it != digit.at(k).end(); ++it ) {
				i=((*it)/length-digit_top.at(k)/length);
				i=(unsigned int)i*k_h;
				j=(unsigned int)((*it)%length-digit_left.at(k)%length);
				j=(unsigned int)j*k_l;
				if( i*template_digit_l+j < num_of_nodes_templ )
					for( m = 0; m < template_digit_num; m++ ) {
						if( template_digit.at(m).at(i*template_digit_l+j) != 0 ) {
							template_digit.at(m).at(i*template_digit_l+j)++;
							nodes_inside.at(k).at(m)++;
						}
						else
							nodes_outside.at(k).at(m)++;
					}
			}
		//k_l=(double)digit_length/template_digit_l;
		//k_h=(double)digit_height/template_digit_h;
		//for( m = 0; m < 10; m++ ) {
		//	for( vector<unsigned int>::iterator it = template_digit.at(m).begin(); it != template_digit.at(m).end(); ++it ) {
		//		if( *it!=0 ) {
		//			i=(unsigned int)((it-template_digit.at(m).begin())/template_digit_l*k_h+digit_top.at(k)/length);
		//			j=(unsigned int)((it-template_digit.at(m).begin())%template_digit_l*k_l+digit_left.at(k)%length);		
		//			if( picture.at(i).at(j) != 0 )
		//				nodes_inside.at(k).at(m)++;
		//			else
		//				nodes_outside.at(k).at(m)++;
		//		}
		//	}
		//}
		//printf("For digit %d:\n", (k+1));
		//for( m = 0; m < template_digit_num; m++ )
		//	printf("Template number %d: inside %d, outside %d\n", m, nodes_inside.at(k).at(m), nodes_outside.at(k).at(m));
	}
	for( k = 0; k < num_of_digits; k++ ) {
		m=(max_element(nodes_inside.at(k).begin(), nodes_inside.at(k).end())-nodes_inside.at(k).begin());
		if( m==10 )
			m=1;
		printf("%d", m);
	}
	printf("\n");
}

void init_templates() {
	for( vector< vector<unsigned int> >::iterator it = template_digit.begin(); it != template_digit.end(); ++it )
		(*it).resize(num_of_nodes_templ);
	
	int a[template_digit_num][num_of_nodes_templ]=
	{
		{
			0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0
		},
		{
			0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1 
		},
		{
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,
			0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,
			0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
			1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
			0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
			0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,
			1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 
		},
		{
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
			0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0 
		},
		{
			0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0
		},
		{
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,
			0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0
		},
		{
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0
		},
		{
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,
			0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
		},
		{
			0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,
			0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
			0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,
			0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
			0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0
		},
		{
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
			0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
			0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
			1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,
			0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,
			0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
			0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
			0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
		},
		{
			0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,
			0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1
		},
	};

	for( int k = 0; k < template_digit_num; k++ )
		for( int i = 0; i < num_of_nodes_templ; i++ )
			template_digit.at(k).at(i)=a[k][i];
}