#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.0638727,-0.913027,-0.221266,0.368147,-0.17243,-1.10993,-0.798728,0.232419,0.455356,-0.224263,0.525839,0.277272,1.05614,0.385017,-0.28901,0.127907,0.158245,-0.0274654,0.168346,0.312216,0.46325,-0.251878,-0.0927229,0.817697,0.184601,-0.179547,-0.268159,0.452291,-0.500169,-0.950695,0.0305924,-0.493855,-0.567716,0.165033,-0.657425,-1.20566,-0.826092,-0.0053414,-0.15729,-0.238333,0.663884,0.430764,1.05416,-0.526507,0.243865,0.0688757,0.653372,-0.233589,0.132924,0.568058,0.431167,0.211141,0.505466,0.400622,0.565537,-0.197359,0.0790702,0.175812,-1.34944,-0.98816,0.493802,0.201723,-0.26921,0.730364,-0.110835,-0.419174,-0.142586,-0.365565,0.0203581,-0.297401,-0.0288436,0.447403,0.222114,-0.686225,-0.0842713,0.245826,0.417278,-0.534452,0.0136981,-0.158146,-0.00701325,-0.124819,0.641579,-0.663869,-0.359695,0.0630595,0.0399627,0.490731,0.160797,0.289978,0.0404288,0.085373,0.0853022,-0.0882694,0.748516,-0.369138,-0.196854,0.440684,0.166971,-0.270917,0.57994,0.108617,0.298675,0.955256,-0.284443,-0.712737,0.103817,0.231853,0.484926,0.0143105,0.484075,0.248396,-0.130489,0.287643,-0.127873,-0.0766931,0.290051,-0.225981,-0.0185852,-0.31183,-0.830398,-0.707363,0.803959,-0.572353,-0.397127,-0.510097,-0.214202,0.925296,0.508782,0.40585,0.775096,0.143395,0.448924,1.6646,0.941448,-0.0666619,-0.237725,1.10608,1.02109,1.02207,0.46968,-0.00871346,-0.78687,1.90304,-0.0636004,0.0374295,-0.0534082,-0.229587,-0.329769,-0.936042,0.269137,0.193366,-0.952274,0.883571,-0.0293739,-0.764402,-0.0132261,0.179776,0.310008,-0.520973,-0.0491312,-0.000158481,0.637276,-0.676398,-0.042861,0.333332,0.971657,-0.889445,0.280017,0.243067,-0.0566273,0.669818,0.758603,0.0445319,0.12767,0.436677,-0.0447334,0.228065,-1.0263,-0.244135,-0.365709,0.44409,-0.343704,0.443052,-0.351524,-0.661768,-0.530263,-0.636944,-0.207028,0.000580608,0.382944,0.480345,0.399768,-0.878944,0.150975,0.553766,0.475928,-0.735986,0.0268351,-0.165451,-0.00188634,0.344746,-0.276579,-0.338436,-0.27505,0.188701,0.0073626,0.0778104,-0.551946,-0.369799,0.00867153,0.0543347,-0.0100167,0.3455,-0.212698,-0.45118,-0.729331,-0.312323,0.545118,-0.0181656,0.598733,0.893537,0.713048,0.196986,0.0243281,-0.0913187,0.205111,0.589224,-0.047156,0.350776,0.248921,-0.463192,-0.226868,0.121834,-0.18546,-0.387315,0.00817129,0.598141,0.532413,0.00464555,1.45799,0.0823758,0.3056,0.359952,-0.520847,-0.337738,-0.514835,0.0949065,0.0955572,-0.101018,0.380232,0.40083,0.450734,-0.346603,-0.0993142,0.654471,0.16111,-0.629299,-0.490273,-0.890864,0.456708,-0.284213,0.717502,-0.34386,0.715011,0.0215148,0.0284172,0.434228,0.166703,-0.0334791,-0.231491,-0.286364,0.0969021,-0.257657,0.625458,0.42241,0.269396,1.09383,0.318521,-0.199482,0.0094926,-0.59261,0.0811357,1.06364,-0.182928,-0.35158,-0.413636,-0.242936,0.556199,0.0348956,0.12583,-0.305395,-0.14746,0.753544,-0.376189,-0.0314095,-0.154378,-0.599909,-0.276678,-0.292854,-0.132942,0.765389,-0.948456,0.742736,-0.24136,-0.234567,0.0393201,-1.10788,0.00843849,-0.297317,-0.484008,0.564443,0.836874,-0.819857,0.0336334,-0.0567483,0.470208,-0.623517,0.194406,-0.18599,-0.357025,0.0839037,-0.00410263,-0.789292,-0.458196,-0.181963,-0.0432401,0.102848,-0.186036,0.40554,-1.20624,0.473969,0.353278,-0.371942,-0.621994,-0.0821979,0.0298254,-0.98704,-0.36263,0.479543,-0.0344845,0.306958,-0.0963542,-0.33369,0.579217,0.0349553,-0.195738,0.588694,0.317,0.390515,-0.447476,0.0826253,-1.32408,0.338219,-0.507906,-0.248053,-0.327858,-0.513189,0.116424,-0.00663969,-0.614173,0.629301,0.295578,-0.157598,0.681804,-0.658976,-1.13636,-0.859466,-0.29009,-0.0858914,1.39212,1.10212,0.338049,0.361415,-0.497026,-0.720714,0.28007,1.00484,-0.602282,-0.105069,0.96272,-0.269927,-0.831061,-0.391729,0.205535,-0.281836,0.119233,0.0636784,0.878175,-0.628129,1.60454,-0.667974,0.0362142,0.411649,0.0409364,-0.336051,-0.531216,0.12277,0.501086,-0.674373,0.0927926,0.131879,0.370176,-0.352117,-1.0974,0.800187,-0.506478,-1.10721,-1.14822,-1.18975,0.381989,-0.948888,0.939678,-1.0497,0.858498,-0.086318,-0.461417,0.793124,0.461291,0.127254,0.762142,0.500808,-0.46435,0.710231,-0.0357235,0.39875,0.136854,-0.679724,0.120351,-0.361031,-0.571901,0.225178,0.267335,-0.537521,-0.00189032,0.47212,-0.050993,-0.812993,-0.0826246,-0.704549,-0.374719,-0.566864,0.284896,-1.14744,-0.219302,-0.0755047,-0.0828971,0.177736,0.512976,0.6858,-0.200246,0.665431,-0.157274,0.456038,-0.812021,0.212081,0.0930006,-0.193707,0.547202,0.949444,-0.908944,0.229454,0.442011,-0.246539,0.76175,-0.498417,0.0569515,0.000566757,0.315976,0.0500166,-0.791572,0.108481,-0.716555,-0.0209582,-0.356558,-0.143802,-0.198654,0.410493,0.112556,0.87921,-1.19709,0.235004,-0.335861,-0.589837,-0.189734,-0.247339,1.33837,-0.894957,-0.0422266,0.366794,-1.56755,-0.276428,-0.864978,-0.276713,0.513115,-0.291903,-0.0323762,1.2389,1.06228,1.59167,-1.26643,0.701914,-0.656511,0.163035,-0.767465,0.276364,-0.258511,-0.0411187,-0.596892,0.395381,-0.635233,0.144838,0.114463,-0.435764,0.585289,-0.171609,0.0493532,-0.00296714,-0.743144,-0.067306,0.0477435,-0.101409,-0.510091,0.0726818,-0.812438,-0.702682,-0.132064,0.778054,-0.377387,0.610153,-0.0270297,-0.0739183,0.196179,-0.571284,-0.108822,0.328229,0.38004,0.0501134,0.117618,-0.0852616,0.535647,-0.562553,-0.175831,0.0742459,0.577324,-0.094226,-0.117681,0.0506137,0.395144,-0.79248,0.168884,-0.122538,-0.134516,-0.435284,-0.288518,0.741805,0.19347,-0.598961,-0.376943,-0.213528,0.253463,-0.449995,0.504585,-0.517947,0.391922,0.248985,-0.171219,-0.0980277,-0.0543662,-0.0370497,1.16452,0.824015,-0.374534,1.06611,-0.850812,-0.41415,-0.259483,-2.08229,0.376079,-0.202382,-0.462584,1.09084,0.424628,-1.6327,0.358039,0.876747,0.393187,-0.567632,-0.181261,-0.376862,-0.373419,-0.872441,0.35033,-1.58591,0.272994,-0.0145001,-0.0758933,1.15669,0.482993,0.989131,-0.846625,-0.110271,1.84268,-1.26722,-1.53585,0.628199,0.0248638,1.09726,0.652618,2.79493,-0.125163,-0.0311329,-0.174153,1.08957,1.38709,-0.350655,-1.31151,1.37523,-0.138001,0.0172303,-0.503431,0.0964322,-2.03976,1.38059,-0.0139996,-0.187705,-0.635875,0.31751,0.607124,0.173267,-0.761635,0.15607,-0.35151,-0.415993,-0.44222,-0.0597229,1.17133,-0.330073,0.286463,0.611042,-1.33548,-0.347438,-0.239029,0.160984,0.960655,-0.839989,0.123615,1.40611,0.916026,1.47644,-1.14841,0.380542,-0.193188,0.554206,-0.3032,0.0420526,0.381536,0.259636,-0.864122,0.444886,-0.614938,0.350372,-0.901821,0.156701,2.25951,-0.042391,0.565527,0.243787,0.0235206,-1.11564,-0.175568,-0.299549,0.0869658,0.826783,-1.69366,-0.967371,0.262358,0.0798095,-0.574844,0.315706,0.25996,0.850475,0.376627,-0.600187,-1.00407,0.0556878,0.300569,-0.0472073,0.466942,0.397211,0.087254,0.435313,0.208425,-0.0643622,-0.219772,0.29453,-0.251183,0.344879,-0.329442,0.173811,0.369524,-0.437859,-0.144387,0.318246,0.869328,-0.589137,0.518435,0.135706,0.34686,0.357984,0.324213,0.235516,-0.154214,0.839648,0.460837,-0.00863026,0.404142,-1.21104,-0.52391,0.043948,0.825618,0.326907,0.458488,0.578242,-1.49367,-0.64827,-0.811862,-1.35755,0.776876,1.23607,-0.155833,1.38943,0.776246,-1.08313,0.844807,0.477366,0.201107,0.521137,-0.144507,-0.23036,-0.629892,-0.643766,-0.378688,-0.264167,1.01886,-0.274798,-0.203615,1.47377,0.324869,0.382168,-0.544952,-0.625752,1.64717,-1.35839,0.466081,1.85539,1.30621,1.90786,1.00796,1.04881,-1.34124,-0.889963,-2.00157,1.0541,0.0501964,0.661268,-2.16242,0.15753,-0.00930037,0.153515,-0.7526,0.253975,-0.728352,0.568794,-0.665085,0.792114,-0.896054,-0.196389,1.32995,0.776926,0.137562,-0.634724,-1.05723,0.321002,0.523742,1.18178,1.75465,0.0527453,0.615707,-0.45762,-1.75767,-1.06525,-0.0897107,0.284172,-0.322227,-0.806383,-0.241081,-0.160515,0.0279186,1.09072,-1.06072,-1.10761,1.17573,-0.29426,-0.934815,-0.284874,0.604702,0.558665,-0.667874,1.22567,-0.305899,-0.140298,-1.20987,0.592459,0.884133,0.0519704,0.622725,-0.289176,0.55725,-0.542449,-1.39163,-0.44788,0.588941,-0.198241,-0.967621,-0.975405,0.396169,0.18694,-0.0629845,1.21602,-0.531663,-0.528504,0.436851,-0.590333,-0.477409,-0.151692,0.144212,0.653098,-0.704214,0.597427,0.280573,-0.171538,-0.422202,-0.394923,0.155207,0.252997,0.00389052,0.471029,-0.760193,0.147631,0.134466,-0.877455,-0.0124065,0.702751,-0.398094,-0.996754,0.355802,0.422881,-0.395931,0.278165,0.247591,-0.197237,0.486385,0.397378,0.836078,-0.123655,0.547566,-0.336892,-0.976967,0.0291853,0.177088,0.515978,-0.140394,-0.090111,-0.0406796,-0.799169,-0.525363,-0.054319,0.420495,0.958108,0.0471445,0.0469115,0.0200876,0.0449437,-0.488349,-1.12917,0.126037,0.920879,-0.404445,-0.149915,-0.0135171,0.658951,-0.728692,0.177833,1.37127,-0.193801,-0.459305,0.641636,-0.363924,-0.588694,-0.528217,-0.358784,0.369592,-0.450933,1.41233,1.79429,2.0911,1.21562,1.04757,-0.691514,-1.68811,-1.07752,-2.44051,0.152278,-0.279099,1.25797,-1.2826,-0.807888,0.537442,0.297609,-0.721931,0.850689,0.620456,-0.463549,-1.51296,1.16376,-0.640891,-0.18833,1.2148,0.979613,0.360939,-0.533762,0.147139,0.0299226,0.194854,0.460948,0.6077,0.033581,0.511081,-0.666155,-0.396503,0.14045,-0.384791,-0.0825828,-0.430587,0.842245,-0.482021,-0.313127,0.0806828,0.0720921,-0.250721,-0.745557,0.829553,-0.339212,-0.513156,0.0591874,-0.0880709,0.370471,0.604147,0.159607,0.32863,-0.844226,0.531689,-0.0365159,-0.502372,0.473421,0.147609,-0.181072,0.28514,0.2842,-0.359096,-0.188845,0.216175,0.264072,0.056213,0.663987,-0.412136,0.541688,-0.0729,1.05465,-0.385722,-1.77038,0.537623,0.405176,-0.111294,0.0475833,0.612836,1.01036,-0.0926508,0.784015,-0.414098,0.210864,-0.03909,-0.638503,0.250867,-0.160078,0.378894,-0.418011,-0.692589,0.00671978,0.105561,-0.0464837,-0.115026,0.739717,-0.694696,-0.544594,0.243724,0.780592,0.0627866,0.287351,0.0793258,0.337409,-0.298828,0.142162,0.495684,-0.145843,0.124717,0.0311126,-0.0487076,-0.356023,-0.029256,0.629574,-0.734752,-0.076693,0.799279,-1.20336,-0.112942,0.299103,-0.0731918,0.332145,0.233173,-0.100454,-0.395057,-0.173851,-0.94617,-1.26691,0.591448,0.805626,-0.24117,0.222236,0.226204,1.4491,-0.0611003,0.181761,1.71976,0.0725185,-0.357099,0.190488,-0.839239,-0.871463,-0.454531,0.209338,-0.381074,-0.0361606,0.338212,-0.257956,0.0769785,-0.429967,0.118956,-0.652269,0.014923,0.253712,-0.618858,-0.258113,-0.0347001,0.400711,0.1382,-0.32885,0.226609,0.00249126,0.152428,0.707794,-0.418414,-0.0167665,-0.178769,0.183127,-0.489158,-0.361598,-0.205155,-0.236314,-0.0892474,-0.0952068,0.765041,0.201661,-1.0693,0.271609,-0.583749,0.00654453,-0.16222,0.238568,0.277535,0.43093,-0.147745,-0.645241,1.13291,1.06879,-0.270866,-0.873269,0.1433,-0.761369,-0.156903,-0.207838,-0.448273,-0.0929232,-0.572679,-0.0245933,-0.353385,-0.806536,0.630147,0.0796937,0.0717585,-0.824064,0.714001,0.0142767,-0.935211,0.184404,-0.446817,-0.0434089,0.0910596,0.397093,0.738298,0.378846,0.304185,0.345818,0.394351,0.725648,-0.0928833,0.235059,-0.412619,0.508453,0.477506,-1.28567,0.13963,0.765945,0.056277,-0.176091,0.303816,0.378679,0.127783,-0.0593441,0.166323,0.261682,0.124811,-0.328144,0.272054,-0.472185,0.369601,-0.149779,-0.0843544,-0.0237039,-0.512548,-0.14951,-0.0641426,0.0818229,-0.738376,-0.262021,0.000175444,0.345542,-0.410453,-0.12692,-0.26909,0.367827,-0.0133461,-0.220375,0.728583,-0.121474,-0.302754,0.435799,0.0957957,-0.161762,-0.139969,0.43903,-0.255288,0.011844,0.474811,-0.0782826,0.0373627,0.542112,-0.377698,0.0294066,0.0150132,-0.545871,-0.693762,-0.494239,0.315853,-0.638875,0.479885,-0.151598,0.276782,-0.257234,0.0613511,1.16137,-0.071934,0.0940548,1.08188,0.236168,0.0318431,-0.6742,-0.660745,-0.339925,-0.00503244,0.788209,-0.241723,0.377731,-0.448482,-0.270549,-0.669405,-0.370215,-0.766982,-0.280127,0.948958,0.142175,-0.0924169,-0.661343,0.878302,0.0897483,1.10929,-0.832866,0.350758,-0.184976,0.188896,0.495929,0.325232,0.280986,0.0617265,0.337993,0.525033,-0.75277,-0.899896,-0.529576,-0.468511,0.916206,0.467908,0.0516453,-0.722031,0.426556,-0.627788,0.0813039,-0.374246,0.24408,0.709811,0.526871,-0.201227,-0.410782,1.57323,0.776839,0.108853,-0.905828,0.796698,-0.764492,0.114375,0.840191,-0.53694,0.107505,-1.1547,0.501025,-0.427723,-1.40117,0.673056,-0.0383941,-0.361767,-0.203418,0.698831,-0.184662,-0.464704,0.0784568,-0.672856,0.718727,-0.527813,0.577568,0.998771,0.104592,-0.016715,0.322988,0.661134,0.23533,-0.153459,-0.249587,-0.0804344,-0.327406,0.521519,-0.30519,-0.344127,0.426521,-0.328661,0.079434,0.208299,-0.472919,0.120673,-0.315882,0.351811,0.324754,0.841533,-0.549355,-0.190565,0.126022,0.23637,0.761189,-0.403755,0.851661,-0.348727,-0.366377,-0.0525426,0.0674265,-0.0169406,-0.230461,-0.606505,0.00590889,-0.42185,-0.745427,-0.0264035,0.199531,-0.237615,-0.318966,0.771149,0.281155,-0.264868,-0.122873,0.417387,-0.126912,-0.0728152,0.534905,0.195232,0.137674,-0.299216,0.955729,0.0196068,-0.11256,-0.631804,-0.173647,0.408174,-0.413291,-0.820677,-0.0836776,1.17093,0.0166154,0.217162,-0.687853,0.502867,-0.427892,0.0628893,-0.042185,0.295345,0.0478191,-0.272575,0.363848,0.486346,-1.44069,-0.00701426,0.601434,0.379739,0.897583,0.431942,0.134981,-0.393455,0.417042,-1.34965,-0.730026,-1.14589,-0.0913321,1.51559,0.764451,0.34978,-0.298321,0.574872,0.0184226,0.310747,-0.3205,-0.415402,-0.955993,0.720847,-0.614999,0.141205,-0.743468,-0.637071,-0.283779,0.915094,-0.664658,0.8729,0.391413,-0.26045,1.2689,-0.615933,0.611382,0.258822,-0.537857,-0.711242,-0.414636,-0.675335,-0.384479,0.876964,0.322197,0.309404,-0.722149,0.395906,-0.417422,1.16861,-0.515502,0.430325,-0.0260346,0.4335,1.46415,0.411119,-0.132221,-0.375631,0.363823,0.139519,-0.535293,-0.516849,-0.501995,-0.337747,0.730588,0.255649,-0.0152288,0.228817,0.133694,0.013164,0.48238,-0.437442,-0.0806932,0.368872,-0.114987,-0.523646,-0.231938,0.446228,0.476786,0.21174,-0.533589,0.183486,-0.293485,0.195517,1.38789,0.223622,-0.120062,-0.148265,0.898041,0.0495866,-0.764999,0.299472,-0.190504,-0.340571,0.254556,0.95919,-1.15702,0.397483,1.1012,-0.043646,-0.314455,-0.957946,-0.0598048,0.40999,0.211836,-0.139392,1.49689,-0.541474,-0.561406,-0.664546,1.12371,-0.657034,-0.248101,0.392883,-0.675626,-0.403498,-0.284222,-0.318087,-0.33768,0.749125,-0.0605704,1.45771,0.482928,0.147199,0.539532,0.914789,-0.411633,-0.0608571,1.141,-0.516441,-0.6704,-0.339855,0.140443,0.701198,0.763141,0.600581,1.17172,0.292057,-0.429086,-0.655359,0.894781,-0.46489,-0.492659,0.248752,-1.19348,-0.285978,-0.545546,-1.0225,-0.307927,0.76236,0.164041,1.95371,1.13329,-0.274396,1.05969,0.110702,0.354624,-0.338597,-0.0166898,0.176054,-0.160313,-0.392412,0.375204,0.0693187,0.357941,-0.0210706,-0.216685,0.834862,-0.133444,0.641227,0.180642,0.471568,-0.162004,-0.106166,1.10984,-0.322508,-0.154835,-0.0536285,0.281745,-0.369988,-0.624822,0.245964,0.151831,0.232885,-1.25609,1.23595,0.866605,0.361991,-2.6681,-2.21966,0.460601,-1.43334,0.543976,-0.458062,0.00331421,0.289151,0.601741,-2.86145,0.128363,0.143753,-3.85484,0.451343,0.126,1.75908,-0.290402,0.818279,-2.09331,0.204656,0.290279,0.878934,-0.470387,-3.25205,-2.01506,-0.701053,-1.19476,0.427051,0.490256,-1.65525,-1.97542,-1.88051,0.377554,0.371316,1.86836,-2.72847,0.870136,-2.35474,1.83784,0.274029,-2.35624,-0.00990334,-0.773675,1.89428,-2.34682,-0.278104,-1.55311,0.931299,-1.72875,1.2752,-2.94597,1.94655,-1.30382,-0.085538,-1.95124,0.0627129,-2.69946,-1.42798,-1.94309,1.6405,-2.03977,0.532386,-1.04095,2.37877,-0.698579,-1.1854,-2.37754,-1.58328,-0.38375,1.21753,-1.40665,3.11213,0.85175,-1.77343,-2.75509,1.17982,-0.660449,-1.68284,-1.56076,0.295685,-2.41408,-0.653442,1.80863,-0.309958,1.0927,1.18636,-0.987259,-0.630819,-1.80397,0.0390534,1.35727,1.29621,-1.28677,-3.31585,1.10761,-1.60483,1.65121,0.924251,1.42932,-2.23199,1.7661,-1.4417,1.05648,-2.79589,-2.76083,0.734506,1.72468,0.135564,-0.392293,-2.3035,0.0813766,-2.38393,-0.252364,-1.02263,0.221435,-2.62295,2.59729,-0.0449967,-0.932975,-0.688664,-1.17185,-2.22923,0.658555,-1.74897,1.7347,-2.54816,2.72859,-1.32381,-2.18506,1.01921,-0.175735,1.04503,0.444255,-1.54499,-2.02198,0.0672639,-2.51006,1.90775,-2.77193,-2.55525,1.57297,0.448443,-0.175781,-1.35046,0.444156,2.44472,-2.90318,1.04193,-0.896377,-0.640374,-0.817646,-1.22565,1.53383,0.255919,-1.78165,-2.24349,-0.719484,-0.250255,0.95778,-2.47019,1.32661,-2.15574,-0.644391,0.97312,0.892007,-0.696245,2.48338,-2.48938,-1.91559,0.517531,2.33782,-0.599989,-1.83478,-1.26893,0.148745,-0.647468,-1.89015,-0.477841,-1.51332,-1.79521,0.58312,0.345564,0.231895,1.41124,-0.186124,-1.51846,-0.498334,-2.78651,-2.44935,0.903079,1.3655,-0.647032,0.0940374,2.10812,0.587435,-1.34943,0.899094,-0.314554,1.23611,-0.992604,0.00788217,-1.25015,0.75455,-1.76847,-2.27461,0.247005,-2.29347,-2.86335,2.58039,-3.14816,1.02893,1.51678,-1.83779,1.13407,-0.772325,-1.68751,-1.72099,0.381438,0.567343,1.12271,-2.79728,-2.45879,0.676216,1.162,-0.761817,-1.57068,-1.01964,-1.22702,-2.10407,-0.0761487,1.78288,0.786727,2.16897,-1.79607,-0.678238,-0.196652,-1.83966,-2.34114,2.44826,0.718669,1.43781,-1.95009,-0.358377,-2.13017,1.20555,0.490318,-2.23364,-0.955581,-0.400498,-0.646603,-0.610609,0.180686,-0.787394,0.730913,-1.10547,-2.52367,-0.0204382,1.38246,-0.669473,0.390832,0.0111921,-1.57649,-0.726658,-0.0829381,-0.794658,1.42023,1.14091,-1.95369,-0.938266,1.83289,-1.09726,-2.87273,0.365207,-0.394226,1.74625,2.15054,1.29616,1.52669,-1.39012,-0.899818,-2.42544,0.256582,-1.83153,-1.34586,-2.48467,0.204094,-0.54446,0.906666,-1.99244,0.502413,-2.63097,-0.590245,-2.37117,0.702921,0.665158,0.892365,0.856361,0.836707,0.611317,0.212533,0.881401,1.27494,0.513974,0.247011,0.871588};
class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
