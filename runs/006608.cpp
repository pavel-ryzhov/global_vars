#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

//double ANN::weights[] = {0.436825,1.28649,0.357986,0.0288478,0.210706,-1.48419,-1.56946,-0.691603,-0.653836,0.162202,0.329479,0.789651,0.348189,1.06856,0.352163,-0.0365324,0.98926,0.522564,-0.748983,-0.557689,-0.215446,-0.844121,1.03123,-0.0678349,-0.172533,0.974559,-0.0944081,0.607149,0.836449,-0.175919,-0.100828,-0.242579,-0.372696,0.675519,-0.134445,-1.06053,-0.729367,-0.241783,-0.787634,0.187672,0.50142,0.100759,-0.175082,0.881355,1.10347,-0.924878,0.153442,0.73731,-0.30252,-0.261753,-0.415021,-0.748727,-0.548392,0.881331,-0.450928,-0.544458,0.489531,0.203501,-0.858064,0.249678,-0.826051,-0.577163,-0.912591,0.566757,0.130779,-0.00177265,0.311603,0.548532,-0.461875,-0.228489,0.943753,-0.60223,0.0609886,-0.353238,0.222146,-0.682038,0.753794,1.10659,-0.347967,0.337243,-0.0782929,0.223604,-0.30659,0.369593,0.672204,-1.05316,-0.285094,0.222331,-0.299833,0.762871,0.0284227,0.199123,0.174545,-0.693654,0.280301,-0.209229,0.799664,0.160273,0.459899,0.00278171,-0.740563,0.249884,-0.629347,0.196647,-0.559809,0.368616,-0.585228,-0.643622,-0.00469683,-0.0706096,0.733383,-0.0138975,0.444944,-0.481938,0.102788,0.659199,0.50937,-0.2876,0.507563,0.0899549,1.25914,1.53856,0.677691,-1.12092,-0.0501532,-1.15492,0.000624397,-0.0680388,-0.67035,0.143488,-0.374507,0.728915,0.166471,1.0578,0.529838,0.24419,-0.715945,-0.971119,0.535909,-1.23042,0.278547,-0.785259,1.45823,-0.354466,-0.431831,1.95836,-0.22994,-0.791402,0.309537,-0.176978,-0.0626601,0.0270688,-0.498311,0.267739,-0.300928,-1.11212,-1.17003,-0.19446,-0.622369,0.0757711,0.609004,0.520433,-0.745039,0.501633,-0.122289,-0.506212,0.293504,1.22163,-1.07136,0.296812,0.0388175,-0.662076,0.0173868,0.245346,-0.0749419,0.194442,0.041854,0.763509,0.392921,0.542507,0.0463432,-0.475785,-0.524356,0.249395,-0.262167,-0.469771,-0.891735,0.603869,-0.722356,0.0354253,0.546695,0.228721,-0.21697,-0.045132,0.669779,-0.61795,-0.461026,1.0126,-0.314042,0.258169,0.205724,-0.0645989,0.336965,0.546991,-0.208031,-0.0959548,-0.0933445,-0.253956,-0.0278003,0.262793,0.781857,0.631542,0.209905,0.317408,0.225645,-0.553714,-0.0443868,0.0404535,-1.17167,-0.0608863,0.0755056,0.184018,0.934832,0.828607,0.856132,-0.139785,-0.201193,-0.650746,0.811102,-0.681355,-0.238332,0.1269,0.96299,0.138414,-0.362714,-0.101127,0.0975467,-0.204289,-0.275027,0.242597,0.0605406,0.323753,-0.343629,0.494693,0.507291,-0.736287,-0.0963441,-0.239536,-0.528588,-0.176321,-0.119454,0.245008,0.0741488,0.637198,0.429304,-0.0413046,0.344674,0.631941,-0.503941,0.238213,0.20627,-0.748744,0.442517,0.00247638,0.102038,0.135344,0.629682,1.41175,0.152395,0.352831,0.0464699,0.583289,-0.213541,-1.21456,0.251222,0.00340265,-0.782315,-0.177651,-0.250668,0.438764,-0.00759434,0.182324,0.589749,-0.107908,-0.253625,-0.312554,-0.262954,0.241777,-0.841403,-0.534762,-0.380034,-0.426444,1.07641,-0.551313,0.419429,1.3557,-0.942948,0.336082,1.1305,0.172515,0.240516,-1.25938,-0.476845,0.219966,-0.300768,0.359357,-0.0617393,0.606546,-0.440456,-0.0536243,-0.0296682,0.225892,-1.05365,-0.615016,0.809341,-0.313253,-0.493568,0.246431,-0.0679562,0.364909,-0.162985,0.1887,-0.687512,0.735773,0.362856,-0.152826,0.364713,0.249115,-0.559761,0.660948,0.981257,-0.299321,-0.12269,0.383661,-0.365083,0.0501238,0.535017,0.729961,-0.589079,-1.00818,-0.645174,0.121768,0.0540198,-0.39697,-0.0300912,-0.487337,-0.651747,-0.693174,1.12365,-0.362523,-0.379795,0.637066,0.557131,-0.0459437,-0.773537,-0.396974,0.681749,-0.0946277,-0.535938,0.118649,0.0398365,0.769809,0.494901,0.288018,0.621005,-0.414777,0.10438,-0.869549,0.3605,-0.510775,-1.28443,0.394095,0.870819,0.94109,-0.787042,-0.418306,0.762533,-0.863997,0.485208,-0.141053,-0.186686,0.790463,0.960675,-0.249639,-0.799028,-0.432962,0.39001,0.747978,0.536743,0.149073,-1.02228,-0.151172,-0.39434,1.05082,0.471269,0.238632,-0.5825,-0.834417,-0.0345151,0.302232,0.159382,-0.569809,0.957441,0.0208467,-0.0994593,-0.18082,1.48602,0.563308,-1.47228,0.102938,-0.530175,-0.233124,-0.00563404,-0.549531,0.378055,-0.621956,-0.737332,1.22013,0.756729,-0.0784332,-1.78652,-0.689021,-0.754625,0.957515,0.399648,0.34771,-0.874387,-0.527213,-0.643006,0.295372,0.363481,-1.0522,0.887869,-0.92378,0.138824,-0.248104,1.08898,1.34056,-1.338,0.425187,-1.09588,0.130972,-0.253553,0.0891171,0.637637,-1.60737,-0.37722,1.86829,0.285707,0.514704,1.54737,-1.14824,0.836592,-0.615217,-0.40053,0.830191,1.21734,1.10869,-0.0830189,0.141147,-0.744543,-0.0183847,-0.526093,-0.90371,1.90413,1.02789,-1.39428,-1.74081,1.51273,-0.333406,-0.842169,0.338154,-0.754419,0.881903,-0.0226618,-0.0583465,0.70622,-0.609,-1.03134,0.135668,0.633947,-0.468166,-0.0442857,-0.877922,-0.588845,0.10912,1.26444,1.4496,-0.207551,-0.10557,0.939751,-0.470715,-0.318217,-0.705478,-0.860969,-0.0730161,-1.12872,-0.358963,0.788083,-0.520413,0.157495,-0.258082,-0.493397,-0.269089,0.356363,-0.137358,0.180739,-1.38739,-0.872374,0.129545,-0.258945,0.259764,-0.547987,-0.0408456,0.186102,-0.399007,0.972698,0.0762438,1.00252,-0.68914,-0.857707,0.505089,-0.943493,0.427714,-1.12198,-0.426106,-0.00410422,0.186759,0.231131,0.708998,0.786464,0.215973,0.224908,-0.529371,-0.156616,0.14545,0.741994,0.0858282,0.803809,0.178889,-0.676489,-0.552423,-0.75039,0.73371,-0.00323677,0.888097,-0.3136,-0.583911,0.852246,0.917823,0.306941,0.0633937,0.0506519,-0.195619,-0.0188993,-0.73844,1.16141,0.235222,-0.606238,0.206221,-0.286359,-0.449831,-0.577553,-0.00632892,0.187833,0.0288151,-0.865246,-0.183303,0.593087,0.132716,-0.859521,-0.771893,-1.10097,1.89113,0.382605,0.262341,-0.169648,-0.176658,-1.43661,0.0824446,1.7237,-1.59649,1.21377,-1.03557,0.671927,-0.588589,2.06266,1.62883,-0.548251,0.486426,-1.65249,0.0295452,-1.09934,0.329912,1.36012,-2.6031,0.424942,1.80016,-1.05215,0.489143,1.36384,-0.452171,2.47181,-0.694124,0.243096,0.340471,0.650212,0.696582,-0.452227,-0.0924521,-0.685697,0.298429,-0.177828,-0.856987,1.9427,2.32531,-0.690907,-1.19974,1.48096,0.487534,-0.0233169,0.0972554,-0.463258,0.933242,-0.68769,0.786823,0.0352627,-1.00995,-0.761788,-0.0756835,-0.258813,-0.279864,-0.823603,-0.290228,-0.0953308,0.0556294,1.43292,1.04528,0.0765032,-0.220208,0.700549,-0.212517,-1.07101,-0.406199,-0.881682,-0.0619753,-1.04247,0.187748,0.104087,0.666117,0.828063,-0.222954,-0.663797,0.00614301,0.730489,-0.194126,0.317769,-0.709924,-0.393775,0.474227,-0.429461,0.742309,-1.26061,-0.614656,0.524477,-0.984807,0.964078,0.282681,0.741182,-0.868685,-0.346788,0.398717,-1.51011,0.29506,-1.83736,-0.611837,-0.678194,0.606784,-0.294235,1.04988,1.33513,-0.349959,0.789272,-0.838152,0.665522,0.573739,0.486494,0.323778,0.952282,0.358133,-0.0191253,0.091803,-0.551291,-0.235573,0.244939,0.763317,-0.0534807,-0.464118,1.24354,0.740015,-0.349554,0.496172,-0.197455,0.726627,0.653065,-0.297696,0.152679,-0.962562,0.0797772,0.278406,-0.617063,-0.0391465,-0.53557,0.817823,-0.246003,0.644423,0.107388,-0.606547,0.0874494,0.122117,0.988848,-0.662001,0.0737229,1.18277,0.135551,-0.200073,0.6683,0.497647,-1.00173,-0.256798,0.580957,-0.979286,0.589109,-0.8182,1.56077,0.492984,0.912872,-0.189976,0.780606,-0.310256,-1.48835,0.0829353,-1.04139,0.264316,0.489314,-1.6982,1.31019,0.727973,-1.58804,-0.068475,-0.976832,-0.722689,2.77707,-1.33253,0.627426,1.98305,0.634327,0.552813,0.603496,0.596696,0.143057,0.312781,0.816116,-1.63497,0.698893,2.49022,-0.378781,-0.736818,0.705932,0.606124,1.22742,0.588074,-0.598957,0.36169,-0.48595,1.46546,-2.53874,-2.44924,0.449401,-0.348227,-0.0357714,-0.0820041,0.166104,-1.45639,0.00943862,0.746789,0.472667,0.516838,-0.0479516,0.353687,0.989178,-0.830572,-0.189514,-1.89039,-0.303463,1.312,-1.0673,0.630193,-0.434908,0.502993,-0.455585,-0.0132803,-0.616611,-1.32618,1.52526,0.32403,-0.942462,-0.338506,0.128782,-0.214033,0.712386,-0.23147,-0.984354,-0.756559,0.273956,0.487572,0.697079,-0.294501,0.39974,0.535559,0.892334,-0.238996,-0.167579,-0.457362,-0.717511,-0.0146296,0.345671,0.920962,-0.720187,0.870207,-0.520088,-0.607341,-0.940527,-0.653577,1.78058,-0.0355032,0.126765,0.404366,0.0398208,0.240291,-0.0370701,0.434788,-0.216819,-0.295482,-0.0324528,-0.172484,0.0664057,-0.284925,0.534849,0.266741,0.405222,0.430955,-0.831281,0.859034,-0.516152,0.325149,0.493261,0.0945076,-0.29701,0.638434,0.521121,-0.888654,-0.275274,0.203999,0.0236812,0.734023,0.191597,-0.495064,0.139721,-0.0787068,1.24327,0.626219,0.701103,0.126527,0.362843,-1.25658,0.548645,0.41351,-0.809059,-0.664679,0.226859,-0.0389268,-0.698983,-0.434813,0.274603,0.706445,0.643069,-0.0877181,0.739766,0.352555,0.584482,-0.721121,0.0911622,-0.139195,-0.0757153,0.318229,0.861254,-0.0107728,-0.924754,-0.28699,-1.66215,-0.867395,1.5622,-1.35457,0.926288,2.69983,0.796146,0.864137,0.785638,0.921433,1.20707,-0.142013,1.73314,-1.36759,-0.425569,0.93889,-0.569033,0.597314,0.340121,0.316646,1.85594,0.756516,-0.324192,0.322581,0.523506,0.689956,-3.15431,-3.14107,1.07014,0.32148,-0.41408,-0.190774,0.785379,-1.04213,0.220451,0.552549,0.282232,0.216216,0.15029,0.39087,0.167228,-0.857068,0.879091,-1.08651,0.240966,0.199918,-0.534509,-0.202682,-0.109745,-0.622529,-0.799954,0.791359,-0.044418,-0.906622,0.766262,-0.309848,-0.562591,0.121031,0.391717,-0.187208,0.880036,0.762218,-0.128321,-1.70191,0.252287,0.664193,0.538516,-1.12254,0.873522,1.4587,0.342528,0.346465,0.835256,0.432857,0.0366822,-0.104356,0.329275,-0.408087,0.271271,-0.101595,-0.93229,0.0522959,-0.585433,-0.743968,1.37771,0.662308,-0.598097,-0.149168,0.830775,-0.108426,1.66875,0.78143,0.526226,-0.88382,-0.140345,-1.15694,1.15106,0.576099,-0.628908,-0.477911,0.2185,0.118896,-0.931276,-0.180938,-1.12061,0.839969,0.33618,-0.215076,0.80244,0.299808,0.610594,-1.01467,0.154375,-1.05718,0.278322,0.610543,0.767744,-0.719479,-0.242757,-0.36278,0.716604,0.618005,0.0626669,0.272768,0.609906,-1.4308,0.605759,0.71779,-0.440158,-1.40847,0.129716,0.343512,-1.55247,0.26741,-1.03039,0.399732,0.661706,0.196036,0.554499,0.566037,1.93636,-0.994093,0.815974,-0.0158436,-0.0747925,0.550244,1.07306,-0.273583,-0.147167,0.167582,-0.669194,-0.0287432,0.00361618,0.0916609,0.245241,0.368705,-0.375987,0.0240661,0.188297,0.11708,0.712754,-0.24362,0.625431,-0.172133,-0.367329,-0.169491,0.0395761,0.873932,-0.442347,0.520599,1.04169,-0.248913,-0.21947,0.295074,0.0271772,0.11271,-0.879539,-1.08586,0.379675,0.311908,-1.20275,-0.768008,0.714516,0.157387,0.015871,0.964909,-1.10315,-0.12077,0.198954,0.604333,-0.220615,-0.323987,1.46905,-0.256499,0.93064,-0.297129,-0.390902,0.255883,-0.834087,-0.315199,-0.2893,1.10511,-0.121828,0.360022,-0.630273,-0.266955,-1.61444,-0.054487,0.502235,0.151529,1.01555,1.04963,0.103629,-0.873525,0.282025,0.1315,0.0190211,-1.53404,0.26587,0.946458,0.285282,-0.656013,1.38443,0.94216,0.73833,0.368631,1.23291,-0.29812,0.0866709,-0.229028,-1.35608,-0.31377,-0.742122,-0.510808,1.18519,0.389295,-0.54475,0.386156,0.0535161,-0.388348,0.656909,0.550415,-0.0654255,0.444465,0.0715588,-0.649924,0.552043,0.126039,-0.616815,-0.381042,0.298033,-0.489983,0.130475,0.409685,-0.310813,0.435791,0.930733,0.0130595,0.132407,-0.016066,0.234719,-0.666532,-0.0371511,-0.6446,-0.0505196,-0.588696,0.677188,-0.323253,-0.610227,-0.309971,-0.960889,-0.496059,-0.419004,0.27338,0.214887,0.139533,-0.274446,0.227644,0.889223,-0.255191,-0.233808,0.698652,-1.48815,0.448658,-0.805298,-0.20138,-0.0749428,0.491167,-0.306894,0.741018,1.81578,-0.361932,0.0508051,0.657742,-0.457687,0.65624,-0.36031,-0.687845,0.570311,0.210614,0.232847,-0.187615,-0.853505,0.517969,0.197051,-0.414283,-0.661593,-0.155506,0.262891,-0.246164,-0.171402,0.410843,-0.80502,0.533315,0.558311,-0.996195,-0.505372,0.276395,-0.31841,-0.0710013,-0.321465,0.215998,-0.164512,1.02648,-0.502288,-0.342418,0.926444,0.51425,-0.342858,0.22116,-0.178915,-1.01436,-0.342413,-0.229875,0.144999,0.221754,-0.93632,1.18892,-0.233345,-0.0897311,-0.15006,1.10972,-0.466424,-0.276613,0.589568,-0.671001,-1.65971,0.273006,-0.53677,-0.22668,-0.00262651,0.858879,1.0972,1.38739,-1.22317,0.160761,-0.116024,0.236324,0.320366,0.758433,0.565881,0.189591,-0.466964,0.0573213,0.0263823,-0.270334,-0.0534329,-0.679145,0.180183,-0.315195,-0.652752,0.1502,0.2396,0.394537,0.254847,0.0245285,-0.0534291,-0.486299,-0.187662,-0.183249,-0.777951,0.391681,0.524619,0.373819,-0.371993,-0.389041,0.331431,0.993811,-0.158947,0.199537,-0.544268,0.354202,0.643807,0.834168,0.393838,-0.17553,-0.0292487,-0.636559,0.335551,-0.567162,-0.910602,-0.0947998,0.369034,0.921471,0.0646498,-0.0864986,0.687477,-0.752337,0.335652,-0.201661,0.375327,0.505751,0.506395,0.0131578,-1.14575,-0.943526,0.101432,0.195884,-0.0666283,-0.0503458,-0.627853,-0.95768,-0.695075,0.259563,0.398056,1.22048,0.285601,-0.0546402,1.70634,0.346789,-1.33158,0.906278,-0.37675,0.148763,-0.112904,-1.19767,-0.902438,-0.297038,-0.0622843,0.0198988,-0.13426,0.929047,0.0320214,0.829613,-0.564783,-0.152428,0.185419,0.0083183,0.655636,0.575145,-0.360187,-0.0556605,-0.390771,0.649284,0.436878,-0.101989,-0.475938,-0.882723,0.752103,-0.225985,-0.805041,0.582003,0.333981,0.927474,0.817197,-0.860299,0.665576,-0.0141221,-0.215112,-0.044095,-1.0958,0.819724,-0.214664,0.654372,-0.185688,-0.68795,0.904022,1.28516,0.159774,0.440107,0.303358,-0.0112783,-0.939915,0.0230723,0.143438,-0.881287,-1.022,0.25373,-0.644575,-0.95532,-0.536855,1.08644,-1.15497,0.491417,-0.268157,-1.22854,-0.619238,0.551204,-0.152126,0.172693,0.158264,0.127325,0.591419,0.863364,-0.905029,0.10782,1.20851,1.11037,-0.448796,0.358228,-0.944529,-0.609784,0.225253,0.155637,0.105445,0.201693,-0.371958,0.34851,-0.153383,-0.556707,-0.33061,0.681567,-0.487049,-0.0742919,-0.631781,-0.181951,-0.483533,0.192906,0.0872385,0.481781,1.59608,0.38224,-0.179002,0.900376,-1.03333,-0.137187,-0.613539,-0.509976,-0.381337,0.277235,-0.270582,0.369401,0.502519,-0.175185,0.50044,0.793393,0.316148,-1.08285,1.73812,0.35223,-1.22415,-0.248943,1.18462,0.792382,-0.928031,-0.22061,0.412689,-1.72866,0.974461,-0.61965,-0.396333,0.924129,-0.080937,-0.680491,0.0670654,-0.38596,-0.2643,-0.430604,0.803022,-0.134223,-0.0124257,-0.123608,-0.119923,-0.0672906,0.501393,1.51582,1.56451,-0.875771,2.29465,0.781887,-1.71544,-0.465449,1.52232,0.00412214,-0.022446,-0.0538417,0.0280545,-2.09194,0.786674,-0.803975,-1.74804,1.72493,-0.536383,-0.678063,0.585899,-0.785133,0.404009,0.268119,0.631749,0.0395954,0.0914598,-0.261106,-0.290288,0.136841,1.08316,0.164855,0.486724,1.0221,0.391311,0.168386,0.705033,1.03989,-0.693087,0.381153,0.120672,0.210505,-0.492527,0.722578,0.322772,1.22764,1.25947,0.310172,-0.224461,1.11614,0.478852,0.395758,0.654045,0.150638,0.218345,1.38993,-2.03753,1.89481,-2.29491,-2.62754,-1.26636,2.98541,-0.345179,0.764039,-0.763594,1.14398,-0.588331,1.46472,-2.28204,0.0154923,0.983815,-0.203581,-1.73713,2.39694,-1.85504,-1.02685,2.2484,-1.22862,-1.24591,-1.20784,0.667191,-0.662076,2.66687,0.164355,-3.64243,-1.14424,1.59265,-0.246249,1.9273,1.9693,-2.00747,-0.340627,-3.03846,-1.81891,-1.87207,1.01443,-0.653882,-0.256719,-0.732577,-0.59529,-0.39799,-1.90003,-1.14062,-0.863187,-0.685783,-1.69308,0.854829,-2.05697,2.13581,-2.58812,0.547341,-3.31748,1.17445,-1.52321,1.24938,-1.74966,-0.779198,2.09567,-1.88581,-2.42912,0.573257,0.236728,-0.141366,-3.83777,1.20715,1.16431,0.279692,-0.862146,-1.93804,-1.99217,-2.18037,0.645027,0.90693,-1.67838,2.16868,1.06797,-2.81018,1.1349,1.75138,-1.40963,1.37324,-1.1555,0.913629,-3.1738,0.553917,-1.60323,-0.543985,-1.06754,1.57514,-2.58951,1.36484,-0.363373,-0.621761,0.903378,0.578788,-1.41791,1.01542,-2.43124,-1.61155,-0.724282,0.00404038,-1.27222,-2.67077,1.67279,1.97155,1.21945,-1.93446,-1.9567,-1.04468,0.100447,-1.78503,1.15645,1.45388,-0.39962,-0.387895,-1.75767,3.13997,0.875349,1.539,-2.76728,0.37661,-2.11744,-2.09178,1.4078,-1.48215,-2.63953,-1.02903,0.111355,0.146038,1.18558,-0.246665,2.94536,-3.1035,0.938433,-1.82954,-1.72491,1.45545,-2.83619,1.93771,-3.50722,-0.959451,0.723248,-0.306558,0.89151,-2.48946,0.42059,-0.201532,-1.13462,-2.38068,-1.802,2.42903,-1.59254,1.75634,0.0764862,-2.93626,1.18751,0.219038,-0.995892,-0.562616,2.6007,1.15706,-2.90821,-3.07808,0.268979,-1.95293,0.935965,0.63547,-3.05732,-0.714136,1.94817,-1.25267,-2.36213,-1.79683,1.37986,2.39517,0.796249,0.539231,0.198113,-2.0387,-2.46455,0.272488,2.43072,0.0255887,-1.44169,-1.7569,-0.565788,-1.1527,-2.12416,-0.770913,1.83711,0.186777,-0.97969,-0.618984,-1.48124,0.143674,1.08514,0.710382,-3.87049,-2.81949,2.65814,-0.290717,0.552676,0.648037,-1.35212,0.995825,-2.30736,0.886446,0.80689,2.32986,-1.14523,-1.41007,-1.23107,0.806171,-1.70774,-0.701408,-1.91332,-0.803246,1.75604,-1.74137,0.531171,-2.38901,-0.227619,0.398758,1.32537,-0.759458,-2.61658,-0.333007,-3.22784,1.08293,-0.646045,-2.74227,0.691432,-0.183202,-1.54504,-1.22736,-0.584737,-1.53265,0.626873,-0.575698,-1.59533,2.02036,-1.94531,-2.38418,0.165723,2.47517,1.49131,-3.13684,-2.18493,-2.13992,-1.2619,0.724645,0.199731,1.79636,1.66722,-0.244522,-1.71747,-2.67463,2.28391,-0.735356,-0.0647269,-2.18603,2.72362,-1.36904,-1.86328,-1.55425,2.1042,-3.23767,2.62426,0.64874,2.00314,-2.85735,-2.27385,-1.70107,0.0235307,-2.06056,0.698194,-2.03372,0.297729,-0.240071,0.591951,0.564737,-2.5697,0.183832,0.214313,0.38932,-2.95814,-0.19381,-1.46697,-0.114181,-0.57602,-2.21209,-0.702102,-1.15596,-1.582,0.845293,-0.570693,0.0371777,0.388716,0.742298,1.12813,0.531563,0.249895,0.562955,0.482807,0.331264,0.542142};
double ANN::weights[] = {1.36823,0.752516,-0.47767,0.640356,0.721767,0.819709,0.407371,-0.0515127,0.312517,-0.458837,-0.668457,0.770262,-0.977852,-0.25904,1.88503,0.340822,0.738725,0.347843,0.407676,-0.352936,2.01199,-0.668963,-0.915505,-0.133759,-0.612378,0.167044,-0.505555,-1.39219,-1.74772,0.533538,-0.0597763,0.260995,-1.08358,-0.156557,0.181096,0.193939,-0.515671,0.890168,0.571861,-0.993402,-1.73199,0.0315521,-0.839985,0.0436893,-0.331309,-0.00301382,1.01501,0.251047,0.0239615,0.075604,0.384928,-0.90965,-0.913987,1.3964,0.834829,-0.0300312,-0.767884,0.0721449,0.103334,-0.302668,-0.222248,0.421122,-0.0116892,0.144168,0.955116,-0.225322,-0.962688,0.742095,0.447925,-0.631965,-0.469566,-0.429331,-0.82019,0.491944,-1.06887,-0.961106,0.399875,0.709216,-0.452537,-0.601588,-0.775552,-0.165836,0.342752,1.00029,0.637063,0.2848,0.609213,0.555084,1.00478,0.333944,0.0310411,-0.189847,0.639314,0.0740025,-0.13011,-0.612749,0.142328,-0.0634497,-0.145935,0.120726,0.550308,-0.046128,0.514413,-0.0666126,0.716422,0.140478,0.0582206,-1.37541,0.457821,0.467162,0.0103153,1.18032,0.86714,-1.08206,0.0904474,0.276717,0.128095,-0.608553,-0.254524,0.411106,-0.0130494,0.444471,-0.0371531,0.238467,-0.458501,-0.865155,0.736144,0.427178,0.591851,0.377392,-0.228785,0.0058341,0.429155,0.574499,1.93987,0.302416,0.542657,-0.807112,1.05816,0.269733,2.04067,0.766414,-0.0949437,-0.747173,-0.571784,-0.416242,-1.62784,-1.47613,-1.55444,-0.0117847,0.948479,-0.0609083,-0.458867,0.208639,0.537643,0.553737,-0.482731,-0.569784,0.661321,-1.09673,-1.23838,0.129777,-1.20645,-0.257953,1.01159,-0.513899,0.997209,-0.00480721,0.689578,-0.556276,0.510863,-0.888885,0.0701058,0.599833,0.334505,0.234855,0.301987,-0.603731,-0.240754,0.761557,-0.778213,-0.153186,-0.312107,0.194487,-0.0894458,-0.030647,-0.743856,-0.220374,0.785415,-1.21535,-0.701387,-0.180542,-0.65507,-0.243689,0.914567,-0.217725,0.747363,0.563885,-0.0277815,-0.31792,0.683029,-0.45498,-0.369713,0.854512,0.439292,0.0937611,-0.216162,-0.0957928,0.0809633,0.146896,-0.621126,0.327807,-0.750683,-0.0231695,-0.771072,-0.663938,0.0199316,0.86539,0.5713,0.145976,-0.232247,0.360047,-0.223828,0.364642,-0.0168505,0.461193,1.02108,0.856435,0.856688,0.532282,1.10032,0.0633063,-0.416883,0.514053,0.031845,0.15269,-1.32509,-0.649111,-0.905297,-0.419088,1.8229,1.09294,-0.485301,0.317328,0.879561,0.939144,-0.252419,0.198404,0.184983,-0.020002,-0.388913,0.0316483,-0.712581,0.111993,0.130375,0.121362,1.17234,0.285407,0.438432,-0.00727334,0.340531,0.380754,0.559544,0.31879,-0.0156111,0.682058,-0.23733,-0.700514,-0.58971,-0.315829,0.613756,0.200398,0.82005,0.561427,0.192589,-0.162367,0.429199,-0.444287,0.234745,-0.337128,0.319485,0.119859,-0.22956,0.332139,1.35329,-0.239075,0.236632,0.231351,0.209152,-0.498272,0.629242,-0.5129,-0.391769,-1.41263,-0.852342,-0.101203,-0.289199,-0.63616,-0.89845,0.671353,-0.461503,-0.635992,0.503042,-0.0878431,-0.666,0.2941,-0.655265,-0.572194,0.470144,-0.0783513,-0.974228,-0.277766,-0.0885157,0.436428,-0.59002,-0.0188434,0.139933,0.143539,0.459387,0.110825,-0.787647,-0.926433,0.529536,0.414457,1.3838,0.141943,0.245101,0.560047,1.0738,-0.233865,-2.00083,-0.0949291,-0.723101,-0.522367,-1.22208,-0.0439032,-0.478208,0.0178823,0.261228,0.072041,0.523679,-0.522748,-0.321478,0.786317,0.334341,0.208705,-0.161692,-0.458317,0.641034,0.558637,-0.896656,1.02573,0.295485,0.603989,0.274509,-0.47978,-0.884664,-0.350718,0.199041,-0.46911,0.56224,0.650988,-1.01779,0.19863,-1.04306,0.628116,0.750529,0.0422934,-0.130005,0.474376,1.33078,0.959697,-0.700368,0.0141081,0.342377,0.754181,-0.0570194,-0.396727,-0.135126,1.22679,-0.609384,1.26283,-0.14034,-0.0162625,-0.121928,0.425483,-0.661256,-0.486728,-1.28847,0.331488,2.10142,1.58786,0.229217,0.391554,1.13831,0.959311,0.723041,0.4181,-0.656558,-0.113696,0.962257,0.323094,-1.31392,-0.268899,-1.1011,-0.306732,0.128095,0.64447,-1.02313,-0.498266,-0.905184,-0.00988625,-1.05325,-0.17135,-0.539404,0.450034,0.38412,0.48877,0.0756337,0.506194,1.67752,0.959944,-0.0795255,0.146689,1.08115,1.55751,0.359413,0.432,-0.0702726,-0.541149,-0.077417,-0.166826,-1.47335,0.0488948,-2.34822,-0.767841,0.238501,1.18467,-1.43054,-0.681689,-1.05209,-0.954721,-0.989544,0.43112,-0.0775462,0.420934,1.24509,0.623093,0.164889,0.453399,-2.50985,-1.42345,0.71718,-0.571407,-1.76522,-0.626073,0.0692144,0.604215,0.335746,1.20373,-0.527285,-0.744149,1.01553,1.16997,-0.821905,0.81573,-0.398049,-0.523449,1.37106,0.450237,0.479271,-0.659843,0.463791,-0.162496,0.775959,-0.437663,-0.557774,-0.00779579,1.36773,-1.35152,-1.95039,-0.676742,0.104056,-0.670894,0.127864,-1.35746,-0.423274,0.430747,0.462479,-0.157621,-0.362549,-0.898842,0.868056,0.895717,0.0829041,-0.610969,-0.500432,-0.946688,0.755365,-0.273632,-0.109225,0.791328,0.537478,0.405803,-0.481553,-0.393285,-1.02002,0.363827,0.682948,-0.514619,0.638567,-0.402548,-0.232577,-0.160147,0.248154,-0.164619,-0.593663,-1.07155,0.104008,0.076743,0.668882,0.0713699,0.161371,-0.180722,1.34607,-0.305247,0.0186175,-1.68027,-0.081187,0.338689,-0.780528,1.5535,1.75393,0.0781072,0.218581,0.0865412,0.684619,-0.145284,-0.388571,0.888544,0.573931,0.935929,0.942487,0.375357,0.950423,0.0240916,0.413084,-0.107488,-0.686542,-0.503126,0.490122,0.502835,-0.807162,-0.0307154,0.201947,-0.131393,-0.442581,-0.0584489,-0.619424,0.0700918,-1.19798,-0.39695,-0.382342,-0.557623,-0.0646004,0.123204,0.719916,1.31624,0.498811,1.00666,0.842596,1.90177,-0.858172,-0.263629,2.1347,1.67565,0.328735,1.74801,-0.116677,-0.937666,-0.460691,0.0430191,-1.91307,0.453088,-3.76905,-1.21782,0.689031,1.80539,-0.566022,-0.788428,-1.62923,-0.938981,-0.972816,1.71444,-0.137442,0.234312,0.785913,1.43717,0.876515,-0.203242,-1.51272,-0.741059,0.440187,0.25012,-1.00358,-0.930067,-0.0632547,0.858771,0.0355323,2.27662,0.0553866,-0.76118,1.20941,0.820842,-0.00458531,1.29389,-1.24116,0.106845,0.893005,-0.172163,2.7838,-0.436368,0.58881,0.397993,0.487614,-0.053736,0.431635,-0.832265,1.02366,-1.70902,-1.34427,-0.859754,0.294444,-0.345727,0.862938,-0.800974,-1.35772,-0.363319,0.351293,-0.183217,-0.964568,-0.814818,1.02781,0.416402,-0.350318,-1.40749,0.475965,-0.521892,0.173879,-0.00321293,-0.762886,0.271963,1.40114,0.662662,0.30247,0.453852,0.0532061,0.739146,0.896576,0.329829,0.718115,-0.849677,0.0687629,-0.461437,0.86483,0.266058,-0.971186,-1.75681,-0.156011,0.125587,-0.309736,-0.113571,0.552195,-0.0984926,1.68945,-0.769754,0.938215,-1.01003,0.00716105,0.148842,-1.24213,1.34784,2.17932,-0.413895,0.0491742,0.730589,0.736758,-0.711635,-0.559928,0.819539,0.127726,0.137714,0.552928,0.455582,-0.302028,-0.213292,0.182631,0.0870429,-0.237917,0.143435,-0.163213,0.594964,0.850538,0.738185,0.229388,0.779961,0.283963,0.287838,-0.466906,0.784932,-0.107192,-0.799284,0.0669596,-0.827607,0.370867,0.144244,-0.033584,0.635423,-0.0211172,-0.235223,-0.560064,0.886627,-1.25953,-1.15382,0.329212,1.05686,0.235466,2.0431,0.0280903,0.59302,-0.489761,-0.597634,-0.975316,0.815216,-2.47527,-0.268667,0.511044,0.328727,1.08626,-0.156175,-0.168656,-0.506047,-0.0801887,1.00971,-0.106497,-0.743995,-0.53347,0.397989,1.04003,-1.53491,-1.43845,-0.332611,1.92711,1.14325,-0.487029,-2.11916,0.15507,0.154527,-0.661066,1.78636,1.61456,-0.662366,1.89685,0.216036,0.565705,0.978824,-2.89108,0.451592,-1.78553,-0.778149,2.41191,0.210007,-0.314954,-0.758035,-0.231482,0.264285,1.91754,0.118126,0.838966,-0.456506,-0.618161,-1.24873,1.53301,-0.438155,0.811235,-0.241533,0.389596,-0.223221,-0.479771,0.274193,0.718519,-0.801921,1.07981,0.498782,-0.455855,-1.44052,-1.37479,0.231062,0.0357328,-1.41882,0.805529,-0.673457,0.30468,-0.836296,-1.08815,-0.134375,1.49092,0.254391,0.486098,-0.00633187,0.669608,-0.451802,1.14124,-0.197766,1.71288,0.443154,0.568779,0.167447,-0.198819,0.100162,-0.45433,-0.0616875,0.200642,0.530192,-0.876846,-1.2336,0.226468,0.38388,0.744607,-0.592513,-0.349565,-0.873712,1.27311,0.140768,-0.487458,0.201924,1.13554,1.14759,0.60075,0.599246,0.205613,0.199497,0.204467,0.163852,0.668102,-0.402191,-0.609084,-0.939871,-0.453161,0.306242,-1.06964,0.325585,0.890934,-0.0373837,0.984773,-0.0599378,0.661284,-0.0897176,-0.0388574,0.0307013,0.377779,-0.353384,0.980986,-0.133637,0.03503,0.389675,0.550457,0.316451,-0.23716,0.113603,-0.374436,0.138912,-0.857137,-0.757173,0.543314,0.147757,-0.317529,0.939519,-0.248738,0.933386,-0.408658,-0.771018,0.429147,-0.165466,0.606585,-0.147766,-0.191384,-0.494655,0.918148,-0.774826,1.36971,0.666193,1.51438,0.856702,0.0520175,-0.17634,0.321107,-0.874453,-0.184131,-1.16028,-1.73946,0.120608,2.44821,1.77365,0.65683,-3.04657,-0.100746,-0.721525,0.218851,0.066632,2.16527,-0.538983,2.18115,0.169764,0.285016,0.314003,-3.16586,0.882558,-2.73254,-0.954948,0.640267,0.801054,-1.12368,-0.620804,-0.108241,1.25858,1.9374,1.72062,1.27718,0.681854,-0.456708,-0.367192,0.971546,-0.385664,-0.118038,0.150912,1.1265,0.849944,-0.195038,-0.235099,1.32269,-0.348933,0.0454938,0.289336,-1.12454,-0.227584,-0.982753,0.128317,-0.189303,-0.538055,0.223457,-0.201899,-0.821282,-0.818299,-1.47477,-0.15195,-0.159591,-0.0327769,0.675795,0.191584,0.320399,-0.286367,1.72187,0.685146,0.47305,0.28882,1.82932,0.917289,-0.230027,-0.135607,0.603704,0.940856,0.883185,0.996028,0.00724929,-0.341972,-0.284283,-0.171229,0.443315,0.247937,0.729597,-0.740475,0.352949,-1.00668,-1.0194,-0.134395,-0.0983532,1.28551,-0.0354645,0.808289,-0.974896,0.110864,-0.362922,-0.601959,1.31047,-0.81792,-0.378805,-0.445154,-0.580803,1.08843,-0.260563,-0.592563,1.08349,0.11406,0.783985,-0.182671,0.0684671,-1.12543,1.70247,-0.586109,0.898275,0.61834,1.8871,-0.130511,-0.861985,-0.413459,-0.305751,-0.997196,-0.334594,-0.145713,-0.0300632,0.338424,-1.05922,-0.770396,0.85653,0.105378,-1.20616,-0.350227,0.175254,0.390585,-0.495749,-0.482143,0.839422,-0.766138,1.7279,-0.0220766,0.414535,-1.55501,0.707403,-0.154664,0.797262,1.75218,2.61572,0.745599,0.498283,0.0855696,0.174352,-1.36105,-1.1224,-0.220239,0.276399,0.29188,0.150546,0.491436,1.16425,-1.09746,-0.161647,-0.452795,0.256716,-0.702536,0.827146,0.0189452,0.584974,-0.487045,0.174031,-0.11691,-1.01655,0.394493,-1.01217,-0.0442152,-0.552755,0.414669,-0.416803,0.164493,0.353875,0.757561,0.599732,0.637349,-0.3985,0.447372,0.216591,0.0250082,0.737153,0.918385,-0.859972,-0.468618,0.538896,0.0405075,0.399855,-0.938367,1.05194,-0.00922783,-0.714755,-0.187555,-0.587911,0.770992,-0.849714,1.16978,-1.9129,-0.233203,-0.215381,-0.942708,-2.03253,-0.831591,-0.114637,0.320838,0.000664679,0.250535,0.590616,0.467337,0.904395,0.557744,0.0489058,-0.31198,1.08344,0.755845,2.63589,1.84684,-0.577665,0.388139,0.373211,0.979767,0.144274,0.663895,0.0651837,0.105983,-0.352442,0.522841,0.511117,0.344414,0.760501,-1.02058,-0.381988,-0.373629,-1.48002,-0.0996475,-0.350338,0.698249,-0.450832,-0.0322567,-0.104736,0.787239,-1.02712,-0.830751,0.69733,-0.331058,-0.204015,0.255812,-0.712712,0.393669,-0.149436,-0.120714,-0.0321426,-0.259888,-0.579517,-0.222868,0.288874,-0.190393,0.681656,-0.34482,-0.184548,0.360399,0.129972,0.404605,-0.675698,-0.189576,-0.613957,-0.158228,-0.499042,-0.334686,0.0422176,-0.02383,0.46189,0.809197,-0.0277476,-0.342093,-1.52387,-1.71011,0.426252,-0.473302,-0.645663,-0.123088,1.09518,-0.791134,0.985893,0.668686,0.0741514,-0.617346,-1.17967,0.166914,-0.0805044,0.160697,0.603535,-0.203016,1.35115,0.431678,0.886158,0.218479,-0.66109,0.530898,0.536794,-0.175522,-0.570593,-0.323124,-0.491199,0.883391,-0.0880887,0.163816,0.499211,-0.780163,-1.07293,0.333338,-0.257818,0.0608485,-0.234488,0.14631,0.878504,-0.0547858,0.153825,0.687962,-0.826384,-0.684075,-0.0634365,0.210614,1.15712,0.165437,-0.497027,0.164801,-0.157888,-0.287047,-0.50787,-1.28812,0.2585,0.876285,-2.00321,-0.314289,-1.46993,-0.736795,1.85516,-0.698516,-0.364885,-0.954366,-0.614411,0.665056,0.4161,0.304285,0.950809,1.23493,-0.344659,-0.112791,0.326839,-0.466087,-0.452203,0.283566,1.11589,0.540973,-0.770072,-0.884722,0.717226,0.432317,0.954851,-0.467892,-0.211152,-0.115488,-0.69504,1.04272,0.487754,-0.286512,0.155724,0.325441,0.226421,0.424059,-0.797435,0.538478,-0.525454,0.0342924,0.617511,0.286297,0.355965,0.113197,-0.502583,0.213319,-0.034421,-0.584719,-0.145646,0.116571,-0.913488,-0.623155,-0.320337,0.112248,0.388911,0.718891,-0.747475,0.116248,-1.00298,0.694157,-0.263569,-0.00447766,0.0188374,0.25438,0.713821,0.788818,-0.355975,-0.390545,-0.284267,1.41107,0.318277,0.0411342,-0.536537,0.74386,-0.528904,0.895882,-0.540647,0.320399,0.376603,0.311115,-0.57807,-0.495075,-0.585403,-0.303232,-0.1509,-0.737938,0.249098,0.246137,-1.40791,-0.0956931,-0.422206,-1.20122,0.897903,-0.293838,0.254368,0.363614,0.399296,0.341332,-0.124571,0.856948,0.158844,-0.31232,-0.524093,1.02606,-1.52632,-0.0537759,-0.0280359,-0.792571,1.52495,0.436941,0.133693,0.73689,0.843006,0.551501,0.971673,0.115611,-0.882151,0.0836073,-0.898692,1.43098,1.03915,0.642507,0.234339,0.137549,-0.998536,0.971698,-0.744352,0.407719,-0.112508,0.564394,1.09456,0.400075,-0.200403,1.1648,-0.950059,-0.642775,-0.271373,0.121378,0.606391,0.632615,-0.330915,0.106229,0.424959,-0.0574132,0.322279,-0.703011,-1.2737,-0.185444,-1.16272,1.11408,-0.9438,-0.718822,0.884452,-0.663418,-1.96898,-0.136379,-0.958024,0.0320668,0.756564,-0.412875,1.16218,0.0255118,0.581574,0.159968,-0.143023,-0.276422,0.357306,0.532255,1.25724,0.118497,-0.40744,-1.07902,-0.568195,0.0783438,-0.619064,-0.179923,-0.0873786,0.644207,-0.857836,-0.544602,-1.69729,-0.720901,0.704999,-0.303518,-0.279496,-0.0856962,0.142173,-0.351697,0.290279,-0.0710121,-0.357781,-0.0205988,-0.996091,-0.325201,-0.197639,1.0792,-0.0162049,0.766336,0.897616,0.615531,0.766789,-0.242379,-0.116269,0.250654,0.0193729,-0.228517,0.0817502,-0.260264,-0.633643,0.0737583,1.6682,0.189173,-0.417854,0.284258,1.72688,1.31429,0.563125,0.110026,0.0668992,1.18809,-0.941927,-0.940797,-0.406406,1.52559,-1.37076,1.3998,-0.815438,-1.08483,-0.688275,0.526552,-0.19944,0.443209,-0.140282,0.473971,0.401431,-1.05208,0.427258,-0.657455,-1.66599,0.488156,2.45276,0.628654,-0.462467,0.939795,2.11924,1.11224,0.213192,0.930867,-1.09128,1.13442,-0.713544,-0.575372,0.190027,1.67518,-1.98173,0.505873,-0.603624,-1.7127,-0.413133,0.392869,-0.215714,0.582993,1.29227,-0.0675588,0.475151,-0.217861,0.413986,0.421247,0.255138,0.477747,-0.797585,-0.579692,0.509539,0.272958,-0.841785,0.0392095,1.21709,0.712375,0.240623,0.153796,0.680257,0.337612,0.152751,0.432039,-0.301819,0.465463,1.54117,1.14147,1.12613,1.58398,0.261508,0.97819,0.0627766,0.586142,-1.95782,0.227629,0.584534,3.14426,-0.701198,-4.52863,-1.22648,1.42232,-2.97981,-0.831232,1.44171,-2.71189,-0.00701551,1.78816,-0.434318,-1.57562,-2.73593,1.30414,-1.16619,0.0306498,-1.31787,-1.70109,0.558793,-2.3434,1.52636,-1.53948,1.43978,0.488863,2.95912,-2.59004,0.308946,-2.58403,0.399323,-0.0774151,-0.768213,-1.63491,0.202106,0.58791,0.573427,-2.78972,-0.401597,-0.31781,-2.69759,1.14538,2.3013,-3.40072,-3.84521,0.721026,2.35062,2.37095,-3.75544,2.42255,0.914929,1.2627,-1.16629,-1.79344,-2.01604,-0.325745,-2.70555,-0.0813215,-1.74912,3.02935,0.841635,-3.93737,2.5601,-0.720953,-2.15772,0.838962,-1.78268,-1.23928,2.38534,0.293292,-0.210547,-3.34719,0.570891,0.800962,-2.72106,0.688474,-2.69667,1.18567,0.34166,-1.26823,-0.28169,-0.705334,-3.85334,0.843254,0.0623598,-0.291134,0.934708,-1.47962,-0.449468,0.133067,-1.03534,-2.00905,0.709346,-0.553742,1.13545,-1.24387,-3.92628,0.840339,1.95875,3.21345,0.062061,-1.18246,0.927708,-3.60052,1.25442,-1.25095,-1.43561,-2.73446,-0.703283,0.300748,1.62454,0.95197,0.721013,-0.653725,-1.54901,0.510276,-1.27301,-2.19977,-0.227098,-2.79418,-1.13163,-3.88658,2.86777,1.39534,2.00798,-1.00964,0.255195,-1.45329,0.102348,0.129147,-0.0669683,-3.70918,-1.09307,-0.374937,-1.06663,-1.39957,-0.0283603,0.727661,-4.72477,-1.06754,-4.24027,0.350349,-0.11552,2.42103,2.28466,2.41187,0.13895,-3.42418,0.236318,-0.895197,0.964,-1.42569,-0.530153,0.799097,1.81007,-1.51522,-3.71814,-2.25697,-2.50636,1.11506,0.446754,0.643072,-3.01483,3.01562,-3.94119,0.552719,0.179192,0.931917,1.75195,-2.77994,1.36284,-0.67282,-1.30866,-1.86042,-1.40709,2.06544,-0.20916,-0.602391,-2.55755,2.94826,-2.37605,-2.1101,-1.50087,2.8041,-0.89693,0.551615,-0.384219,1.48453,-1.06598,1.15624,1.88404,-0.609611,-0.240765,1.28736,-0.627278,-2.04456,-1.91753,-1.82123,0.726509,-3.68367,-3.69267,-1.9026,0.419765,0.544887,1.60072,3.43789,-3.09853,-1.24976,0.915881,2.82246,-2.95687,0.519297,-0.876182,0.248662,0.0148335,-2.69385,-0.785666,-1.6818,-3.74383,0.419996,-3.84584,1.20774,-0.640848,0.32614,0.0205555,-2.94285,0.22594,2.54687,2.38809,-2.3564,-1.64984,1.37562,-1.86107,0.902589,-2.70375,-0.892785,-0.683555,1.64268,-0.675242,-2.76256,1.1083,1.38587,-3.38406,0.844824,0.0998785,-3.04126,-0.814186,-0.254545,0.0688963,-1.54656,0.136017,0.175327,-1.02819,-1.85717,-1.56879,-1.62692,0.167804,-2.15641,-0.153638,-3.82177,-0.666302,1.1765,1.61415,-3.2097,0.681304,-1.49004,0.224322,1.3291,0.13393,-2.00897,2.52581,-1.16212,0.666696,-1.40341,-2.78259,-1.60548,2.43543,-0.253112,0.311109,-0.535353,1.2352,-2.79909,-0.779593,-1.26806,0.747077,-3.64271,2.10216,1.93331,-1.70063,0.0885427,-0.597598,1.45777,-0.425209,-1.85701,-0.593365,-0.181781,2.24116,-2.07821,0.20121,0.255431,0.460047,1.10592,1.1406,0.70157,0.903284,0.183376,0.737177,0.629884};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }
    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      //numbers[i].swap(vector<string>(numbers[i].begin() + points[0], numbers[i].begin() + points.back()));
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    // image->swap(vector<string>(image->begin() + start_y, image->begin() + end_y));
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      //(*image)[y].swap(string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x));
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
    size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    random_shuffle(width.begin(), width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    random_shuffle(height.begin(), height.end());
    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }
        result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
      }
    }
  }

};


int main() {  
  srand(100589);
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
