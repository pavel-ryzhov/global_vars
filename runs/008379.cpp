#define max_n 200
#define max_m 500
#define max_obj 100
#define max_neuro 1000
#define d_n 64
#define d_m 48
#define window_n 4
#define window_m 3
#define destroy_rate 0.5
#define signs_n 10

#include <iostream>
#include <string>

using namespace std;
    
    const int dir[8][2] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};
    const int s_teta = (window_n * window_m) / 2;
    const int a_teta = 0;
    const int  s_elem = (d_n / window_n) * (d_m / window_m);
    const int a_elem = s_elem;
    const int weight[a_elem][signs_n] = {
{2,11,0,14,0,15,1,34,1,1},
{2,11,4,19,0,18,1,46,1,1},
{3,13,10,25,3,28,1,42,2,1},
{6,13,12,27,3,44,7,45,13,6},
{25,13,27,37,8,38,21,46,22,26},
{33,17,38,42,22,32,27,34,31,31},
{36,27,36,47,27,36,33,34,37,34},
{33,32,39,47,31,47,32,34,47,40},
{39,37,36,45,26,48,32,39,49,42},
{42,41,41,52,27,42,33,38,50,47},
{43,35,42,46,28,42,33,39,39,45},
{22,39,20,45,31,40,35,39,34,29},
{7,40,17,28,32,38,17,39,22,10},
{4,41,12,27,20,40,13,41,9,11},
{2,39,9,24,15,39,10,49,8,6},
{0,30,0,15,15,16,6,39,7,0},
{5,16,5,17,0,15,5,35,2,1},
{9,16,12,28,0,21,7,40,14,15},
{28,24,27,38,5,40,19,42,23,30},
{31,27,39,41,5,37,27,43,37,36},
{34,32,39,43,17,38,34,43,35,32},
{39,37,39,42,30,37,33,43,41,32},
{35,38,37,42,34,50,34,43,39,32},
{33,44,37,44,31,47,29,43,39,43},
{32,46,38,45,31,46,34,43,39,43},
{33,49,44,47,32,46,33,53,42,42},
{37,51,44,48,32,48,32,50,44,46},
{42,47,46,52,43,51,40,50,44,50},
{42,45,48,57,41,51,39,50,41,43},
{26,41,29,46,30,50,35,51,36,36},
{13,39,16,24,12,40,15,52,20,27},
{2,32,5,0,11,8,1,38,3,15},
{9,18,10,15,0,15,7,22,8,18},
{28,21,35,25,0,23,20,30,30,31},
{34,22,30,31,5,43,31,32,34,38},
{33,26,30,25,14,42,34,31,39,23},
{39,28,30,27,28,34,34,29,43,31},
{37,34,30,32,34,36,31,29,41,36},
{35,46,34,27,33,47,30,29,34,32},
{24,49,31,21,31,34,25,29,17,18},
{18,50,37,26,29,34,21,39,12,27},
{29,48,39,33,31,33,28,39,15,37},
{32,43,43,38,35,24,31,40,19,39},
{34,47,37,43,46,26,28,47,24,42},
{41,46,43,54,41,21,28,52,40,44},
{44,40,42,43,27,19,28,53,41,48},
{29,37,26,28,18,8,25,43,38,36},
{8,28,11,8,11,0,11,12,13,16},
{14,18,11,22,0,17,11,19,16,28},
{34,24,29,31,0,28,28,22,26,37},
{35,28,31,32,14,44,35,19,31,31},
{39,32,24,24,24,40,35,18,40,34},
{37,33,28,20,33,34,32,16,36,36},
{37,33,25,21,27,32,30,16,35,23},
{26,34,26,18,28,42,28,17,20,20},
{18,36,29,18,29,33,22,27,9,13},
{15,40,30,33,30,27,17,30,8,20},
{21,45,32,35,33,19,30,37,15,32},
{27,47,33,37,43,16,29,39,22,34},
{31,46,36,37,42,15,19,49,30,37},
{35,43,42,44,38,11,23,52,33,43},
{41,39,43,28,27,6,25,47,40,53},
{35,29,42,29,12,6,25,40,35,39},
{16,23,23,13,11,0,19,9,21,28},
{30,18,20,7,0,11,21,14,18,37},
{36,23,26,15,14,30,35,14,32,38},
{36,25,25,17,23,36,37,14,36,43},
{40,26,25,19,24,26,35,13,40,38},
{37,27,24,15,35,20,28,4,35,26},
{29,21,27,14,32,36,28,3,32,20},
{25,23,24,25,32,28,32,4,19,19},
{7,34,22,29,27,24,18,17,6,7},
{5,38,23,36,36,30,14,24,4,8},
{19,39,29,40,37,27,20,36,16,31},
{27,45,36,39,41,24,11,44,25,34},
{28,43,39,36,42,22,13,47,30,39},
{34,41,39,34,40,15,12,40,38,46},
{36,39,48,33,23,10,8,41,38,44},
{44,28,45,21,12,0,9,21,31,47},
{31,22,24,13,9,0,4,3,22,26},
{34,15,14,0,8,12,28,2,19,37},
{37,21,24,0,20,29,37,11,31,43},
{42,21,19,8,24,32,38,10,35,45},
{39,18,20,15,35,28,32,1,35,29},
{36,18,19,15,32,25,29,2,39,21},
{28,15,18,19,32,36,35,1,35,16},
{23,24,15,23,24,28,33,17,24,15},
{6,33,14,33,24,34,24,23,13,16},
{5,38,17,41,28,36,19,32,16,17},
{19,43,31,41,33,37,14,35,30,33},
{25,43,35,38,45,35,23,45,27,39},
{27,44,39,31,49,32,23,41,31,40},
{32,41,46,36,43,18,16,38,38,39},
{36,29,48,34,24,17,16,35,29,47},
{44,25,35,22,12,10,9,7,28,46},
{40,19,8,5,8,6,0,3,8,29},
{36,12,12,0,17,14,35,0,7,46},
{43,12,14,0,23,27,38,0,17,42},
{42,12,10,7,27,29,39,0,29,45},
{39,11,10,8,43,30,32,0,38,41},
{31,14,10,16,32,29,36,1,37,27},
{27,13,10,27,30,43,45,7,41,26},
{23,26,5,38,22,37,32,23,38,24},
{6,34,14,36,31,33,32,30,32,11},
{5,38,30,37,25,38,27,35,34,21},
{19,41,40,37,34,48,28,38,36,37},
{25,41,41,39,44,59,29,41,35,37},
{28,44,43,48,49,54,29,37,36,32},
{32,31,46,39,38,40,21,35,30,42},
{37,29,38,22,21,25,15,21,27,47},
{44,22,27,11,11,18,10,3,14,42},
{39,19,1,0,8,9,4,0,0,38},
{37,9,3,6,26,17,38,0,7,39},
{44,8,13,6,28,30,38,0,21,41},
{42,8,12,7,42,31,40,0,25,45},
{37,10,9,11,41,29,35,0,40,39},
{29,13,9,26,25,28,41,7,48,30},
{26,20,9,33,23,24,45,17,42,27},
{23,27,10,38,23,22,35,30,41,25},
{6,34,40,45,31,21,27,34,38,27},
{5,39,40,43,33,27,25,31,40,33},
{19,44,39,42,40,41,30,37,38,35},
{25,39,43,45,52,48,35,38,41,29},
{28,43,43,33,52,54,43,37,42,39},
{33,31,43,35,38,51,42,33,36,46},
{37,29,27,30,24,45,39,8,18,44},
{42,22,16,7,18,33,22,3,16,37},
{41,19,0,2,16,14,10,0,0,37},
{43,8,0,6,18,9,38,0,14,7},
{44,8,12,6,41,16,40,0,28,22},
{41,8,12,7,48,10,38,0,38,28},
{33,10,12,8,43,6,37,7,40,28},
{29,20,14,17,38,5,35,10,43,37},
{26,20,16,13,31,8,34,29,43,33},
{23,27,28,23,31,7,25,34,34,27},
{6,35,42,20,37,9,5,30,26,41},
{5,39,40,26,33,31,4,35,24,38},
{19,45,40,32,38,39,23,38,30,32},
{25,38,44,36,54,40,24,37,36,39},
{28,32,36,52,50,36,30,35,43,41},
{33,31,26,48,45,47,42,29,36,39},
{37,29,21,38,33,45,42,3,33,42},
{42,20,0,29,30,43,40,0,22,38},
{35,19,0,8,24,26,20,0,16,35},
{44,8,0,4,15,11,39,0,28,9},
{44,8,0,4,33,8,40,0,32,18},
{42,9,3,4,33,6,43,6,36,22},
{32,12,17,8,40,6,40,10,37,17},
{28,20,14,8,28,5,34,21,36,18},
{26,21,31,14,27,3,26,33,26,19},
{23,27,42,14,25,6,12,28,24,36},
{6,38,37,18,33,18,2,26,18,26},
{5,40,34,23,31,24,0,34,19,18},
{19,44,35,31,40,20,13,37,18,31},
{26,34,30,38,52,31,24,37,20,38},
{30,32,26,38,48,35,25,33,23,33},
{34,31,20,43,42,46,40,16,31,36},
{37,29,0,48,32,40,42,0,35,38},
{42,20,0,48,20,43,43,0,35,37},
{31,19,0,30,19,35,34,0,24,33},
{44,8,1,6,25,14,38,0,33,9},
{44,8,3,15,25,13,45,6,35,11},
{38,9,8,15,27,15,50,10,40,10},
{32,17,14,12,22,14,35,13,41,11},
{28,21,22,12,22,7,27,31,28,12},
{27,21,41,10,20,7,25,28,21,12},
{23,29,39,27,23,20,15,25,22,19},
{6,38,30,24,40,18,8,36,16,8},
{5,39,34,30,37,13,6,37,19,13},
{20,40,32,24,44,28,17,37,19,31},
{28,29,23,29,51,37,30,36,22,32},
{30,32,18,34,41,37,30,28,19,31},
{34,31,9,39,36,38,45,4,30,37},
{36,23,7,48,24,40,48,0,35,38},
{35,19,7,49,14,37,44,0,36,35},
{27,18,5,40,14,35,41,0,35,21},
{39,8,1,28,11,26,36,0,36,11},
{44,9,8,27,15,25,51,9,38,12},
{41,15,14,26,12,19,45,13,46,17},
{33,17,22,19,9,17,36,24,35,16},
{29,21,28,22,11,21,33,27,27,13},
{29,21,37,21,10,18,32,29,19,20},
{23,31,34,32,11,19,24,36,11,22},
{6,37,33,17,29,12,11,37,10,13},
{6,38,28,23,41,20,10,36,20,16},
{21,40,26,24,46,29,21,38,22,29},
{28,27,23,31,50,34,24,34,24,32},
{32,32,23,36,37,32,31,24,31,30},
{31,31,16,38,34,37,38,0,29,34},
{30,21,16,48,30,34,43,0,36,36},
{33,19,17,47,23,37,43,0,36,34},
{16,18,18,41,19,32,36,0,31,19},
{20,10,8,31,9,36,36,6,37,16},
{44,16,15,32,9,32,50,13,49,24},
{37,17,24,39,6,30,46,14,42,25},
{34,18,29,29,6,29,33,29,36,22},
{30,21,37,21,6,18,25,28,26,27},
{28,20,39,15,12,10,25,27,14,27},
{26,30,34,19,13,17,25,35,14,30},
{16,36,32,18,25,22,16,37,12,12},
{21,38,37,24,37,28,11,36,15,19},
{28,35,32,33,40,34,23,36,26,28},
{31,27,33,36,46,33,26,31,35,31},
{26,32,26,35,38,25,31,3,35,31},
{31,27,30,42,34,34,39,0,32,36},
{35,23,26,47,26,36,42,0,35,35},
{29,20,28,40,20,35,42,0,31,21},
{13,20,19,24,21,12,20,0,19,18},
{12,19,15,32,3,24,19,11,26,14},
{37,25,29,41,3,49,43,14,46,25},
{43,26,37,38,3,42,45,26,40,36},
{34,26,44,32,3,32,36,33,36,26},
{34,26,41,32,3,28,34,28,28,33},
{32,32,42,24,10,28,27,34,23,27},
{31,34,37,29,11,25,26,37,22,29},
{29,35,37,29,26,25,19,37,21,33},
{27,32,36,30,36,34,21,37,23,28},
{31,33,36,34,38,32,25,34,28,30},
{27,31,32,33,38,26,40,25,33,33},
{28,34,26,37,37,32,37,3,35,35},
{34,34,28,47,31,35,33,0,25,34},
{29,30,29,39,23,35,36,0,31,28},
{13,28,32,14,18,19,25,0,27,17},
{5,26,23,5,17,4,7,0,9,11},
{3,25,21,27,0,23,13,12,15,1},
{15,30,39,38,0,31,19,23,27,21},
{24,30,48,48,0,47,41,28,41,29},
{44,30,45,42,0,54,49,27,43,39},
{42,37,45,40,0,37,43,36,40,33},
{41,36,45,36,7,33,42,35,45,30},
{37,32,45,35,8,28,38,36,38,31},
{37,34,45,37,28,31,40,37,34,39},
{27,32,49,34,38,31,38,37,33,32},
{29,37,48,33,38,32,29,29,32,29},
{32,33,47,44,36,32,31,10,30,31},
{33,40,41,44,37,34,34,0,30,30},
{28,40,41,26,32,30,36,0,29,20},
{13,34,41,14,20,9,23,0,21,17},
{6,32,39,1,15,3,7,0,10,11},
{2,30,23,0,14,1,1,0,1,2},
{0,23,28,13,0,12,0,11,1,0},
{0,32,24,18,0,25,0,22,6,3},
{3,28,34,14,0,16,7,27,14,5},
{3,31,35,18,0,10,12,21,19,6},
{16,29,35,31,0,25,13,21,21,29},
{22,29,30,31,7,27,21,25,27,22},
{24,30,30,33,16,30,29,35,37,27},
{34,31,31,24,23,32,38,36,35,32},
{36,30,31,27,36,33,38,32,29,33},
{20,34,32,19,28,25,21,25,20,15},
{14,34,32,8,35,13,16,3,14,6},
{3,34,31,4,37,3,2,0,8,3},
{2,36,36,3,36,1,1,0,1,1},
{0,31,30,0,24,0,0,0,0,0},
{0,32,29,0,17,0,0,0,0,0},
{0,26,22,0,15,0,0,0,0,0}};

    
    int n, m;
    int komp;
    int been[max_n][max_m];
    int dim[max_obj][6];
    string pict[max_n], number[max_n];
    int number_n, number_m;
    int signal[max_neuro];
    string ans;
    
void neuro_view()
{
    int i, j, adr;
    for (i = 0; i < a_elem; i++)
    {
        signal[i] = 0;
    }    

    for (i = 0; i < d_n; i++)
    {
        for (j = 0; j < d_m; j++)
        {
            if (number[i][j] != '.')
            {
                adr = (i/window_n)*(d_m/window_m) + (j/window_m);
                signal[adr]++;
            }
        }
    }                
    for (i = 0; i < s_elem; i++)
    {
        if (signal[i] > s_teta)
        {
            signal[i] = 1;
        }
        else
        {
            signal[i] = 0;
        }
    }
}    

int neuro_recogn()
{
    int i, j, answer;
    int ans_signal[signs_n];
    for (j = 0; j < signs_n; j++)
    {
        ans_signal[j] = 0;
    }    
    
    for (i = 0; i < a_elem; i++)
    {
        if (signal[i] > a_teta)
        {
            for (j = 0; j < signs_n; j++)
            {
                ans_signal[j] += (weight[i][j] * signal[i]);
            }
        }    
    }    
    
    answer = 0;
    for (i = 1; i < 10; i++)
    {
        if (ans_signal[i] > ans_signal[answer])
        {
            answer = i;
        }
    }
    return answer;
}    

void data_read()
{
    n = 0; m = 0;
    while (!cin.eof())
    {
        cin >> pict[n];
        if ((pict[n][0] != '.') && (pict[n][0] != '%')
        && (pict[n][0] != '#') && (pict[n][0] != '@'))
        {
            break;
        }
        else
        {
            n++;
        }    
    }    
    m = pict[0].length();
}

void data_answer_out()
{
    cout << ans;
}    
    
void data_clear_columns()
{
    int i, j, sum;
    for (j = 0; j < m; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
        {
            if (pict[i][j] == '@') {sum++;}
            if (pict[i][j] == '#') {sum++;}
        }
        if (sum == 0)
        {
            for (i = 0; i < n; i++)
            {
                pict[i][j] = '.';
            }
        }
    }
}                    

void data_init(string s[], int x, int y)
{
    int i, j;
    for (i = 0; i < x; i++)
    {
        s[i] = "";
        for (j = 0; j < y; j++)
        {
            s[i] += '.';
        }
    }
}            

void data_resize()
{
    int i, j, x, s, p;
    int step, pen;
    string tmp[max_n];

//resize columns || (number_n, number_m) -> (d_n, number_m)
    data_init(tmp, d_n, d_m);
    s = d_n; p = 0;
    for (i = 0; i < number_n; i++)
    {
        for (x = 0; x < (s / number_n); x++)
        {
            for (j = 0; j < number_m; j++)
            {
                tmp[p][j] = number[i][j]; 
            }
            p++;
        }   
        s = (s % number_n) + d_n;
    }     
    
//resize strings = (d_n, number_m) -> (d_n, d_m)    
    data_init(number, d_n, d_m);
    s = d_m; p = 0;
    for (j = 0; j < number_m; j++)
    {
        for (x = 0; x < (s / number_m); x++)
        {
            for (i = 0; i < d_n; i++)
            {
                number[i][p] = tmp[i][j]; 
            }
            p++;
        }   
        s = (s % number_m) + d_m;
    }     
}    

void bfs(int x, int y, int sv)
{
    int stek[max_n*max_m][2];
    int begin, end, a, b, u, i, j;
    begin = 0;
    end = 1;
    stek[0][0] = x;
    stek[0][1] = y;
    been[x][y] = sv;
    //1 - verh, 2 - pravo, 3 - niz, 4 - levo
    dim[sv][0] = 0;
    dim[sv][1] = x;
    dim[sv][2] = y;
    dim[sv][3] = x;
    dim[sv][4] = y;
    dim[sv][5] = 0;
    while (begin < end)
    {
        dim[sv][0]++;
        a = stek[begin][0];
        b = stek[begin][1];
        if (dim[sv][1] > a) {dim[sv][1] = a;}
        if (dim[sv][2] < b) {dim[sv][2] = b;}
        if (dim[sv][3] < a) {dim[sv][3] = a;}
        if (dim[sv][4] > b) {dim[sv][4] = b;}     
        for (u = 0; u < 8; u++)
        {
            i = a + dir[u][0];
            j = b + dir[u][1];
            if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
            {
                if ((pict[i][j] != '.') && (been[i][j] == -1))
                {
                    stek[end][0] = i;
                    stek[end][1] = j;
                    been[i][j] = sv;
                    end++;
                }    
            }    
        }
        begin++;    
    }    
}    

void predproc()
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            been[i][j] = -1;
        }
    }        
    komp = 0;
    
    data_clear_columns();    
    for (j = 0; j < m; j++)
    {
        for (i = 0; i < n; i++)    
        {
            if ((pict[i][j] != '.') && (been[i][j] == -1))
            {
                bfs(i, j, komp);
                komp++;
            }
        }
    }
    
    for (i = 0; i < komp; i++)
    {
        if (dim[i][0] < (destroy_rate*n*m / 100))
        {
            dim[i][5] = 1;
        }    
    }    
    for (i = 0; i < komp; i++)
    {
        for (j = 0; j < komp; j++)
        {
            
            if ((dim[i][1] < dim[j][1]) && (dim[i][2] > dim[j][2])
            && (dim[i][3] > dim[j][3]) && (dim[i][4] < dim[j][4]))
            {
                if (dim[j][5] != 1)
                {
                    dim[i][5] = 1;
                }    
            }
        }
    }            
    
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (pict[i][j] != '.')
            {
                if (dim[been[i][j]][5] == 1)
                {
                    pict[i][j] = '.';
                }    
            }
        }
    }
}    

void get_number_and_go()
{
    int i, j, u, k = 0;
    for (u = 0; u < komp; u++)
    {
        if (dim[u][5] != 1)
        {
            for (i = dim[u][1]; i <= dim[u][3]; i++)
            {
                number[i - dim[u][1]] = "";
                for (j = dim[u][4]; j <= dim[u][2]; j++)
                {
                    
                    if (been[i][j] == u)
                    {
                        number[i - dim[u][1]] += '@';
                    }
                    else
                    {
                        number[i - dim[u][1]] += '.';                        
                    }    
                }
            }
            number_n = dim[u][3] - dim[u][1] + 1;
            number_m = dim[u][2] - dim[u][4] + 1;
            data_resize();
            
            neuro_view();
            ans += (neuro_recogn() + '0');
        }    
    }    
}    

int main()
{
    // 1 - obu4enie, 0 - raspoznavanie
    data_read();
    predproc();
    predproc();
    ans = "";
    get_number_and_go();
    data_answer_out();
    return 0;
}
    
    
