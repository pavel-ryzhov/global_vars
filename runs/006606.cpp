#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.436825,1.28649,0.357986,0.0288478,0.210706,-1.48419,-1.56946,-0.691603,-0.653836,0.162202,0.329479,0.789651,0.348189,1.06856,0.352163,-0.0365324,0.98926,0.522564,-0.748983,-0.557689,-0.215446,-0.844121,1.03123,-0.0678349,-0.172533,0.974559,-0.0944081,0.607149,0.836449,-0.175919,-0.100828,-0.242579,-0.372696,0.675519,-0.134445,-1.06053,-0.729367,-0.241783,-0.787634,0.187672,0.50142,0.100759,-0.175082,0.881355,1.10347,-0.924878,0.153442,0.73731,-0.30252,-0.261753,-0.415021,-0.748727,-0.548392,0.881331,-0.450928,-0.544458,0.489531,0.203501,-0.858064,0.249678,-0.826051,-0.577163,-0.912591,0.566757,0.130779,-0.00177265,0.311603,0.548532,-0.461875,-0.228489,0.943753,-0.60223,0.0609886,-0.353238,0.222146,-0.682038,0.753794,1.10659,-0.347967,0.337243,-0.0782929,0.223604,-0.30659,0.369593,0.672204,-1.05316,-0.285094,0.222331,-0.299833,0.762871,0.0284227,0.199123,0.174545,-0.693654,0.280301,-0.209229,0.799664,0.160273,0.459899,0.00278171,-0.740563,0.249884,-0.629347,0.196647,-0.559809,0.368616,-0.585228,-0.643622,-0.00469683,-0.0706096,0.733383,-0.0138975,0.444944,-0.481938,0.102788,0.659199,0.50937,-0.2876,0.507563,0.0899549,1.25914,1.53856,0.677691,-1.12092,-0.0501532,-1.15492,0.000624397,-0.0680388,-0.67035,0.143488,-0.374507,0.728915,0.166471,1.0578,0.529838,0.24419,-0.715945,-0.971119,0.535909,-1.23042,0.278547,-0.785259,1.45823,-0.354466,-0.431831,1.95836,-0.22994,-0.791402,0.309537,-0.176978,-0.0626601,0.0270688,-0.498311,0.267739,-0.300928,-1.11212,-1.17003,-0.19446,-0.622369,0.0757711,0.609004,0.520433,-0.745039,0.501633,-0.122289,-0.506212,0.293504,1.22163,-1.07136,0.296812,0.0388175,-0.662076,0.0173868,0.245346,-0.0749419,0.194442,0.041854,0.763509,0.392921,0.542507,0.0463432,-0.475785,-0.524356,0.249395,-0.262167,-0.469771,-0.891735,0.603869,-0.722356,0.0354253,0.546695,0.228721,-0.21697,-0.045132,0.669779,-0.61795,-0.461026,1.0126,-0.314042,0.258169,0.205724,-0.0645989,0.336965,0.546991,-0.208031,-0.0959548,-0.0933445,-0.253956,-0.0278003,0.262793,0.781857,0.631542,0.209905,0.317408,0.225645,-0.553714,-0.0443868,0.0404535,-1.17167,-0.0608863,0.0755056,0.184018,0.934832,0.828607,0.856132,-0.139785,-0.201193,-0.650746,0.811102,-0.681355,-0.238332,0.1269,0.96299,0.138414,-0.362714,-0.101127,0.0975467,-0.204289,-0.275027,0.242597,0.0605406,0.323753,-0.343629,0.494693,0.507291,-0.736287,-0.0963441,-0.239536,-0.528588,-0.176321,-0.119454,0.245008,0.0741488,0.637198,0.429304,-0.0413046,0.344674,0.631941,-0.503941,0.238213,0.20627,-0.748744,0.442517,0.00247638,0.102038,0.135344,0.629682,1.41175,0.152395,0.352831,0.0464699,0.583289,-0.213541,-1.21456,0.251222,0.00340265,-0.782315,-0.177651,-0.250668,0.438764,-0.00759434,0.182324,0.589749,-0.107908,-0.253625,-0.312554,-0.262954,0.241777,-0.841403,-0.534762,-0.380034,-0.426444,1.07641,-0.551313,0.419429,1.3557,-0.942948,0.336082,1.1305,0.172515,0.240516,-1.25938,-0.476845,0.219966,-0.300768,0.359357,-0.0617393,0.606546,-0.440456,-0.0536243,-0.0296682,0.225892,-1.05365,-0.615016,0.809341,-0.313253,-0.493568,0.246431,-0.0679562,0.364909,-0.162985,0.1887,-0.687512,0.735773,0.362856,-0.152826,0.364713,0.249115,-0.559761,0.660948,0.981257,-0.299321,-0.12269,0.383661,-0.365083,0.0501238,0.535017,0.729961,-0.589079,-1.00818,-0.645174,0.121768,0.0540198,-0.39697,-0.0300912,-0.487337,-0.651747,-0.693174,1.12365,-0.362523,-0.379795,0.637066,0.557131,-0.0459437,-0.773537,-0.396974,0.681749,-0.0946277,-0.535938,0.118649,0.0398365,0.769809,0.494901,0.288018,0.621005,-0.414777,0.10438,-0.869549,0.3605,-0.510775,-1.28443,0.394095,0.870819,0.94109,-0.787042,-0.418306,0.762533,-0.863997,0.485208,-0.141053,-0.186686,0.790463,0.960675,-0.249639,-0.799028,-0.432962,0.39001,0.747978,0.536743,0.149073,-1.02228,-0.151172,-0.39434,1.05082,0.471269,0.238632,-0.5825,-0.834417,-0.0345151,0.302232,0.159382,-0.569809,0.957441,0.0208467,-0.0994593,-0.18082,1.48602,0.563308,-1.47228,0.102938,-0.530175,-0.233124,-0.00563404,-0.549531,0.378055,-0.621956,-0.737332,1.22013,0.756729,-0.0784332,-1.78652,-0.689021,-0.754625,0.957515,0.399648,0.34771,-0.874387,-0.527213,-0.643006,0.295372,0.363481,-1.0522,0.887869,-0.92378,0.138824,-0.248104,1.08898,1.34056,-1.338,0.425187,-1.09588,0.130972,-0.253553,0.0891171,0.637637,-1.60737,-0.37722,1.86829,0.285707,0.514704,1.54737,-1.14824,0.836592,-0.615217,-0.40053,0.830191,1.21734,1.10869,-0.0830189,0.141147,-0.744543,-0.0183847,-0.526093,-0.90371,1.90413,1.02789,-1.39428,-1.74081,1.51273,-0.333406,-0.842169,0.338154,-0.754419,0.881903,-0.0226618,-0.0583465,0.70622,-0.609,-1.03134,0.135668,0.633947,-0.468166,-0.0442857,-0.877922,-0.588845,0.10912,1.26444,1.4496,-0.207551,-0.10557,0.939751,-0.470715,-0.318217,-0.705478,-0.860969,-0.0730161,-1.12872,-0.358963,0.788083,-0.520413,0.157495,-0.258082,-0.493397,-0.269089,0.356363,-0.137358,0.180739,-1.38739,-0.872374,0.129545,-0.258945,0.259764,-0.547987,-0.0408456,0.186102,-0.399007,0.972698,0.0762438,1.00252,-0.68914,-0.857707,0.505089,-0.943493,0.427714,-1.12198,-0.426106,-0.00410422,0.186759,0.231131,0.708998,0.786464,0.215973,0.224908,-0.529371,-0.156616,0.14545,0.741994,0.0858282,0.803809,0.178889,-0.676489,-0.552423,-0.75039,0.73371,-0.00323677,0.888097,-0.3136,-0.583911,0.852246,0.917823,0.306941,0.0633937,0.0506519,-0.195619,-0.0188993,-0.73844,1.16141,0.235222,-0.606238,0.206221,-0.286359,-0.449831,-0.577553,-0.00632892,0.187833,0.0288151,-0.865246,-0.183303,0.593087,0.132716,-0.859521,-0.771893,-1.10097,1.89113,0.382605,0.262341,-0.169648,-0.176658,-1.43661,0.0824446,1.7237,-1.59649,1.21377,-1.03557,0.671927,-0.588589,2.06266,1.62883,-0.548251,0.486426,-1.65249,0.0295452,-1.09934,0.329912,1.36012,-2.6031,0.424942,1.80016,-1.05215,0.489143,1.36384,-0.452171,2.47181,-0.694124,0.243096,0.340471,0.650212,0.696582,-0.452227,-0.0924521,-0.685697,0.298429,-0.177828,-0.856987,1.9427,2.32531,-0.690907,-1.19974,1.48096,0.487534,-0.0233169,0.0972554,-0.463258,0.933242,-0.68769,0.786823,0.0352627,-1.00995,-0.761788,-0.0756835,-0.258813,-0.279864,-0.823603,-0.290228,-0.0953308,0.0556294,1.43292,1.04528,0.0765032,-0.220208,0.700549,-0.212517,-1.07101,-0.406199,-0.881682,-0.0619753,-1.04247,0.187748,0.104087,0.666117,0.828063,-0.222954,-0.663797,0.00614301,0.730489,-0.194126,0.317769,-0.709924,-0.393775,0.474227,-0.429461,0.742309,-1.26061,-0.614656,0.524477,-0.984807,0.964078,0.282681,0.741182,-0.868685,-0.346788,0.398717,-1.51011,0.29506,-1.83736,-0.611837,-0.678194,0.606784,-0.294235,1.04988,1.33513,-0.349959,0.789272,-0.838152,0.665522,0.573739,0.486494,0.323778,0.952282,0.358133,-0.0191253,0.091803,-0.551291,-0.235573,0.244939,0.763317,-0.0534807,-0.464118,1.24354,0.740015,-0.349554,0.496172,-0.197455,0.726627,0.653065,-0.297696,0.152679,-0.962562,0.0797772,0.278406,-0.617063,-0.0391465,-0.53557,0.817823,-0.246003,0.644423,0.107388,-0.606547,0.0874494,0.122117,0.988848,-0.662001,0.0737229,1.18277,0.135551,-0.200073,0.6683,0.497647,-1.00173,-0.256798,0.580957,-0.979286,0.589109,-0.8182,1.56077,0.492984,0.912872,-0.189976,0.780606,-0.310256,-1.48835,0.0829353,-1.04139,0.264316,0.489314,-1.6982,1.31019,0.727973,-1.58804,-0.068475,-0.976832,-0.722689,2.77707,-1.33253,0.627426,1.98305,0.634327,0.552813,0.603496,0.596696,0.143057,0.312781,0.816116,-1.63497,0.698893,2.49022,-0.378781,-0.736818,0.705932,0.606124,1.22742,0.588074,-0.598957,0.36169,-0.48595,1.46546,-2.53874,-2.44924,0.449401,-0.348227,-0.0357714,-0.0820041,0.166104,-1.45639,0.00943862,0.746789,0.472667,0.516838,-0.0479516,0.353687,0.989178,-0.830572,-0.189514,-1.89039,-0.303463,1.312,-1.0673,0.630193,-0.434908,0.502993,-0.455585,-0.0132803,-0.616611,-1.32618,1.52526,0.32403,-0.942462,-0.338506,0.128782,-0.214033,0.712386,-0.23147,-0.984354,-0.756559,0.273956,0.487572,0.697079,-0.294501,0.39974,0.535559,0.892334,-0.238996,-0.167579,-0.457362,-0.717511,-0.0146296,0.345671,0.920962,-0.720187,0.870207,-0.520088,-0.607341,-0.940527,-0.653577,1.78058,-0.0355032,0.126765,0.404366,0.0398208,0.240291,-0.0370701,0.434788,-0.216819,-0.295482,-0.0324528,-0.172484,0.0664057,-0.284925,0.534849,0.266741,0.405222,0.430955,-0.831281,0.859034,-0.516152,0.325149,0.493261,0.0945076,-0.29701,0.638434,0.521121,-0.888654,-0.275274,0.203999,0.0236812,0.734023,0.191597,-0.495064,0.139721,-0.0787068,1.24327,0.626219,0.701103,0.126527,0.362843,-1.25658,0.548645,0.41351,-0.809059,-0.664679,0.226859,-0.0389268,-0.698983,-0.434813,0.274603,0.706445,0.643069,-0.0877181,0.739766,0.352555,0.584482,-0.721121,0.0911622,-0.139195,-0.0757153,0.318229,0.861254,-0.0107728,-0.924754,-0.28699,-1.66215,-0.867395,1.5622,-1.35457,0.926288,2.69983,0.796146,0.864137,0.785638,0.921433,1.20707,-0.142013,1.73314,-1.36759,-0.425569,0.93889,-0.569033,0.597314,0.340121,0.316646,1.85594,0.756516,-0.324192,0.322581,0.523506,0.689956,-3.15431,-3.14107,1.07014,0.32148,-0.41408,-0.190774,0.785379,-1.04213,0.220451,0.552549,0.282232,0.216216,0.15029,0.39087,0.167228,-0.857068,0.879091,-1.08651,0.240966,0.199918,-0.534509,-0.202682,-0.109745,-0.622529,-0.799954,0.791359,-0.044418,-0.906622,0.766262,-0.309848,-0.562591,0.121031,0.391717,-0.187208,0.880036,0.762218,-0.128321,-1.70191,0.252287,0.664193,0.538516,-1.12254,0.873522,1.4587,0.342528,0.346465,0.835256,0.432857,0.0366822,-0.104356,0.329275,-0.408087,0.271271,-0.101595,-0.93229,0.0522959,-0.585433,-0.743968,1.37771,0.662308,-0.598097,-0.149168,0.830775,-0.108426,1.66875,0.78143,0.526226,-0.88382,-0.140345,-1.15694,1.15106,0.576099,-0.628908,-0.477911,0.2185,0.118896,-0.931276,-0.180938,-1.12061,0.839969,0.33618,-0.215076,0.80244,0.299808,0.610594,-1.01467,0.154375,-1.05718,0.278322,0.610543,0.767744,-0.719479,-0.242757,-0.36278,0.716604,0.618005,0.0626669,0.272768,0.609906,-1.4308,0.605759,0.71779,-0.440158,-1.40847,0.129716,0.343512,-1.55247,0.26741,-1.03039,0.399732,0.661706,0.196036,0.554499,0.566037,1.93636,-0.994093,0.815974,-0.0158436,-0.0747925,0.550244,1.07306,-0.273583,-0.147167,0.167582,-0.669194,-0.0287432,0.00361618,0.0916609,0.245241,0.368705,-0.375987,0.0240661,0.188297,0.11708,0.712754,-0.24362,0.625431,-0.172133,-0.367329,-0.169491,0.0395761,0.873932,-0.442347,0.520599,1.04169,-0.248913,-0.21947,0.295074,0.0271772,0.11271,-0.879539,-1.08586,0.379675,0.311908,-1.20275,-0.768008,0.714516,0.157387,0.015871,0.964909,-1.10315,-0.12077,0.198954,0.604333,-0.220615,-0.323987,1.46905,-0.256499,0.93064,-0.297129,-0.390902,0.255883,-0.834087,-0.315199,-0.2893,1.10511,-0.121828,0.360022,-0.630273,-0.266955,-1.61444,-0.054487,0.502235,0.151529,1.01555,1.04963,0.103629,-0.873525,0.282025,0.1315,0.0190211,-1.53404,0.26587,0.946458,0.285282,-0.656013,1.38443,0.94216,0.73833,0.368631,1.23291,-0.29812,0.0866709,-0.229028,-1.35608,-0.31377,-0.742122,-0.510808,1.18519,0.389295,-0.54475,0.386156,0.0535161,-0.388348,0.656909,0.550415,-0.0654255,0.444465,0.0715588,-0.649924,0.552043,0.126039,-0.616815,-0.381042,0.298033,-0.489983,0.130475,0.409685,-0.310813,0.435791,0.930733,0.0130595,0.132407,-0.016066,0.234719,-0.666532,-0.0371511,-0.6446,-0.0505196,-0.588696,0.677188,-0.323253,-0.610227,-0.309971,-0.960889,-0.496059,-0.419004,0.27338,0.214887,0.139533,-0.274446,0.227644,0.889223,-0.255191,-0.233808,0.698652,-1.48815,0.448658,-0.805298,-0.20138,-0.0749428,0.491167,-0.306894,0.741018,1.81578,-0.361932,0.0508051,0.657742,-0.457687,0.65624,-0.36031,-0.687845,0.570311,0.210614,0.232847,-0.187615,-0.853505,0.517969,0.197051,-0.414283,-0.661593,-0.155506,0.262891,-0.246164,-0.171402,0.410843,-0.80502,0.533315,0.558311,-0.996195,-0.505372,0.276395,-0.31841,-0.0710013,-0.321465,0.215998,-0.164512,1.02648,-0.502288,-0.342418,0.926444,0.51425,-0.342858,0.22116,-0.178915,-1.01436,-0.342413,-0.229875,0.144999,0.221754,-0.93632,1.18892,-0.233345,-0.0897311,-0.15006,1.10972,-0.466424,-0.276613,0.589568,-0.671001,-1.65971,0.273006,-0.53677,-0.22668,-0.00262651,0.858879,1.0972,1.38739,-1.22317,0.160761,-0.116024,0.236324,0.320366,0.758433,0.565881,0.189591,-0.466964,0.0573213,0.0263823,-0.270334,-0.0534329,-0.679145,0.180183,-0.315195,-0.652752,0.1502,0.2396,0.394537,0.254847,0.0245285,-0.0534291,-0.486299,-0.187662,-0.183249,-0.777951,0.391681,0.524619,0.373819,-0.371993,-0.389041,0.331431,0.993811,-0.158947,0.199537,-0.544268,0.354202,0.643807,0.834168,0.393838,-0.17553,-0.0292487,-0.636559,0.335551,-0.567162,-0.910602,-0.0947998,0.369034,0.921471,0.0646498,-0.0864986,0.687477,-0.752337,0.335652,-0.201661,0.375327,0.505751,0.506395,0.0131578,-1.14575,-0.943526,0.101432,0.195884,-0.0666283,-0.0503458,-0.627853,-0.95768,-0.695075,0.259563,0.398056,1.22048,0.285601,-0.0546402,1.70634,0.346789,-1.33158,0.906278,-0.37675,0.148763,-0.112904,-1.19767,-0.902438,-0.297038,-0.0622843,0.0198988,-0.13426,0.929047,0.0320214,0.829613,-0.564783,-0.152428,0.185419,0.0083183,0.655636,0.575145,-0.360187,-0.0556605,-0.390771,0.649284,0.436878,-0.101989,-0.475938,-0.882723,0.752103,-0.225985,-0.805041,0.582003,0.333981,0.927474,0.817197,-0.860299,0.665576,-0.0141221,-0.215112,-0.044095,-1.0958,0.819724,-0.214664,0.654372,-0.185688,-0.68795,0.904022,1.28516,0.159774,0.440107,0.303358,-0.0112783,-0.939915,0.0230723,0.143438,-0.881287,-1.022,0.25373,-0.644575,-0.95532,-0.536855,1.08644,-1.15497,0.491417,-0.268157,-1.22854,-0.619238,0.551204,-0.152126,0.172693,0.158264,0.127325,0.591419,0.863364,-0.905029,0.10782,1.20851,1.11037,-0.448796,0.358228,-0.944529,-0.609784,0.225253,0.155637,0.105445,0.201693,-0.371958,0.34851,-0.153383,-0.556707,-0.33061,0.681567,-0.487049,-0.0742919,-0.631781,-0.181951,-0.483533,0.192906,0.0872385,0.481781,1.59608,0.38224,-0.179002,0.900376,-1.03333,-0.137187,-0.613539,-0.509976,-0.381337,0.277235,-0.270582,0.369401,0.502519,-0.175185,0.50044,0.793393,0.316148,-1.08285,1.73812,0.35223,-1.22415,-0.248943,1.18462,0.792382,-0.928031,-0.22061,0.412689,-1.72866,0.974461,-0.61965,-0.396333,0.924129,-0.080937,-0.680491,0.0670654,-0.38596,-0.2643,-0.430604,0.803022,-0.134223,-0.0124257,-0.123608,-0.119923,-0.0672906,0.501393,1.51582,1.56451,-0.875771,2.29465,0.781887,-1.71544,-0.465449,1.52232,0.00412214,-0.022446,-0.0538417,0.0280545,-2.09194,0.786674,-0.803975,-1.74804,1.72493,-0.536383,-0.678063,0.585899,-0.785133,0.404009,0.268119,0.631749,0.0395954,0.0914598,-0.261106,-0.290288,0.136841,1.08316,0.164855,0.486724,1.0221,0.391311,0.168386,0.705033,1.03989,-0.693087,0.381153,0.120672,0.210505,-0.492527,0.722578,0.322772,1.22764,1.25947,0.310172,-0.224461,1.11614,0.478852,0.395758,0.654045,0.150638,0.218345,1.38993,-2.03753,1.89481,-2.29491,-2.62754,-1.26636,2.98541,-0.345179,0.764039,-0.763594,1.14398,-0.588331,1.46472,-2.28204,0.0154923,0.983815,-0.203581,-1.73713,2.39694,-1.85504,-1.02685,2.2484,-1.22862,-1.24591,-1.20784,0.667191,-0.662076,2.66687,0.164355,-3.64243,-1.14424,1.59265,-0.246249,1.9273,1.9693,-2.00747,-0.340627,-3.03846,-1.81891,-1.87207,1.01443,-0.653882,-0.256719,-0.732577,-0.59529,-0.39799,-1.90003,-1.14062,-0.863187,-0.685783,-1.69308,0.854829,-2.05697,2.13581,-2.58812,0.547341,-3.31748,1.17445,-1.52321,1.24938,-1.74966,-0.779198,2.09567,-1.88581,-2.42912,0.573257,0.236728,-0.141366,-3.83777,1.20715,1.16431,0.279692,-0.862146,-1.93804,-1.99217,-2.18037,0.645027,0.90693,-1.67838,2.16868,1.06797,-2.81018,1.1349,1.75138,-1.40963,1.37324,-1.1555,0.913629,-3.1738,0.553917,-1.60323,-0.543985,-1.06754,1.57514,-2.58951,1.36484,-0.363373,-0.621761,0.903378,0.578788,-1.41791,1.01542,-2.43124,-1.61155,-0.724282,0.00404038,-1.27222,-2.67077,1.67279,1.97155,1.21945,-1.93446,-1.9567,-1.04468,0.100447,-1.78503,1.15645,1.45388,-0.39962,-0.387895,-1.75767,3.13997,0.875349,1.539,-2.76728,0.37661,-2.11744,-2.09178,1.4078,-1.48215,-2.63953,-1.02903,0.111355,0.146038,1.18558,-0.246665,2.94536,-3.1035,0.938433,-1.82954,-1.72491,1.45545,-2.83619,1.93771,-3.50722,-0.959451,0.723248,-0.306558,0.89151,-2.48946,0.42059,-0.201532,-1.13462,-2.38068,-1.802,2.42903,-1.59254,1.75634,0.0764862,-2.93626,1.18751,0.219038,-0.995892,-0.562616,2.6007,1.15706,-2.90821,-3.07808,0.268979,-1.95293,0.935965,0.63547,-3.05732,-0.714136,1.94817,-1.25267,-2.36213,-1.79683,1.37986,2.39517,0.796249,0.539231,0.198113,-2.0387,-2.46455,0.272488,2.43072,0.0255887,-1.44169,-1.7569,-0.565788,-1.1527,-2.12416,-0.770913,1.83711,0.186777,-0.97969,-0.618984,-1.48124,0.143674,1.08514,0.710382,-3.87049,-2.81949,2.65814,-0.290717,0.552676,0.648037,-1.35212,0.995825,-2.30736,0.886446,0.80689,2.32986,-1.14523,-1.41007,-1.23107,0.806171,-1.70774,-0.701408,-1.91332,-0.803246,1.75604,-1.74137,0.531171,-2.38901,-0.227619,0.398758,1.32537,-0.759458,-2.61658,-0.333007,-3.22784,1.08293,-0.646045,-2.74227,0.691432,-0.183202,-1.54504,-1.22736,-0.584737,-1.53265,0.626873,-0.575698,-1.59533,2.02036,-1.94531,-2.38418,0.165723,2.47517,1.49131,-3.13684,-2.18493,-2.13992,-1.2619,0.724645,0.199731,1.79636,1.66722,-0.244522,-1.71747,-2.67463,2.28391,-0.735356,-0.0647269,-2.18603,2.72362,-1.36904,-1.86328,-1.55425,2.1042,-3.23767,2.62426,0.64874,2.00314,-2.85735,-2.27385,-1.70107,0.0235307,-2.06056,0.698194,-2.03372,0.297729,-0.240071,0.591951,0.564737,-2.5697,0.183832,0.214313,0.38932,-2.95814,-0.19381,-1.46697,-0.114181,-0.57602,-2.21209,-0.702102,-1.15596,-1.582,0.845293,-0.570693,0.0371777,0.388716,0.742298,1.12813,0.531563,0.249895,0.562955,0.482807,0.331264,0.542142};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }
    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      //numbers[i].swap(vector<string>(numbers[i].begin() + points[0], numbers[i].begin() + points.back()));
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    // image->swap(vector<string>(image->begin() + start_y, image->begin() + end_y));
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      //(*image)[y].swap(string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x));
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
    size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    random_shuffle(width.begin(), width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    random_shuffle(height.begin(), height.end());
    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }
        result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
      }
    }
  }

};


int main() {  
  srand(100589);
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
