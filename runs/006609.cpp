#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

//double ANN::weights[] = {0.436825,1.28649,0.357986,0.0288478,0.210706,-1.48419,-1.56946,-0.691603,-0.653836,0.162202,0.329479,0.789651,0.348189,1.06856,0.352163,-0.0365324,0.98926,0.522564,-0.748983,-0.557689,-0.215446,-0.844121,1.03123,-0.0678349,-0.172533,0.974559,-0.0944081,0.607149,0.836449,-0.175919,-0.100828,-0.242579,-0.372696,0.675519,-0.134445,-1.06053,-0.729367,-0.241783,-0.787634,0.187672,0.50142,0.100759,-0.175082,0.881355,1.10347,-0.924878,0.153442,0.73731,-0.30252,-0.261753,-0.415021,-0.748727,-0.548392,0.881331,-0.450928,-0.544458,0.489531,0.203501,-0.858064,0.249678,-0.826051,-0.577163,-0.912591,0.566757,0.130779,-0.00177265,0.311603,0.548532,-0.461875,-0.228489,0.943753,-0.60223,0.0609886,-0.353238,0.222146,-0.682038,0.753794,1.10659,-0.347967,0.337243,-0.0782929,0.223604,-0.30659,0.369593,0.672204,-1.05316,-0.285094,0.222331,-0.299833,0.762871,0.0284227,0.199123,0.174545,-0.693654,0.280301,-0.209229,0.799664,0.160273,0.459899,0.00278171,-0.740563,0.249884,-0.629347,0.196647,-0.559809,0.368616,-0.585228,-0.643622,-0.00469683,-0.0706096,0.733383,-0.0138975,0.444944,-0.481938,0.102788,0.659199,0.50937,-0.2876,0.507563,0.0899549,1.25914,1.53856,0.677691,-1.12092,-0.0501532,-1.15492,0.000624397,-0.0680388,-0.67035,0.143488,-0.374507,0.728915,0.166471,1.0578,0.529838,0.24419,-0.715945,-0.971119,0.535909,-1.23042,0.278547,-0.785259,1.45823,-0.354466,-0.431831,1.95836,-0.22994,-0.791402,0.309537,-0.176978,-0.0626601,0.0270688,-0.498311,0.267739,-0.300928,-1.11212,-1.17003,-0.19446,-0.622369,0.0757711,0.609004,0.520433,-0.745039,0.501633,-0.122289,-0.506212,0.293504,1.22163,-1.07136,0.296812,0.0388175,-0.662076,0.0173868,0.245346,-0.0749419,0.194442,0.041854,0.763509,0.392921,0.542507,0.0463432,-0.475785,-0.524356,0.249395,-0.262167,-0.469771,-0.891735,0.603869,-0.722356,0.0354253,0.546695,0.228721,-0.21697,-0.045132,0.669779,-0.61795,-0.461026,1.0126,-0.314042,0.258169,0.205724,-0.0645989,0.336965,0.546991,-0.208031,-0.0959548,-0.0933445,-0.253956,-0.0278003,0.262793,0.781857,0.631542,0.209905,0.317408,0.225645,-0.553714,-0.0443868,0.0404535,-1.17167,-0.0608863,0.0755056,0.184018,0.934832,0.828607,0.856132,-0.139785,-0.201193,-0.650746,0.811102,-0.681355,-0.238332,0.1269,0.96299,0.138414,-0.362714,-0.101127,0.0975467,-0.204289,-0.275027,0.242597,0.0605406,0.323753,-0.343629,0.494693,0.507291,-0.736287,-0.0963441,-0.239536,-0.528588,-0.176321,-0.119454,0.245008,0.0741488,0.637198,0.429304,-0.0413046,0.344674,0.631941,-0.503941,0.238213,0.20627,-0.748744,0.442517,0.00247638,0.102038,0.135344,0.629682,1.41175,0.152395,0.352831,0.0464699,0.583289,-0.213541,-1.21456,0.251222,0.00340265,-0.782315,-0.177651,-0.250668,0.438764,-0.00759434,0.182324,0.589749,-0.107908,-0.253625,-0.312554,-0.262954,0.241777,-0.841403,-0.534762,-0.380034,-0.426444,1.07641,-0.551313,0.419429,1.3557,-0.942948,0.336082,1.1305,0.172515,0.240516,-1.25938,-0.476845,0.219966,-0.300768,0.359357,-0.0617393,0.606546,-0.440456,-0.0536243,-0.0296682,0.225892,-1.05365,-0.615016,0.809341,-0.313253,-0.493568,0.246431,-0.0679562,0.364909,-0.162985,0.1887,-0.687512,0.735773,0.362856,-0.152826,0.364713,0.249115,-0.559761,0.660948,0.981257,-0.299321,-0.12269,0.383661,-0.365083,0.0501238,0.535017,0.729961,-0.589079,-1.00818,-0.645174,0.121768,0.0540198,-0.39697,-0.0300912,-0.487337,-0.651747,-0.693174,1.12365,-0.362523,-0.379795,0.637066,0.557131,-0.0459437,-0.773537,-0.396974,0.681749,-0.0946277,-0.535938,0.118649,0.0398365,0.769809,0.494901,0.288018,0.621005,-0.414777,0.10438,-0.869549,0.3605,-0.510775,-1.28443,0.394095,0.870819,0.94109,-0.787042,-0.418306,0.762533,-0.863997,0.485208,-0.141053,-0.186686,0.790463,0.960675,-0.249639,-0.799028,-0.432962,0.39001,0.747978,0.536743,0.149073,-1.02228,-0.151172,-0.39434,1.05082,0.471269,0.238632,-0.5825,-0.834417,-0.0345151,0.302232,0.159382,-0.569809,0.957441,0.0208467,-0.0994593,-0.18082,1.48602,0.563308,-1.47228,0.102938,-0.530175,-0.233124,-0.00563404,-0.549531,0.378055,-0.621956,-0.737332,1.22013,0.756729,-0.0784332,-1.78652,-0.689021,-0.754625,0.957515,0.399648,0.34771,-0.874387,-0.527213,-0.643006,0.295372,0.363481,-1.0522,0.887869,-0.92378,0.138824,-0.248104,1.08898,1.34056,-1.338,0.425187,-1.09588,0.130972,-0.253553,0.0891171,0.637637,-1.60737,-0.37722,1.86829,0.285707,0.514704,1.54737,-1.14824,0.836592,-0.615217,-0.40053,0.830191,1.21734,1.10869,-0.0830189,0.141147,-0.744543,-0.0183847,-0.526093,-0.90371,1.90413,1.02789,-1.39428,-1.74081,1.51273,-0.333406,-0.842169,0.338154,-0.754419,0.881903,-0.0226618,-0.0583465,0.70622,-0.609,-1.03134,0.135668,0.633947,-0.468166,-0.0442857,-0.877922,-0.588845,0.10912,1.26444,1.4496,-0.207551,-0.10557,0.939751,-0.470715,-0.318217,-0.705478,-0.860969,-0.0730161,-1.12872,-0.358963,0.788083,-0.520413,0.157495,-0.258082,-0.493397,-0.269089,0.356363,-0.137358,0.180739,-1.38739,-0.872374,0.129545,-0.258945,0.259764,-0.547987,-0.0408456,0.186102,-0.399007,0.972698,0.0762438,1.00252,-0.68914,-0.857707,0.505089,-0.943493,0.427714,-1.12198,-0.426106,-0.00410422,0.186759,0.231131,0.708998,0.786464,0.215973,0.224908,-0.529371,-0.156616,0.14545,0.741994,0.0858282,0.803809,0.178889,-0.676489,-0.552423,-0.75039,0.73371,-0.00323677,0.888097,-0.3136,-0.583911,0.852246,0.917823,0.306941,0.0633937,0.0506519,-0.195619,-0.0188993,-0.73844,1.16141,0.235222,-0.606238,0.206221,-0.286359,-0.449831,-0.577553,-0.00632892,0.187833,0.0288151,-0.865246,-0.183303,0.593087,0.132716,-0.859521,-0.771893,-1.10097,1.89113,0.382605,0.262341,-0.169648,-0.176658,-1.43661,0.0824446,1.7237,-1.59649,1.21377,-1.03557,0.671927,-0.588589,2.06266,1.62883,-0.548251,0.486426,-1.65249,0.0295452,-1.09934,0.329912,1.36012,-2.6031,0.424942,1.80016,-1.05215,0.489143,1.36384,-0.452171,2.47181,-0.694124,0.243096,0.340471,0.650212,0.696582,-0.452227,-0.0924521,-0.685697,0.298429,-0.177828,-0.856987,1.9427,2.32531,-0.690907,-1.19974,1.48096,0.487534,-0.0233169,0.0972554,-0.463258,0.933242,-0.68769,0.786823,0.0352627,-1.00995,-0.761788,-0.0756835,-0.258813,-0.279864,-0.823603,-0.290228,-0.0953308,0.0556294,1.43292,1.04528,0.0765032,-0.220208,0.700549,-0.212517,-1.07101,-0.406199,-0.881682,-0.0619753,-1.04247,0.187748,0.104087,0.666117,0.828063,-0.222954,-0.663797,0.00614301,0.730489,-0.194126,0.317769,-0.709924,-0.393775,0.474227,-0.429461,0.742309,-1.26061,-0.614656,0.524477,-0.984807,0.964078,0.282681,0.741182,-0.868685,-0.346788,0.398717,-1.51011,0.29506,-1.83736,-0.611837,-0.678194,0.606784,-0.294235,1.04988,1.33513,-0.349959,0.789272,-0.838152,0.665522,0.573739,0.486494,0.323778,0.952282,0.358133,-0.0191253,0.091803,-0.551291,-0.235573,0.244939,0.763317,-0.0534807,-0.464118,1.24354,0.740015,-0.349554,0.496172,-0.197455,0.726627,0.653065,-0.297696,0.152679,-0.962562,0.0797772,0.278406,-0.617063,-0.0391465,-0.53557,0.817823,-0.246003,0.644423,0.107388,-0.606547,0.0874494,0.122117,0.988848,-0.662001,0.0737229,1.18277,0.135551,-0.200073,0.6683,0.497647,-1.00173,-0.256798,0.580957,-0.979286,0.589109,-0.8182,1.56077,0.492984,0.912872,-0.189976,0.780606,-0.310256,-1.48835,0.0829353,-1.04139,0.264316,0.489314,-1.6982,1.31019,0.727973,-1.58804,-0.068475,-0.976832,-0.722689,2.77707,-1.33253,0.627426,1.98305,0.634327,0.552813,0.603496,0.596696,0.143057,0.312781,0.816116,-1.63497,0.698893,2.49022,-0.378781,-0.736818,0.705932,0.606124,1.22742,0.588074,-0.598957,0.36169,-0.48595,1.46546,-2.53874,-2.44924,0.449401,-0.348227,-0.0357714,-0.0820041,0.166104,-1.45639,0.00943862,0.746789,0.472667,0.516838,-0.0479516,0.353687,0.989178,-0.830572,-0.189514,-1.89039,-0.303463,1.312,-1.0673,0.630193,-0.434908,0.502993,-0.455585,-0.0132803,-0.616611,-1.32618,1.52526,0.32403,-0.942462,-0.338506,0.128782,-0.214033,0.712386,-0.23147,-0.984354,-0.756559,0.273956,0.487572,0.697079,-0.294501,0.39974,0.535559,0.892334,-0.238996,-0.167579,-0.457362,-0.717511,-0.0146296,0.345671,0.920962,-0.720187,0.870207,-0.520088,-0.607341,-0.940527,-0.653577,1.78058,-0.0355032,0.126765,0.404366,0.0398208,0.240291,-0.0370701,0.434788,-0.216819,-0.295482,-0.0324528,-0.172484,0.0664057,-0.284925,0.534849,0.266741,0.405222,0.430955,-0.831281,0.859034,-0.516152,0.325149,0.493261,0.0945076,-0.29701,0.638434,0.521121,-0.888654,-0.275274,0.203999,0.0236812,0.734023,0.191597,-0.495064,0.139721,-0.0787068,1.24327,0.626219,0.701103,0.126527,0.362843,-1.25658,0.548645,0.41351,-0.809059,-0.664679,0.226859,-0.0389268,-0.698983,-0.434813,0.274603,0.706445,0.643069,-0.0877181,0.739766,0.352555,0.584482,-0.721121,0.0911622,-0.139195,-0.0757153,0.318229,0.861254,-0.0107728,-0.924754,-0.28699,-1.66215,-0.867395,1.5622,-1.35457,0.926288,2.69983,0.796146,0.864137,0.785638,0.921433,1.20707,-0.142013,1.73314,-1.36759,-0.425569,0.93889,-0.569033,0.597314,0.340121,0.316646,1.85594,0.756516,-0.324192,0.322581,0.523506,0.689956,-3.15431,-3.14107,1.07014,0.32148,-0.41408,-0.190774,0.785379,-1.04213,0.220451,0.552549,0.282232,0.216216,0.15029,0.39087,0.167228,-0.857068,0.879091,-1.08651,0.240966,0.199918,-0.534509,-0.202682,-0.109745,-0.622529,-0.799954,0.791359,-0.044418,-0.906622,0.766262,-0.309848,-0.562591,0.121031,0.391717,-0.187208,0.880036,0.762218,-0.128321,-1.70191,0.252287,0.664193,0.538516,-1.12254,0.873522,1.4587,0.342528,0.346465,0.835256,0.432857,0.0366822,-0.104356,0.329275,-0.408087,0.271271,-0.101595,-0.93229,0.0522959,-0.585433,-0.743968,1.37771,0.662308,-0.598097,-0.149168,0.830775,-0.108426,1.66875,0.78143,0.526226,-0.88382,-0.140345,-1.15694,1.15106,0.576099,-0.628908,-0.477911,0.2185,0.118896,-0.931276,-0.180938,-1.12061,0.839969,0.33618,-0.215076,0.80244,0.299808,0.610594,-1.01467,0.154375,-1.05718,0.278322,0.610543,0.767744,-0.719479,-0.242757,-0.36278,0.716604,0.618005,0.0626669,0.272768,0.609906,-1.4308,0.605759,0.71779,-0.440158,-1.40847,0.129716,0.343512,-1.55247,0.26741,-1.03039,0.399732,0.661706,0.196036,0.554499,0.566037,1.93636,-0.994093,0.815974,-0.0158436,-0.0747925,0.550244,1.07306,-0.273583,-0.147167,0.167582,-0.669194,-0.0287432,0.00361618,0.0916609,0.245241,0.368705,-0.375987,0.0240661,0.188297,0.11708,0.712754,-0.24362,0.625431,-0.172133,-0.367329,-0.169491,0.0395761,0.873932,-0.442347,0.520599,1.04169,-0.248913,-0.21947,0.295074,0.0271772,0.11271,-0.879539,-1.08586,0.379675,0.311908,-1.20275,-0.768008,0.714516,0.157387,0.015871,0.964909,-1.10315,-0.12077,0.198954,0.604333,-0.220615,-0.323987,1.46905,-0.256499,0.93064,-0.297129,-0.390902,0.255883,-0.834087,-0.315199,-0.2893,1.10511,-0.121828,0.360022,-0.630273,-0.266955,-1.61444,-0.054487,0.502235,0.151529,1.01555,1.04963,0.103629,-0.873525,0.282025,0.1315,0.0190211,-1.53404,0.26587,0.946458,0.285282,-0.656013,1.38443,0.94216,0.73833,0.368631,1.23291,-0.29812,0.0866709,-0.229028,-1.35608,-0.31377,-0.742122,-0.510808,1.18519,0.389295,-0.54475,0.386156,0.0535161,-0.388348,0.656909,0.550415,-0.0654255,0.444465,0.0715588,-0.649924,0.552043,0.126039,-0.616815,-0.381042,0.298033,-0.489983,0.130475,0.409685,-0.310813,0.435791,0.930733,0.0130595,0.132407,-0.016066,0.234719,-0.666532,-0.0371511,-0.6446,-0.0505196,-0.588696,0.677188,-0.323253,-0.610227,-0.309971,-0.960889,-0.496059,-0.419004,0.27338,0.214887,0.139533,-0.274446,0.227644,0.889223,-0.255191,-0.233808,0.698652,-1.48815,0.448658,-0.805298,-0.20138,-0.0749428,0.491167,-0.306894,0.741018,1.81578,-0.361932,0.0508051,0.657742,-0.457687,0.65624,-0.36031,-0.687845,0.570311,0.210614,0.232847,-0.187615,-0.853505,0.517969,0.197051,-0.414283,-0.661593,-0.155506,0.262891,-0.246164,-0.171402,0.410843,-0.80502,0.533315,0.558311,-0.996195,-0.505372,0.276395,-0.31841,-0.0710013,-0.321465,0.215998,-0.164512,1.02648,-0.502288,-0.342418,0.926444,0.51425,-0.342858,0.22116,-0.178915,-1.01436,-0.342413,-0.229875,0.144999,0.221754,-0.93632,1.18892,-0.233345,-0.0897311,-0.15006,1.10972,-0.466424,-0.276613,0.589568,-0.671001,-1.65971,0.273006,-0.53677,-0.22668,-0.00262651,0.858879,1.0972,1.38739,-1.22317,0.160761,-0.116024,0.236324,0.320366,0.758433,0.565881,0.189591,-0.466964,0.0573213,0.0263823,-0.270334,-0.0534329,-0.679145,0.180183,-0.315195,-0.652752,0.1502,0.2396,0.394537,0.254847,0.0245285,-0.0534291,-0.486299,-0.187662,-0.183249,-0.777951,0.391681,0.524619,0.373819,-0.371993,-0.389041,0.331431,0.993811,-0.158947,0.199537,-0.544268,0.354202,0.643807,0.834168,0.393838,-0.17553,-0.0292487,-0.636559,0.335551,-0.567162,-0.910602,-0.0947998,0.369034,0.921471,0.0646498,-0.0864986,0.687477,-0.752337,0.335652,-0.201661,0.375327,0.505751,0.506395,0.0131578,-1.14575,-0.943526,0.101432,0.195884,-0.0666283,-0.0503458,-0.627853,-0.95768,-0.695075,0.259563,0.398056,1.22048,0.285601,-0.0546402,1.70634,0.346789,-1.33158,0.906278,-0.37675,0.148763,-0.112904,-1.19767,-0.902438,-0.297038,-0.0622843,0.0198988,-0.13426,0.929047,0.0320214,0.829613,-0.564783,-0.152428,0.185419,0.0083183,0.655636,0.575145,-0.360187,-0.0556605,-0.390771,0.649284,0.436878,-0.101989,-0.475938,-0.882723,0.752103,-0.225985,-0.805041,0.582003,0.333981,0.927474,0.817197,-0.860299,0.665576,-0.0141221,-0.215112,-0.044095,-1.0958,0.819724,-0.214664,0.654372,-0.185688,-0.68795,0.904022,1.28516,0.159774,0.440107,0.303358,-0.0112783,-0.939915,0.0230723,0.143438,-0.881287,-1.022,0.25373,-0.644575,-0.95532,-0.536855,1.08644,-1.15497,0.491417,-0.268157,-1.22854,-0.619238,0.551204,-0.152126,0.172693,0.158264,0.127325,0.591419,0.863364,-0.905029,0.10782,1.20851,1.11037,-0.448796,0.358228,-0.944529,-0.609784,0.225253,0.155637,0.105445,0.201693,-0.371958,0.34851,-0.153383,-0.556707,-0.33061,0.681567,-0.487049,-0.0742919,-0.631781,-0.181951,-0.483533,0.192906,0.0872385,0.481781,1.59608,0.38224,-0.179002,0.900376,-1.03333,-0.137187,-0.613539,-0.509976,-0.381337,0.277235,-0.270582,0.369401,0.502519,-0.175185,0.50044,0.793393,0.316148,-1.08285,1.73812,0.35223,-1.22415,-0.248943,1.18462,0.792382,-0.928031,-0.22061,0.412689,-1.72866,0.974461,-0.61965,-0.396333,0.924129,-0.080937,-0.680491,0.0670654,-0.38596,-0.2643,-0.430604,0.803022,-0.134223,-0.0124257,-0.123608,-0.119923,-0.0672906,0.501393,1.51582,1.56451,-0.875771,2.29465,0.781887,-1.71544,-0.465449,1.52232,0.00412214,-0.022446,-0.0538417,0.0280545,-2.09194,0.786674,-0.803975,-1.74804,1.72493,-0.536383,-0.678063,0.585899,-0.785133,0.404009,0.268119,0.631749,0.0395954,0.0914598,-0.261106,-0.290288,0.136841,1.08316,0.164855,0.486724,1.0221,0.391311,0.168386,0.705033,1.03989,-0.693087,0.381153,0.120672,0.210505,-0.492527,0.722578,0.322772,1.22764,1.25947,0.310172,-0.224461,1.11614,0.478852,0.395758,0.654045,0.150638,0.218345,1.38993,-2.03753,1.89481,-2.29491,-2.62754,-1.26636,2.98541,-0.345179,0.764039,-0.763594,1.14398,-0.588331,1.46472,-2.28204,0.0154923,0.983815,-0.203581,-1.73713,2.39694,-1.85504,-1.02685,2.2484,-1.22862,-1.24591,-1.20784,0.667191,-0.662076,2.66687,0.164355,-3.64243,-1.14424,1.59265,-0.246249,1.9273,1.9693,-2.00747,-0.340627,-3.03846,-1.81891,-1.87207,1.01443,-0.653882,-0.256719,-0.732577,-0.59529,-0.39799,-1.90003,-1.14062,-0.863187,-0.685783,-1.69308,0.854829,-2.05697,2.13581,-2.58812,0.547341,-3.31748,1.17445,-1.52321,1.24938,-1.74966,-0.779198,2.09567,-1.88581,-2.42912,0.573257,0.236728,-0.141366,-3.83777,1.20715,1.16431,0.279692,-0.862146,-1.93804,-1.99217,-2.18037,0.645027,0.90693,-1.67838,2.16868,1.06797,-2.81018,1.1349,1.75138,-1.40963,1.37324,-1.1555,0.913629,-3.1738,0.553917,-1.60323,-0.543985,-1.06754,1.57514,-2.58951,1.36484,-0.363373,-0.621761,0.903378,0.578788,-1.41791,1.01542,-2.43124,-1.61155,-0.724282,0.00404038,-1.27222,-2.67077,1.67279,1.97155,1.21945,-1.93446,-1.9567,-1.04468,0.100447,-1.78503,1.15645,1.45388,-0.39962,-0.387895,-1.75767,3.13997,0.875349,1.539,-2.76728,0.37661,-2.11744,-2.09178,1.4078,-1.48215,-2.63953,-1.02903,0.111355,0.146038,1.18558,-0.246665,2.94536,-3.1035,0.938433,-1.82954,-1.72491,1.45545,-2.83619,1.93771,-3.50722,-0.959451,0.723248,-0.306558,0.89151,-2.48946,0.42059,-0.201532,-1.13462,-2.38068,-1.802,2.42903,-1.59254,1.75634,0.0764862,-2.93626,1.18751,0.219038,-0.995892,-0.562616,2.6007,1.15706,-2.90821,-3.07808,0.268979,-1.95293,0.935965,0.63547,-3.05732,-0.714136,1.94817,-1.25267,-2.36213,-1.79683,1.37986,2.39517,0.796249,0.539231,0.198113,-2.0387,-2.46455,0.272488,2.43072,0.0255887,-1.44169,-1.7569,-0.565788,-1.1527,-2.12416,-0.770913,1.83711,0.186777,-0.97969,-0.618984,-1.48124,0.143674,1.08514,0.710382,-3.87049,-2.81949,2.65814,-0.290717,0.552676,0.648037,-1.35212,0.995825,-2.30736,0.886446,0.80689,2.32986,-1.14523,-1.41007,-1.23107,0.806171,-1.70774,-0.701408,-1.91332,-0.803246,1.75604,-1.74137,0.531171,-2.38901,-0.227619,0.398758,1.32537,-0.759458,-2.61658,-0.333007,-3.22784,1.08293,-0.646045,-2.74227,0.691432,-0.183202,-1.54504,-1.22736,-0.584737,-1.53265,0.626873,-0.575698,-1.59533,2.02036,-1.94531,-2.38418,0.165723,2.47517,1.49131,-3.13684,-2.18493,-2.13992,-1.2619,0.724645,0.199731,1.79636,1.66722,-0.244522,-1.71747,-2.67463,2.28391,-0.735356,-0.0647269,-2.18603,2.72362,-1.36904,-1.86328,-1.55425,2.1042,-3.23767,2.62426,0.64874,2.00314,-2.85735,-2.27385,-1.70107,0.0235307,-2.06056,0.698194,-2.03372,0.297729,-0.240071,0.591951,0.564737,-2.5697,0.183832,0.214313,0.38932,-2.95814,-0.19381,-1.46697,-0.114181,-0.57602,-2.21209,-0.702102,-1.15596,-1.582,0.845293,-0.570693,0.0371777,0.388716,0.742298,1.12813,0.531563,0.249895,0.562955,0.482807,0.331264,0.542142};
double ANN::weights[] = {-1.53986,0.769392,0.673987,-0.647513,0.561561,1.05716,-0.246393,-0.15661,-1.47498,0.000682194,0.43014,1.43182,0.572966,-1.14828,-0.957369,0.425262,-0.669119,1.22861,-0.952899,-0.743189,0.191627,-0.467256,-0.447446,0.431622,-0.057015,0.448877,-1.727,0.414942,0.807248,0.988991,-0.456971,-0.298526,0.404075,-0.39328,-0.0749186,0.239846,-0.410382,-1.01889,0.455138,0.56182,-0.294919,0.232226,0.432809,0.651515,0.388485,0.0868935,-0.869812,0.287542,-0.356812,-0.642909,-0.552299,0.851931,-0.0728903,0.255646,-0.327383,0.633673,-0.347801,-0.209142,0.926869,0.388196,0.842732,-0.432359,0.272421,-0.714309,-0.35263,0.152356,0.0973734,-1.02874,1.00926,1.01388,-0.300947,-0.395953,-0.627276,0.787505,1.10892,-0.147336,0.393869,-0.350445,-0.0450818,0.253227,-1.53927,-0.444313,0.250741,0.558936,-0.303815,-0.246998,0.307783,-0.344983,0.178202,-0.504388,-0.101075,-0.134474,-0.238964,0.302265,0.0624904,0.594127,0.244699,1.10465,0.879664,0.647509,1.00706,-1.46765,-0.278,0.357208,-1.23559,0.168992,0.519125,-0.182671,0.914033,0.839111,1.19186,-0.955052,-0.164327,0.257495,0.530191,-0.640986,0.19418,0.0525314,-0.0862273,-0.215295,-2.08336,0.81576,-0.672289,0.229425,-0.341912,1.40126,0.567173,0.559674,-1.26222,0.584841,0.922059,-0.409338,0.329196,-0.0717431,-2.48492,0.718871,-0.540928,0.288104,-0.499038,-0.357887,1.9674,0.403456,0.215727,0.6933,0.122839,0.0152895,-0.330295,0.821814,0.271615,0.800388,-0.554087,-0.118388,1.22919,-0.146505,0.412707,0.536002,-0.563775,0.00389362,-0.302235,0.314236,0.536103,0.638871,0.852101,-0.72992,0.28542,-0.793779,-0.192294,0.362381,-0.515027,-0.94888,-0.601295,-0.759135,-0.28262,0.293877,-0.0379973,0.577848,-0.922767,-0.57152,0.901737,0.526403,-0.269072,-0.27721,1.20097,-0.432478,-0.111714,-0.0151764,0.353172,-0.770038,0.574728,0.088924,0.29809,0.326891,0.152342,0.353834,0.548949,-0.252762,-0.232608,-0.158924,0.114557,-0.378701,-0.139225,0.543286,0.564381,0.204055,0.00674017,0.324416,0.0533433,-0.646881,0.148336,-0.129938,-0.440266,0.252306,0.504261,0.115217,-0.0367326,0.535868,0.857563,-0.418422,-0.290968,-0.205868,-0.199529,-0.0375399,0.399065,0.288557,-1.12889,0.289454,-0.241977,0.314594,0.225675,-0.00720543,0.838107,1.26661,-0.550352,-0.719969,-0.263739,0.336834,-0.0635274,-0.194333,-0.745292,0.80625,-0.323003,-0.456318,1.0035,-0.56086,-0.188155,0.666817,0.0224919,0.169877,-0.170315,0.598093,0.152429,0.407233,1.06776,-0.88476,-0.353171,0.0872749,0.816225,0.20592,-0.0426544,-0.545029,0.484133,0.00393496,-0.391751,-0.745575,-0.40194,0.181904,-0.163648,-0.0547104,-0.10149,0.612367,-0.438863,0.800748,0.502114,-0.656938,-0.214683,0.508577,0.249173,0.122261,-0.89275,0.198241,0.762699,-0.640163,-0.522344,-0.201869,-0.376953,0.5238,0.0062269,0.277532,-0.851783,-0.0141076,0.49178,-0.452682,0.196879,1.27285,0.540396,-0.226329,-0.220171,0.435431,0.132959,-0.124972,0.807348,-0.287199,0.256471,0.406239,-0.0721686,-1.09268,-0.253999,-0.293115,0.797154,-0.521937,-0.319513,0.265139,0.216706,0.565154,0.224256,-0.172327,-0.147838,-0.539995,-0.116446,-0.669799,-0.268025,0.0762893,-0.0222254,-0.151931,0.196023,0.499269,0.92539,-0.468466,-0.182899,-0.441875,-0.297005,0.0519869,-1.1535,0.677264,-0.175512,-0.114025,0.45802,0.223557,0.201655,-0.591302,0.0175822,0.118575,0.0521196,0.5252,-0.49313,-0.0288102,0.153922,-0.744942,0.909339,0.0635486,0.355761,0.846291,0.813641,0.00408969,-0.308367,-0.233697,0.73982,-0.268204,0.141181,-0.456905,-0.814208,-0.016315,-0.538656,0.550869,0.491579,0.846977,0.384734,0.788287,-0.045063,-1.64694,0.277784,0.675794,0.555689,-0.765293,-0.665569,-0.335033,0.56924,0.989379,1.73963,0.30291,-0.325418,0.0154608,0.109471,-0.338307,0.0753161,-0.376632,-1.22066,-0.548906,0.123976,-0.047869,0.686879,0.81918,0.346531,-1.1477,-0.0117506,-0.0984496,-0.33289,-0.491266,-0.08194,-0.522542,-0.770908,1.80026,-0.748267,-0.889619,1.06532,0.452912,0.352309,1.22245,-0.237452,0.629403,-1.29819,-0.865365,0.377106,0.378399,-0.407353,-0.182429,-0.951479,0.606637,-0.250155,0.00845982,1.28658,0.768246,1.19879,-1.534,0.314454,-0.237605,-0.000290736,-1.34055,0.312422,-0.477512,-1.29824,1.05249,-0.1242,-0.656371,1.51824,0.39842,0.564125,0.558729,-0.726067,-0.00694852,-1.76039,0.0295329,-0.564497,0.351611,-0.524935,0.313353,-0.347351,-0.0583271,-0.702661,-0.74908,1.03418,0.153037,-1.32823,1.37399,-0.718698,-0.625454,0.875135,0.995536,0.99571,0.0107299,-0.691427,-0.842731,0.095787,1.42953,-1.34376,0.77283,0.0356047,-0.669102,-0.153833,0.0227473,1.67755,1.60906,0.567963,-0.9267,0.342167,-0.326047,2.02393,0.588886,-0.97227,-0.315226,-0.265907,-0.256654,-1.75355,0.58085,-0.882591,-0.101148,0.278924,0.544438,0.746527,0.286739,0.162889,-1.7582,-0.309486,0.768415,0.368013,-0.752835,0.2496,-1.28141,0.540309,0.28283,0.316666,0.0553169,0.847736,0.348416,-0.109934,-0.844393,1.42476,-0.21438,0.777061,-0.0922799,-0.7199,-1.2925,-0.958022,0.684168,0.0301116,0.155422,-0.549365,1.51699,1.04052,-0.463626,1.13579,-0.871659,0.245173,-0.609051,-0.466103,-1.44884,0.686201,-0.371275,1.4104,-0.288378,-0.482199,-1.7986,0.476239,-0.253908,0.66577,-0.698137,-0.695552,-0.989078,0.833486,-0.46855,1.363,0.41317,0.0496371,-0.494021,0.233177,-0.493005,-0.0780639,0.107536,0.704651,-0.657898,0.715832,0.627565,-1.32812,0.272518,0.665092,0.453987,-0.37386,0.554347,0.349084,0.993767,-0.578499,-0.672963,0.722928,1.13818,0.2957,-0.225205,-0.856824,-0.288741,0.398202,-0.589904,1.64699,0.699219,0.395612,-1.64456,0.358335,-0.280837,0.582426,-2.31665,0.533337,-0.387196,-1.91352,1.64834,0.287101,0.0402241,2.46704,0.255663,0.279255,0.125626,-0.83749,-0.406849,-2.78822,1.509,-0.895433,0.383589,-1.3879,0.727747,-0.251217,-0.17833,-0.613487,-0.351362,1.17494,-0.198778,-0.437373,1.51615,-1.16831,0.640085,0.535488,1.56295,0.746248,0.232997,-1.12851,-0.521903,-0.22376,0.0922865,-1.45597,0.694578,0.523559,-0.234022,-0.0649899,1.28899,1.79499,0.736253,0.334058,-1.7124,0.483741,-0.803016,1.02582,1.37721,-1.79173,0.61767,-0.00679475,-1.01676,-0.523218,0.0717743,-0.311855,-0.401491,-0.388253,0.233909,1.44321,0.116659,0.191661,-1.05613,0.236909,-0.0629043,0.637724,-1.15438,0.872779,-0.37615,0.862636,-0.336335,-0.544738,-0.291918,-0.758309,0.0492127,-0.148527,-0.0395256,0.797909,-0.387948,0.730496,0.164516,-0.764447,-0.79157,-0.148744,0.306212,-0.138868,0.235884,-0.919236,1.41998,-0.194811,0.295344,1.37965,-1.47616,0.328145,-0.909541,0.499033,-1.44914,1.39079,-0.302959,0.194556,-1.02302,-0.545447,-2.09052,0.335181,-0.0480834,0.388027,-0.0238478,-0.408128,-0.551258,1.27745,0.168002,1.26985,0.319142,0.13567,0.0764686,-0.118518,-0.471936,-0.482255,0.659819,0.816186,-0.374764,0.535672,-0.992297,-0.757401,0.877234,-0.144403,1.47146,-0.146114,0.358633,0.139887,0.367506,1.26104,0.847217,-0.0448341,0.725177,1.06741,-0.315955,-0.00150453,0.265684,0.0546696,-0.746798,0.835656,0.00122295,-0.471858,0.13529,-0.0645202,0.112354,0.955344,-0.738231,0.628936,0.26755,-1.80424,0.958371,0.487374,0.753306,0.45031,0.112405,-0.137395,-0.831323,-0.767564,0.0821343,-0.272113,1.97008,-0.976162,-1.15261,-0.784957,0.400962,0.759253,0.128814,-1.43619,0.0552017,2.19695,0.495323,-0.131907,0.0539803,-0.765349,0.991972,0.205525,1.40923,0.598308,0.198265,-0.442962,-0.680393,-2.56237,-0.343879,-0.0346792,1.00165,0.683509,0.32213,0.0275618,2.83169,0.930563,-0.936006,1.23667,-0.263373,0.709714,-1.77508,0.117731,1.5059,-1.66079,-0.137223,0.969811,0.74757,-0.586012,-0.33026,-0.539379,0.150512,-0.0246606,0.456265,0.261613,0.22683,-0.467302,-0.54621,-0.754791,-0.540744,0.329837,-0.451874,0.3301,-0.461938,-1.4879,0.223325,-0.192224,-0.645105,-0.247265,0.649046,0.280451,-0.692603,0.184044,0.947844,-0.303134,0.120801,1.33821,0.730664,0.0153587,-0.112429,-0.140537,-0.170058,-0.0261526,-0.101238,0.169574,0.39561,-0.239184,-0.355188,0.348752,-0.783607,1.42115,-0.371073,1.02983,-0.245437,-1.47684,-0.796315,-1.16997,-0.431444,-0.949615,1.08257,0.261381,0.234198,-0.608184,0.60092,0.912401,0.264189,0.00573275,-0.10735,0.321002,0.121643,-0.467304,-0.310621,-0.619431,-0.338712,0.446001,0.102696,0.741763,-0.88869,0.0974784,-0.357929,0.117391,-0.13812,0.00417685,-0.250752,-0.951881,-0.750214,0.332012,-0.378552,0.0139114,0.616262,0.041225,0.0188286,0.270921,0.105339,1.14325,0.536202,-0.346861,-0.980372,0.248877,0.54277,-0.869538,1.12034,-0.0539629,-0.00407693,0.583524,1.06558,-0.24085,0.280076,0.181711,-0.0267277,-0.776574,-0.434968,0.170118,-1.08565,-0.879108,0.268316,0.646988,-0.0338869,0.190184,-1.09965,-0.468773,0.0386772,0.880683,0.361072,-0.936924,1.04831,2.16723,0.450629,0.233997,-0.906624,-0.927622,0.781202,0.122754,0.186981,0.531383,0.521622,0.285459,-1.2704,-2.83254,0.153686,1.79207,0.272306,0.382649,0.180637,0.444851,2.53138,-0.729015,-1.32907,2.11824,1.03227,0.439304,-1.80158,0.111396,0.938164,-0.237661,-0.428809,0.530363,1.21847,-0.95118,0.00789811,-0.202222,0.449061,0.404606,0.893738,-0.380607,-0.119139,-0.958717,-0.591579,-0.236121,0.351837,0.134962,0.35839,-0.117271,0.384839,-0.779089,0.380008,-0.31751,0.239352,0.443403,0.120925,0.305108,-0.502727,-0.42006,0.645644,-0.61948,-0.522685,0.476441,1.64936,-0.47767,0.608588,-0.266798,0.723463,0.654878,0.668085,-0.0525739,-0.158828,-0.129138,-0.697854,0.291436,-0.141118,0.129621,0.665559,0.311106,0.61584,-0.388574,-0.133851,-0.307822,0.793676,-0.394514,1.45292,0.535774,-0.226314,-1.41796,0.615444,1.37672,-0.376805,-1.09355,-0.773832,-0.507321,1.03742,-0.981134,0.744991,0.458144,0.360602,-0.108053,0.946427,0.0651882,-1.34719,0.933569,-0.629704,-0.39005,-1.21781,0.307795,-1.23251,-1.04147,-0.663199,0.450067,-0.153923,-0.0181429,-0.681632,-0.315219,-0.116578,0.944585,0.532511,0.950415,1.30927,-1.36031,-1.71398,0.0717397,0.719848,-0.548081,1.53341,-0.738554,0.871094,0.520797,1.47414,0.777782,0.296758,0.32229,-0.100734,-0.632014,-1.3997,0.608793,-0.986892,0.0533128,-0.00963638,0.725163,-1.06299,0.551446,-1.33042,-0.661724,-0.039097,1.19318,-0.168581,0.33696,1.76101,-0.0618478,0.0252179,0.198317,-0.898925,0.0657045,0.413829,-0.555096,-0.514518,0.292888,0.131704,0.189705,0.437279,-0.403101,-0.790753,0.965549,-0.654512,0.251835,-0.0609555,0.0569179,0.250711,-1.06857,-0.539614,0.371759,-0.104393,-0.194706,0.125625,-0.187796,0.260321,1.0534,0.569178,0.0628733,0.757155,0.309436,-1.49944,0.363906,-0.323578,-0.0528377,-0.781965,-0.171004,0.0178182,-0.258122,0.675057,-0.655462,0.369824,0.49879,1.32468,-0.67328,0.438658,0.198839,0.690116,-0.344314,-0.243213,0.496922,0.261086,-0.406271,0.452222,-0.520517,-0.0249391,-0.989447,-0.509076,0.111049,1.632,-1.02556,-0.15208,-0.0911452,0.391409,0.946593,0.237464,-0.252338,-0.661617,-1.03462,0.081094,0.115097,-0.749073,-0.14899,0.545524,-0.111938,0.913695,-0.93711,-0.0342618,-0.685064,1.1682,-1.24393,0.554802,-0.0266385,-0.108216,-1.9465,0.842761,0.500522,-0.660941,-0.57983,-0.32635,-0.434702,0.262557,-0.715566,0.140525,0.546648,-0.29236,-0.0149199,0.6011,-0.827121,-0.0466204,0.919002,-0.161311,0.350303,-0.741151,-0.339761,-0.843616,-0.882986,-0.38765,-0.304517,0.471819,0.0528327,-0.590242,-0.635337,0.0543955,0.893606,0.603865,0.575671,0.504491,-0.263325,-1.20026,0.767507,-0.260251,0.0420362,-0.561349,-1.61218,-0.087566,1.0121,0.751862,0.998149,0.0823809,-0.314694,0.387983,-0.0358159,0.0166211,-0.0885725,-0.534417,0.689513,0.0781242,0.496101,-1.31876,0.257455,0.0035536,-0.419022,0.335641,0.829783,-0.895039,0.713998,0.356242,-0.988593,-0.368525,0.207023,-0.234386,0.694114,-0.385003,-0.595872,-0.565122,0.468534,-0.479145,0.03899,1.13397,1.10543,0.1614,-0.173596,-0.380136,-0.15033,0.33885,-0.121882,-1.32309,-0.483452,0.539032,-1.00815,-0.196336,-0.0106417,1.00926,-0.322887,-0.715035,1.08782,0.182339,-0.548402,-0.812114,1.43074,-1.1175,0.383808,0.160542,0.382096,-0.818227,-0.170951,0.681873,1.00136,0.962385,0.894691,0.538545,-0.63948,1.29764,0.121616,-0.369974,0.736219,-0.627291,0.930372,0.434278,0.0561811,-0.102575,-0.151786,0.586678,0.716562,-1.13047,-0.792071,-0.0757669,-0.431227,0.0412346,0.147229,-0.126827,0.0600387,0.00488309,0.643767,0.39554,-0.644754,-0.53522,0.15137,0.155007,0.79094,-0.476369,-0.779343,0.366091,0.446467,0.426142,0.293346,-0.768858,0.191745,0.65373,-0.345567,-0.141727,0.015368,0.306743,-0.978128,-0.594714,-0.194974,0.063489,-0.279577,-0.451975,0.476372,-0.105219,0.436101,-0.0251499,0.28766,-0.255114,0.588405,-0.636078,-0.562452,1.14275,0.151815,0.292867,0.0459186,-0.0284934,-0.487556,0.408349,0.936509,-0.00454453,-0.182994,0.953,-0.0234876,-0.828437,-0.434898,0.550748,0.415223,-0.598798,-0.435815,0.00282383,0.554848,-0.402691,0.049364,-0.0204967,0.173964,-1.57489,-0.767267,0.229089,0.759749,-0.529105,0.480809,-0.0372479,-0.0178292,1.17421,-0.0505101,0.235833,0.140433,0.0223856,1.28326,-0.443162,0.192497,0.0552583,0.341255,0.403775,0.60649,0.170079,0.676536,-1.14614,-0.0576274,-0.999422,-0.265052,0.302448,0.0359485,-0.162241,0.999982,-0.6748,-0.437027,-0.75923,0.598924,-1.42429,-0.15362,1.12678,1.14654,0.527098,-0.560008,0.317199,0.259747,0.865632,0.562494,-1.33901,-0.860706,0.572583,-0.972575,0.491668,0.386843,0.442376,-0.726424,-0.815354,0.106263,-0.965338,-1.48061,-1.44929,1.01567,0.00611755,0.577905,0.133614,0.191143,-0.812155,0.171177,0.284602,0.703577,1.30675,2.02749,-0.0888717,-0.901317,-0.554121,0.388432,-0.212683,0.220184,-1.9267,0.367209,0.471335,-0.959492,-0.577856,-0.345579,0.799802,0.135631,-1.22326,0.455038,0.229793,-0.609425,-1.32429,0.89625,0.0429395,0.0278814,0.876252,0.383782,-0.549617,0.434521,0.319669,0.347917,0.180039,0.374756,-0.00937874,-0.981646,-0.0100494,0.439378,-0.158608,0.880643,0.160146,0.362839,0.139984,0.232571,-0.451832,-0.592477,0.0269653,0.394899,-0.832854,-0.490407,0.307983,0.191531,0.90628,-0.901246,0.795466,0.443831,0.160819,0.450316,0.912702,0.983967,-1.49327,0.0694015,-0.580913,-0.365923,1.05677,-0.529504,-0.182637,0.117823,0.911699,1.71716,0.827805,-0.30966,0.456238,0.580816,0.234344,0.925876,-1.00108,-0.467466,-0.410276,0.0939954,-1.21854,1.03332,1.32079,-1.9968,0.801631,0.562549,-1.01664,0.518177,0.805809,0.636352,-2.06538,-0.327729,-0.507873,-0.26168,1.24782,-0.538484,0.580143,0.241552,0.97771,1.64868,0.00283461,-0.336958,0.796337,0.135761,0.35756,1.46049,-0.681268,-0.530077,-0.420108,-0.727216,-2.15211,0.146621,-0.156571,0.209194,-0.381638,-1.21954,-0.211518,0.164413,-0.384053,0.467159,0.0598886,0.0588354,-0.0649119,-0.117459,0.553209,-0.509803,0.296967,-0.116821,-0.520253,-0.257789,0.0865172,0.0392276,-0.0127345,2.32818,0.165352,0.93261,-0.683146,0.473212,-0.334779,-0.558934,-0.400767,-0.288466,-0.129686,-0.101507,-0.395205,-0.572786,-0.283343,1.27692,-0.829736,-0.3283,-0.0715591,-0.0953303,0.668403,0.459241,-0.334102,0.0608682,-0.111529,0.0629622,-0.00416029,0.144665,-0.487742,-0.136698,0.0761022,0.0102001,-0.172232,-0.165131,0.999943,0.291301,0.204019,0.194393,0.545605,-0.0111923,-0.444358,0.345856,0.490663,0.490793,0.599509,-0.280953,0.650675,0.877301,0.366068,0.433996,0.000972085,1.11912,-0.0422787,-0.50237,0.0822143,1.54706,-0.0862371,0.602583,0.40676,1.0007,-0.0817519,-0.778802,-0.15774,0.820555,0.37835,1.08322,0.0688848,0.14114,0.47684,-0.398292,-3.07231,1.52776,-2.22256,2.18738,-4.63071,0.712146,-1.9962,0.783163,2.04304,-0.642946,0.971891,1.34974,-3.73448,2.92207,-1.90617,-1.82602,1.34492,-1.39536,-1.67306,-1.19671,-4.69644,-0.518582,1.83255,-2.42191,-1.86533,-0.448393,1.4393,0.1959,-1.09987,-1.77783,0.76807,-1.86661,-2.13008,0.526383,1.6772,0.789789,-1.45217,-2.39558,0.490887,-0.363171,1.14403,0.766507,0.710036,-0.74534,-0.0318055,-0.641096,-0.931157,-2.58446,-2.02674,0.31965,0.838631,-3.88976,-0.448226,-0.10824,-0.942592,-0.706067,1.39889,-1.4548,-2.43325,1.53872,2.35494,-0.754188,-2.3534,-0.517526,-0.0111351,-1.03368,1.04231,-1.18889,-0.846128,-2.31716,3.35598,-1.44035,-1.53112,0.30614,-0.437637,2.4186,-1.78221,-1.98292,-0.499375,-0.278744,-3.37487,1.63201,0.570274,0.673677,-0.059909,-0.479044,-3.85312,-0.425775,1.38782,-0.218471,-2.9559,-3.4433,-0.792727,-1.14139,0.191734,0.188016,0.0439365,1.78295,1.01856,-3.92614,-0.74196,-0.956905,1.08358,-1.47703,-0.114606,0.281071,0.346295,1.50071,-3.07136,1.14252,-1.11273,1.97625,2.47926,-2.44907,-2.14284,-2.5615,0.729358,-3.70079,1.08676,-2.98957,2.0367,-1.43654,0.462405,-2.53073,2.01148,-2.23468,-0.616331,-1.2509,1.61085,0.908253,0.378065,1.23023,-3.17737,-1.48074,1.9078,-0.0950468,-2.23151,0.611299,-0.965951,0.846052,-1.3399,1.67997,1.05301,0.471661,-3.52738,-3.33234,-1.9277,3.00966,1.70969,0.518357,-2.1434,1.98482,-3.12101,-0.531507,-0.68976,0.311454,1.16494,-1.66027,-1.9123,-1.7332,0.15174,-1.84681,0.352674,-0.829164,-2.38036,-0.956067,-2.56205,-0.440208,0.172234,0.802067,0.76864,1.32944,-0.487764,0.290547,-2.74868,-1.2102,1.07372,-2.18843,-2.15168,0.256052,1.9501,0.507121,1.62369,-1.90073,0.367457,0.336673,-4.37419,-0.777855,-3.16181,2.91035,-4.08977,-0.407394,-0.519906,1.51965,-2.56775,1.1171,-0.393322,-1.54313,-1.93256,-1.9526,-1.76453,-1.50289,-2.4435,-0.757315,2.64457,3.53876,0.523635,-2.63877,-2.4712,1.53207,1.74292,1.13049,-3.03626,-1.62156,2.72285,-2.60812,0.220038,-3.00154,0.812803,3.64326,1.89887,-1.20013,-1.58162,-0.833319,-0.677145,0.912332,0.676616,2.05163,-4.15622,-1.52896,-1.01964,1.26083,-0.692753,0.358262,-2.21604,-2.13945,1.74025,2.63664,-1.63495,-2.41049,1.81034,-0.514086,-1.80611,0.772201,-0.640518,0.952892,-1.03396,-1.00409,-0.456829,-1.156,-1.49541,1.36345,1.54954,-2.56364,0.118023,-2.44643,0.503312,-0.738606,1.34767,0.138514,-1.89084,-1.27542,-3.19529,-2.00551,2.54874,0.879929,-2.42086,1.09171,1.33415,-0.178635,0.216315,-2.09294,-3.28111,3.15565,-1.05545,-0.379897,0.676389,-1.31542,1.27095,-3.10211,-0.119744,-1.84936,0.663134,0.779984,1.79009,-2.80571,0.657495,2.30253,-0.762687,-1.299,-1.5829,-4.10178,1.72308,0.226692,0.961499,-0.751381,0.933864,-0.243917,1.31583,0.673192,0.950704,0.385039,0.431551,0.588652,1.17787,0.798002,0.14539,0.819803,0.769341};

class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells + 2, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] != W : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);
    if (points.size() > 6) {
      points.erase(points.begin() + 1, points.begin() + 3);
    }
    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      //numbers[i].swap(vector<string>(numbers[i].begin() + points[0], numbers[i].begin() + points.back()));
      Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
      DeleteBorder(&numbers[i]);
    }
  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    // image->swap(vector<string>(image->begin() + start_y, image->begin() + end_y));
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      //(*image)[y].swap(string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x));
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    random_shuffle(width.begin(), width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    random_shuffle(height.begin(), height.end());
    double sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;
    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }
        if (j < 2) sum1 += static_cast<double>(dogs_in_cell) / (height[i] * width[j]);
        if (j > 2) sum2 += static_cast<double>(dogs_in_cell) / (height[i] * width[j]);
        if (i < 5) sum3 += static_cast<double>(dogs_in_cell) / (height[i] * width[j]);
        if (i >= 5) sum4 += static_cast<double>(dogs_in_cell) / (height[i] * width[j]);

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
    result->push_back(sum1 - sum2);
    result->push_back(sum3 - sum4);
  }

};


int main() {  
  srand(100589);
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
