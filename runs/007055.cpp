#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */
const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
double weights_input_0[] = {0.00041,-0.00014,0.00071,0.01496,0.04116,0.11735,0.14945,0.03428,0.00442,0.11970,0.12529,-0.03244,-0.07180,-0.10536,-0.05648,-0.03813,-0.10791,-0.00025,0.00042,0.04936,-0.04211,-0.03814,0.11586,0.16929,0.23892,0.19056,0.22402,0.20905,0.10864,-0.08078,-0.21175,-0.10786,-0.00358,-0.03504,-0.01741,-0.03538,0.04938,0.01729,0.00717,0.13744,0.07443,0.18700,0.37674,0.17662,0.13256,0.08689,0.06161,0.02277,-0.15992,-0.09309,0.11544,-0.03417,-0.06299,0.01846,0.05368,-0.02579,0.06558,0.14555,0.05215,0.29115,0.17996,0.04241,-0.01383,0.14140,0.06851,0.16596,-0.12676,0.05651,0.01318,-0.04800,-0.05944,0.05962,0.05649,-0.02434,0.02873,0.22948,0.15370,0.42315,0.20446,-0.08516,-0.20696,-0.02657,0.06662,-0.01667,-0.13055,0.04088,0.03484,-0.04516,-0.03866,0.06510,0.05479,-0.03086,0.06077,0.25492,0.15986,0.40634,0.29449,-0.17513,-0.41393,-0.00572,0.18655,0.20403,-0.04569,0.06031,0.21451,0.04012,0.05150,0.06229,0.05499,-0.02898,0.05195,0.22769,0.19290,0.43321,0.02732,-0.29608,-0.39528,-0.17661,-0.20341,0.07094,-0.06199,0.19920,0.18908,0.13270,0.04076,0.06540,0.05349,-0.02831,0.07450,0.27086,0.18375,0.00226,0.02614,-0.42127,-0.36372,-0.32494,-0.45629,0.07825,-0.01994,0.22384,0.31405,0.19366,0.04430,0.06462,0.05460,-0.02692,0.02174,0.18251,0.22867,0.16802,0.16562,-0.18664,-0.57035,-0.50705,-0.20769,0.18416,0.20961,0.32230,0.35759,0.14808,0.03532,0.06721,0.04768,-0.02588,0.01558,-0.04719,0.03112,0.04748,0.08704,-0.15845,-0.36868,0.04172,0.15425,0.24759,0.12447,0.13422,0.14991,0.11075,0.01874,0.06825,0.02794,-0.05639,-0.10578,-0.25798,-0.43451,-0.09396,0.10648,0.43139,0.80149,0.68279,0.52610,-0.03826,-0.36846,-0.17146,-0.19045,-0.06611,0.00652,0.06640,0.02676,-0.07060,-0.14592,-0.38648,-0.49571,-0.62556,0.04142,0.32729,0.65811,0.66209,0.14852,-0.12792,-0.49852,-0.37165,-0.33466,-0.06688,-0.02738,0.06581,0.02241,-0.08343,-0.18305,-0.45862,-0.67579,-0.70287,-0.22000,-0.06337,0.34632,0.29096,-0.04763,-0.17994,-0.53235,-0.41337,-0.27875,-0.05975,-0.05950,0.07642,0.02317,-0.08173,-0.16239,-0.36664,-0.48899,-0.31793,-0.00409,0.05096,0.31839,0.20927,0.07160,-0.21002,-0.47570,-0.18793,-0.26760,-0.02694,-0.02012,0.06033,0.04625,-0.11164,-0.18280,-0.23341,-0.12644,-0.08426,0.12554,0.15748,0.13608,0.07902,0.18078,-0.20348,-0.41168,-0.31054,-0.17183,-0.04887,-0.03013,0.09293,0.04521,-0.04719,-0.14852,-0.14901,0.19345,0.05111,-0.04187,-0.16500,-0.01683,0.03366,0.11165,0.00283,-0.20274,-0.26780,-0.28930,-0.12549,-0.00279,0.05130,0.00134,-0.03758,-0.04892,-0.17500,0.08459,0.07162,-0.13409,0.01841,-0.17307,-0.22607,-0.18934,0.01833,-0.08878,-0.23571,-0.10105,-0.00611,0.01619,0.01500,0.00511,0.01595,0.08995,0.01252,0.03167,0.14498,-0.00921,-0.27952,-0.47188,-0.39108,-0.00551,0.11122,0.09751,0.11588,0.19648,0.03943,0.01369,-0.00145,-0.08197,};
double weights_input_1[] = {0.00089,0.01179,0.01303,-0.13573,-0.18093,-0.00404,-0.01846,0.19945,-0.16052,-0.37000,-0.49507,-0.13758,0.19972,0.42648,0.36451,0.44656,-0.03929,-0.00366,0.00109,-0.02201,-0.09470,-0.08101,-0.26764,-0.43937,-0.36010,-0.03535,-0.29680,-0.42027,-0.35681,-0.19097,0.01538,-0.04915,0.08372,0.66222,-0.06565,-0.05265,-0.03638,-0.08650,-0.05593,-0.12190,-0.09259,-0.36284,-0.39658,-0.12824,0.24053,0.21235,0.01911,0.01361,-0.02874,-0.19972,0.15992,0.09096,-0.07316,-0.13963,-0.03451,-0.04986,-0.05943,-0.12749,-0.31102,-0.03719,0.17587,-0.05957,0.16453,0.22047,0.00937,-0.53805,-0.18079,-0.06832,-0.11677,-0.40381,-0.09462,-0.16889,-0.03483,-0.05180,-0.08049,0.19801,0.08536,0.06335,0.21078,0.27004,0.12959,0.00206,-0.48317,-0.68532,-0.43597,-0.25063,-0.59182,-0.51674,-0.32673,-0.16914,0.01579,-0.05060,0.08163,0.16615,0.09903,0.21909,0.13086,-0.03880,-0.05148,-0.13447,-0.77717,-0.80612,-0.72711,-1.06089,-0.93710,-0.70776,-0.44472,-0.20437,0.01721,-0.05178,0.03662,0.04801,0.22424,0.41821,0.12742,0.09784,-0.18451,0.34228,0.07842,-0.39592,-0.68460,-0.95049,-0.84718,-0.54633,-0.30355,-0.20453,0.01429,0.00192,0.02103,0.05163,0.22009,0.35204,-0.18900,0.28021,0.48693,0.47677,0.57281,0.15792,0.36275,-0.06214,-0.18928,-0.29507,-0.29928,-0.30990,0.01585,-0.05995,0.01002,0.16066,0.32880,0.45402,0.09216,-0.02841,-0.11224,-0.04294,0.15482,0.65945,0.23979,0.43582,0.58585,0.30187,-0.18927,-0.18714,0.01675,-0.05912,0.00442,-0.00288,0.20116,-0.03980,0.12427,-0.00313,-0.03157,-0.09062,-0.21047,-0.15719,0.30115,0.36348,0.28511,0.50547,0.03884,-0.18624,0.15614,0.07917,0.09018,-0.13028,-0.06712,-0.37929,-0.32376,-0.05950,0.04026,-0.24848,-0.28946,-0.17951,0.14410,-0.02605,0.23421,0.39712,0.20938,-0.07469,0.15722,0.07851,-0.05634,-0.16740,-0.32665,-0.28268,0.05673,-0.17195,0.06034,-0.06994,-0.29507,-0.03558,0.27029,-0.04930,0.16573,0.20709,0.08328,-0.07571,0.22825,0.02265,-0.10133,-0.28343,-0.31121,-0.10709,0.18039,-0.18085,-0.12492,-0.00217,-0.27099,-0.03295,0.17494,-0.12122,0.04977,0.20903,-0.03954,0.03096,0.17389,0.06836,-0.00492,-0.12901,-0.23055,-0.05975,0.25848,0.03756,-0.04603,0.08519,-0.21495,-0.20943,-0.14409,0.11002,0.13706,0.23372,0.09239,0.12194,-0.09511,0.07421,0.01258,-0.21825,-0.31549,-0.23319,-0.01026,0.38314,0.33473,0.25565,0.01008,0.21485,-0.01125,0.34971,0.10814,0.01143,0.25981,0.01302,-0.03479,-0.02766,-0.03152,-0.21363,-0.25799,-0.14183,-0.23794,0.11251,0.27919,0.08138,0.14484,-0.23014,0.01238,0.41734,0.19247,0.03675,0.23451,-0.04129,0.00059,-0.11613,-0.05786,-0.18203,0.04826,-0.09470,0.23200,0.07442,0.37081,0.30600,-0.16036,0.00929,0.11007,0.11725,0.09013,0.26238,0.00901,-0.08633,-0.00184,0.02817,-0.10211,0.21210,0.58094,0.13823,0.17456,0.10951,0.15973,0.14872,-0.08410,0.16441,0.01577,0.19007,-0.11856,-0.15191,0.00799,-0.00000,0.24877,};
double weights_input_2[] = {0.01690,0.01719,0.01733,-0.00202,0.19024,0.19853,0.14248,-0.06195,-0.08395,0.07920,0.03921,0.07665,0.14022,0.19232,0.12919,0.10110,0.07657,0.02805,0.01485,-0.03844,0.02539,0.07451,0.15008,0.10237,0.09578,0.00554,0.06967,0.03187,0.02924,-0.01121,0.02412,0.23966,0.23946,0.17756,0.00257,0.00826,-0.05582,-0.08766,0.01532,0.02494,-0.00816,-0.07096,0.18491,-0.00883,0.24550,0.21084,-0.01199,-0.10930,-0.05720,0.09728,0.21059,0.13605,0.04133,-0.09824,-0.06772,-0.02162,-0.00837,0.01485,-0.00271,-0.07311,0.07681,0.21703,0.36826,0.23539,0.09526,-0.12848,-0.03740,0.01466,0.13074,0.06182,0.03294,-0.05322,-0.05339,-0.02199,0.00348,-0.00115,0.09870,-0.01965,-0.08776,-0.03388,0.08054,0.09793,0.01855,-0.01812,0.04532,-0.04938,-0.00783,-0.00642,0.01202,-0.06642,-0.06412,-0.01963,0.05421,-0.01295,0.03288,-0.13075,-0.22621,-0.15298,-0.08341,0.34716,0.12386,0.01188,0.01576,-0.13629,-0.05970,-0.04868,-0.00317,-0.06707,-0.06401,-0.02168,0.06157,0.07019,-0.01906,-0.18950,-0.31001,-0.32130,-0.08909,0.26360,0.10638,0.08276,-0.04711,-0.22733,-0.12793,-0.06656,-0.00444,-0.06846,-0.06568,-0.01869,0.04747,0.04478,-0.08034,-0.12891,-0.29410,-0.45834,-0.09328,0.17795,0.25256,0.03260,-0.11656,-0.24140,-0.11424,-0.01504,0.01351,-0.05037,-0.06407,-0.02188,0.05441,0.04421,-0.07165,-0.17827,-0.33246,-0.35069,-0.07797,0.15598,0.07500,-0.09670,-0.15929,-0.20407,-0.11114,-0.01580,-0.00809,-0.06820,-0.06552,-0.01933,0.05423,-0.05001,-0.15350,-0.18210,-0.32074,-0.22055,0.09962,0.17525,-0.08682,-0.17641,-0.20565,-0.18222,-0.08429,-0.02121,0.00184,-0.06748,-0.07316,-0.02610,-0.02756,-0.06925,-0.14500,-0.24705,-0.25693,-0.14411,0.23660,0.15473,-0.16157,-0.22999,-0.20693,-0.17669,-0.07963,-0.01699,0.00127,-0.06150,-0.07312,-0.03972,-0.03984,-0.07635,-0.10120,-0.24856,-0.22079,-0.04209,0.10335,0.11916,0.04246,-0.13320,-0.31388,-0.16286,-0.08497,-0.02761,-0.01000,-0.07319,-0.10063,-0.07276,-0.05801,-0.08410,-0.23028,-0.33868,-0.20404,-0.17310,0.04914,0.19118,0.11688,-0.07344,-0.28169,-0.18790,-0.09778,0.01722,0.03468,-0.01715,-0.09946,-0.06378,-0.06104,-0.07335,-0.20185,-0.27838,-0.07153,-0.04167,0.18753,0.25065,0.09704,-0.11386,-0.20298,-0.25959,-0.15622,-0.01534,-0.00710,-0.01417,-0.06434,-0.06055,-0.07824,-0.09924,-0.13334,-0.28893,-0.30060,0.08519,0.27274,0.29856,0.12018,-0.06977,-0.16652,-0.22737,-0.20718,-0.02418,-0.06396,-0.11289,-0.06651,-0.11779,-0.09873,-0.08313,-0.12398,-0.27882,-0.11127,0.07630,0.13755,0.14944,-0.05244,-0.08687,-0.22439,-0.21979,-0.09928,-0.00293,0.03314,-0.06554,-0.00152,-0.10906,-0.11938,-0.12024,-0.05680,-0.11492,0.04482,0.06989,-0.05041,-0.16034,-0.26323,-0.30284,-0.04857,0.06097,0.11699,0.04288,0.04065,-0.08561,-0.00108,-0.01598,-0.11817,-0.15882,-0.11740,-0.13662,-0.00782,-0.07927,-0.17537,-0.07137,-0.12314,-0.04688,0.01774,0.12111,0.14918,-0.01190,0.04098,0.00113,0.04562,};
double weights_input_3[] = {0.00501,0.00526,0.00688,0.02139,0.22138,0.52426,0.58728,0.53619,0.18854,-0.06742,-0.10990,-0.17655,0.10469,0.23481,0.41878,0.23681,-0.00707,0.02824,0.00407,0.01818,-0.02969,0.06678,0.12724,0.40182,0.41954,0.27448,0.23020,0.06499,-0.00909,0.06789,0.07920,0.22899,0.34953,0.22009,0.09258,-0.05071,0.01255,-0.08068,0.02764,0.07548,0.22496,0.17919,0.40622,0.15157,0.04716,0.04554,0.19937,0.13404,0.08423,0.16997,-0.02968,0.04329,0.06198,-0.03757,-0.00418,-0.08849,0.01723,0.09918,0.07714,0.21317,0.34075,0.16695,0.07306,0.11627,0.10398,0.07318,0.19812,-0.05552,-0.06022,-0.20223,-0.05298,-0.00758,0.01345,-0.08643,0.01615,0.02870,-0.06943,0.05872,0.11442,-0.17460,-0.18055,-0.08413,-0.06629,0.01848,-0.08975,-0.15739,-0.34026,-0.24961,-0.06526,-0.00873,0.01019,-0.07932,-0.04134,-0.14897,-0.06196,0.04556,-0.20327,-0.08286,-0.12458,0.06857,0.13472,-0.07565,-0.19921,-0.34735,-0.23919,-0.15373,-0.06630,-0.01327,0.00604,-0.07844,-0.04645,-0.06214,-0.03225,-0.12622,-0.16479,-0.21795,-0.13368,0.09288,0.19770,-0.00579,-0.18295,-0.31384,-0.16767,-0.14176,-0.05176,-0.01166,0.00751,-0.07783,-0.06095,-0.01464,-0.06590,-0.22601,-0.25356,-0.26216,-0.17091,0.01627,0.21001,-0.03436,0.10795,0.11755,-0.11065,-0.03698,-0.03854,-0.00788,0.00883,-0.09604,-0.05448,-0.03028,0.07704,0.19836,0.09723,0.11477,-0.03802,-0.00666,-0.14123,-0.02167,0.19238,0.27756,-0.02562,0.01042,-0.04538,-0.01291,0.00547,-0.09767,-0.05902,-0.10172,-0.06957,-0.06522,-0.13386,0.02308,0.18138,0.16462,-0.15897,0.03318,0.15502,0.10723,0.21362,-0.03854,-0.04303,-0.01342,0.02369,-0.08095,-0.04532,-0.33144,-0.55842,-0.51962,-0.47145,-0.23248,0.03348,-0.14189,-0.17516,-0.04279,0.19293,0.13866,0.27712,0.20316,-0.03052,-0.00839,0.02399,-0.07788,-0.08715,-0.36564,-0.82947,-0.92300,-0.53194,-0.04149,-0.01537,-0.19472,-0.13226,0.19291,0.11991,0.30822,0.19114,0.30746,0.00257,-0.01100,0.06457,-0.04389,-0.10335,-0.09519,-0.34321,-0.47620,-0.33426,-0.29691,-0.42874,-0.17065,0.02256,0.29520,0.17234,0.24818,0.09874,0.27420,-0.05461,-0.00314,0.06415,-0.04008,0.00694,0.12995,0.07943,-0.20965,-0.12521,-0.27151,-0.11251,0.00872,0.17656,0.20016,0.19824,0.09671,0.11639,0.18854,-0.07937,-0.00501,0.00736,-0.02643,0.04275,0.10658,0.15013,-0.15323,-0.36475,-0.11307,0.18182,0.14649,0.30442,0.33524,0.10440,0.02498,0.05224,-0.13318,-0.06872,-0.06019,0.00821,-0.01887,0.06947,0.15888,-0.01824,-0.24466,-0.28659,-0.14420,-0.21028,0.01805,0.04171,0.11647,-0.07652,-0.02659,-0.17012,-0.21521,0.03240,0.00767,-0.00144,-0.06573,0.01415,0.06212,0.15663,-0.06269,-0.14776,0.05542,0.11585,0.11851,-0.03009,-0.34162,-0.23078,-0.29646,-0.40254,-0.13453,0.00332,-0.07126,-0.00078,-0.02380,-0.06128,-0.06819,-0.10404,0.15366,0.22986,0.05480,-0.12253,-0.10897,-0.45216,-0.52482,-0.57145,-0.52837,-0.33991,-0.09665,0.00191,-0.00113,0.02498,};
double weights_input_4[] = {0.00055,-0.00076,0.00011,-0.06130,-0.13115,-0.40991,-0.39798,-0.42530,-0.40611,-0.27413,-0.08002,0.33019,0.11528,-0.14704,-0.10018,-0.10195,0.01617,-0.00045,-0.00069,-0.02593,-0.02877,0.03106,-0.12411,-0.43572,-0.55770,-0.19083,-0.35658,-0.29588,-0.35922,-0.12824,0.01259,0.13153,-0.14133,0.24135,-0.00657,-0.02959,-0.02364,-0.05474,-0.00069,-0.04660,-0.16706,-0.36410,-0.47240,-0.27160,0.01139,0.00350,-0.18711,-0.05316,-0.21374,-0.21056,0.00626,0.10501,-0.03862,-0.09900,-0.02343,-0.03033,-0.01399,0.03569,-0.16175,-0.31478,-0.30565,-0.24943,-0.17430,-0.06937,0.07120,-0.10246,-0.22586,-0.19617,0.01865,-0.01441,0.07094,-0.07118,-0.02588,-0.03007,-0.02209,0.11470,0.12145,-0.32489,-0.33855,-0.10753,0.02347,0.16548,-0.01350,-0.14111,-0.15500,-0.15406,0.03442,-0.15536,-0.03811,-0.07172,0.01461,-0.03095,0.11629,0.11161,0.12495,-0.27560,-0.16753,-0.23457,0.07404,0.17079,-0.10395,-0.39261,-0.44410,-0.57368,-0.57877,-0.42935,-0.21736,-0.10337,0.01442,-0.02825,0.13534,0.21029,0.15287,0.00722,0.07639,-0.21754,0.00956,0.37190,0.30239,-0.22259,-0.63654,-0.63403,-0.53903,-0.42573,-0.11918,-0.10268,0.01339,0.00793,0.12319,0.21248,0.54500,0.49979,0.08810,0.11912,0.36698,0.28976,0.26325,0.20660,0.01758,-0.31484,-0.09629,-0.30042,-0.12079,-0.10755,0.01326,0.01043,0.12607,0.29725,0.57770,0.51582,0.31566,0.31840,0.15605,0.06847,0.02672,0.25994,0.29392,0.19998,0.20930,0.14329,-0.11610,-0.02113,0.01331,0.00886,0.12146,0.48200,0.44472,0.46720,0.45500,0.23568,-0.11480,-0.12310,0.04443,-0.00642,0.12516,0.33184,0.07417,0.28146,0.08929,-0.02189,0.01241,0.00666,0.11304,0.32722,0.44974,0.42777,0.47397,0.42327,0.00390,-0.05030,-0.13263,-0.14270,0.02598,0.17165,-0.00882,-0.02460,0.16106,-0.01971,0.01064,0.01158,0.11495,0.17976,0.39742,0.74412,0.78552,-0.02519,0.06227,0.04314,-0.00974,-0.24666,-0.09624,0.01046,-0.11428,-0.09120,0.10900,-0.02013,0.01428,-0.01457,0.11989,0.00937,-0.02183,0.44696,0.37662,0.02953,0.07064,0.14903,0.04664,-0.13270,-0.09653,0.02641,-0.06615,-0.06924,0.07736,0.03535,0.01517,-0.02566,0.04925,-0.12323,-0.31872,0.14279,0.23866,0.01133,0.06492,0.12157,-0.01260,-0.22362,-0.05552,0.08900,-0.10163,0.02061,0.15700,0.06598,-0.02283,-0.03118,0.01825,-0.19105,-0.48832,-0.13456,0.01835,0.14198,0.05152,0.01793,-0.11184,-0.05907,-0.18840,0.00949,-0.23759,0.19077,0.19220,-0.02005,-0.02375,-0.05308,-0.13866,-0.40409,-0.40012,-0.40735,-0.08636,0.08255,0.08938,0.11477,-0.08676,-0.06538,-0.22901,-0.09363,0.00183,0.30958,0.21362,-0.02366,0.00033,-0.05637,-0.06109,-0.33438,-0.41306,-0.20612,-0.09006,-0.20362,-0.08792,-0.01614,-0.10976,-0.01948,-0.06135,-0.01098,0.24500,0.39755,0.00519,-0.05419,-0.00183,-0.00233,-0.05407,-0.15183,-0.07416,-0.36684,-0.18126,-0.15398,-0.11843,-0.11103,0.29306,0.55786,0.27815,0.42875,0.27972,-0.05240,0.00418,0.00040,0.16648,};
double weights_input_5[] = {-0.00106,-0.00181,0.00080,-0.12486,-0.21433,-0.31128,-0.33350,-0.35188,-0.28582,-0.08702,-0.08113,0.00655,0.09611,0.01944,-0.20279,-0.14063,-0.05557,0.00976,-0.00048,-0.03900,-0.06851,0.00533,-0.13879,-0.27991,-0.22747,-0.24522,-0.19636,-0.15043,-0.09695,-0.01142,-0.13268,0.07462,-0.07129,-0.12566,-0.05693,-0.04096,-0.03927,-0.08642,-0.02083,-0.01403,-0.19984,-0.43499,-0.01293,-0.25578,-0.20259,-0.00619,-0.06782,0.02367,-0.11209,-0.08954,-0.16404,-0.10224,-0.01596,-0.08788,-0.03804,-0.04910,-0.01224,-0.01743,-0.13065,-0.22405,-0.08882,-0.00406,0.11454,0.16167,0.26539,0.03280,-0.07440,-0.08528,-0.14521,-0.10057,-0.00466,-0.03278,-0.03822,-0.04860,-0.00469,-0.03840,0.04067,-0.06522,-0.09846,-0.11150,0.06958,0.31420,0.22200,0.05205,0.03248,-0.11009,-0.07807,-0.10672,-0.06267,-0.03283,-0.03910,-0.04739,0.04018,-0.06568,0.02939,-0.08679,-0.09713,0.02078,0.08967,0.57808,0.19919,-0.11421,-0.01266,-0.09098,-0.07720,-0.10754,-0.06183,-0.05084,-0.03774,-0.04815,0.04195,0.00764,0.07644,-0.06027,-0.14557,-0.18120,-0.02860,0.40097,0.17338,-0.01834,-0.01653,-0.12281,-0.09407,-0.04852,-0.06240,-0.05126,-0.03806,-0.04689,0.03450,0.02822,0.08634,0.14926,-0.12482,-0.27002,-0.14544,0.13423,0.05591,0.10849,0.02898,-0.10947,-0.10368,-0.07563,-0.06052,-0.09743,-0.03701,-0.04681,0.03845,-0.01389,0.17500,0.16119,-0.06323,-0.24323,-0.07605,0.00920,-0.13550,0.05568,0.09162,0.01133,-0.13664,-0.10747,-0.10078,-0.09441,-0.03658,-0.04755,0.04238,0.08217,0.20105,0.20413,0.04886,-0.09661,-0.09812,-0.06816,-0.03973,0.03165,0.03281,0.04188,-0.02196,-0.09920,-0.09727,-0.09426,-0.08119,-0.09314,-0.02612,0.06835,0.12606,0.13973,0.02878,-0.10641,-0.06389,0.11911,0.13082,-0.06080,-0.08555,0.02446,-0.04206,-0.07927,-0.09479,-0.13553,-0.08315,-0.09162,0.03995,0.11846,0.06626,0.07352,-0.09257,-0.12055,-0.08810,0.17208,0.34382,0.03290,-0.09940,-0.02638,-0.08969,-0.04781,-0.09052,-0.13547,-0.07522,-0.05831,0.05738,0.06971,-0.03143,-0.14737,-0.15324,-0.05852,0.07604,0.32827,0.45155,0.12939,-0.09455,0.04640,0.06618,0.06109,-0.03883,-0.07554,-0.06125,-0.06815,0.03476,0.02634,-0.09146,-0.20991,-0.14203,-0.05460,0.04384,0.27459,0.32986,0.12695,0.00167,-0.06468,-0.03737,-0.02072,-0.03992,-0.00904,-0.01382,-0.07198,-0.04039,-0.04401,-0.22971,-0.38069,-0.43470,-0.17669,0.06456,0.23438,0.27731,0.09149,-0.08050,-0.17868,-0.13699,-0.02213,-0.03476,-0.05882,-0.04007,-0.06817,-0.08526,-0.05093,-0.14778,-0.29171,-0.27334,-0.24838,-0.05845,0.15901,0.11460,0.06580,-0.05143,-0.09197,-0.08891,-0.05194,0.00947,-0.03030,0.00153,-0.10476,-0.05660,-0.07958,-0.06993,-0.16674,-0.11645,-0.16755,-0.14500,-0.00459,-0.04147,-0.07180,0.22385,0.19175,0.13039,0.00564,0.02530,-0.08669,0.00025,-0.01043,-0.07021,-0.00813,0.01095,-0.05685,0.01106,-0.07003,-0.25031,0.08367,0.22180,0.35725,0.28090,0.31089,0.23655,-0.00325,0.02752,0.00069,-0.03920,};
double weights_input_6[] = {0.00806,0.00833,0.00715,0.07411,0.29177,0.28086,0.36088,0.17997,-0.02430,-0.11684,-0.07141,-0.03472,0.03847,0.11516,0.21941,0.12844,0.07996,0.02609,0.00836,-0.00409,0.02581,0.08828,0.17794,0.24647,0.19213,0.19241,0.06048,-0.07166,-0.07114,0.05220,0.14661,0.20615,0.32335,0.17383,0.06801,0.00814,-0.01151,-0.06397,-0.00093,0.02206,0.14103,0.12183,0.16968,0.06109,0.08484,0.03457,-0.04470,0.01224,0.08736,0.17633,0.28501,0.17122,0.05740,-0.03083,-0.04683,-0.04447,-0.04387,-0.01155,0.06449,0.02240,0.06108,0.06221,0.06703,-0.06947,-0.15230,0.06023,0.08887,0.18845,0.19610,0.08510,0.03616,-0.00689,-0.01329,-0.04629,-0.02090,-0.04986,-0.00369,-0.08469,-0.14302,-0.12537,-0.16561,-0.23474,-0.22250,0.16184,0.17896,0.14850,0.07663,-0.01603,0.01044,-0.01941,-0.01771,-0.01586,-0.02628,-0.11736,0.00235,-0.23071,-0.22673,-0.14497,-0.13665,-0.23394,-0.05575,0.21201,0.19555,0.07304,-0.00031,-0.04725,-0.00485,-0.02237,-0.01788,-0.01498,0.00139,-0.01133,-0.08366,-0.21702,-0.13823,-0.16828,-0.14780,-0.29911,0.02824,0.20669,0.15742,-0.05460,-0.08736,-0.07403,-0.00530,-0.02083,-0.01756,-0.01635,-0.02856,-0.04252,-0.09956,-0.16545,-0.12738,-0.14200,-0.11923,-0.15709,0.23481,0.08762,-0.03754,-0.14957,-0.10493,-0.01926,-0.00057,-0.01501,-0.01773,-0.01585,-0.00356,-0.01619,-0.08580,-0.08576,0.00277,0.02444,-0.09171,0.00357,0.18406,-0.03869,-0.13485,-0.17482,-0.13841,-0.01590,-0.01023,-0.02036,-0.01954,-0.01692,-0.00416,-0.00136,-0.05705,-0.06175,-0.06397,-0.06125,0.09974,0.10282,0.12183,0.03087,-0.01067,-0.11794,-0.06447,-0.02008,-0.00290,-0.02239,-0.02126,-0.01912,0.00266,-0.01575,-0.03101,-0.03475,-0.09455,-0.06341,0.10030,-0.02347,-0.20400,0.02071,0.06748,-0.01963,-0.03750,-0.02014,-0.00466,-0.01789,-0.01966,-0.01943,0.00939,0.01642,-0.02850,-0.04920,-0.09725,0.03019,0.11846,-0.05821,-0.19251,0.01579,-0.07527,0.05502,-0.03448,-0.01096,-0.01233,-0.02444,-0.03263,-0.02626,0.01917,0.05288,0.00047,-0.06242,-0.07263,-0.04971,-0.04441,0.00194,-0.08517,0.03624,-0.04661,-0.00472,-0.08691,-0.01231,-0.01818,-0.02325,-0.03094,-0.03963,0.01174,0.08985,0.00308,-0.14851,-0.04068,-0.03329,0.15413,0.06795,-0.04675,0.01768,0.03151,-0.09055,-0.09365,-0.09374,-0.09574,-0.02050,-0.01818,-0.03534,0.01443,0.02338,-0.04369,-0.20659,-0.22259,0.05835,0.16632,0.04354,-0.05398,0.03825,-0.05405,-0.08464,-0.19128,-0.13511,-0.09443,-0.10125,-0.01710,-0.05284,0.00182,-0.02767,-0.15501,-0.28619,-0.15417,-0.00258,-0.01425,-0.07586,-0.18995,-0.07829,-0.21209,-0.24711,-0.19431,-0.09155,-0.00265,-0.01812,-0.00093,-0.03501,-0.04205,-0.03298,-0.14220,-0.16262,-0.15510,-0.07865,-0.10172,-0.16959,-0.21411,-0.19562,-0.28102,-0.23429,-0.19038,-0.03645,-0.00120,-0.03432,-0.00022,-0.01306,-0.04470,-0.19118,-0.32004,-0.27795,-0.18837,-0.15533,-0.09069,-0.26521,-0.40503,-0.36972,-0.35242,-0.28406,-0.16794,-0.06751,-0.00099,0.00121,0.08742,};
double weights_input_7[] = {0.00025,-0.00016,-0.00092,-0.11520,-0.19249,-0.26449,-0.28447,-0.29540,-0.23580,-0.08755,-0.07818,-0.01353,0.08693,0.00683,-0.17564,-0.12975,-0.05978,0.00901,-0.00011,-0.03219,-0.06893,0.01220,-0.12707,-0.23721,-0.19965,-0.21216,-0.17488,-0.13923,-0.09926,-0.03020,-0.11902,0.06802,-0.08341,-0.14382,-0.04966,-0.04110,-0.02860,-0.08168,-0.01809,-0.00428,-0.16212,-0.36371,0.00552,-0.22070,-0.18490,-0.00053,-0.06241,0.01411,-0.09771,-0.07050,-0.15906,-0.11525,-0.01487,-0.07543,-0.02948,-0.05204,-0.00947,-0.01235,-0.08863,-0.19503,-0.07862,-0.01584,0.08316,0.14625,0.23400,0.04662,-0.06152,-0.07223,-0.12758,-0.08843,-0.00664,-0.02390,-0.02996,-0.05011,-0.00543,-0.02277,0.03414,-0.05292,-0.09049,-0.10795,0.04278,0.27781,0.20844,0.06473,0.04408,-0.09342,-0.07594,-0.09406,-0.04367,-0.02146,-0.02858,-0.04912,0.02967,-0.03995,0.03800,-0.08160,-0.10732,0.00598,0.08191,0.49835,0.19486,-0.07074,0.01203,-0.07230,-0.06055,-0.08533,-0.04410,-0.03801,-0.02929,-0.05085,0.03120,0.02118,0.06848,-0.04639,-0.11992,-0.17201,-0.01132,0.34253,0.16993,-0.00917,-0.00689,-0.08925,-0.06646,-0.04021,-0.04354,-0.03818,-0.02924,-0.04871,0.02491,0.04352,0.08082,0.13908,-0.10067,-0.21875,-0.13811,0.09795,0.03030,0.07646,0.01103,-0.10688,-0.09149,-0.07951,-0.04178,-0.06970,-0.02929,-0.05158,0.03117,-0.01062,0.17200,0.15731,-0.01973,-0.19277,-0.06437,0.01073,-0.12205,0.04733,0.07869,0.01429,-0.13868,-0.10203,-0.09198,-0.06947,-0.03038,-0.04971,0.03559,0.09126,0.19819,0.19527,0.05387,-0.09271,-0.08122,-0.04655,-0.00123,0.05751,0.04255,0.03854,-0.02752,-0.09835,-0.09018,-0.06930,-0.05889,-0.08111,-0.00742,0.07723,0.09392,0.11646,-0.00579,-0.11121,-0.05572,0.10455,0.15727,-0.01574,-0.05325,0.02187,-0.05533,-0.06538,-0.09015,-0.11804,-0.05998,-0.07729,0.07009,0.11903,0.04108,0.03777,-0.11763,-0.11177,-0.07155,0.15368,0.33153,0.07744,-0.06872,-0.01489,-0.08996,-0.02543,-0.07834,-0.11678,-0.04877,-0.03908,0.08955,0.09237,-0.03738,-0.15615,-0.16699,-0.05640,0.06306,0.30756,0.45260,0.18227,-0.05303,0.05863,0.05785,0.07705,-0.04313,-0.06905,-0.03202,-0.04784,0.06705,0.06030,-0.07929,-0.20848,-0.16334,-0.06668,0.05180,0.26426,0.34615,0.16583,0.02773,-0.04960,-0.02571,0.01042,-0.04447,-0.01823,-0.00386,-0.05335,-0.01258,-0.02826,-0.23109,-0.38811,-0.44871,-0.20453,0.06567,0.22441,0.29570,0.12094,-0.07432,-0.17893,-0.12744,-0.01637,-0.04805,-0.05888,-0.02943,-0.05514,-0.05339,-0.02500,-0.14406,-0.32019,-0.31085,-0.26854,-0.05724,0.15096,0.13378,0.06704,-0.06100,-0.10519,-0.08060,-0.05267,-0.00317,-0.01911,0.00130,-0.09567,-0.04061,-0.04982,-0.05744,-0.16332,-0.15860,-0.20159,-0.14313,-0.00645,-0.04060,-0.06700,0.17856,0.17441,0.09496,-0.01410,0.02115,-0.07846,0.00122,-0.00817,-0.05986,-0.00787,0.01476,-0.05054,-0.00490,-0.09937,-0.25059,0.04034,0.15680,0.30148,0.22816,0.24172,0.19791,-0.00780,0.02116,-0.00129,-0.04100,};
double weights_input_8[] = {0.00083,-0.00039,-0.00213,-0.13284,-0.23913,-0.33784,-0.33074,-0.31202,-0.24288,-0.05836,-0.05531,-0.01382,0.05850,-0.06266,-0.25229,-0.18093,-0.06931,0.01299,-0.00156,-0.03665,-0.07403,-0.00752,-0.14694,-0.28024,-0.17321,-0.25620,-0.16362,-0.10183,-0.07423,-0.04570,-0.13961,0.04187,-0.15518,-0.20878,-0.06179,-0.03771,-0.03524,-0.08681,-0.02402,-0.01821,-0.20656,-0.39028,-0.01444,-0.24592,-0.22278,-0.00136,-0.05648,0.02823,-0.10111,-0.09198,-0.20270,-0.15952,-0.01619,-0.07759,-0.03657,-0.05347,-0.01184,-0.02438,-0.12529,-0.23353,-0.11581,-0.01742,0.11635,0.17087,0.27878,0.07271,-0.03171,-0.09241,-0.14395,-0.08101,-0.00583,-0.02323,-0.03515,-0.05143,-0.00212,-0.05350,0.00220,-0.08636,-0.12072,-0.09779,0.06612,0.32902,0.23869,0.09863,0.07458,-0.10548,-0.07486,-0.06936,-0.02354,-0.02139,-0.03453,-0.05353,0.03767,-0.05639,0.00130,-0.10680,-0.11580,0.04264,0.10536,0.58645,0.24998,-0.06134,0.03583,-0.04370,-0.04920,-0.05602,-0.02286,-0.03984,-0.03519,-0.05232,0.03898,0.02711,0.03816,-0.08703,-0.17610,-0.17777,0.00645,0.39930,0.19876,-0.01406,0.00329,-0.09279,-0.08361,-0.03377,-0.02274,-0.03874,-0.03492,-0.05166,0.03032,0.04542,0.04258,0.11683,-0.10484,-0.25805,-0.17766,0.08738,-0.01062,0.03091,-0.04295,-0.15310,-0.13462,-0.08534,-0.02293,-0.05541,-0.03430,-0.05187,0.04055,-0.01042,0.14015,0.11794,-0.03553,-0.22435,-0.10421,-0.01931,-0.15201,-0.00427,0.03197,-0.05058,-0.18669,-0.13928,-0.08434,-0.05604,-0.03461,-0.05290,0.04281,0.08772,0.17894,0.17051,0.04237,-0.10459,-0.11660,-0.06896,-0.02377,0.02290,0.00775,-0.01826,-0.05541,-0.14364,-0.08062,-0.05337,-0.09193,-0.10913,-0.02763,0.09142,0.10549,0.12573,-0.02778,-0.14925,-0.13495,0.09360,0.14642,-0.06183,-0.09854,-0.03331,-0.09692,-0.10247,-0.08679,-0.11530,-0.09054,-0.10488,0.06288,0.14559,0.05005,0.04845,-0.15202,-0.13048,-0.11629,0.15032,0.36854,0.03026,-0.10177,-0.05215,-0.14650,-0.05401,-0.07717,-0.11538,-0.07699,-0.05718,0.09013,0.15376,-0.00757,-0.14621,-0.15242,0.01666,0.11588,0.36623,0.49922,0.13900,-0.09042,0.01899,0.03370,0.07444,-0.02085,-0.05918,-0.05750,-0.06945,0.07193,0.12630,-0.04574,-0.18524,-0.14184,-0.00016,0.05094,0.28010,0.36291,0.13685,0.01791,-0.09235,-0.04489,0.03136,-0.02097,-0.02435,-0.00067,-0.07255,-0.01647,0.02003,-0.19606,-0.36253,-0.42831,-0.19611,0.02779,0.20496,0.31528,0.08736,-0.08029,-0.22676,-0.14092,0.02876,-0.04813,-0.06606,-0.03486,-0.05698,-0.06579,-0.00172,-0.07638,-0.29323,-0.31390,-0.27992,-0.09209,0.15153,0.14686,0.06156,-0.07006,-0.13156,-0.06524,-0.02245,-0.00531,-0.01942,-0.00065,-0.09957,-0.02971,-0.03539,-0.04343,-0.13664,-0.13706,-0.21213,-0.17298,-0.01383,-0.00255,-0.08423,0.19377,0.20845,0.15134,-0.01870,0.02309,-0.08544,0.00039,-0.00600,-0.05609,0.00502,0.02270,-0.04940,0.00914,-0.09289,-0.27800,0.04852,0.22273,0.35727,0.29367,0.29409,0.23989,0.00063,0.02357,0.00026,-0.02630,};
double weights_input_9[] = {0.01656,0.01845,0.01855,0.00324,0.20507,0.22065,0.17019,-0.03923,-0.07278,0.09874,0.04868,0.06459,0.14427,0.21553,0.15623,0.11137,0.07298,0.02872,0.01602,-0.03380,0.02980,0.07936,0.16307,0.11809,0.11803,0.02176,0.10300,0.05382,0.02827,-0.02142,0.03716,0.25614,0.26096,0.18888,0.00637,0.00346,-0.05215,-0.08621,0.02058,0.03576,-0.00095,-0.05561,0.19732,0.01119,0.26936,0.22518,-0.01455,-0.11468,-0.06368,0.10391,0.21977,0.13817,0.04580,-0.09171,-0.06497,-0.02261,-0.00523,0.02531,-0.00105,-0.06745,0.08036,0.22922,0.40305,0.22434,0.08706,-0.13111,-0.03875,0.01823,0.12313,0.05414,0.03325,-0.05147,-0.05245,-0.02184,0.00515,-0.00238,0.09430,-0.01871,-0.07352,-0.02088,0.08464,0.08096,-0.00972,-0.03232,0.01865,-0.07469,-0.02127,-0.01411,0.01089,-0.06406,-0.06539,-0.02207,0.04267,-0.01884,0.02779,-0.12849,-0.20571,-0.15309,-0.11864,0.32605,0.10557,0.01333,-0.02055,-0.16367,-0.07660,-0.05450,-0.00734,-0.06679,-0.06332,-0.02062,0.04747,0.05169,-0.03338,-0.19281,-0.30846,-0.32536,-0.09224,0.26110,0.09778,0.09026,-0.06885,-0.24776,-0.14211,-0.07214,-0.00886,-0.06689,-0.06453,-0.02035,0.03537,0.02515,-0.09404,-0.13926,-0.30086,-0.48401,-0.07084,0.18194,0.25447,0.05254,-0.10732,-0.24544,-0.11979,-0.01694,0.00999,-0.05336,-0.06279,-0.02151,0.04200,0.02956,-0.09107,-0.18816,-0.36524,-0.36093,-0.08026,0.12427,0.06746,-0.07727,-0.14210,-0.18998,-0.10693,-0.01354,-0.01286,-0.06790,-0.06293,-0.02223,0.04238,-0.05442,-0.16868,-0.20463,-0.36813,-0.23418,0.09330,0.14947,-0.11347,-0.18456,-0.19466,-0.17511,-0.07907,-0.01631,0.00188,-0.06777,-0.06953,-0.02666,-0.02905,-0.08367,-0.16115,-0.29602,-0.29726,-0.17056,0.23971,0.13481,-0.19182,-0.24381,-0.21272,-0.17529,-0.06914,-0.01521,-0.00006,-0.06219,-0.06888,-0.03950,-0.04725,-0.09527,-0.12105,-0.30467,-0.24145,-0.04724,0.12677,0.11453,0.02189,-0.14189,-0.32123,-0.17279,-0.08242,-0.02408,-0.01343,-0.07193,-0.09048,-0.06585,-0.06715,-0.10741,-0.26679,-0.37335,-0.20412,-0.16817,0.06283,0.18526,0.08691,-0.09999,-0.30857,-0.21211,-0.10590,0.00808,0.02162,-0.02776,-0.08980,-0.05727,-0.06023,-0.09034,-0.21595,-0.28280,-0.07863,-0.04500,0.18359,0.23014,0.07587,-0.12967,-0.23650,-0.26695,-0.15837,-0.02358,-0.01463,-0.02458,-0.06282,-0.05229,-0.06680,-0.10426,-0.13597,-0.28839,-0.29087,0.08257,0.26713,0.27083,0.10613,-0.07200,-0.17381,-0.22341,-0.19474,-0.02540,-0.05624,-0.10698,-0.06500,-0.11009,-0.08788,-0.08279,-0.12291,-0.27958,-0.12260,0.08710,0.13561,0.14161,-0.04940,-0.08112,-0.21385,-0.20436,-0.08951,-0.00451,0.03257,-0.06288,-0.00021,-0.10482,-0.10498,-0.10265,-0.05998,-0.12077,0.06212,0.08801,-0.03898,-0.16302,-0.24611,-0.28243,-0.02071,0.08034,0.12876,0.03835,0.04019,-0.08500,0.00090,-0.01408,-0.10913,-0.14704,-0.10201,-0.12678,0.00689,-0.07040,-0.16272,-0.07350,-0.11561,-0.02500,0.02504,0.13875,0.15501,-0.01605,0.04117,0.00016,0.04771,};
double weights_input_10[] = {-0.00062,-0.00032,-0.00113,-0.04157,0.10408,0.49769,0.45320,0.36432,0.12072,0.03126,0.00970,-0.07458,0.06121,0.20469,0.27910,-0.07344,-0.06137,0.00191,-0.00082,-0.03195,-0.01091,0.14122,0.23553,0.36160,0.37565,-0.02586,0.27080,0.16193,0.12840,-0.00074,0.12484,0.38718,0.47623,-0.02603,0.03749,-0.07151,-0.03134,-0.10312,0.06696,0.15066,0.14832,0.43272,0.31485,0.36003,0.01358,0.15606,0.23278,0.06652,0.07608,0.23197,-0.05726,-0.07873,0.06074,-0.04739,-0.02911,-0.07368,0.03270,-0.07220,0.01851,0.01415,0.09771,0.20930,0.27659,0.00596,0.25318,0.14137,0.19654,-0.00725,-0.15095,-0.19071,-0.04791,-0.04606,-0.03272,-0.07286,0.03693,-0.09321,-0.11975,-0.02198,0.17554,0.12739,-0.00117,0.00554,-0.01452,0.18257,-0.06156,-0.22425,-0.26070,-0.21989,-0.05245,-0.05144,-0.03627,-0.08687,-0.04343,-0.17771,-0.25453,-0.02358,-0.11398,-0.09377,-0.34316,0.13182,0.11088,0.11632,-0.06367,-0.11411,-0.14062,-0.16089,-0.05033,-0.05060,-0.04421,-0.08518,-0.07598,-0.22448,-0.35885,-0.43992,-0.32036,-0.36865,0.03891,0.33411,0.23508,0.01991,-0.08881,-0.06406,-0.06757,-0.16205,-0.05756,-0.05976,-0.04437,-0.08549,-0.10399,-0.28326,-0.42755,-0.37864,-0.53816,-0.57527,-0.19568,0.25419,-0.04371,-0.03725,0.04395,0.22218,-0.10418,-0.12270,-0.05817,-0.06681,-0.04339,-0.11009,-0.06139,-0.26133,-0.39388,-0.32069,-0.35818,-0.23556,-0.03298,0.08205,0.10646,-0.02772,0.23392,0.24694,-0.27825,-0.17234,-0.06760,-0.06600,-0.04273,-0.11138,-0.05942,-0.23510,-0.31221,-0.44513,-0.68041,-0.21297,-0.08618,0.06026,-0.13029,-0.22188,-0.11758,-0.16586,-0.13912,-0.27132,-0.07640,-0.06467,-0.06368,-0.12960,-0.12870,-0.26467,-0.31101,-0.69154,-0.76667,-0.68348,-0.45612,-0.23952,-0.34409,-0.32825,-0.06925,-0.30767,-0.18139,-0.06775,-0.09906,-0.06781,-0.06223,-0.14890,-0.16726,-0.43760,-0.43006,-0.67052,-0.53664,-0.33225,-0.06142,-0.00809,-0.12507,-0.29046,-0.09785,-0.21012,-0.15585,0.05686,-0.03274,-0.07015,0.01139,-0.08746,-0.19798,-0.18565,-0.19503,-0.26599,-0.03528,-0.01806,0.26657,0.26443,-0.14511,-0.42933,-0.15687,-0.27066,-0.15321,0.10295,-0.03174,-0.04437,0.02017,-0.06939,0.03586,0.09710,0.17987,0.12857,0.10689,0.21854,0.07417,0.10984,-0.20664,-0.38761,-0.14732,-0.17516,0.02551,0.17242,0.01232,-0.03436,-0.03092,-0.03114,0.16435,0.19452,0.28769,0.27347,0.27782,0.19314,0.06301,-0.16166,0.04490,-0.07044,0.07109,0.05689,0.23337,0.04409,0.01685,-0.03331,-0.03031,-0.01028,0.20578,0.37123,0.50163,0.25968,0.13122,0.21612,0.08209,0.32852,0.09468,0.00349,0.24842,0.31096,0.07322,-0.00320,0.06150,-0.03215,-0.00062,-0.06652,0.27435,0.55080,0.62703,0.29520,0.15155,0.10709,0.13945,0.21521,0.35536,-0.01303,0.32492,0.19691,0.05249,0.01258,0.01069,-0.10642,0.00709,0.01633,0.09271,0.23345,0.35979,0.40663,0.33938,0.10438,-0.03234,0.07588,-0.04878,-0.13686,0.06920,0.01741,-0.01950,0.03849,0.00968,0.00141,0.11352,};
double weights_input_11[] = {0.00193,0.00046,-0.00078,-0.07818,-0.17258,-0.28376,-0.37973,-0.47712,-0.42325,-0.40164,-0.20138,-0.11353,-0.01541,-0.02316,-0.12510,-0.04022,0.14671,-0.00132,0.00148,-0.08022,0.01698,-0.01822,-0.09470,-0.18003,-0.38968,-0.15440,-0.26613,-0.25130,-0.09594,-0.23039,-0.05569,0.12577,0.02536,-0.00955,0.01968,0.02528,-0.08091,-0.05453,-0.01343,-0.11009,0.00516,-0.15074,-0.29502,-0.21665,-0.23767,-0.11375,-0.31860,-0.30741,-0.21883,0.00886,0.13011,0.08187,0.11277,-0.07352,-0.08060,0.02561,-0.05921,-0.07918,-0.00427,-0.00383,-0.17547,-0.13042,-0.17031,-0.04981,0.09942,-0.31478,-0.29247,-0.01902,0.06568,0.05708,0.09896,-0.12707,-0.07990,0.02691,-0.01882,-0.11455,0.24282,-0.08164,-0.07285,-0.03768,0.16612,0.23526,0.11629,-0.22430,-0.06957,-0.02595,0.03238,0.01730,-0.02484,-0.12887,-0.07066,0.02293,0.02896,-0.03006,0.07126,-0.03621,0.01133,-0.07212,0.19797,0.32384,-0.02295,-0.32426,-0.03210,-0.02713,-0.21392,-0.16096,-0.19213,-0.16802,-0.07203,0.02391,0.02155,-0.09946,0.08654,-0.00298,0.08455,0.03606,0.36394,0.45059,0.23367,0.00259,0.07325,-0.17311,-0.25811,-0.22658,-0.22386,-0.16881,-0.07289,0.03536,-0.02496,-0.26765,-0.05447,0.18401,0.03412,0.36790,0.60479,0.43616,0.45097,0.44118,0.28307,-0.21910,-0.41716,-0.43554,-0.23309,-0.17121,-0.07290,0.02648,-0.00642,-0.26067,-0.27939,-0.35435,-0.01838,0.38112,0.60637,0.59496,0.42482,0.25971,-0.11525,-0.44703,-0.48815,-0.41725,-0.23417,-0.15191,-0.07025,0.02767,-0.01386,-0.21912,-0.04496,0.19403,0.29971,0.44366,0.37462,0.27715,0.36189,0.08413,-0.18027,-0.18698,-0.42501,-0.23784,-0.14488,-0.15186,-0.07612,0.02407,-0.02461,0.11593,0.49676,0.35551,0.48168,0.39121,0.08829,0.19104,0.27274,0.16394,-0.01462,0.01317,-0.06196,-0.09343,-0.02188,-0.15138,-0.07694,0.02140,0.03555,0.29081,0.53253,0.59061,0.22918,0.00711,-0.01217,0.22715,0.30277,-0.03173,0.02714,0.04817,0.15745,-0.04701,-0.01675,-0.15247,-0.04342,0.05573,0.08514,0.07419,0.19841,0.27017,0.04040,-0.00960,0.12183,0.20555,0.13936,-0.18295,0.03523,0.09917,0.19777,0.03109,0.05503,-0.07350,-0.04160,0.05025,0.08538,-0.00173,0.04754,0.01484,-0.13959,-0.01746,-0.04365,0.08846,-0.09148,-0.28666,-0.02515,0.08799,0.14588,0.00844,0.11908,-0.03202,-0.07688,0.04750,0.05128,0.03112,-0.08810,-0.12669,-0.29729,-0.20537,-0.12445,-0.09660,-0.23161,-0.26042,-0.00266,0.14118,0.17748,0.11503,0.12278,-0.10301,-0.08046,-0.02252,0.00290,-0.01136,-0.00966,-0.14282,-0.07862,0.03959,0.07340,0.06127,-0.18265,-0.10089,0.05203,0.20903,0.30766,0.23670,0.04794,-0.07837,-0.00083,-0.05892,-0.00609,-0.01078,-0.17357,-0.06830,-0.21340,-0.13314,-0.09659,0.05216,0.07301,0.09835,0.22598,0.39800,0.36000,0.14054,0.01090,-0.05367,-0.00142,-0.00577,-0.10454,-0.11740,-0.09908,-0.30154,-0.12807,-0.21714,-0.14334,0.10801,0.30358,0.40137,0.41407,0.38341,0.12363,-0.01909,0.01148,-0.00124,0.18296,};
double weights_input_12[] = {-0.00117,0.00036,0.00041,-0.03577,-0.04553,-0.15893,-0.27904,-0.20987,0.07179,0.00868,-0.07340,-0.02012,0.17792,0.14875,0.06419,0.23476,0.01957,-0.01040,-0.00182,0.00242,-0.05507,-0.11973,-0.13270,-0.13967,-0.12886,0.30727,0.06632,0.17608,0.24221,0.17691,0.17630,-0.07407,0.00016,0.22574,0.01330,0.00228,0.00157,0.01265,-0.06921,-0.13099,-0.16791,-0.28703,-0.00827,0.16564,0.31241,0.01647,-0.13756,-0.28587,-0.16780,-0.26557,0.09368,0.09865,0.00626,0.00537,0.00109,0.01104,-0.00078,0.04508,-0.09934,0.16018,0.32456,0.33601,0.01708,0.11601,-0.43229,-0.49144,-0.38773,-0.19608,-0.08294,0.13722,0.00923,-0.00961,0.00270,0.01033,0.03387,0.03188,0.12166,0.14966,0.08930,0.30734,-0.20147,-0.47931,-0.46967,-0.63283,-0.31357,-0.14729,-0.02876,0.14031,0.02757,-0.00947,0.00449,0.02325,0.10377,0.15633,0.25339,0.18963,0.41300,0.14963,-0.21282,-0.48481,-0.66025,-0.42663,-0.35507,-0.26114,-0.08136,0.06922,0.11646,0.00811,0.01471,0.02327,0.11142,0.23132,0.56301,0.76450,0.64924,0.40686,-0.04791,-0.11807,-0.18033,-0.19278,-0.32037,-0.39605,-0.16962,0.09407,0.12648,0.01794,0.01244,0.02396,0.17028,0.32837,0.56234,0.55717,0.57278,0.38777,0.42771,0.16562,0.35190,0.11703,-0.13271,-0.23384,-0.06868,0.13233,0.12763,0.03148,0.01355,0.03128,0.10691,0.28906,0.49467,0.39615,0.07440,0.01804,-0.07622,-0.00373,-0.06277,-0.06127,-0.33500,-0.10716,0.25627,0.18642,0.15760,0.03141,0.01149,0.03101,0.10131,0.17454,0.20714,0.26017,0.31913,-0.09752,-0.24688,-0.31232,-0.25028,-0.32406,0.04651,0.30206,0.33398,0.25719,0.16180,0.03207,0.01516,0.02948,0.08576,0.13195,0.21344,0.34082,0.63036,0.56157,0.33775,0.16789,0.00618,-0.21360,-0.09757,0.42767,0.40735,0.17478,0.18661,0.05011,0.01306,0.03139,-0.01317,0.14087,0.12043,0.21863,0.31398,0.24675,0.03578,-0.16930,-0.03322,0.05944,0.07918,0.21675,0.33875,-0.00210,0.08940,0.05300,0.00492,-0.01778,-0.07831,-0.06483,-0.09640,0.01845,-0.06862,-0.29132,-0.63618,-0.57772,-0.05729,0.16258,-0.02106,0.12523,0.12611,-0.14257,0.07843,0.02222,-0.03241,0.02634,-0.15693,-0.17344,-0.20219,-0.12320,-0.06745,-0.33791,-0.45376,-0.34440,-0.01126,0.24597,0.07204,0.13231,0.04499,-0.13912,-0.03805,-0.02583,-0.03299,-0.00191,-0.20667,-0.07389,-0.22810,-0.20390,-0.15451,0.01213,-0.07088,-0.00729,-0.17411,0.02263,-0.07570,0.08507,-0.19813,-0.13248,-0.05877,-0.01546,0.00002,-0.01337,-0.26114,-0.15573,-0.18559,-0.03221,0.09589,-0.01048,-0.05982,-0.38017,0.08826,-0.08220,-0.11195,-0.11205,0.01344,-0.10142,-0.09471,-0.00780,0.00091,-0.00377,-0.23200,-0.40201,-0.30477,0.09025,0.33700,0.28105,0.06231,-0.13335,-0.27196,-0.05431,-0.35622,-0.23762,-0.16401,-0.13124,-0.00528,0.01568,-0.00897,0.00386,-0.14231,-0.29391,-0.08022,-0.09975,-0.10040,0.15626,0.03067,-0.19951,-0.16086,-0.25957,-0.34681,-0.32304,-0.31737,-0.16717,-0.00204,-0.00015,0.01709,};
double weights_input_13[] = {0.00290,0.00405,0.00385,-0.07248,-0.00655,0.16289,0.15914,0.09940,-0.14307,-0.12501,-0.06075,-0.01782,-0.02483,0.14317,0.12425,-0.04565,-0.00957,0.00921,0.00254,-0.05763,-0.02047,0.05466,0.13076,0.06570,0.10641,0.01395,-0.03972,-0.07075,-0.05589,-0.16970,0.04498,0.17739,0.25909,0.00980,-0.05191,-0.01673,-0.06016,-0.03803,0.05232,0.07824,-0.01263,0.02018,-0.00605,-0.11997,-0.03603,0.14794,0.10771,0.11606,-0.03305,0.18202,0.22084,-0.00519,0.00957,-0.08817,-0.01170,0.02151,0.00225,-0.03618,0.02829,-0.20409,-0.15844,-0.11077,0.18237,0.10274,0.20748,0.14699,-0.03846,0.24222,0.13829,-0.01722,0.00192,-0.04675,-0.06268,0.01964,0.00896,-0.03722,-0.00099,-0.02583,-0.02908,-0.01892,0.06554,0.12289,0.05858,0.16092,0.09339,0.09500,0.04734,0.00861,-0.00016,-0.04903,-0.06843,-0.03116,0.01716,0.05637,0.02315,-0.02311,0.12535,-0.01127,0.03176,0.18220,0.21843,0.13287,0.13467,0.09459,0.10898,-0.00268,-0.01759,-0.05864,-0.07082,-0.02922,-0.03601,-0.08269,-0.11105,-0.14769,-0.05392,-0.11618,-0.01667,0.06292,0.15033,0.07111,0.04669,0.11985,0.12657,-0.00622,-0.04095,-0.05804,-0.06874,-0.03542,-0.06338,-0.14443,-0.16786,-0.09073,-0.22049,-0.26609,-0.33684,-0.22516,-0.09383,0.01791,-0.05511,0.05110,0.12480,-0.07355,-0.03618,-0.05690,-0.06938,-0.03664,-0.03490,-0.12676,-0.15555,-0.03154,-0.13748,-0.43774,-0.44192,-0.24689,0.07302,0.08165,-0.08521,0.03924,-0.00821,-0.10924,-0.05430,-0.07397,-0.06762,-0.03623,-0.02896,0.00287,0.09640,-0.05689,-0.13256,-0.30349,-0.32099,-0.05434,0.06481,-0.04698,-0.10707,-0.05051,-0.11739,-0.14467,-0.05990,-0.07384,-0.06130,-0.02849,-0.00262,0.06234,0.14915,0.14093,-0.06012,-0.15671,0.10393,0.28985,0.18614,-0.11550,-0.30930,-0.26659,-0.30911,-0.15538,-0.07963,-0.08486,-0.06248,-0.02548,0.05243,0.16720,0.29337,0.23405,0.04670,0.08610,0.34405,0.55254,0.23123,-0.24869,-0.36849,-0.45775,-0.31936,-0.16626,-0.07868,-0.08719,-0.06839,-0.00445,0.05929,0.05322,0.17157,0.07737,0.26811,0.36040,0.74459,0.71455,0.14469,-0.33904,-0.40196,-0.35533,-0.10296,-0.05184,-0.04225,-0.07926,-0.05990,-0.02007,0.00028,-0.08532,0.05466,0.12537,0.21216,0.36107,0.40750,0.38464,0.01721,-0.21276,-0.34314,-0.16794,-0.05939,0.01762,0.02460,-0.06584,-0.04631,-0.02986,-0.05906,-0.24718,-0.01961,0.07593,0.23116,0.08972,0.10705,-0.02611,0.01859,-0.17498,-0.20098,-0.11685,0.09789,0.16908,0.01997,-0.00799,-0.06207,-0.09416,-0.05828,-0.16811,0.08927,0.11499,0.03927,-0.02415,0.11207,0.15919,-0.01337,-0.18035,0.08694,0.03123,0.17768,0.17666,-0.01371,-0.05582,-0.00151,-0.09896,0.03756,-0.11027,-0.08337,-0.12652,-0.10723,-0.15742,-0.18304,-0.09060,0.02431,0.16005,0.23812,0.23835,0.24677,0.01376,0.01377,-0.08872,0.00260,0.02991,0.02888,-0.07201,-0.11142,-0.17937,-0.18942,-0.36232,-0.25723,-0.07333,0.06006,0.33104,0.38546,0.27399,0.15321,-0.00628,0.01388,-0.00039,-0.12625,};
double weights_input_14[] = {-0.00097,-0.00108,-0.00106,-0.00172,-0.05571,-0.27903,-0.29731,-0.23982,-0.18606,-0.00104,0.15486,0.63491,0.11479,-0.20120,0.00760,-0.07557,0.00488,0.00091,0.00011,-0.00264,0.00210,-0.00877,-0.05726,-0.40446,-0.50933,-0.19693,-0.28141,-0.18164,-0.12838,0.11278,0.01241,-0.00383,-0.18599,0.17046,0.10752,0.00166,-0.00069,0.00072,-0.02442,-0.07762,-0.27094,-0.55391,-0.45068,-0.31955,0.13572,0.02347,0.05496,0.17784,-0.03215,-0.23974,-0.11093,-0.05524,0.04284,0.08140,-0.00251,-0.02646,-0.04322,-0.04997,-0.12245,-0.36182,-0.15762,-0.10318,-0.12194,-0.08745,0.00444,0.24360,0.07683,-0.14962,-0.10011,0.00153,0.02219,0.08424,-0.02768,-0.02607,0.04450,-0.09431,0.05351,-0.22240,-0.35096,0.01500,0.05643,0.07078,0.19138,0.24004,0.21395,0.06001,0.13100,0.02146,0.06776,0.05852,-0.02763,-0.00848,0.07679,-0.04857,0.18127,-0.20847,-0.16803,0.10379,0.26538,-0.00480,0.01681,-0.08250,-0.11153,-0.25635,-0.13505,-0.13472,0.10403,0.06636,-0.00915,-0.00854,0.16662,0.07758,0.25102,-0.10407,0.08789,-0.07670,-0.19565,-0.15096,-0.02054,-0.35553,-0.40637,-0.32585,-0.01232,-0.14764,0.18835,0.07396,-0.01020,-0.00894,0.16739,0.14554,0.66997,0.41999,0.27319,-0.07853,-0.37366,-0.27297,-0.27899,-0.38584,-0.24337,-0.19257,0.28987,0.05933,0.19076,0.09143,-0.01048,0.07637,0.17820,0.30932,0.62429,0.61225,-0.03742,-0.36169,-0.24333,-0.31593,-0.36275,-0.37892,-0.11468,0.13639,0.23357,0.28486,0.19777,0.09395,0.01610,0.07480,0.18230,0.61758,0.34165,0.09771,-0.07811,-0.32512,-0.24673,-0.28469,-0.28036,-0.65147,-0.28177,0.07343,0.26239,0.13444,0.23610,0.09307,0.01505,0.10126,0.27904,0.49695,0.48301,0.32269,0.23682,-0.18237,-0.34266,-0.43229,-0.74922,-0.64274,-0.21225,-0.04343,-0.10814,-0.19283,0.23264,0.09859,0.01612,0.11519,0.28506,0.43800,0.48600,0.84553,0.47644,-0.24651,-0.45379,-0.45270,-0.34810,-0.39794,-0.11125,-0.06375,-0.20116,-0.33263,0.20623,0.10145,0.01299,0.12957,0.27739,0.24238,0.43117,0.89201,0.53076,0.23486,-0.20220,-0.14635,0.18139,-0.02394,-0.10782,0.10914,-0.17239,-0.30505,0.18564,-0.00177,-0.00331,0.11356,0.12701,-0.04935,0.05427,0.56494,0.43147,0.22766,0.00862,-0.00594,0.20757,0.18691,0.07437,-0.00719,-0.19676,-0.16616,0.00541,-0.00629,-0.00001,0.08195,0.04577,-0.19157,-0.24047,0.11578,0.27535,0.06167,0.01570,0.02161,0.12631,0.20554,0.01040,-0.01675,-0.48731,-0.00935,-0.00773,0.00355,-0.00255,-0.00161,-0.09888,-0.42299,-0.40774,-0.20361,0.37249,0.24334,0.11467,0.14723,0.29477,-0.02079,0.02992,-0.28887,-0.03374,0.10405,0.04747,-0.00034,0.00132,-0.00154,-0.10903,-0.47105,-0.40925,-0.42379,0.15038,-0.12044,0.00593,0.18181,0.27159,0.30101,-0.09516,-0.06211,0.03256,0.08130,-0.00391,-0.00093,0.00003,-0.00366,-0.10049,-0.31313,-0.39930,-0.31338,-0.35999,0.05016,0.40508,0.25679,0.45299,0.54392,0.13639,0.22218,-0.03909,-0.03458,-0.00456,-0.00144,-0.21671,};
double weights_input_15[] = {0.00209,0.00343,0.00406,0.05816,0.28840,0.25082,0.29294,0.16980,-0.01846,-0.14747,-0.09577,0.00556,0.09045,0.13651,0.25628,0.18616,0.05529,0.03829,0.00197,0.00870,-0.01074,0.02544,0.08989,0.15676,0.14389,0.18199,-0.04667,-0.11394,-0.13692,0.06047,0.08363,0.19199,0.28367,0.16284,0.06774,0.00076,0.00372,-0.08771,-0.03582,-0.04578,0.07482,0.01663,0.17242,-0.06027,0.05034,0.07339,0.00085,0.04053,0.04681,0.19967,0.25700,0.12730,0.02659,-0.03814,-0.05277,-0.08989,-0.04751,-0.02486,0.08519,0.00771,0.01439,-0.04496,0.01478,0.08288,-0.12017,0.03601,0.04809,0.19780,0.18951,0.05849,0.00822,0.01769,0.00901,-0.08969,-0.03335,-0.04173,-0.02789,-0.05792,-0.20689,-0.21333,-0.15296,-0.09803,-0.12553,0.12914,0.16017,0.17123,0.02898,-0.05831,-0.00816,0.00977,0.00536,-0.03179,-0.04530,-0.07270,0.10289,-0.17337,-0.21037,-0.00946,0.07223,-0.12388,0.08839,0.17047,0.16258,0.00947,0.02089,-0.04104,0.00809,0.00413,0.00640,-0.03087,0.00836,0.07417,0.08233,0.05500,0.08133,0.01340,-0.05203,-0.28088,0.07220,0.15760,0.16115,-0.05568,-0.00289,-0.04440,0.01450,0.00605,0.00504,-0.03391,-0.00356,0.07531,0.14745,0.13989,0.11179,0.10221,-0.28165,-0.39698,0.07442,0.03892,0.01913,-0.07015,-0.00785,0.02288,0.01895,0.01214,0.00459,-0.03491,-0.00324,0.02912,0.27082,0.32773,0.31272,-0.01888,-0.38465,-0.28626,-0.02122,-0.05792,-0.01137,0.06197,0.00790,0.03284,-0.02459,0.00675,0.00202,-0.03414,-0.00385,0.13860,0.28583,0.33070,0.31873,-0.00605,-0.02666,0.01134,0.12723,0.13155,0.07444,0.04255,0.15074,0.00941,-0.02929,0.00626,0.01488,-0.02527,0.07300,0.08975,0.00371,0.28583,0.17555,0.18381,0.29590,0.20028,0.13170,0.13534,0.05394,0.01211,0.11587,0.03847,-0.04109,-0.03217,0.01545,-0.00243,0.17188,0.13066,-0.02980,0.01503,0.01987,0.29197,0.32660,0.18531,0.06603,0.17669,-0.11432,0.09424,0.08264,0.08719,-0.01582,-0.03231,-0.00739,0.02594,0.19043,0.15929,0.02222,-0.07939,-0.04667,0.11946,0.04196,0.17852,0.16423,0.28153,0.03522,0.12557,0.10368,0.13993,-0.03909,-0.04135,0.01925,-0.01899,0.08035,0.13330,0.01519,-0.15382,-0.03032,0.03119,0.27217,0.15703,0.14580,0.22994,0.15509,-0.03049,0.00549,-0.02016,-0.13887,-0.02375,0.03333,-0.03559,-0.03064,-0.11863,-0.17747,-0.31655,-0.37570,-0.03940,0.18568,0.11289,0.10808,0.19195,-0.11391,-0.18776,-0.24075,-0.18174,-0.13265,-0.10512,0.00250,-0.04608,-0.07710,-0.16846,-0.33086,-0.45298,-0.30527,-0.20804,-0.15036,-0.18853,-0.08895,0.01628,-0.30405,-0.36304,-0.25806,-0.12765,-0.01430,0.00718,-0.00138,-0.05381,-0.12727,-0.16830,-0.25874,-0.32352,-0.35366,-0.28177,-0.24307,-0.22128,-0.24433,-0.16579,-0.28372,-0.23766,-0.24886,-0.08501,-0.00015,-0.03005,0.00018,-0.01276,-0.04870,-0.19599,-0.32925,-0.33227,-0.24860,-0.25730,-0.21108,-0.32383,-0.34696,-0.25732,-0.30907,-0.23376,-0.12321,-0.06388,0.00129,0.00024,-0.04099,};
double weights_hidden_0[] = {-1.05282,-1.99862,-0.35260,-0.79364,-0.52279,-0.57538,-0.36974,-0.49068,-0.42933,-0.40338,-0.80531,-2.75429,2.22369,-0.03385,6.00565,-0.33369,-1.06334,};
double weights_hidden_1[] = {1.03933,0.41667,2.02687,-0.24922,0.05571,2.07459,-0.72059,1.66614,2.10115,2.09569,1.08151,0.76700,-1.29596,0.85562,-1.37796,-1.25521,1.99056,};
double weights_hidden_2[] = {3.59705,-0.69670,-1.24234,-1.85683,-0.47193,-0.97250,-0.91281,-1.01238,-0.80626,-1.05309,2.68617,-0.87705,-2.11726,2.96379,-0.59635,-1.42736,-0.60825,};
double weights_hidden_3[] = {-2.50352,-2.08096,-0.62264,2.50157,-0.61974,-0.51770,0.38778,-0.38915,-0.25372,-0.70178,3.60685,-0.06567,-3.48832,-2.24681,-1.02378,-0.30202,-2.40578,};
double weights_hidden_4[] = {-1.25404,-0.91013,-0.58805,-0.78432,2.06085,1.99963,0.09777,1.98934,2.05745,-0.79753,-1.96757,1.06625,-1.17991,1.09903,1.46177,1.54264,0.93356,};
double weights_hidden_5[] = {-1.36077,5.60668,-0.33260,2.17906,-1.05701,-0.16927,-0.54480,-0.05194,-0.19500,-0.24774,1.14155,-0.36101,1.89535,-0.59330,-1.91721,-0.08509,1.16569,};
double weights_hidden_6[] = {-1.17021,3.80090,-0.51615,-1.04949,4.07572,-0.35287,-0.50562,-0.51584,-0.88993,-0.45921,-1.87785,1.66309,0.77104,-1.56055,2.48161,-0.92620,1.41418,};
double weights_hidden_7[] = {0.98612,-0.58848,2.15747,1.30815,-0.79564,-0.97854,2.85418,-0.87301,-1.11363,2.35132,0.38466,-1.05218,-1.44791,1.30722,-0.68222,2.38833,1.92517,};
double weights_hidden_8[] = {-2.39119,-2.20638,-0.21400,-2.01324,-1.63131,-0.39679,-0.27307,-0.37017,-0.35574,-0.29279,-1.57680,4.09001,2.49998,-0.38268,-2.23859,-0.55580,-2.00143,};
double weights_hidden_9[] = {4.11815,-1.29052,-0.39033,0.77909,-1.12497,-0.09034,-0.05321,0.02424,-0.07537,-0.54290,-2.68133,-2.48500,2.17773,-1.33529,-2.11661,1.01778,-1.36651,};

class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 0; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = cc_segmenter_.GetNumOfSegments(im);

		if (num_of_segments > kMaxNumOfDigits) {
			num_of_segments = nn_segmenter_.GetNumOfSegments(im);
		}


		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


