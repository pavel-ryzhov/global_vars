#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.88;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {0.00022,-0.02041,-0.04049,-0.09336,-0.17032,-0.12304,-0.16440,-0.10795,-0.12486,-0.33029,-0.26335,-0.05491,0.02777,0.21002,0.33101,0.29062,0.06139,0.00161,0.00164,-0.07493,-0.02576,-0.00914,-0.32222,-0.27876,-0.20971,-0.06494,-0.30788,-0.30883,-0.13328,0.09137,-0.01457,0.10589,0.27039,0.29968,0.05483,0.05296,-0.05629,-0.02247,-0.06911,-0.08911,-0.41572,-0.36122,-0.35973,-0.16942,0.03512,-0.11579,-0.19739,0.13615,-0.06030,-0.00554,0.09286,0.05956,0.11466,0.09582,-0.05813,0.03714,-0.10346,-0.10627,-0.30101,-0.27244,-0.06370,-0.15165,0.13439,-0.14611,-0.21361,-0.32498,-0.26260,0.00999,-0.14510,-0.04319,0.07466,-0.00796,-0.06140,0.03604,-0.04260,-0.17489,-0.08391,-0.18411,-0.05063,0.11965,0.11675,-0.14199,-0.16699,-0.36642,-0.05731,-0.06568,-0.12268,-0.09413,0.00373,-0.02426,-0.05952,0.05283,-0.03045,-0.06871,0.06769,-0.00091,0.00571,0.19553,0.28541,-0.20564,-0.27348,-0.31228,-0.18596,-0.21190,-0.20344,-0.17786,0.02000,-0.02674,-0.04729,0.03354,0.02046,0.00943,0.18033,0.01614,0.20621,0.28242,0.42170,0.06383,0.07486,-0.14457,-0.11585,-0.35096,-0.27151,-0.23282,0.02187,-0.05471,-0.04638,0.03948,0.00270,0.01874,0.26292,0.49870,0.07798,0.45223,0.28095,-0.01401,0.26314,0.04147,-0.06323,-0.19757,-0.20536,-0.21075,0.01722,-0.01485,-0.04399,0.08763,0.10677,0.13288,0.26688,0.23881,0.04280,-0.19850,0.17443,0.07832,0.19747,-0.15278,-0.33922,-0.19941,-0.13241,-0.15739,0.02832,-0.01120,-0.05274,0.07564,0.17130,0.42950,0.20762,0.20299,0.27756,0.04329,0.17832,-0.15351,0.00978,-0.27493,-0.22901,0.04355,0.04951,-0.01569,0.04071,-0.00985,-0.04189,0.09642,0.22616,0.65769,0.72402,0.50028,0.37036,0.07537,-0.22887,-0.40391,-0.50499,-0.27029,-0.05132,0.03493,0.10144,0.00540,0.07658,-0.00702,-0.05002,0.11679,0.18822,0.75214,0.75862,0.80025,0.26860,-0.09249,-0.47125,-0.44032,-0.24646,-0.07947,0.05231,-0.06735,0.17468,-0.00435,0.08947,-0.00884,0.00418,0.17512,0.17968,0.34778,0.71723,0.68497,0.29043,0.34038,-0.11336,-0.07518,0.07636,0.08028,-0.01110,0.07051,0.23647,0.07383,0.11304,-0.06330,-0.00831,0.13972,0.11558,0.11454,0.38027,0.30044,0.14359,0.36158,0.00503,-0.02114,0.10322,0.17819,0.17666,0.03235,0.19280,0.09188,0.03685,0.00533,-0.06889,0.12001,-0.00438,-0.03458,-0.10549,-0.02631,-0.04453,0.17118,-0.00545,-0.09569,-0.09882,0.04827,0.10874,0.16435,0.03767,0.08846,0.05166,0.01567,-0.05896,0.03367,-0.06454,-0.25628,-0.22386,-0.03164,0.23329,0.34128,0.16789,-0.17428,0.02152,-0.13381,0.07969,0.13322,0.17685,0.18147,-0.01711,-0.04759,0.00066,-0.01651,-0.10629,-0.33347,-0.41753,-0.32434,0.02000,-0.07142,0.17847,0.15386,0.15056,0.29711,0.11955,0.10325,0.20431,0.01578,-0.00443,-0.00090,-0.00126,-0.00676,-0.19298,-0.18862,-0.19948,-0.39971,-0.36007,-0.14512,0.34104,0.35345,0.22205,0.12462,0.06381,-0.01031,-0.02940,-0.05507,-0.00362,0.00031,-0.37088,};
float weights_input_1[] = {-0.00212,0.00566,0.00639,0.13266,0.01562,0.00440,-0.08303,-0.07150,0.08989,0.15597,-0.00208,0.28048,0.14198,0.28821,0.21042,0.06124,-0.11913,-0.00827,-0.00306,0.06232,-0.01010,-0.01567,-0.08951,-0.15838,-0.10399,0.07820,-0.03231,0.05375,-0.06389,0.14135,0.15244,0.01916,-0.04637,0.05872,-0.03066,-0.01403,0.04524,0.03960,0.07143,0.07501,-0.28237,-0.17750,0.21411,0.19103,0.35461,0.15027,0.33299,0.08484,0.09106,-0.15092,-0.17625,-0.11838,-0.11578,0.06344,0.03927,-0.02407,0.17719,0.13373,-0.13564,0.04352,0.14811,0.20227,0.15012,0.04228,-0.21502,-0.26822,0.15372,-0.14278,-0.19415,-0.11895,-0.12492,0.06828,0.04874,-0.02324,0.08872,0.21667,-0.04727,0.27448,0.04902,0.08014,0.01436,-0.21495,-0.20125,-0.26863,-0.18951,-0.27935,-0.31291,-0.14526,0.01491,0.07598,0.05425,-0.00216,0.13006,0.22784,0.22033,0.16097,0.07168,-0.04554,-0.05248,-0.17907,-0.20935,-0.19003,-0.34930,-0.59348,-0.36059,-0.12970,0.14044,0.08020,0.06226,0.00052,0.16458,0.32129,0.33370,0.43443,0.16692,0.00083,-0.16551,-0.03475,-0.06588,-0.50924,-0.49683,-0.37211,-0.27330,-0.09190,0.17334,0.08873,0.06249,0.00005,0.18765,0.52851,0.50647,0.26231,0.04763,-0.09828,-0.13363,-0.17062,-0.33814,-0.47089,-0.13699,0.18375,0.16563,0.20285,0.19468,0.17334,0.07234,0.00974,0.05751,0.45125,0.50483,0.74249,0.07712,-0.09171,-0.49284,-0.80306,-0.58976,-0.08955,0.20770,0.62889,0.74955,0.42773,0.22058,0.16385,0.06811,0.01095,0.04150,0.31453,0.18226,0.07529,0.05877,-0.15643,-0.43525,-0.57212,-0.47266,-0.44506,0.31071,0.32206,0.69001,0.23767,0.21670,0.16159,0.07158,0.00915,-0.01403,-0.06759,-0.26405,-0.04980,0.00357,0.06028,0.14380,-0.14875,-0.35391,-0.40891,0.04018,0.05897,0.05826,0.01438,0.15656,0.17587,0.06191,-0.01899,-0.11163,-0.26892,-0.35953,-0.13187,0.02902,0.02238,-0.01586,-0.32597,-0.28542,-0.17114,0.02974,-0.03676,-0.13056,-0.06721,0.11092,0.18257,0.05821,-0.06262,-0.18362,-0.09062,-0.26729,-0.02321,0.01817,-0.13113,-0.25965,-0.42443,-0.00094,0.14947,0.06012,-0.12860,-0.25222,-0.15503,0.09004,0.16959,0.04379,-0.01607,-0.13598,-0.03946,-0.16131,0.08035,0.25692,-0.06268,0.05735,-0.16253,0.08842,0.15340,0.12787,-0.12087,-0.25405,0.03930,0.03143,0.03343,0.04493,-0.00896,-0.07304,-0.23816,-0.23017,0.08659,0.31975,0.31279,0.26607,0.23175,0.15078,0.16890,0.15458,0.08054,-0.33875,-0.04444,-0.06540,0.04486,0.04931,0.06226,-0.06982,-0.20830,-0.15927,0.11169,0.24933,0.08296,0.06528,-0.10577,0.13923,-0.06847,0.08510,-0.19091,-0.22308,-0.07617,0.03426,0.06416,0.00094,0.06534,-0.01310,-0.18093,-0.01790,-0.12445,0.37878,0.29892,0.22179,0.19498,0.00880,-0.12837,-0.12809,-0.20229,-0.16704,-0.08135,-0.00483,0.05749,0.00090,0.03508,0.03908,0.12176,0.14558,0.18478,-0.06369,0.09098,0.19837,0.14393,-0.08664,-0.25661,-0.12264,-0.05154,-0.07866,0.01309,-0.00294,0.00031,-0.10949,};
float weights_input_2[] = {0.00512,0.00748,0.00694,-0.05221,0.06156,0.04776,0.07576,-0.01082,-0.15850,-0.05054,0.03465,0.09078,0.17413,0.00710,-0.03478,-0.00494,0.05905,0.04460,0.00425,-0.04767,-0.00463,0.08128,0.08049,0.01929,-0.12473,-0.12429,0.01455,0.05902,0.04947,0.03081,0.04545,0.17783,0.16353,0.00361,-0.01625,0.02045,-0.05164,-0.09151,-0.01584,-0.00748,0.01699,-0.15562,0.06063,-0.16949,0.03100,0.17674,-0.10633,-0.04901,0.00000,0.08718,0.10869,0.04908,0.01310,-0.09103,-0.07045,-0.03225,-0.03589,-0.01506,0.05258,-0.11313,-0.08322,-0.01859,0.16479,0.11516,0.13975,-0.00401,0.01295,0.09151,0.12045,0.01777,0.01287,-0.03550,-0.05021,-0.03229,-0.01476,-0.04514,0.02305,-0.10006,-0.25541,-0.20003,-0.01287,0.13742,0.10980,0.14568,0.25068,0.11801,0.05315,-0.04080,-0.01936,-0.04550,-0.05936,-0.02239,-0.00262,-0.09474,-0.05553,-0.17725,-0.28239,-0.17750,0.07200,0.38404,0.25131,0.13804,0.26903,0.08862,0.01829,-0.05678,-0.02594,-0.06104,-0.05954,-0.02037,0.00564,0.04710,-0.06701,-0.19450,-0.19433,-0.18878,0.05596,0.08902,0.15507,0.14832,0.23901,-0.05438,-0.10028,-0.05147,-0.02659,-0.06080,-0.05837,-0.02127,0.00014,0.02523,-0.08410,0.00001,-0.09751,-0.14034,-0.09226,-0.00366,0.17459,0.07356,-0.09190,-0.21874,-0.17955,-0.08973,-0.02128,-0.07462,-0.06036,-0.02261,0.05973,-0.01920,0.08105,0.03097,0.00302,-0.07420,-0.00012,0.06247,0.06781,0.03691,-0.11209,-0.15077,-0.25037,-0.13091,-0.09712,-0.08031,-0.06028,-0.02422,0.06588,0.10510,0.14228,0.16895,0.01229,-0.18263,0.04054,0.13752,0.16896,0.12541,-0.12958,-0.09306,-0.05338,-0.09780,-0.08798,-0.07001,-0.09190,-0.05487,0.03889,0.11005,0.09777,0.10991,0.01730,-0.08344,0.03608,0.09242,0.13808,0.06796,-0.01345,0.02932,-0.02881,-0.02400,-0.09695,-0.13586,-0.09001,-0.05071,0.11155,0.13158,0.12395,0.03047,-0.18857,0.00774,0.03511,0.21781,0.26354,0.15690,-0.07559,-0.01609,-0.04638,0.00276,-0.07438,-0.14218,-0.11310,-0.03104,0.13200,0.16652,0.06223,-0.07432,-0.16169,-0.12575,0.05564,0.37502,0.43262,0.22220,0.01321,0.07264,0.05478,0.09906,-0.04358,-0.10597,-0.08536,-0.04100,0.07611,0.15071,0.03684,-0.10005,-0.23555,-0.11094,0.07318,0.33374,0.23161,0.12652,0.09660,-0.04921,-0.01956,0.00959,-0.07786,-0.02159,-0.01392,-0.04388,0.00166,-0.00324,-0.12623,-0.29646,-0.58543,-0.25410,-0.06847,0.18402,0.22464,0.12374,-0.08433,-0.21882,-0.16789,-0.05671,-0.08957,-0.09353,-0.05748,-0.07821,-0.05885,-0.05322,-0.16579,-0.37755,-0.45539,-0.34990,-0.22284,0.09470,0.04113,-0.01168,-0.08431,-0.27147,-0.15080,-0.05283,0.00717,-0.04346,0.00167,-0.09253,-0.06392,-0.05106,-0.13219,-0.17954,-0.29683,-0.28565,-0.13945,-0.06145,-0.10143,-0.20806,0.09051,0.04641,0.03390,-0.02051,0.03312,-0.08217,0.00126,-0.02592,-0.10060,-0.18545,-0.21474,-0.13466,-0.07343,-0.13444,-0.28713,-0.12355,-0.10342,0.02139,0.02859,0.05145,0.11735,-0.02011,0.02741,0.00045,-0.16476,};
float weights_input_3[] = {-0.00795,-0.03521,-0.04224,0.07742,-0.06818,-0.21101,-0.35514,-0.16242,0.19431,0.04501,-0.05893,-0.17389,-0.22411,-0.00892,0.12465,0.37050,0.10108,-0.00720,-0.00680,-0.02434,-0.08302,-0.13066,-0.18787,-0.16762,-0.12841,0.06659,-0.17655,-0.14391,-0.10759,-0.15863,-0.08084,-0.30341,-0.11747,0.33495,0.04075,0.05518,-0.02084,0.00441,-0.05160,-0.15559,-0.03685,-0.13310,-0.19513,-0.01868,0.12627,-0.06460,-0.29544,-0.25770,-0.35004,-0.19849,0.13569,0.12097,0.01395,0.05269,-0.02637,0.01752,0.06363,0.10625,-0.02320,0.13004,-0.06554,0.07504,0.02715,0.11841,-0.32755,-0.50088,-0.41072,-0.11088,-0.09504,0.05863,0.03255,-0.03178,-0.01486,0.02269,-0.02425,0.13939,0.27282,0.19159,-0.06072,0.23077,0.08524,-0.15913,-0.33537,-0.61534,-0.29710,-0.10037,-0.15877,0.08130,0.00560,-0.02252,0.00300,0.04114,0.10110,0.27283,0.32891,0.36444,0.17662,0.18905,0.04274,-0.35083,-0.55786,-0.45071,-0.30114,-0.21191,-0.19067,-0.01539,-0.05980,-0.03593,0.00351,0.00632,0.14082,0.23960,0.47975,0.73268,0.38279,0.32820,0.25770,0.15966,-0.04978,-0.06705,-0.19961,-0.21538,-0.21583,-0.06939,-0.04296,-0.03440,0.00543,0.01283,0.07334,0.25969,0.35858,0.41455,0.38940,0.44883,0.81126,0.45526,0.52957,0.17889,0.13525,-0.16938,-0.13540,-0.10623,-0.07109,-0.05235,0.03980,0.03815,-0.03921,0.00910,0.03368,-0.07811,0.04874,0.17942,0.27469,0.39278,0.32328,0.32598,-0.16836,-0.16152,-0.00144,0.03515,-0.02045,-0.02360,0.03228,0.03896,-0.06637,-0.16435,-0.03677,0.11224,0.50566,0.36971,0.31328,-0.03198,0.17154,0.23342,0.25403,0.30080,0.06825,0.14188,0.00487,-0.02213,0.06329,0.05817,-0.05831,-0.04871,0.00813,0.32780,0.62726,0.68059,0.72834,0.36062,0.45677,0.12886,0.06580,0.32657,0.22561,0.10623,0.09620,0.00785,0.02794,0.02702,-0.12749,-0.11005,-0.05821,0.10475,0.15398,0.13321,0.28169,0.13415,0.19730,0.12606,-0.01665,0.18626,0.24415,-0.02260,0.02814,0.01922,0.04804,-0.00169,-0.15872,-0.32864,-0.28363,-0.24804,-0.36418,-0.21512,-0.23611,-0.28292,-0.04671,0.08180,-0.09879,-0.03046,0.00674,-0.11083,0.01845,0.04899,0.01633,0.01756,-0.17597,-0.28312,-0.28730,-0.28663,-0.25671,-0.32813,-0.12817,-0.39665,-0.05193,0.02385,-0.01681,0.10710,0.02220,-0.14652,0.05497,0.03122,-0.04686,0.00585,-0.20185,-0.03552,-0.21525,-0.32759,-0.31135,0.00234,0.18229,0.02463,-0.14705,-0.05336,-0.00235,0.15784,-0.14416,-0.06694,0.05522,-0.00775,-0.01445,-0.01236,-0.20816,-0.12634,-0.10168,-0.18951,-0.11821,-0.06129,0.11631,-0.47828,-0.05356,-0.18838,-0.17310,0.16040,0.08334,-0.02742,-0.02040,0.02296,0.00011,0.00239,-0.23263,-0.37315,-0.12773,0.13639,0.03594,0.15259,0.04764,-0.32917,-0.29963,-0.11099,-0.28313,-0.04359,-0.19191,-0.03274,0.00213,0.08701,-0.00192,-0.00411,-0.12509,0.00452,0.11031,-0.04904,-0.05683,-0.01825,0.04706,-0.13133,0.11641,-0.13185,-0.11576,-0.16596,-0.32676,-0.12684,0.00088,-0.00168,0.14010,};
float weights_input_4[] = {0.00875,0.00857,0.00178,0.01882,0.14796,0.18576,0.16009,0.02215,-0.20909,-0.08968,0.04010,0.18234,0.33235,0.27287,0.23275,0.26266,0.13216,0.07338,0.00792,0.00136,0.00764,0.11550,0.05242,-0.08130,-0.24693,-0.21425,-0.10619,-0.08772,-0.07846,-0.02531,0.04409,0.32633,0.37548,0.22343,0.08817,0.05871,-0.00443,-0.03042,-0.00724,-0.00706,0.03236,-0.25874,0.00489,-0.24859,0.20034,0.28613,-0.13614,-0.04492,-0.03109,0.20417,0.31270,0.16229,0.05679,-0.01778,-0.01831,-0.01283,-0.06084,-0.01088,0.06231,-0.20961,-0.13895,0.02375,0.32735,0.20735,0.11937,-0.15340,-0.05039,0.16880,0.25637,0.04356,0.02504,0.01735,-0.00301,-0.01065,-0.01523,-0.02230,0.13720,-0.17592,-0.38540,-0.24479,0.09855,0.23679,0.08880,-0.01923,0.18272,0.15552,-0.01303,-0.04774,-0.02610,-0.00097,-0.01605,-0.01171,0.00908,-0.06316,-0.01393,-0.19416,-0.39072,-0.11995,0.19482,0.42338,0.20157,0.08574,0.15948,-0.03148,-0.07150,-0.08422,-0.03976,-0.02285,-0.01517,-0.00934,0.01667,0.06116,-0.02425,-0.20693,-0.25089,-0.05786,0.13671,0.14852,0.11076,0.23395,0.17946,-0.15987,-0.19078,-0.07350,-0.04060,-0.02347,-0.01705,-0.01010,-0.02864,0.03559,-0.04699,0.04936,-0.19538,-0.18721,-0.13418,-0.11444,0.20094,0.16580,-0.11255,-0.27251,-0.23319,-0.10804,-0.03352,-0.04212,-0.01650,-0.00979,0.05039,-0.00162,0.10840,0.02753,-0.09512,-0.27088,-0.16686,0.01550,0.16365,0.12536,-0.16519,-0.15881,-0.25546,-0.13438,-0.12157,-0.05131,-0.01532,-0.00816,0.05802,0.11502,0.15777,0.19405,0.05407,-0.20561,0.06196,0.13788,0.21527,0.03782,-0.15551,-0.08171,-0.01951,-0.08932,-0.11035,-0.02698,-0.04052,-0.03201,0.04070,0.05503,0.10878,0.12062,0.04642,-0.06771,0.19575,0.22451,0.06854,-0.02817,-0.10688,-0.00997,-0.02491,-0.01197,-0.09774,-0.09787,-0.03901,-0.04129,0.11427,0.14108,0.14896,0.06050,-0.19066,0.03624,0.17097,0.41971,0.21817,0.08274,-0.18639,-0.10854,-0.07621,-0.01571,-0.10081,-0.10873,-0.04942,-0.01091,0.12810,0.14801,0.05604,-0.08776,-0.12180,-0.00415,0.23394,0.52063,0.40213,0.17849,-0.07987,-0.00180,0.05930,0.10341,-0.04417,-0.06886,-0.02158,-0.00011,0.07288,0.06153,-0.06491,-0.10581,-0.15919,0.02331,0.24671,0.48540,0.28138,0.13019,-0.03398,-0.12550,-0.05317,-0.00351,-0.07757,0.02715,0.03913,-0.00910,-0.02800,-0.14702,-0.26177,-0.33910,-0.61275,-0.17785,-0.00206,0.23908,0.24129,0.05767,-0.21513,-0.25393,-0.21463,-0.06674,-0.09406,-0.06661,-0.01368,-0.01664,-0.11823,-0.21190,-0.23573,-0.42244,-0.48327,-0.35296,-0.26065,-0.00460,-0.05936,-0.13951,-0.12096,-0.27156,-0.14547,-0.03631,0.01668,0.00754,0.00106,-0.07548,-0.15937,-0.21603,-0.15192,-0.24627,-0.34186,-0.32826,-0.27325,-0.21615,-0.29131,-0.32538,0.14723,0.15204,0.07743,0.01057,0.05708,-0.02632,0.00223,-0.04555,-0.13376,-0.14477,-0.18868,-0.13790,-0.09219,-0.17520,-0.37818,-0.14747,-0.08288,0.18714,0.14093,0.19639,0.26262,0.07427,0.04210,-0.00019,-0.26854,};
float weights_input_5[] = {-0.00007,-0.00142,0.00474,0.14983,0.29539,0.22353,0.26930,0.22252,0.02870,-0.07760,-0.19582,-0.12712,0.00011,-0.03189,0.07435,0.03398,0.04722,0.01927,0.00156,0.05697,0.01127,0.06208,0.20024,0.25903,0.24410,0.25686,0.09615,0.00076,-0.09690,0.00160,0.11082,0.02735,0.14804,0.01304,0.06222,-0.00565,0.07239,-0.00942,0.01239,0.05392,0.29450,0.12462,0.25899,-0.00103,-0.01722,-0.03738,-0.14033,-0.00996,0.03985,0.11709,0.21935,0.10871,-0.02755,-0.03406,0.01311,-0.06622,0.05337,0.16412,0.22989,0.04366,0.14509,0.02477,-0.26113,-0.09409,-0.14022,0.15775,0.13708,0.11212,0.14848,0.11167,-0.00989,0.04250,0.07483,-0.06354,0.06168,0.15615,0.01073,0.00403,-0.09745,-0.21045,-0.36996,-0.26431,-0.08919,0.26597,0.10840,0.15597,0.11862,0.02914,0.01807,0.04522,0.07483,-0.01380,0.04806,0.04219,0.09587,-0.05901,-0.15835,-0.19481,-0.23573,-0.20293,0.14525,0.35427,0.14127,0.08496,0.10752,0.10081,0.02655,0.04893,0.07060,-0.01329,0.07514,0.12391,0.08618,0.04746,-0.01665,-0.15110,-0.37342,-0.38790,0.02036,0.33769,0.05588,0.02757,0.05641,0.11653,0.02433,0.05890,0.06990,-0.01129,0.03690,0.14409,0.09361,-0.15032,0.14648,-0.06294,-0.26748,-0.24446,0.00181,0.06227,-0.13204,-0.08695,0.04767,0.11604,0.03219,0.04452,0.05817,-0.04173,0.00605,0.06194,0.11828,0.06335,0.46831,0.39682,-0.08133,-0.08694,-0.12789,-0.06008,-0.14296,-0.12027,-0.03112,0.10038,0.02573,0.04301,0.05832,-0.03588,0.00678,0.00677,0.07794,0.21356,0.41818,0.36527,0.24812,0.29901,0.12812,0.36767,-0.01773,-0.04831,0.11159,0.07604,0.01533,0.05926,0.05142,-0.04202,-0.04592,-0.17724,-0.28443,0.02839,0.36426,0.58590,0.63038,0.40908,0.27867,0.42798,0.00729,0.15647,0.23889,0.10159,0.02910,0.05854,0.06185,-0.03716,-0.03423,-0.20098,-0.40362,-0.34607,0.09947,0.57742,0.50060,0.26821,0.09889,0.33662,-0.07190,0.21903,0.16095,0.16048,0.03619,0.05847,0.00249,-0.09753,-0.02182,-0.14469,-0.44049,-0.58337,-0.28251,-0.10049,-0.12639,-0.13071,-0.09902,0.20277,-0.00965,0.14671,0.10189,0.11642,0.00839,0.07262,0.00907,-0.11137,-0.05727,-0.06065,-0.14857,-0.40480,-0.30379,-0.34465,-0.08607,-0.14030,-0.06149,0.12261,0.05276,-0.01454,0.04631,0.01348,-0.01501,0.05707,0.07522,-0.10339,-0.04482,-0.07801,-0.04868,-0.22791,-0.38485,-0.18615,-0.08673,-0.02213,-0.07018,0.08416,-0.14888,-0.22510,-0.08904,-0.10488,-0.02562,0.03468,0.07271,-0.03100,-0.04362,-0.02554,-0.04177,-0.26688,-0.36845,-0.26692,-0.21270,-0.15877,-0.19339,0.12483,-0.27156,-0.24289,-0.21974,-0.16595,0.01023,0.05018,-0.00110,0.02381,-0.10510,-0.00307,-0.09721,-0.04759,-0.38371,-0.19486,-0.19915,-0.31803,-0.24811,-0.16725,-0.30862,-0.32467,-0.31834,-0.05456,-0.00460,0.03302,-0.00124,-0.04726,-0.00997,-0.19889,-0.27668,-0.10336,-0.08125,-0.23539,-0.44487,-0.55966,-0.42452,-0.28515,-0.55769,-0.47220,-0.24522,-0.02149,-0.01472,0.00038,0.09451,};
float weights_input_6[] = {-0.00495,-0.04273,-0.04396,0.16498,0.09765,-0.07299,-0.12520,-0.04601,0.37517,0.30148,0.33653,-0.29630,-0.19687,-0.26660,-0.24712,-0.16808,0.02052,0.00048,-0.00490,0.00249,0.01863,0.03018,0.00989,0.07489,0.24772,-0.08198,0.17311,0.29751,0.34835,0.08790,-0.20553,-0.23792,-0.06348,-0.37433,0.03614,0.05538,0.02745,0.06070,0.04555,-0.05363,0.00564,0.03231,0.21037,0.00331,-0.21967,-0.11406,-0.00363,-0.32040,-0.06456,0.03986,0.00788,-0.13511,0.01657,0.13980,0.02918,0.03780,0.12568,-0.04464,0.27992,-0.03854,0.02488,-0.05299,-0.12550,-0.20946,-0.22749,0.05459,-0.19276,0.09391,0.28624,0.27189,0.09462,0.17227,0.02970,0.03933,0.10379,-0.04177,0.06561,-0.06157,0.03645,-0.02577,-0.24254,-0.09741,0.22675,0.10462,0.22521,0.29294,0.59238,0.37808,0.26319,0.17933,-0.00459,0.04418,0.02032,0.06568,0.02951,-0.05902,0.19972,0.09690,0.03577,-0.18123,0.31009,0.50334,0.41976,0.76352,0.66994,0.50370,0.36414,0.20566,-0.00307,0.01200,0.07021,0.03858,-0.14750,-0.01833,0.25761,0.14490,-0.12495,-0.46358,-0.15014,0.34190,0.61508,0.80030,0.70662,0.40717,0.29300,0.21306,-0.00176,-0.02124,0.02309,0.09186,-0.11589,-0.00561,0.35165,0.07596,-0.42828,-0.42484,-0.41296,-0.23231,-0.23053,0.07748,0.29191,0.20029,0.30242,0.27590,0.01474,0.05049,-0.00643,-0.14051,-0.29241,-0.17456,-0.17649,-0.30854,-0.12190,-0.27902,-0.18839,-0.53585,-0.23718,-0.27370,-0.16939,-0.09923,0.19794,0.20954,0.01166,0.05026,0.02070,-0.10674,-0.28695,0.04315,-0.00491,-0.12120,-0.03510,0.12143,0.34711,0.08491,-0.35935,-0.19153,-0.10791,-0.27813,0.02251,0.20081,-0.00247,0.03476,0.04672,0.11092,-0.01434,0.29085,0.36573,-0.00227,0.06078,0.13181,0.40665,0.07427,-0.27867,-0.14864,-0.21494,-0.20185,-0.15675,0.09196,-0.02439,0.02769,0.12522,0.17666,0.31086,0.29087,0.19096,0.22026,-0.01050,-0.07055,0.26079,0.02203,-0.36499,-0.12761,-0.09952,-0.22726,-0.15913,0.09638,-0.10525,-0.00344,0.14801,0.21676,0.23713,0.14899,0.06957,0.22661,0.04872,-0.11256,0.27982,-0.03477,-0.31193,-0.05081,0.05791,-0.22883,-0.07574,-0.01741,-0.09607,-0.03215,0.01890,0.12093,0.13643,-0.08382,-0.21805,-0.00141,0.02165,-0.18487,0.36366,0.17455,0.03334,-0.11809,-0.03070,-0.23779,-0.17589,-0.12462,0.04402,-0.04338,-0.07066,-0.05146,0.21472,-0.06742,-0.05485,-0.16474,-0.25586,-0.18664,0.19175,-0.00574,-0.09053,-0.24288,0.10640,-0.05056,-0.29164,-0.03865,0.02615,-0.05604,-0.01947,-0.03791,0.19166,-0.08278,-0.16866,-0.18010,-0.13007,-0.08399,0.17103,0.08670,-0.14762,-0.31694,0.04037,-0.20833,-0.24284,0.05006,-0.00298,0.05071,-0.13725,0.01236,-0.05985,0.12808,-0.17246,-0.13968,-0.10791,-0.16185,0.31021,0.21515,-0.23539,-0.16183,-0.07823,-0.30376,-0.02072,0.10625,-0.00136,-0.00848,0.04713,-0.10769,-0.29187,0.02068,0.03777,-0.00125,0.21319,-0.03598,0.21380,-0.15500,-0.09224,-0.24110,0.11531,0.03844,-0.01900,0.00096,-0.09768,};
float weights_input_7[] = {-0.00005,-0.00266,0.00878,0.23496,0.37255,0.35916,0.29504,0.22209,0.48169,0.34117,0.26270,-0.24883,-0.20329,-0.14295,-0.12332,-0.13934,0.08357,-0.00286,-0.00184,0.05502,0.14431,0.09033,0.30090,0.52700,0.49807,0.07439,0.24349,0.24116,0.23960,0.16889,-0.09399,-0.13497,-0.03770,-0.34942,0.08686,0.07750,0.05810,0.14523,0.07091,0.04445,0.27491,0.57249,0.18668,0.27548,-0.08396,-0.26204,-0.03358,-0.11812,0.09846,0.07697,-0.01774,0.04544,0.07296,0.16735,0.05935,0.08117,0.10545,0.02567,0.28645,0.08471,-0.00273,0.05982,-0.08738,-0.18973,-0.20216,0.36089,0.24164,0.13957,0.19573,0.35679,0.06113,0.10632,0.05696,0.07961,0.09382,-0.06019,-0.18773,-0.14209,-0.01954,0.12655,0.14124,-0.11454,0.17517,0.41658,0.25119,0.22119,0.46261,0.45217,0.20877,0.10860,0.02054,0.08137,-0.05512,-0.07021,-0.06121,-0.12516,-0.06802,0.21251,0.14282,-0.29565,0.34307,0.67149,0.42203,0.74596,0.68498,0.60888,0.25866,0.14505,0.01958,0.07971,-0.06438,-0.13819,-0.21452,-0.34881,-0.08284,-0.09242,0.14669,-0.39031,-0.23436,0.31524,0.51813,0.77514,0.73941,0.46608,0.16270,0.14515,0.02170,0.04537,-0.00647,-0.10819,-0.27613,-0.38609,0.06817,-0.29304,-0.26936,-0.38362,-0.46572,-0.38695,-0.31039,0.19981,0.29596,0.30106,0.19835,0.21788,0.01978,0.06249,-0.08174,-0.16884,-0.33244,-0.41389,-0.09452,-0.02110,0.28102,0.02197,-0.18864,-0.76961,-0.31736,-0.30946,-0.13681,-0.04773,0.18509,0.12357,0.01798,0.06122,-0.07638,-0.24357,-0.30676,-0.14283,-0.12710,0.06415,0.34290,0.22182,-0.11111,-0.08415,-0.33308,-0.30657,-0.07299,-0.24709,0.02529,0.11272,0.00625,0.05092,-0.06221,-0.05975,-0.04511,0.06889,0.12743,-0.07347,0.22437,0.09596,-0.11089,0.05477,-0.08811,-0.02454,0.00121,-0.14856,-0.16930,0.10078,0.00814,0.05262,-0.02781,0.01815,0.10751,0.05315,-0.08044,0.04473,-0.05489,-0.28395,-0.17365,0.12666,-0.10411,0.06992,-0.01034,-0.04013,-0.11346,0.10298,-0.00812,0.07020,-0.02068,0.06709,0.15200,0.03205,-0.06243,0.11509,-0.01982,-0.42507,-0.28503,-0.04570,-0.09789,-0.04482,-0.07562,-0.13991,-0.03785,0.04031,-0.00976,0.05632,-0.00805,-0.00783,0.18207,0.02737,-0.06873,-0.00371,0.02368,-0.53507,-0.05260,0.16140,0.15915,-0.22993,-0.11993,-0.15687,-0.10384,-0.07938,0.05346,0.06063,0.03128,0.16527,0.47971,0.41217,0.32824,0.06449,-0.01577,-0.43013,-0.14136,-0.21598,0.16173,-0.25443,0.12764,0.01786,-0.19698,0.01486,0.05646,0.08142,0.12781,0.24572,0.24729,0.39403,0.37593,0.34702,0.10033,-0.17612,-0.17730,0.07559,-0.14841,-0.28844,0.03596,-0.00619,-0.15401,0.05498,0.00076,0.16703,0.11813,0.23553,-0.07466,0.14572,-0.01065,0.21320,-0.02572,-0.33054,0.00274,0.10509,-0.38400,-0.32735,-0.20644,-0.15193,-0.01074,0.13639,-0.00164,-0.02259,0.14009,-0.07505,-0.35879,-0.00618,-0.05591,-0.11784,0.15304,-0.16324,-0.24491,-0.54436,-0.34124,-0.52678,-0.22108,0.11341,-0.01034,0.00032,0.22968,};
float weights_input_8[] = {-0.00114,0.01428,-0.00304,-0.07237,-0.27576,-0.26552,-0.36307,-0.23487,-0.15323,0.11289,0.13041,0.09321,-0.10005,-0.01271,-0.31691,-0.25421,-0.08599,-0.02865,-0.00117,0.04122,-0.02580,-0.06644,-0.00412,-0.26445,-0.05499,-0.17427,0.10594,0.05766,-0.10221,-0.32075,-0.11541,-0.06731,-0.40999,-0.31790,-0.09076,-0.02992,-0.00910,0.05635,0.04826,0.30232,-0.10687,-0.12228,-0.08563,-0.03675,-0.01762,0.05367,0.19416,-0.13251,-0.10448,-0.14110,-0.41631,-0.31180,-0.09538,-0.02497,0.06057,0.03752,0.06541,0.23944,-0.01637,0.05154,-0.14485,0.05403,0.13247,0.31090,0.35623,0.21203,0.02109,-0.11246,-0.33301,-0.15285,-0.03210,0.01589,-0.00290,0.03701,-0.02706,0.29889,-0.01743,0.21449,0.26635,0.04295,0.13964,0.14238,0.38607,0.25747,0.10446,-0.14605,-0.20061,-0.00298,-0.01406,0.03135,0.00007,-0.02834,0.01217,0.38170,0.16385,0.19027,0.31319,-0.20382,-0.14496,0.30064,0.18929,0.13575,0.14497,0.09869,-0.04118,0.03050,-0.04352,0.02936,-0.00077,-0.02446,-0.02179,0.18066,0.07941,0.19593,-0.24617,-0.13933,-0.08083,0.30142,0.01756,-0.08671,0.02567,0.24510,0.00583,0.03886,-0.04858,0.02976,-0.00189,-0.03853,-0.00616,0.15159,-0.00679,-0.03891,-0.22785,-0.34270,-0.01053,0.14135,-0.42995,-0.01895,0.19937,0.31696,0.01516,-0.02310,-0.05001,0.02305,0.03277,-0.00434,-0.02974,0.05767,-0.15377,-0.19454,-0.43849,-0.23896,-0.16277,-0.18585,-0.36179,0.09422,0.26459,0.36749,0.01044,-0.09412,-0.05707,0.02542,0.03325,-0.00335,-0.10229,-0.15615,-0.16096,-0.13789,-0.56338,-0.18152,-0.30647,-0.13068,-0.34552,-0.26119,0.07075,0.15387,-0.26376,-0.13705,-0.06187,0.02336,-0.00216,-0.05435,-0.21017,-0.20816,-0.25733,-0.24294,-0.35555,-0.04586,0.06923,0.20219,0.21694,-0.20168,-0.19018,-0.17888,-0.44764,-0.17633,-0.08282,0.01625,-0.02267,-0.12334,-0.25620,-0.27131,-0.11681,-0.34801,-0.08838,0.07161,0.27000,0.34831,0.14616,-0.29521,-0.11026,-0.31308,-0.47697,-0.24886,-0.10519,0.01997,-0.05402,-0.16498,-0.30334,-0.27287,-0.38791,-0.38267,-0.13123,-0.07193,0.34945,0.13872,-0.13238,-0.40708,-0.17926,-0.33142,-0.41908,-0.25400,-0.07055,0.05106,-0.06385,-0.10358,-0.20912,-0.12971,-0.21856,-0.18428,-0.07647,0.01312,0.02177,0.10480,-0.06342,-0.37699,-0.36695,-0.00421,-0.27126,-0.05489,0.09967,0.04734,-0.00082,-0.10490,-0.13819,0.02593,-0.08305,0.03238,0.19005,-0.03829,-0.05378,0.05436,-0.00703,-0.17659,-0.04348,0.16523,0.12446,0.20221,0.04453,0.11314,-0.00232,-0.04394,-0.06114,0.21378,0.20135,0.18638,0.06550,-0.06545,0.04667,0.26509,0.06571,-0.07385,0.29850,0.33507,0.09682,0.12010,-0.01739,0.02700,-0.00061,0.01042,0.08994,0.04573,0.15254,0.00284,0.07320,-0.13986,-0.21894,-0.07495,0.02059,-0.04419,0.31642,0.50136,0.26301,0.00385,0.01220,0.02597,0.00206,0.05761,0.16441,0.24191,0.31412,0.14368,0.03292,-0.21090,-0.43037,-0.02275,0.19038,0.36261,0.55944,0.67590,0.31631,0.08205,0.02041,0.00260,0.02812,};
float weights_input_9[] = {0.00715,0.10014,0.11288,-0.07356,0.10996,0.55532,0.61842,0.44598,-0.06276,-0.06831,-0.26629,0.19869,0.12293,0.28909,0.51305,0.22626,-0.06965,0.02637,0.00644,0.06554,0.05273,0.04850,0.11591,0.38279,0.22881,0.33928,0.25288,0.15568,-0.02820,-0.06202,0.12530,0.31227,0.43959,0.29840,0.00543,-0.05922,-0.01223,-0.03837,0.04027,0.00447,0.15100,0.21522,0.37328,0.03679,0.10382,0.08872,0.20056,0.18732,0.18661,0.18363,0.11642,0.06477,0.08490,-0.06102,-0.02966,-0.07140,-0.05914,-0.05508,0.04621,0.07432,0.43455,0.37650,0.14581,-0.00325,0.14175,-0.09233,0.19231,-0.11157,-0.16761,-0.19576,-0.04216,-0.04050,-0.00870,-0.07056,-0.06807,-0.15563,-0.00386,-0.04072,0.18121,-0.02649,-0.10314,-0.01212,-0.18451,-0.17757,-0.10839,-0.32509,-0.44283,-0.22851,-0.07634,-0.04578,-0.01496,-0.06262,-0.12043,-0.26573,-0.09317,-0.04864,-0.18524,-0.18734,-0.35571,0.07493,-0.22300,-0.38225,-0.24033,-0.43102,-0.31847,-0.14748,-0.10972,-0.04648,-0.01877,0.01584,-0.13380,-0.20636,-0.16287,-0.18191,-0.20833,-0.07905,0.11153,0.27569,0.20605,-0.28106,-0.22966,-0.39317,-0.22284,-0.14179,-0.10887,-0.04960,-0.02113,0.00989,-0.01328,-0.22288,-0.34324,-0.22553,-0.32352,-0.07193,0.11320,0.30568,0.45254,0.20402,-0.05457,-0.00626,-0.25446,-0.07243,-0.07775,-0.04190,-0.04378,-0.01871,0.01051,-0.13204,-0.13425,-0.07258,0.02252,0.11984,-0.08520,0.28863,0.15348,0.29138,-0.00898,0.04848,-0.26928,-0.04134,-0.08517,-0.04819,-0.04161,-0.01936,-0.00222,-0.15209,-0.30009,-0.30880,-0.32205,-0.02826,0.06267,0.27049,0.04295,0.03096,0.02632,-0.09110,0.05624,-0.05462,-0.08052,-0.04115,-0.04343,-0.02047,-0.01010,-0.37799,-0.69346,-0.96486,-0.93908,-0.68374,-0.16109,-0.20360,-0.27477,-0.13393,0.13623,0.12538,0.23178,0.13226,-0.06155,-0.03868,-0.01357,0.00852,-0.06401,-0.53885,-0.90779,-1.20537,-0.92766,-0.35060,-0.25362,-0.13509,-0.14366,0.05563,0.15660,0.20477,0.17943,0.31834,-0.03760,-0.04451,0.03822,0.05019,-0.06955,-0.15362,-0.41078,-0.57084,-0.40998,-0.55971,-0.45124,-0.08004,0.08573,0.23583,0.17583,0.14993,0.07796,0.27347,-0.10901,-0.06192,0.03640,0.08081,0.08627,0.13951,0.09043,-0.10879,0.05876,-0.36468,-0.19835,0.23570,0.04806,-0.00309,-0.04910,-0.01214,0.15364,0.17698,-0.13085,-0.05971,-0.01533,0.08844,0.13548,0.24730,0.19531,-0.10231,-0.29482,-0.13797,0.18990,0.32015,0.28009,0.19270,-0.04899,-0.01601,0.14248,-0.09457,-0.10390,-0.10861,-0.01404,0.05628,0.17012,0.25257,0.07229,-0.22041,-0.38052,-0.27365,-0.04027,0.28757,0.11373,-0.04809,-0.01881,0.08143,0.08777,-0.18032,0.00233,-0.03785,0.00275,-0.03981,0.11598,0.13038,0.24763,0.13194,0.24461,0.11591,0.03724,0.32115,-0.19788,-0.40479,0.07933,0.05775,-0.19077,-0.05598,0.02701,-0.12853,0.00213,-0.04101,-0.09816,-0.10963,-0.15940,0.25323,0.28314,0.42810,-0.18873,-0.10236,-0.38413,-0.24092,-0.30479,-0.30835,-0.20426,-0.02882,0.02127,-0.00265,0.08238,};
float weights_input_10[] = {0.01062,0.01403,-0.00822,-0.01942,0.02619,0.18319,0.09433,0.09230,-0.06072,0.11477,0.10983,0.08962,0.10382,0.28275,0.10352,-0.02837,0.01219,0.00189,0.00911,-0.00670,0.01417,0.02980,0.19504,0.02075,0.16049,0.01198,0.17053,0.10790,-0.00063,-0.19766,0.05712,0.27518,0.16979,-0.02670,-0.03691,-0.00088,-0.06414,-0.04397,0.01009,0.19345,0.01089,0.11121,0.03895,0.05244,0.25733,0.29780,0.19645,-0.11917,0.00039,0.14977,0.12014,-0.07007,-0.02045,-0.05230,-0.02626,0.00399,-0.01726,0.06835,0.05919,-0.02625,-0.05718,0.08112,0.33212,0.23095,0.14305,0.04378,-0.03147,0.13465,0.08052,-0.04243,0.00828,-0.01436,-0.06220,0.00312,-0.08911,0.09977,0.01496,0.06348,0.12500,0.02791,0.10115,0.00139,0.07434,0.12936,0.11141,0.03241,-0.03598,-0.01360,0.02550,-0.01871,-0.06779,-0.04053,-0.05913,0.22431,0.08399,0.03005,0.13871,-0.20020,-0.15800,0.11908,0.06781,0.17684,0.19067,0.10205,-0.00435,-0.03320,-0.01473,-0.01749,-0.06803,-0.05343,-0.05500,0.09433,-0.05572,-0.02191,-0.23631,-0.19310,-0.12950,0.07455,-0.01319,0.09617,0.07834,0.14483,0.00052,-0.07501,-0.02227,-0.02029,-0.06703,-0.06477,-0.05084,0.04231,-0.12763,-0.14725,-0.31562,-0.42916,-0.17661,-0.05456,-0.15218,0.06161,-0.00760,0.16148,0.01065,-0.06364,-0.01477,0.01160,-0.02242,-0.01644,-0.03315,0.01795,-0.23645,-0.16465,-0.38435,-0.29180,-0.28636,-0.11383,0.01601,0.12365,0.07867,0.18460,0.00276,-0.10162,-0.03458,-0.00013,-0.02127,-0.01629,-0.08361,-0.14012,-0.09606,-0.12660,-0.47230,-0.29772,-0.21546,0.05921,-0.13095,-0.21516,-0.04709,0.03299,-0.18745,-0.12940,-0.03228,0.01510,-0.02700,-0.03140,-0.13339,-0.17516,-0.11101,-0.16544,-0.25874,-0.13531,0.22507,0.28460,0.03825,-0.20763,-0.26719,-0.27276,-0.43484,-0.14341,-0.03198,0.00912,-0.06251,-0.10293,-0.16953,-0.18890,0.07151,-0.13923,-0.00887,0.01889,0.32797,0.35061,-0.00060,-0.38449,-0.33553,-0.43543,-0.40654,-0.23781,-0.05625,0.00495,-0.09792,-0.14597,-0.20758,-0.22705,-0.16107,-0.17042,0.11971,0.03326,0.49390,0.30209,-0.16087,-0.52107,-0.36100,-0.45784,-0.34566,-0.17711,-0.02204,0.02998,-0.10421,-0.10126,-0.17745,-0.17477,-0.11627,-0.01868,0.24909,0.18658,0.22113,0.22543,-0.17683,-0.45732,-0.47135,-0.23642,-0.25137,-0.04582,0.07303,0.01000,-0.06486,-0.10502,-0.13303,-0.14202,-0.02742,0.13517,0.36433,0.14489,0.03895,0.04944,-0.07473,-0.23572,-0.18029,-0.01958,0.02736,0.13585,-0.02893,-0.02072,-0.06580,-0.11992,-0.08539,-0.03099,0.18403,0.20067,0.13857,0.01707,0.05815,0.19460,-0.11831,-0.23607,0.15227,0.08889,0.05283,0.08643,-0.01219,-0.02097,0.00055,-0.05327,-0.00241,-0.03502,0.09620,-0.01429,0.08340,-0.04059,-0.15141,-0.05899,-0.08319,-0.04858,0.25840,0.32135,0.19710,0.00111,0.01281,-0.02588,0.00443,0.02190,0.07455,0.05091,0.01179,-0.03797,-0.03905,-0.24779,-0.28567,-0.02707,-0.04091,0.19290,0.37649,0.37377,0.17827,0.01571,0.01334,-0.00056,0.02995,};
float weights_input_11[] = {0.00075,0.00182,0.00227,-0.09422,-0.21707,-0.49312,-0.47123,-0.66194,-0.37230,-0.05951,0.29186,0.64196,0.13051,-0.36999,-0.24421,-0.23171,-0.06572,-0.00553,-0.00052,-0.03640,-0.03271,0.06815,-0.18764,-0.49455,-0.77911,-0.22618,-0.28757,-0.34888,-0.28699,-0.10060,0.01578,-0.14641,-0.16752,0.11745,-0.07412,-0.04303,-0.03955,-0.07125,0.00047,-0.00155,-0.25260,-0.32080,-0.30896,-0.32531,0.01634,-0.16487,-0.26167,-0.05966,-0.05964,-0.26913,-0.13270,0.12478,-0.10949,-0.11493,-0.03988,-0.04268,-0.05004,0.00613,-0.07216,-0.27747,-0.19713,-0.19396,0.09865,-0.05436,0.14843,0.08789,-0.03593,-0.21544,-0.07727,0.03233,-0.01719,-0.04874,-0.04002,-0.04412,-0.01710,0.04826,0.10274,-0.10112,-0.21895,-0.07243,0.22981,0.15430,0.19875,0.09306,0.19719,-0.15841,0.07915,-0.07120,-0.00704,-0.05829,-0.02883,-0.03736,0.08887,0.01331,0.14594,-0.12194,-0.11510,-0.20505,0.15133,0.33875,0.11308,-0.03414,-0.03505,-0.44323,-0.31636,-0.28644,-0.01117,-0.06902,-0.02466,-0.02585,0.10359,0.15688,0.16001,-0.00468,0.03608,-0.13509,-0.03657,0.16737,0.12435,-0.29695,-0.44860,-0.40468,-0.30147,-0.25903,0.02964,-0.07392,-0.02424,-0.01467,0.08288,0.19509,0.56335,0.39572,0.16487,0.02086,0.11884,0.15973,-0.13645,-0.12589,-0.12380,-0.24938,0.04665,-0.05777,-0.03932,-0.07208,-0.02486,-0.00864,0.17100,0.33123,0.63026,0.39874,0.09500,0.03990,0.02263,-0.07877,-0.06886,0.08008,0.10139,0.22041,0.20127,0.19952,-0.02821,-0.04172,-0.02772,-0.01400,0.17481,0.55527,0.40830,0.20928,0.15840,-0.02612,-0.05575,-0.31939,-0.05375,-0.24022,0.02590,0.21274,0.18530,0.29694,0.08398,-0.03801,-0.03805,-0.02170,0.15019,0.38646,0.53993,0.51823,0.44119,0.31248,-0.04595,-0.19775,-0.21540,-0.35303,-0.04179,0.00334,-0.02874,-0.08951,0.13150,-0.03901,-0.03717,-0.03385,0.11130,0.17964,0.47781,0.82653,0.56916,0.01218,-0.01229,-0.09086,-0.03569,-0.40745,-0.00862,-0.11797,-0.14645,-0.22780,0.11550,-0.03879,-0.06575,-0.06065,0.10230,-0.00607,0.15390,0.63403,0.33085,-0.10563,0.00473,0.10935,0.22447,-0.15205,0.02778,-0.03124,-0.11799,-0.14592,0.17023,0.00270,-0.06871,-0.07453,0.03176,-0.18518,-0.32488,0.31943,0.11987,-0.02765,0.10388,0.36080,0.10219,-0.13814,-0.01043,-0.02527,-0.16982,-0.07443,0.17544,0.06555,-0.04081,-0.07678,-0.01579,-0.26333,-0.56701,0.02357,0.09057,0.01454,0.04206,0.25083,-0.01419,-0.00347,-0.17716,-0.06544,-0.50829,0.08654,0.17732,0.01741,-0.03963,-0.11153,-0.12505,-0.37265,-0.50114,-0.19926,0.13231,0.01283,0.04684,0.22662,-0.06171,-0.09570,-0.01069,-0.26984,-0.16809,0.17423,0.20766,-0.03813,0.00106,-0.07913,-0.07687,-0.29192,-0.27831,-0.29030,0.01344,-0.14383,0.07032,0.11648,-0.02501,-0.00985,0.22233,0.11870,0.29313,0.28835,0.03259,-0.07623,0.00092,0.00038,-0.08172,-0.17123,-0.12840,-0.27490,-0.11067,-0.02964,0.25865,0.23525,0.49815,0.70608,0.34343,0.51591,0.38265,0.01309,0.03141,-0.00046,-0.15804,};
float weights_input_12[] = {0.00139,-0.00120,0.00029,0.15635,0.25217,0.32333,0.33758,0.34036,0.18272,0.13283,0.05168,-0.04446,-0.15959,-0.04879,0.09462,-0.02390,-0.03145,0.00210,0.00035,0.06073,0.01436,0.03564,0.18242,0.29457,0.35088,0.22537,0.10805,0.05969,-0.14145,-0.07409,0.01794,-0.04364,0.11700,-0.07157,-0.01190,-0.00533,0.01596,0.01379,0.07734,0.09179,0.14812,0.31690,0.23070,0.17056,0.08521,0.07686,-0.01596,-0.08328,0.01607,0.06454,0.15298,-0.04446,-0.08281,-0.00052,0.01929,-0.05239,0.09575,0.11568,0.18088,0.00986,-0.00062,-0.16983,-0.00224,-0.16517,-0.31856,0.01969,0.03719,0.15262,0.18164,-0.00221,-0.03342,0.06578,0.01977,-0.04900,-0.01400,0.19479,0.02312,-0.06834,0.00453,-0.06770,-0.25386,-0.20480,-0.29927,0.07697,0.03974,0.12349,0.14023,0.01477,0.00025,0.07092,0.01825,-0.05572,-0.00859,0.22532,0.03350,-0.15275,0.10569,-0.05234,-0.18127,-0.41302,-0.13697,0.24244,0.11336,0.13517,0.19884,0.07892,0.01089,0.07154,0.01271,-0.05662,0.03155,0.11249,-0.00898,0.01428,0.06406,-0.00964,-0.33019,-0.50110,-0.21102,0.16167,0.05567,0.23133,0.24303,0.10550,0.00419,0.08671,0.01251,-0.05545,0.00139,0.09294,0.05744,-0.01272,0.01546,-0.15378,-0.57605,-0.67966,-0.33248,0.00047,0.02783,0.21964,0.29274,0.15570,0.00664,0.06907,0.05908,-0.01120,-0.07113,-0.02212,-0.01999,0.13965,0.07754,-0.09556,-0.68901,-0.63250,-0.17761,0.10566,0.20125,0.28065,0.23366,0.11542,-0.00840,0.06638,0.06278,-0.00827,-0.07805,-0.15212,-0.03762,0.04770,0.10251,0.06042,-0.24825,-0.12274,0.00566,0.17489,0.19330,0.16260,0.08957,0.02168,-0.02082,0.08698,0.07564,0.00408,-0.07296,-0.23124,-0.33270,-0.09565,0.07396,0.43339,0.70008,0.57775,0.29182,0.11938,-0.10760,-0.16528,-0.22434,-0.04791,-0.01986,0.08528,0.02929,-0.04938,-0.04965,-0.21748,-0.30736,-0.29943,0.25304,0.47212,0.70696,0.53590,-0.09322,-0.07087,-0.23906,-0.35066,-0.28111,-0.09327,-0.04494,0.08635,-0.02830,-0.10853,-0.06349,-0.25041,-0.41014,-0.31636,0.13324,0.30034,0.44685,0.14660,-0.28484,-0.15868,-0.21598,-0.39353,-0.26838,-0.08688,-0.04348,0.09770,-0.02350,-0.12876,-0.15755,-0.22438,-0.37097,-0.11925,0.16757,0.21031,0.31918,0.03228,-0.16578,-0.10729,-0.20936,-0.19027,-0.15729,-0.10536,0.01451,0.06268,0.01732,-0.13423,-0.15003,-0.22753,-0.14957,0.05453,0.22489,0.24793,0.13340,-0.03544,-0.08597,-0.11419,-0.24107,-0.22352,-0.06239,-0.09899,-0.03626,0.01981,0.01324,-0.07519,-0.08259,-0.11637,0.04387,0.06357,0.06862,-0.05700,0.03519,-0.03080,-0.07322,-0.05618,-0.03213,-0.18763,-0.11475,-0.11532,-0.00962,0.06281,0.00116,0.03821,0.00090,-0.01850,0.05718,0.08758,-0.13534,-0.08455,-0.16601,-0.18602,-0.21776,-0.06157,-0.24777,-0.24716,-0.17416,-0.06072,-0.00302,0.05523,0.00150,0.03069,0.17700,0.10204,-0.09437,0.02002,-0.04068,-0.21687,-0.26241,-0.37724,-0.36630,-0.13714,-0.12379,-0.09209,-0.01668,0.01059,-0.00181,0.00104,0.18801,};
float weights_input_13[] = {-0.01249,-0.00967,-0.00078,0.00401,-0.11980,-0.03018,-0.09132,0.01001,0.08426,-0.13282,-0.23940,-0.28977,-0.26587,-0.15615,0.03042,0.06638,0.05851,-0.06189,-0.01065,0.02318,0.03651,-0.06226,-0.05158,0.04783,0.00583,-0.11457,-0.13318,-0.21886,-0.21210,-0.18840,0.08557,-0.06803,-0.15817,-0.10508,0.01475,-0.01517,0.03281,0.10071,0.00300,-0.02897,0.03789,0.22749,-0.34433,0.12935,-0.20174,-0.24270,-0.21337,-0.08183,-0.16354,-0.09649,-0.09655,-0.03884,0.00595,-0.00160,0.05788,0.06017,0.01490,-0.06821,-0.14504,0.03179,-0.19572,-0.02463,-0.13940,-0.19334,-0.09473,-0.24089,-0.28618,-0.25227,-0.02369,-0.06398,0.02872,-0.05810,0.03304,0.06003,-0.05519,-0.07259,-0.03066,-0.10800,0.15803,0.22163,0.13564,-0.00540,-0.35700,-0.37034,-0.41637,-0.28275,-0.07748,-0.04366,-0.06294,-0.04580,0.06287,0.03383,-0.05110,0.03745,-0.18157,0.04748,0.13182,0.14035,-0.02522,-0.29269,-0.50857,-0.37924,-0.30896,-0.21863,-0.15832,-0.14978,-0.26285,-0.04844,0.05674,0.03422,-0.13167,-0.08175,-0.08116,-0.05227,-0.04296,0.03879,0.35910,0.31647,0.00638,-0.13967,-0.29273,-0.19478,-0.16600,-0.17125,-0.22313,-0.05139,0.05502,0.05852,-0.09277,-0.20894,-0.19231,-0.21606,-0.18508,0.19703,0.63652,0.42512,0.15585,0.13856,0.34357,0.03377,-0.25026,-0.36707,-0.24388,-0.09105,0.05497,0.00847,-0.10532,-0.22504,-0.29073,-0.35630,0.04625,0.47067,0.49494,0.47045,0.32902,0.29646,0.35012,-0.01892,-0.25735,-0.24582,-0.22452,-0.01109,0.05486,0.00932,-0.11301,-0.36712,-0.17394,-0.26596,0.09262,0.45742,0.24128,0.08528,0.15141,0.37744,0.34894,0.03489,-0.29541,-0.04877,-0.12311,-0.04858,0.06727,0.01830,-0.10482,-0.22559,-0.17180,-0.31399,-0.09201,0.09601,0.03670,0.10596,0.26586,0.48473,0.37934,0.06982,0.06348,0.17783,-0.00097,-0.04274,0.06732,0.04744,-0.14561,-0.24980,-0.24112,-0.22893,-0.08299,-0.19945,-0.01490,-0.01930,0.03835,0.22348,0.32585,0.06571,0.24539,0.25703,0.02361,-0.03952,0.07858,0.00514,-0.12962,-0.24186,-0.18509,-0.19573,-0.25102,-0.00474,-0.02801,-0.23345,-0.46646,-0.11965,0.13487,-0.05220,0.14131,0.20453,-0.05695,-0.00347,0.06719,-0.00848,-0.05903,-0.02118,0.08451,-0.08090,-0.10383,0.06962,-0.19909,-0.54620,-0.52884,-0.28097,0.06365,0.07093,0.29178,0.28451,0.08113,0.01313,0.00240,0.00730,0.04727,0.26768,0.33358,0.16859,0.22526,0.10932,-0.05613,-0.36005,-0.40524,-0.14743,0.27901,0.19982,0.50423,0.23634,0.18063,0.02802,0.03784,0.09501,0.13690,0.25486,0.36989,0.15444,0.06135,0.18572,0.18310,-0.07627,-0.20895,-0.00768,0.02506,0.48370,0.39575,0.16273,0.04681,0.01988,-0.00080,0.13860,0.21424,0.42317,0.28036,0.31617,-0.03266,0.25938,0.31814,0.04196,0.07610,0.04492,0.07302,0.10440,0.00142,0.13970,-0.03102,0.07986,-0.00119,0.04277,0.19453,0.35072,0.42289,0.16179,0.19445,0.23403,0.22251,0.33513,-0.04415,-0.11019,-0.08238,-0.11464,-0.11708,0.04213,-0.03030,0.00303,0.37335,};
float weights_input_14[] = {0.01625,0.01664,0.01268,0.09109,0.32678,0.38941,0.37409,0.16319,-0.04183,-0.06942,-0.10361,-0.01921,0.16817,0.27566,0.28193,0.19529,0.09935,0.03607,0.01641,-0.00441,0.06079,0.12818,0.24975,0.21601,0.16779,0.12373,0.04268,-0.00754,-0.03911,-0.01759,0.14371,0.30114,0.37228,0.23777,0.05399,0.02993,-0.02313,-0.04109,0.03155,0.09092,0.12743,0.08368,0.13447,0.09230,0.26874,0.19202,-0.02034,-0.08609,0.05437,0.20680,0.31949,0.19803,0.06430,-0.02972,-0.03587,-0.00116,-0.00908,0.04807,0.04358,-0.01385,0.11175,0.11028,0.19089,0.08908,-0.09606,-0.10321,0.03420,0.15731,0.19139,0.11335,0.04373,-0.01831,-0.02405,-0.00182,0.00203,0.02182,0.01435,-0.07721,-0.08788,-0.07230,-0.09581,-0.17223,-0.20135,-0.01638,0.07369,0.06817,0.01194,0.02399,0.02585,-0.03873,-0.03963,-0.00522,-0.00415,-0.00866,0.02337,-0.14563,-0.16334,-0.14258,-0.11565,-0.15649,-0.09439,0.03090,0.03321,-0.05631,-0.06909,-0.01353,0.00157,-0.03652,-0.03764,-0.00825,0.00436,0.01953,-0.03073,-0.12733,-0.12717,-0.13989,-0.10570,-0.16269,-0.03784,0.10380,0.01319,-0.14490,-0.12739,-0.04054,-0.00047,-0.03747,-0.03803,-0.00861,-0.00728,-0.00632,-0.05715,-0.11253,-0.19434,-0.17803,-0.08857,-0.09347,0.20276,0.02199,-0.08249,-0.15997,-0.10309,0.00623,0.01728,-0.01999,-0.03588,-0.00359,0.00184,0.01540,-0.06184,-0.11369,-0.19241,-0.17770,-0.16658,-0.03334,0.12427,-0.07786,-0.14026,-0.14647,-0.08671,0.00893,0.00260,-0.03544,-0.03551,-0.00354,-0.00255,-0.00651,-0.08629,-0.13608,-0.17401,-0.13598,0.06908,0.11320,-0.07055,-0.13469,-0.11474,-0.11699,-0.02687,0.01376,0.01942,-0.01181,-0.03757,-0.00436,-0.00815,-0.03001,-0.07407,-0.10782,-0.11254,-0.06845,0.22430,0.03424,-0.22826,-0.16265,-0.12442,-0.10212,-0.02623,0.01010,0.04411,0.00236,-0.03965,-0.01080,-0.01747,-0.04296,-0.05994,-0.08406,-0.08986,0.07937,0.16679,0.04634,-0.11763,-0.14656,-0.18240,-0.11734,-0.04651,-0.01717,0.02417,-0.01321,-0.05826,-0.03213,-0.03191,-0.05729,-0.10796,-0.11828,-0.04367,-0.04095,0.03419,0.07120,-0.08102,-0.20339,-0.20822,-0.18726,-0.10242,-0.02603,0.01709,-0.01240,-0.05804,-0.02480,-0.04079,-0.06813,-0.13912,-0.10803,0.02231,0.01549,0.11848,0.09288,-0.11982,-0.21839,-0.22295,-0.20061,-0.11401,-0.06168,-0.02493,-0.01525,-0.03965,-0.02111,-0.03883,-0.09822,-0.12505,-0.10367,-0.08404,0.14550,0.15791,0.08873,-0.09942,-0.17526,-0.18765,-0.13162,-0.13808,-0.07020,-0.04546,-0.07924,-0.03845,-0.05987,-0.04985,-0.13109,-0.18569,-0.16605,-0.09712,0.07462,0.04349,0.01594,-0.24287,-0.27180,-0.23520,-0.19715,-0.12859,-0.04653,-0.00233,-0.03894,-0.00137,-0.05407,-0.06470,-0.11135,-0.16627,-0.14429,-0.09581,0.01322,-0.07488,-0.14025,-0.30811,-0.27943,-0.16914,-0.11808,-0.09878,-0.01936,-0.00012,-0.03808,0.00105,-0.01374,-0.05847,-0.13353,-0.25272,-0.21952,-0.15969,-0.14765,-0.14925,-0.24687,-0.38561,-0.33501,-0.23306,-0.17197,-0.13402,-0.06469,-0.00568,-0.00047,0.07040,};
float weights_input_15[] = {0.00362,0.05482,0.05140,-0.02086,0.11195,0.21915,0.25703,0.10134,-0.09204,0.13938,0.11089,0.12818,0.07429,-0.01401,-0.17495,-0.34623,-0.01160,-0.00210,0.00489,0.04951,0.13056,0.06333,0.30413,0.23003,0.21651,-0.13691,0.16691,0.13622,0.01342,-0.16531,-0.06620,0.34627,0.04877,-0.28813,-0.03218,-0.01757,-0.00319,0.03163,0.03897,0.26355,0.14227,0.36645,0.21389,0.09554,-0.03628,0.02957,0.24041,-0.01151,0.16425,0.24886,-0.12817,-0.06054,-0.02893,-0.05528,0.01142,0.00774,-0.04423,0.07149,0.05162,0.08273,0.00035,0.15454,0.09967,0.18264,0.51355,0.37607,0.33365,0.07535,0.00434,-0.01370,-0.02051,-0.02089,-0.00538,0.00754,-0.03858,0.02672,-0.21567,-0.07555,0.12071,-0.10862,0.14147,0.18685,0.45492,0.58161,0.27190,0.09010,0.08974,-0.02135,-0.03063,-0.02746,-0.01050,-0.01951,-0.11805,-0.07985,-0.21351,-0.24218,-0.19720,-0.24515,-0.15592,0.35880,0.45257,0.36951,0.38537,0.34883,0.08483,-0.04149,-0.05749,-0.02673,-0.01642,0.02355,-0.15344,-0.12588,-0.34795,-0.54703,-0.56415,-0.38364,-0.07963,0.14143,0.03008,0.05460,0.26010,0.30364,0.02833,-0.06282,-0.06902,-0.03435,-0.01752,0.01362,-0.02238,-0.18762,-0.40437,-0.47878,-0.46133,-0.61854,-0.26622,-0.00097,-0.31840,0.02495,0.05001,0.25495,-0.11789,-0.06308,-0.06451,-0.03002,-0.02181,-0.00026,0.00995,-0.02626,-0.40041,-0.43528,-0.43511,-0.01938,0.15353,0.18288,0.09462,-0.20314,0.29972,0.15956,-0.38371,-0.18856,-0.07746,-0.03558,-0.01659,-0.00003,-0.01542,-0.07055,-0.22925,-0.25822,-0.76362,-0.06620,0.17243,0.45191,0.00580,-0.21316,-0.18331,-0.15074,-0.36390,-0.25321,-0.07283,-0.03637,-0.09478,-0.07572,-0.14557,-0.09903,-0.01533,-0.35121,-0.52862,-0.32911,-0.22066,-0.03967,-0.26746,-0.12979,-0.00041,-0.15823,-0.33983,-0.17682,-0.13819,-0.03750,-0.07877,-0.08753,-0.18848,-0.18101,0.04478,-0.25204,-0.21788,-0.13454,0.00035,-0.03113,-0.15202,-0.25223,0.06168,-0.12916,-0.37304,-0.05320,-0.06125,-0.04236,-0.10150,-0.12505,-0.18996,-0.03217,-0.08561,-0.14460,-0.07211,-0.12202,0.16433,-0.02299,-0.27315,-0.36139,-0.07451,-0.25962,-0.39908,-0.07577,-0.03479,-0.01153,-0.10162,-0.10534,-0.06140,0.07708,0.10337,-0.00460,0.01588,0.06737,-0.05199,-0.00182,-0.26543,-0.49405,-0.23173,-0.28796,-0.28548,-0.00077,0.01357,0.00338,-0.00948,-0.07618,0.09443,0.27205,0.25308,0.33518,0.35046,0.12396,-0.14166,-0.15021,-0.12782,-0.27246,0.00173,-0.07847,0.06972,0.06952,0.01173,-0.01134,-0.00108,0.00676,0.12184,0.36016,0.26241,0.29988,0.24227,0.22490,-0.01702,0.33543,-0.11056,-0.01075,0.21727,0.12324,-0.08614,0.15110,0.07494,-0.01319,0.00212,0.05255,0.21308,0.38556,0.24200,0.06847,0.03971,-0.04492,-0.15463,0.05575,0.18466,-0.14715,0.26643,0.19401,0.20889,0.16879,0.00861,-0.02683,0.00341,0.00547,0.15407,0.09249,0.00441,0.16972,0.13381,-0.00564,-0.32189,0.03266,-0.10877,-0.06326,0.24590,0.38954,0.23196,0.17561,0.00739,-0.00008,0.15530,};
float weights_hidden_0[] = {1.99226,3.77367,-0.96843,-0.80960,-1.04093,-1.97983,2.65429,1.90044,-0.74979,-1.21648,-0.17858,0.81749,-0.86534,-3.11199,-0.14786,-0.69282,0.96024,};
float weights_hidden_1[] = {-1.22762,0.15345,1.51469,-0.82702,1.86425,-1.15444,-1.39525,-2.53639,3.24815,1.52220,2.05797,1.22533,-1.50072,-0.97883,0.18385,1.93049,-0.22245,};
float weights_hidden_2[] = {-0.90753,-0.13221,-1.14587,-1.69255,-1.74650,-0.98469,1.02442,0.60788,2.97383,-1.84461,2.54890,-0.49973,2.68836,0.61848,-0.78727,1.94414,0.28366,};
float weights_hidden_3[] = {-1.90918,-1.97320,-0.15575,-2.46157,-1.41593,0.59558,-0.46785,2.44421,-1.35235,2.53033,-1.72359,-0.79470,-1.69503,2.44736,-0.96975,2.84620,-0.90666,};
float weights_hidden_4[] = {2.25035,-1.73600,2.44982,-0.96710,3.00050,0.56801,0.34369,-1.71646,-1.34868,-1.30473,-1.21806,2.29566,-0.09930,-1.75882,-0.38986,-1.56868,-0.64474,};
float weights_hidden_5[] = {0.75469,1.29494,-0.61825,1.43700,-0.18344,-0.52425,-2.97034,-1.65697,-0.52240,4.51640,-0.37510,-2.44131,-0.64487,1.82470,-0.01604,-1.51731,-0.89478,};
float weights_hidden_6[] = {1.53685,1.32586,-1.27929,2.51858,-1.31012,-0.90574,-2.43291,-2.72448,-0.76285,-2.72600,-0.95097,4.11170,-0.86760,1.57349,-0.19593,-1.01938,0.12489,};
float weights_hidden_7[] = {-1.09558,-0.78796,0.59387,-1.38183,1.41943,2.09990,-0.15625,0.74856,-0.94386,1.35324,1.40440,-1.30008,2.31445,-1.89829,3.10864,0.77170,1.35648,};
float weights_hidden_8[] = {2.01459,-3.88016,-0.17811,2.25267,-0.11859,-0.87432,1.60314,2.09272,-0.64989,-2.31014,-0.35561,-2.00903,-1.26264,1.81469,-0.20253,-0.76995,-0.21025,};
float weights_hidden_9[] = {-3.40566,1.95470,-0.14098,1.91132,-0.41762,3.15817,1.73230,0.85299,-0.01361,-0.45596,-1.29543,-1.49917,2.00406,-0.59739,-0.60886,-1.90194,0.10350,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_15[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};

/*
 * Scanner class
 * */


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


