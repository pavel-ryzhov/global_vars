#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iterator>
#include <cstdlib>

using namespace std;
const double PI = 4 * atan(1.0);

class ANN {
public:
  ANN(size_t nInput, size_t nHidden, size_t nOutput) 
    : wInputHidden(nInput + 1, vector<double>(nHidden)),
      wHiddenOutput(nHidden + 1, vector<double>(nOutput)) {
    int pos = 0;
		for (size_t i=0; i <= nInput; ++i) {
			for (size_t j=0; j < nHidden; ++j) {
				wInputHidden[i][j] = weights[pos++];					
			}
		}		
		for (size_t i=0; i <= nHidden; ++i) {		
			for (size_t j=0; j < nOutput; ++j) {
				wHiddenOutput[i][j] = weights[pos++];						
			}
		}	
  }

  size_t Classify(vector<double> inputNeurons) {
    size_t nInput = inputNeurons.size();
    inputNeurons.push_back(-1);
    size_t nHidden = wInputHidden[0].size();
    size_t nOutput = wHiddenOutput[0].size();
    vector<double> hiddenNeurons(nHidden + 1);
    hiddenNeurons[nHidden] = -1;

    for (size_t j=0; j < nHidden; ++j) {			
	  	for (size_t i=0; i <= nInput; ++i) { 
        hiddenNeurons[j] += inputNeurons[i] * wInputHidden[i][j];
      }
      hiddenNeurons[j] = ActivationFunction(hiddenNeurons[j]);			
	  }
	  
    vector<double> outputNeurons(nOutput);
	  for (size_t k=0; k < nOutput; ++k) {
	  	for (size_t j=0; j <= nHidden; ++j) {
        outputNeurons[k] += hiddenNeurons[j] * wHiddenOutput[j][k];
      }
	  	outputNeurons[k] = ActivationFunction(outputNeurons[k]);
	  }

    return max_element(outputNeurons.begin(), outputNeurons.end()) - outputNeurons.begin();
  }

private:
  vector<vector<double> > wInputHidden, wHiddenOutput;
  static double weights[];

  static double ActivationFunction(double x) {
    return 1. / (1. + exp(-x));
  }
};

double ANN::weights[] = {0.0203041,-0.622259,0.188953,-0.292882,0.225233,0.300028,0.232326,0.215968,-0.133334,-0.358634,0.0509113,-0.00997375,-0.168379,0.735839,-0.495506,0.336081,-0.490513,0.224432,-0.336131,-0.156667,-0.192752,0.368377,-0.0619716,-0.17174,-0.282751,-0.166789,0.316719,-0.325792,0.756817,0.616842,0.162772,-1.43687,0.0833037,-0.100564,-0.589434,0.226352,0.0611957,0.146376,0.140947,-1.06153,0.083751,-0.739747,0.0135059,1.30243,-0.131527,0.103603,-0.624061,-0.213241,-0.25595,-0.219762,0.411146,0.601768,-0.0645513,0.106483,-0.8455,0.0808605,0.302891,-0.163504,0.0946391,1.38565,0.164753,0.059983,-0.32534,0.132863,-0.708868,-0.135701,-0.297743,-0.305475,0.232603,-0.913173,0.126338,0.122977,0.73983,0.169566,0.314499,-0.940367,0.221285,-0.194836,0.571162,0.724662,0.828122,-0.452624,-0.110305,-0.0689061,-0.648843,0.70144,-0.234956,0.0117163,-0.736955,0.388089,0.124232,-0.42519,-0.20312,-0.186899,0.840016,-0.108057,0.0215828,-0.118929,-0.253957,0.502609,0.42003,-0.0875321,-0.232392,-0.252351,-0.357263,0.736322,-0.640345,0.0683471,-0.953743,-0.382022,-0.152077,0.834285,0.1158,-0.210907,0.144372,-0.318184,0.122307,0.423014,0.371249,0.352712,-0.511172,-0.591209,0.643346,-0.0853638,0.885003,-0.283717,0.376073,0.115087,-0.594362,0.614355,0.489001,-0.293707,-0.617521,-0.0101488,-0.752032,1.60461,-1.15174,-0.662501,-1.39723,-0.753173,-0.42082,1.50319,-0.100196,0.389843,0.265584,-0.383333,1.00138,0.929253,1.53945,0.560962,0.0770617,-0.627727,-0.113239,0.0157785,-0.18672,0.72962,0.169521,0.465835,0.296741,-0.816366,0.152687,0.201106,-0.156317,1.1606,-0.430093,0.136058,-0.632865,0.234681,0.103851,0.250836,0.129086,0.501271,-0.213136,-0.45789,-0.431624,0.0242672,-0.0873173,-0.0694033,0.331007,0.596093,0.0192453,-0.582352,-0.470822,-0.33793,-0.468458,0.0197963,-0.270748,0.357136,0.291296,-1.54058,0.116751,0.0993433,0.0858571,0.828957,0.157436,-0.535397,-0.184939,0.376951,0.0475467,0.496661,0.240988,-0.181537,0.225007,0.0718523,-0.81058,-0.425891,-0.117743,-0.0355405,-0.0373306,1.16127,-0.241489,-0.545277,0.744924,0.197735,-0.242704,0.435173,0.370343,-0.181029,-0.281371,0.0755005,0.209321,-0.0134627,-0.0292199,0.709501,0.0634697,0.447586,0.0849835,0.212702,0.0773858,0.308292,0.12171,0.129786,-0.239795,-0.214515,-0.274114,0.437499,0.00952806,-0.781014,0.644196,0.450855,-0.320098,-0.0181781,0.380249,0.406317,-0.247853,0.201123,0.239376,0.0972627,-0.0878989,-0.00726781,0.240652,-0.164119,0.278389,-0.194211,-0.115388,0.0606154,0.234557,0.68729,0.151944,0.353417,0.135413,-0.0790434,-0.346716,0.00865871,-0.298308,0.00548715,0.104122,-0.301157,-0.350023,0.244618,-0.170375,-0.151302,-0.73118,-0.559373,0.92424,0.386445,-0.204908,0.730274,0.0120967,0.191315,0.0370787,0.0145711,-1.29051,0.307052,-1.17993,1.02859,-1.21493,0.226885,-1.46796,-0.645989,-0.65186,1.76677,0.0127816,-0.734756,0.299595,-0.46896,-0.0430412,0.429922,1.46402,0.205067,0.433853,0.386126,-0.37589,0.0208156,-0.420056,0.27415,-0.00417259,-0.0255666,-0.0562061,-0.415759,-0.304437,0.316644,0.541943,0.234101,0.406242,-0.607964,-0.0185097,0.420658,1.09647,0.814577,0.484897,-0.819971,-0.0231649,0.443102,-0.3478,0.331763,-0.0470726,0.0121655,-0.706828,0.538083,-0.617436,-0.0292156,0.306411,0.0572112,-0.277136,-0.438274,-0.186777,-0.318542,-0.123844,-0.128785,-0.299404,-0.439958,0.0734247,-0.285487,-0.118526,0.200599,-0.367303,-1.30019,0.294331,-0.138972,-0.0956127,-0.425193,0.220028,0.734676,-0.300753,0.150997,0.627329,0.474542,-0.114827,-0.317707,-0.598772,-0.634011,1.32784,0.197803,-0.303394,0.307553,0.463306,0.801124,0.0998739,0.667809,0.106205,-0.414487,-0.497977,-0.914915,-0.373693,0.629266,-0.25193,0.258406,0.201354,-0.119263,-0.857049,-0.451271,0.126537,0.945893,0.427011,-0.529847,0.810329,-0.347813,0.800839,-0.50924,-0.386925,-0.285123,-0.523834,-0.602266,-0.0660744,1.00476,-0.148135,1.36528,0.765154,-0.0902031,-0.565306,0.691208,-0.23384,0.189615,-0.524168,-0.88893,0.715864,1.97593,1.10911,0.552746,-0.11592,-1.05534,-0.27247,-0.528612,-0.000286709,-0.203353,-0.76277,-1.29622,0.179649,-0.0586178,-0.26751,0.305729,-0.722744,-0.293838,-0.487337,0.601743,-0.642096,0.778824,0.646422,-0.215066,-0.684966,0.310602,0.0880771,0.107136,-0.563444,-0.735722,0.689778,0.584389,0.91058,0.499236,-0.114181,-0.507191,-0.164006,-0.387285,-0.0985211,0.41221,-0.531672,-0.904518,-0.275465,-0.737923,0.198049,0.222863,0.198539,0.108189,-0.966323,0.3089,0.154037,-0.237745,-0.00188604,-0.0208199,-0.509527,0.0578587,0.166953,0.751351,0.111868,0.545793,-0.0708994,-0.652124,0.263458,0.380868,0.331415,-0.283353,-0.712219,-0.46222,0.110497,0.934752,0.0549641,0.0126618,-0.420063,-0.344607,0.505161,0.988343,0.388087,0.141182,0.0703544,-1.08598,0.438635,-1.52213,-0.759114,-0.242612,0.324158,-0.423991,0.369138,-0.294766,0.519023,0.589455,-0.507723,-1.77629,-0.347221,0.0100297,0.598027,0.370617,0.14381,-0.121935,0.0341869,0.244353,-0.294039,1.36425,-0.506315,0.379544,-0.0967609,0.273163,0.127273,-0.354829,0.204644,-0.539794,0.325775,-0.288948,-0.51455,-0.0711974,0.293577,0.321028,0.10908,-1.52121,0.572327,-0.526707,-0.068381,-0.0685212,0.0582675,0.170739,-0.243954,-0.967467,0.424977,1.00915,0.0304391,-1.21446,-0.0270372,0.185954,0.0908516,0.0906634,-0.193456,-0.245206,-0.941205,-0.422172,-0.0203465,0.0881497,0.0341781,0.621231,0.734734,-0.431995,0.0111261,0.474509,-0.0903929,-0.1842,-0.264558,-0.370931,0.874378,0.719624,-0.0936248,0.222061,0.627756,-0.240429,-0.0855467,-0.546893,-0.285241,-0.203885,-0.400736,-0.317319,0.369086,0.42828,-0.33769,-0.145596,-0.446276,0.057599,-2.33358,0.713754,-0.584273,0.699506,1.03604,-0.701807,-1.03887,0.18212,1.02312,0.281667,0.0880807,-1.69133,1.97507,0.665402,1.50511,1.43566,1.0843,-2.32527,-0.357123,0.134339,-0.716254,0.906746,-0.139972,-1.27606,-0.872298,-0.216637,-0.5727,0.336315,2.07987,1.4944,-0.931201,0.648,0.852596,-1.12223,1.05729,1.61021,0.0225044,-1.34304,-1.10319,0.562031,-0.157181,2.72157,0.312497,-2.21078,-2.08054,-1.03895,-0.277873,1.3062,-1.02643,-0.186582,1.41996,1.53741,0.711878,0.57698,-0.0475138,-1.96877,0.397091,1.29278,0.451034,0.188877,0.579706,-1.99672,0.994614,-2.52355,-1.80869,0.54673,0.234928,-0.298544,0.576237,-0.0185211,0.6885,1.06991,-0.0785128,-1.87055,-0.34477,-0.409681,0.636412,0.0414162,-1.12064,-0.199793,0.0965627,0.0732166,0.0628399,0.573851,-0.602673,0.196126,1.06471,1.12018,-0.285646,-0.329193,1.6327,-0.0344459,0.607482,0.35608,-0.99683,0.271457,0.0675863,1.22693,0.103137,-0.112486,0.320189,-0.276337,-1.29003,0.584636,1.38385,0.364864,-0.811535,-0.00612759,0.279824,-0.0268021,0.438289,-0.653678,-0.498948,-0.0864827,-0.120219,0.231276,-0.216739,-0.788286,-0.0928523,0.430873,0.619634,-0.0983021,0.0333831,-0.0116346,-0.325877,0.0824284,0.360189,0.133908,0.114003,0.491425,-0.106247,0.394786,-0.804857,-0.0243261,-0.110275,-0.328605,0.517082,0.961304,-0.100105,0.313477,-0.534301,0.502189,0.849928,0.168931,0.165414,-0.243246,-0.818574,-0.784913,1.4044,0.499649,-2.08125,0.472056,0.289175,-0.332182,0.42452,0.122004,-1.03464,-0.826459,0.518648,0.680073,-0.0532525,0.506197,1.74412,-0.490974,0.296508,0.881069,0.996833,-1.65698,-1.64597,0.571035,-0.175984,1.41111,0.857944,-0.977387,0.0117981,-0.355881,0.135938,2.18122,-0.815649,0.428466,0.776637,-0.466387,0.238284,-1.4339,1.29304,1.14825,0.345833,1.06802,-0.90978,-1.02298,0.568259,0.598946,1.31938,-0.888437,-2.68557,-0.781995,0.651151,1.25965,0.190002,-2.48331,2.07816,0.886682,-1.63204,1.07538,-0.0692482,-2.04654,0.557084,1.9502,-1.41218,-0.471512,1.16443,-1.46265,0.015155,-1.41664,-1.67503,0.971865,-0.0750076,1.61913,0.839468,0.480827,0.0245396,0.234218,0.15582,0.204236,0.545476,-0.0959659,0.69166,0.172225,-1.19098,-1.8568,0.161069,0.300079,-0.958103,-0.385893,-0.0655519,0.197297,0.823734,1.0107,-0.630901,-0.203807,0.738385,-0.910618,0.911865,-0.781098,-1.93123,0.377167,-0.467488,0.653281,0.139486,0.656527,0.408923,0.608549,0.181199,-0.518116,1.45999,0.296115,0.553144,-0.604794,-1.00261,-0.630096,-0.212643,-0.579646,-0.583557,-0.816783,0.0848886,0.620341,0.717167,-0.718445,-0.177855,0.230743,0.255093,-0.0437293,-0.0364953,0.0391795,-0.282451,-0.123842,0.411861,-0.531307,-0.000499663,0.0739807,0.775189,0.156104,-0.579663,0.286713,0.138958,-0.782268,-0.0240118,0.794078,0.84089,0.33758,-0.161426,-0.4061,0.0550072,0.141119,-0.881503,0.938567,0.918482,-0.294654,1.02773,-0.102989,-0.114487,0.679215,0.665668,-0.36104,-1.23878,-0.136064,-0.74887,-1.14271,-0.418142,0.546292,0.964177,0.631243,-0.46024,-0.322871,0.0396313,-0.33381,-0.640478,-0.391451,0.0635341,0.134301,-0.0779054,-0.566078,-0.141547,0.118665,-0.174344,0.777785,0.961826,2.50152,-1.84006,-0.146286,1.08364,-0.676286,0.0249989,-0.980053,0.704317,0.318875,0.614661,1.73048,-0.19928,-1.1777,0.709486,-1.00182,0.508064,-0.305635,-1.41502,0.239587,0.702708,0.697287,0.728005,-2.38756,1.3427,0.565839,-2.30983,1.28917,-0.0858736,-0.944893,-0.0592066,0.127647,-0.399484,-0.678168,-0.04321,-0.0508828,-0.130916,0.00668019,1.24393,0.45125,0.438705,0.258592,-0.133812,-0.263117,0.0347528,-0.430296,0.626767,0.588497,-0.68824,0.0162499,-0.204736,-0.137704,-0.0846014,-1.10119,0.137881,-0.146041,-0.856299,-0.278694,0.594617,-0.00346769,-0.370588,-0.479085,0.0226043,-0.20289,0.0120005,-0.614507,0.598787,-0.145508,0.0122446,0.805296,0.795282,0.418063,0.318279,-0.200597,0.111197,0.884124,1.70589,0.566124,-0.0928241,-0.143587,0.999844,-0.396625,-0.988353,-0.142809,0.094415,-0.504963,0.453794,-1.48219,1.24393,0.0792117,0.453709,0.35344,0.524346,-0.284975,0.210587,-0.328021,0.26306,-0.613593,-0.693678,0.243565,0.132042,-0.681167,-0.577996,-1.01687,0.271652,0.348675,-0.28544,-0.0194069,-0.563587,-0.560141,-0.533194,-0.113609,0.0284742,0.0635153,0.256804,-1.41659,-0.24427,0.70992,0.0789892,0.918553,2.04191,-0.610808,0.686974,-0.192798,0.20802,1.08522,0.756462,0.16626,-0.601887,-0.491783,-0.670364,-1.15986,-0.676357,0.431582,1.81603,-0.259981,-0.748477,0.197455,0.0642923,-0.376535,-1.06181,0.130179,1.47152,0.0274934,-0.109285,-1.23401,-0.862572,0.333725,-0.685632,1.9265,0.520383,0.075174,0.0957304,-0.0734832,-0.219195,-0.131146,0.0109747,-0.22705,0.0577002,-1.29645,0.147467,-0.224163,0.0982882,0.139464,0.339738,-0.725504,-0.508076,-0.887359,-0.258985,0.326189,-0.233747,0.21959,0.265656,0.146876,-0.630806,-0.189186,-0.160773,0.933031,-0.681352,0.414248,-1.42805,-0.311385,-0.0463424,0.610207,-0.897608,0.202205,-0.910146,0.340649,1.8562,-0.513939,0.433823,0.0661304,0.121001,-0.00515694,-0.873545,-0.850797,-0.330306,-0.79499,-0.00751663,0.410164,0.288606,0.0586789,0.201297,0.0157926,-0.215233,1.89943,0.370705,0.524198,-0.598798,-1.82502,-0.927344,-1.27118,0.794248,-0.245482,-1.04203,0.279092,0.0354028,0.699821,0.617613,-0.0875961,0.321769,-0.236719,-0.223393,0.420003,-0.866186,0.532422,0.770539,0.158735,-0.343182,0.0763914,-0.202216,-0.216663,-0.625965,0.297824,-0.318315,0.0700188,0.719308,-1.10348,1.45238,-0.360663,0.196968,0.226316,0.263671,-0.169488,-0.359547,0.211987,0.196864,-0.253863,0.0674924,-0.16006,-0.305104,-0.265111,-0.0957335,-0.413332,0.283406,-0.444469,0.355982,0.301406,0.167368,-0.025778,-0.107112,-0.515229,0.00341676,0.229315,-0.142287,-0.598012,-0.104221,-0.00147558,-0.208382,0.140815,0.734918,-0.220044,-0.625055,0.415076,0.0603074,0.492335,-0.281007,-0.00205053,0.11746,-0.896734,-0.0811466,-0.203308,-0.0237285,-0.11324,0.662851,-0.800165,-0.457049,-0.564754,-0.0992913,-0.252986,-0.110059,0.344358,0.90421,0.267893,-0.188733,0.403108,-0.344789,0.770937,-1.09085,0.331585,0.198528,-0.828475,0.25726,0.645501,-0.632861,0.0849778,-0.186819,0.197632,0.778114,-1.10926,0.562788,-0.196419,0.683275,0.140262,0.606918,-0.898881,0.202108,0.118969,0.396411,0.386558,0.276699,-0.348309,0.493371,0.888244,-0.547191,0.279034,0.353183,0.0935377,-1.21077,0.0541966,-0.147793,0.106204,0.245787,0.710505,0.16382,0.0552109,-0.410832,0.291652,-0.148991,-0.957602,0.377368,-0.0146335,0.389787,-0.791505,0.0412651,-0.637381,-1.76394,-1.01351,0.74974,0.30351,-0.163961,-0.388053,1.04673,1.21353,-0.549279,1.14219,0.756619,1.7481,-1.52263,-1.01561,-0.214217,-0.496967,0.488829,0.330623,-0.517044,0.367992,-0.340467,0.783203,0.449577,-0.273993,0.73253,0.0744813,-0.282996,-0.380175,-0.413899,-0.229236,-0.745258,0.136948,-0.814178,-0.0667667,-0.396485,0.60099,0.997036,0.31778,0.117252,-0.0432371,0.436743,0.208103,-0.140231,-0.506522,-0.625849,0.182047,0.537598,0.416082,-0.0397029,0.0404311,0.345407,-0.114539,0.660102,1.00953,0.177291,-0.169441,-0.479079,-1.1332,-0.0340438,0.674329,0.783787,0.0155187,-0.448589,-0.349412,-0.263583,-0.349984,-0.554342,0.703967,0.83588,-0.179349,0.694887,-0.219106,-0.290651,-1.2514,-0.525183,-0.240768,-0.207067,0.278449,0.734502,-0.33834,-0.239614,0.425874,-0.479369,0.704724,0.194144,0.196227,0.305948,-1.2082,-0.376075,0.157695,0.0455621,-0.12125,0.364402,-0.0963136,0.34601,-0.268322,-0.141564,0.82074,0.118087,0.564869,0.668833,0.21205,-0.322317,-0.84551,-1.30665,-1.01029,0.46232,0.166013,-0.457067,-0.0502127,-0.739027,0.815906,0.551438,0.855829,0.27208,0.0700216,0.602189,-0.653849,-0.724948,-0.576117,0.541899,0.314623,1.18853,0.308156,-0.571541,-0.901272,-0.335884,1.5433,-0.188294,0.479759,1.29955,-1.01222,-0.412134,-1.39605,0.386121,-0.293341,0.500409,0.112961,0.34088,0.117984,-0.0849705,0.822627,-0.463845,-0.504614,0.242352,-0.0413971,0.333902,-0.392039,0.0860844,-0.410367,-0.968167,0.231535,1.26473,0.379079,-0.582144,-0.513854,0.387062,1.0957,-0.452604,0.0256858,0.491691,0.183216,-0.828576,-0.0828831,0.6579,0.563643,-0.372544,0.391623,-0.145319,0.336568,-0.109334,0.120747,0.780467,-0.434013,0.673149,0.611444,0.00240353,-0.299827,0.622462,-0.619823,-0.0810233,0.193125,-0.403445,0.250199,0.231504,0.00632713,0.807354,-0.241058,0.279009,0.188077,-0.677439,0.425036,-0.75878,-0.327617,-0.673064,-0.0606202,0.0971437,0.0507079,1.45386,-0.611613,0.0495178,0.152077,-0.661319,1.7615,0.583158,0.313008,-0.324355,-1.35945,-0.382363,0.869857,0.45087,0.486444,-0.127279,-0.736015,-0.416588,0.0805753,-0.388424,0.73968,0.836339,-0.411982,0.624496,-0.694226,0.554134,-0.640309,-1.1635,-0.310481,0.370562,0.179261,0.592581,-0.258963,-0.180989,0.41052,-0.282829,1.94114,0.322061,0.421862,0.0547132,-1.16426,-0.839908,0.602752,0.728341,0.542861,0.555549,-0.250475,-0.451478,-0.454048,-0.460052,1.0772,0.359995,0.378471,1.18707,-0.770078,0.442259,-1.17445,0.0233184,0.981689,0.412748,0.883903,-0.522222,0.200469,0.320471,-0.173304,0.409903,-0.399722,-0.00629215,-0.387688,0.377067,0.201559,0.49458,-0.2082,0.021045,-0.660101,0.108775,0.406105,0.700109,-0.152377,0.103584,0.521465,0.440444,0.750537,0.214854,1.04972,-0.925733,-0.957568,-1.14764,-2.33623,-3.26666,2.40741,0.757145,-0.725368,0.191508,-1.0604,0.832457,0.338972,1.47636,-1.81413,-1.52143,-2.70866,-0.180845,-3.12141,2.0045,-1.58625,2.53883,-1.04128,0.206056,1.92334,-0.960624,-0.906214,-2.20278,2.42453,-0.862236,-1.47067,-3.42386,0.620158,0.271365,-1.26106,-0.0723046,-1.33476,-1.88746,0.466178,0.839761,-1.48432,-1.08339,0.164175,-4.06383,1.34078,-2.09554,-1.56455,1.46774,-1.35732,1.65609,-0.349973,1.26227,-2.19773,0.0746286,-1.30189,-0.6668,2.21998,-1.85566,-0.661239,-0.830129,0.901252,-2.9169,-0.195856,0.186929,0.400669,-2.65023,-1.36483,0.320353,0.09277,-0.564339,-1.12142,-0.487871,0.834812,-1.07144,0.993773,0.291869,2.15661,-1.80327,-1.81953,-0.95186,1.4421,-2.48651,-1.99547,3.07799,-2.80365,2.3805,0.483799,-0.814867,-0.795728,-0.434549,1.19621,-3.42006,-2.09728,-0.865692,2.86159,-0.143932,-2.34703,1.73389,-1.97982,0.329735,-2.11661,-2.62948,-0.873927,-0.541789,-1.90084,0.0750418,-1.73167,-0.709253,0.702474,0.0437078,-0.0976389,-0.16552,-2.30945,-0.225629,-1.41805,0.286547,-0.965635,0.694518,-3.5866,-0.698523,0.0684217,2.35028,-1.63147,-0.987356,-0.870393,1.54745,-0.906457,-1.30667,-0.809332,-2.42218,-0.85627,1.31204,0.47412,-1.40868,-2.03625,-1.28926,-0.281978,-0.280183,-0.341231,-1.48085,2.83821,-1.48049,3.20129,0.167534,-2.13392,-1.70774,1.65325,0.837869,0.046184,-0.843203,-2.71366,-0.0166997,0.562163,-0.597079,2.07409,-2.58865,-3.64524,0.461249,1.10446,0.59212,-0.0305822,-2.79861,0.560644,2.42542,-1.24244,1.37492,-1.60492,2.53851,-2.06076,-3.26688,-1.79753,-1.29105,-0.406556,-1.92026,-0.369475,0.420482,1.73783,1.12968,-3.8797,-2.22679,0.592882,-0.821377,-1.83573,-2.7624,2.01198,0.415389,1.11768,-2.28444,-2.35378,-2.71915,-1.85775,1.40798,2.38116,0.891296,-0.865243,0.690051,0.24085,-2.09907,-1.56586,-2.06954,-0.299946,1.30685,0.437221,0.806729,-2.91772,0.387919,-2.44319,0.00616598,-0.666124,-0.919473,-0.313963,1.44236,1.24783,-2.07374,-1.99791,-1.05416,-2.03732,-0.0549845,0.751411,2.68864,2.02275,-1.5264,-2.21298,-1.41256,-2.04873,-0.454502,2.79017,-1.47639,0.651044,0.268387,-0.530674,0.233463,-2.979,-2.02698,2.96936,1.19581,0.120624,-2.45915,2.47359,-1.75683,-2.33103,-1.21574,-0.926447,0.789414,-0.663687,-1.18789,-1.47874,0.915344,-1.48178,1.82215,-1.225,-1.68672,-1.80684,1.10895,-2.33039,2.02871,-2.65276,-2.80062,-1.25029,1.0491,-0.191008,-1.05213,1.13145,-2.03201,2.53902,1.33922,-2.21154,-1.92616,1.59065,-1.46892,-0.514853,-1.63821,-0.686583,0.480968,-1.93475,-1.33307,-0.361588,-2.47486,2.48189,1.48393,-0.769642,1.87454,-2.3844,-0.736812,1.90901,-1.69898,-2.4944,1.01115,-0.318669,-1.50624,3.27301,-1.89595,-0.902022,-2.93382,-0.768312,-2.95049,1.62599,1.44957,2.14473,-3.41665,1.63315,1.02695,1.04485,0.611055,0.912497,0.398135,0.812795,0.628305,1.03748,1.35335,0.520277,0.9078,0.679975};


class Image {
public:
  Image(const vector<string>& text) : image(text) {}

  void Initialize() {
    int slope = FindSlope();
    if (slope) {
      Tilt(slope);
    }
    Cut();
  }

  static void Show(ostream& oss, const vector<string>& image) {
    copy(image.begin(), image.end(), ostream_iterator<string>(oss, "\n"));
  }

  string Classify() const {
    ANN ann(w_cells * h_cells, 30, 10);
    string result;
    for (size_t num = 0; num < numbers.size(); ++num) {
      vector<double> stat;
      CollectStatistics(numbers[num], &stat);
      result += '0' + ann.Classify(stat);
    }
    return result;
  }

private:
  static const int MAX_ANGLE = 45;            // degrees
  static const size_t w_cells = 5;
  static const size_t h_cells = 10;
  static const size_t MAX_BORDER_WIDTH = 10;  // percent 
  enum Color {W = '.', LG = '%', DG = '#', B = '@'};

  vector<string> image;
  vector<vector<string> > numbers;
  
  void MakeBlackAndWhite() {
    size_t h = image.size();
    size_t w = image[0].size();
    for (size_t y = 0; y < h; ++y) {
      for (size_t x = 0; x < w; ++x) {
        if (image[y][x] == DG) {
          image[y][x] = B;
        } else if (image[y][x] == LG) {
          image[y][x] = W;
        }
      }
    }
  }
  
  int FindSlope() {
    size_t h = image.size();
    size_t w = image[0].size();
    double max_variance = 0;
    int slope = 0;
    for (int angle = 0; angle <= MAX_ANGLE; angle += 5) {
      double k = -tan(static_cast<double>(angle) / 180 * PI);
      double current_variance = 0;
      for (int b = 0; b < int(w - k * h); ++b) {
        int dogs_in_column = 0;
        for (size_t y = 0; y < h; ++y) {
          size_t x = static_cast<size_t>(k * y + b);
          if (0 <= x && x < w) {
            dogs_in_column += image[y][x] == B;
          }
        }
        current_variance += pow(double(dogs_in_column), 5./4) * pow(double(MAX_ANGLE - angle), 1./20);
      }
      if (current_variance > max_variance) {
        max_variance = current_variance;
        slope = angle;
      }
    }
    return slope;
  }

  static void FindBestCuttingPoints(const vector<string>& image, bool vertical, vector<size_t>* points) {
    size_t h = image.size();
    size_t w = image[0].size();
    if (vertical) {
      swap(h, w);
    }
    size_t dogs_in_column, prev = 0;
    bool in_gorge = true;
    for (size_t x = 0; x < w; ++x) {
      dogs_in_column = 0;
      for (size_t y = 0; y < h; ++y) {
        dogs_in_column += vertical ? image[x][y] == B : image[y][x] == B;
      }
      if (prev > 0 && dogs_in_column == 0) {
        in_gorge = true;
        points->push_back(x);
      }
      if (in_gorge && dogs_in_column > 0) {
        in_gorge = false;
        points->push_back(x);
      }
      prev = dogs_in_column;
    }
    if (dogs_in_column > 0) {
      points->push_back(w);
    }
  }

  // Tilts on angle slope
  void Tilt(int slope) {
    size_t h = image.size();
    size_t w = image[0].size();
    double k = -tan(static_cast<double>(slope) / 180 * PI);
    for (int y = h - 1; y >= 0; --y) {
      size_t x = static_cast<int>(k * y + w);
      image[y] = string(w - x, W) + image[y];
      image[y].resize(image[h - 1].size(), W);
    }
  }

  // Cuts out numbers
  void Cut() {
    size_t h = image.size();
    size_t w = image[0].size();
    vector<size_t> points;
    FindBestCuttingPoints(image, false, &points);

    if (points.size() > 6) {  // ugly font detected
      size_t unnecessary_pieces = (points.size() - 6) / 2;
      while (points.size() > 6) {
        vector<pair<size_t, size_t> > width;
        for (size_t i = 0; i < points.size(); i += 2) {
          width.push_back(make_pair(points[i + 1] - points[i], i));
        }
        // forget about most narrow piece
        size_t index = min_element(width.begin(), width.end())->second;
        points.erase(points.begin() + index, points.begin() + index + 2);
        
      }
    }

    numbers.resize(points.size() / 2);
    for (size_t i = 1, j = 0; i < points.size(); i += 2, ++j) {
      size_t start = points[i - 1] - 1;
      size_t width = points[i] - points[i - 1] + 2;
      for (size_t y = 0; y < h; ++y) {
        numbers[j].push_back(image[y].substr(start, width));
      }
    }
    for (size_t i = 0; i < numbers.size(); ++i) {
      points.clear();
      FindBestCuttingPoints(numbers[i], true, &points);
      Prune(0, numbers[i][0].size(), points[0] - 1, points.back() + 1, &numbers[i]);
      DeleteBorder(&numbers[i]);
    }

    if (numbers.size() < 3) {
      for (size_t i = 0; i < numbers.size(); ++i) {
        size_t height = numbers[i].size();
        size_t width = numbers[i][0].size();
        if (width > 1.2 * height) { // Bad cut
          vector<string> temp = numbers[i];
          Prune(0, width / 2 + 1, 0, height, &numbers[i]);
          vector<size_t> points;
          FindBestCuttingPoints(numbers[i], true, &points);
          Prune(0, numbers[i][0].size(), points[0], points.back(), &numbers[i]);
          Prune(width / 2 + 1, width, 0, height, &temp);
          points.clear();
          FindBestCuttingPoints(temp, true, &points);
          Prune(0, temp[0].size(), points[0], points.back(), &temp);
          numbers.insert(numbers.begin() + i + 1, temp);
        }
      }
    }

    // Delete strange pieces
    for (int i = numbers.size() - 1; i >= 0; --i) {
      size_t height = numbers[i].size();
      if (height < 5) {
        numbers.erase(numbers.begin() + i);
      }
    }

  }

  static void Prune(size_t start_x, size_t end_x, size_t start_y, size_t end_y, vector<string>* image) {
    vector<string>(image->begin() + start_y, image->begin() + end_y).swap(*image);
    for (size_t y = 0; y < image->size(); ++y) {
      string((*image)[y].begin() + start_x, (*image)[y].begin() + end_x).swap((*image)[y]);
    }
  }

  // Cuts off border if any
  static void DeleteBorder(vector<string>* image) {
    size_t h = image->size();
    size_t w = (*image)[0].size();
    double max_x = static_cast<double>(w) * MAX_BORDER_WIDTH / 100;
    bool has_border = true;
    for (size_t start_x = 0, start_y = 0, end_x = w, end_y = h; 
      start_x < max_x; ++start_x, --end_x, ++start_y, --end_y) {
        has_border = true;
        for (size_t y = start_y; y < end_y; ++y) {
          if ((*image)[y][start_x] != W || (*image)[y][end_x - 1] != W) {
            has_border = false;
            break;
          }
        }
        for (size_t x = start_x; x < end_x; ++x) {
          if ((*image)[start_y][x] != W || (*image)[end_y - 1][x] != W) {
            has_border = false;
            break;
          }
        }
        if (has_border) {
          Prune(start_x, end_x, start_y, end_y, image);
          vector<size_t> x_points, y_points;
          FindBestCuttingPoints(*image, false, &x_points);
          FindBestCuttingPoints(*image, true, &y_points);
          Prune(x_points[0], x_points.back(), y_points[0], y_points.back(), image);
          return;
        }
    }
  }

  static void CollectStatistics(const vector<string>& image, vector<double>* result) {
        size_t h = image.size(), w = image[0].size();
    vector<size_t> width(w % w_cells, w / w_cells + 1);
    width.resize(w_cells, w / w_cells);
    rotate(width.begin(), width.begin() + (w_cells + (w % w_cells)) / 2, width.end());
    vector<size_t> height(h % h_cells, h / h_cells + 1);
    height.resize(h_cells, h / h_cells);
    rotate(height.begin(), height.begin() + (h_cells + (h % h_cells)) / 2, height.end());

    for (size_t y_start = 0, i = 0; y_start < h; y_start += height[i++]) {
      for (size_t x_start = 0, j = 0; x_start < w; x_start += width[j++]) {
        double dogs_in_cell = 0;
        for (size_t y = y_start; y < y_start + height[i]; ++y) {
          for (size_t x = x_start; x < x_start + width[j]; ++x) {
            switch (image[y][x]) {
            case B:
              dogs_in_cell += 1;
              break;
            case DG:
              dogs_in_cell += 170./255;
              break;
            case LG:
              dogs_in_cell += 85./255;
            }
          }
        }

        if (height[i] == 0 || width[j] == 0) {
          result->push_back(0.5);
        } else {
          result->push_back(static_cast<double>(dogs_in_cell) / (height[i] * width[j]));
        }
      }
    }
  }

};


int main() {  
  vector<string> text;
  string line;
  while (cin >> line) {
    text.push_back(line);
  }
  Image image(text);
  image.Initialize();
  cout << image.Classify() << endl;
//  Test();
  return 0;
}
