#include <iostream> 
#include <algorithm>
#include <map>
#include <vector>
#include <string>
#include <cstring>
#include <sstream>

//#include <fstream> 
using namespace std;

//#define cin fin

class Symbol {
    private:
        vector <string> symbol;
        int w;
        int h;
        vector <vector <pair <int, int> > > dp;
        
        //Рисуем контуры у символа
        void drawBorder() {
            int x = 0, y = 0, dx = 0, dy = 0;
            bool ok = false;
            for (x = 0; x < this->w; x++) {
                for (y = 0; y < this->h; y++) {
                    if (symbol[y][x] == '.') {
                        ok = false;
                        for (dy = -1; dy < 2; dy++) {
                            for (dx = -1; dx < 2; dx++) {
                                if (x + dx >= 0 && x + dx < w && y + dy >= 0 && y + dy < h) {
                                    if (symbol[y+dy][x+dx] != '.' && symbol[y+dy][x+dx] != 'x') {
                                        ok = true;
                                        break;
                                    }
                                }
                            }
                            if (ok) break;
                        }
                        if (ok) symbol[y][x] = 'x';
                    }
                }
            }
        }
        
        //Обходим один контур
        vector <pair <int, int> > findOneBorder(int x, int y, vector <pair <int, int> >* points, bool first = true) {
            vector <pair <int, int> > dp;
            vector <pair <int, int> > thPoints;
            int dx = 0, dy = 0;
            int prevd[4] = {0, 1, 2, 3};
            pair <int, int> p(x+1,y);
            pair <int, int> bp(x,y);
            int i = 0;
            thPoints.push_back(bp);
            while (p != bp) {
                dx = 0; 
                dy = 0;
                for (i = 0; i < 4; i++) {
                    if (prevd[i] == 0 && y != 0 && symbol[y-1][x] == 'x') {
                        dy = -1;
                        break;
                    } else if (prevd[i] == 1 && x != w - 1 && symbol[y][x+1] == 'x') {
                        dx = 1;
                        break;
                    } else if (prevd[i] == 2 && y != h - 1 && symbol[y+1][x] == 'x') {
                        dy = 1;
                        break;
                    } else if (prevd[i] == 3 && x != 0 && symbol[y][x-1] == 'x') {
                        dx = -1;
                        break;
                    } 
                }
                x += dx;
                y += dy;
                p = pair<int, int>(x,y);
                if (dy == -1) {
                    prevd[0] = 1;
                    prevd[1] = 0;
                    prevd[2] = 3;
                    prevd[3] = 2;
                } else if (dy == 1) {
                    prevd[0] = 3;
                    prevd[1] = 2;
                    prevd[2] = 1;
                    prevd[3] = 0;
                } else if (dx == 1) {
                    prevd[0] = 2;
                    prevd[1] = 1;
                    prevd[2] = 0;
                    prevd[3] = 3;
                } else if (dx == -1) {
                    prevd[0] = 0;
                    prevd[1] = 3;
                    prevd[2] = 2;
                    prevd[3] = 1;
                }
                
                if (!first) {
                    swap(prevd[0], prevd[2]);
                }
                
                thPoints.push_back(p);
                if (find(points->begin(), points->end(), p) != points->end()) {
                    dp.clear();
                    return dp;
                }
                dp.push_back(pair<int,int>(dx,dy));
            }
            points->insert(points->end(), thPoints.begin(), thPoints.end());

            return dp;
        }
        
        //Ищем контуры у символа
        void findBorder() {
            int x = 0, y = 0;
            bool finded = false;
            for (x = 0; x < this->w; x++) {
                for (y = 0; y < this->h; y++) {
                    if (symbol[y][x] == 'x') {
                        finded = true;
                        break;
                    }
                }
                if (finded) break;
            }
            vector <pair <int, int> > points;
            this->dp.push_back(this->findOneBorder(x, y, &points));
            for (x = 0; x < this->w; x++) {
                for (y = 0; y < this->h; y++) {
                    if (symbol[y][x] == 'x') {
                        if (find(points.begin(), points.end(), pair<int,int>(x,y)) == points.end()) {
                            this->dp.push_back(this->findOneBorder(x, y, &points, false));
                            if (this->dp.back().size() < 6) {
                                this->dp.erase(this->dp.end() - 1);
                            }
                        }
                    }
                }
            }
            
        }
    public:
        Symbol() {}
        Symbol(const vector <string>& sym): symbol(sym) {
            this->h = symbol.size();
            if (this->h > 0) {
                this->w = symbol[0].size();
            } else {
                this->w = 0;
            }
            this->drawBorder();
            this->findBorder();
        }
        int getW() const {return w;}
        int getH() const {return h;}
        int getPix(int x, int y) const {return symbol[y][x];}
        int getBorderNums() const {return this->dp.size();}
        
        bool test(const string& action, bool out = false) {
            vector <pair <int, int> >::iterator itP;
            string::const_iterator iAct = action.begin();
            bool fail;
            int count = 0;
            for (itP = this->dp[0].begin(); itP != this->dp[0].end(); itP++, count++) {
                fail = false;
                if (*iAct == '0') {
                    if ((*itP).second != -1)  {
                        if ((*itP).second != 0 || (itP + 1 != this->dp[0].end() && (*(itP + 1)).second != -1)) {
                            fail = true;
                        }
                    }
                } else if (*iAct == '1') {
                    if ((*itP).second != -1 && (*itP).first != 1)  {
                        fail = true;
                    }
                } else if (*iAct == '2') {
                    if ((*itP).first != 1) {
                        if ((*itP).first != 0 || (itP + 1 != this->dp[0].end() && (*(itP + 1)).first != 1)) {
                            fail = true;
                        }
                    }
                } else if (*iAct == '3') {
                    if ((*itP).second != 1 && (*itP).first != 1) {
                        fail = true;
                    }
                } else if (*iAct == '4') {
                    if ((*itP).second != 1)  {
                        if ((*itP).second != 0 || (itP + 1 != this->dp[0].end() && (*(itP + 1)).second != 1)) {
                            fail = true;
                        }
                    }
                } else if (*iAct == '5') {
                    if ((*itP).second != 1 && (*itP).first != -1) {
                        fail = true;
                    }
                } else if (*iAct == '6') {
                    if ((*itP).first != -1) {
                        if ((*itP).first != 0 || (itP + 1 != this->dp[0].end() && (*(itP + 1)).first != -1)) {
                            fail = true;
                        }
                    }
                } else if (*iAct == '7') {
                    if ((*itP).second != -1 && (*itP).first != -1) {
                        fail = true;
                    }
                } 
                if (fail) {
                   if (count <= 1 && itP != this->dp[0].begin()) {
                        return false;
                   }
                   iAct++;
                   itP--;
                   count = 0;
                }
                
                if (iAct == action.end()) {
                    return false;
                }
                
            }
            if ((iAct + 1) == action.end()) {
                return true;
            }
            return false;
        }
};

vector <Symbol> breakSymbols(vector <string>& sym);

int main(int argc, char *argv[])
{  
    vector <pair <int, string *> > arrActions(10);
    vector <pair <int, string> > otherActions;
    string arrActions0[] = {"012345050505615151510",  "013013460",  "012345050506156151",  "14637",  "0123451301013450505151510161",  "0134150123561510",  "0123513513450505010",  "0130123012345034505035050",  "012341350347",  "0123451",  "013451236761",  "0134513012350360",  "0134512345123450347347373517",  "013413512350347457",  "01345035047350",  "0134130101234610"};
    string arrActions1[] = {"135021451",  "013504750",  "135032051",  "013573451",  "013502047450",  "1370",  "01345767",  "01345750",  "01235767",  "145015237",  "013413502060",  "050134757",  "13502073761",  "01350107350",  "0134123505020560",  "0123451345151",  "1350350150",  "134501351",  "13013413502061",  "01013451",  "01235134134501050",  "1350150505061",  "12013457160",  "13013502050",  "01501341347351",  "014503013451",  "0145013412350357",  "13412350450160",  "01505013412350",  "012341345151351",  "01230123450505150737",  "0120350123451345050",  "0105012351234735050561",  "0123505713451",  "0101301235134503460",  "130101345051",  "130101341350473451",  "01351345063473561",  "1234503413502050",  "1234512345050107",  "01351235010737351",  "13013501501350",  "1341350130450",  "13450501051",  "120501301341361",  "050123451",  "0501345461",  "101342451",  "1050501350",  "10501345134123507351",  "12013513412350501473451",  "0150125451",  "014501347373461",  "13501345130134513507351",  "1350501234512350617",  "1501412351",  "13513513450101050",  "1345123501051"};
    string arrActions2[] = {"01234513510757",  "012345135157450",  "0123451351507350",  "012345135150737350",  "0123451350157357",  "123451350105057",  "012345135150457",  "12345135707350",  "12345135106457",  "12345135010573737357",  "1050123451351",  "105012345147",  "010505012351467",  "05012351351",  "05012351361",  "01234513501076357",  "012345136057",  "0505012352457",  "105012345301461",  "0501235257",  "10504501351460",  "0123451350173561",  "05050123452460",  "012345135051457",  "0123413507357",  "10450123451467",  "012341351507357",  "0105012351451",  "10501234513461",  "13413506460",  "01234513502051",  "010505012345201350",  "05012345135061",  "0505012341467",  "015013451357360",  "1234135057357",  "01234513505037357",  "05051235012351357",  "12345135050107357",  "0350123451351",  "01501234512350760",  "012345135010505134567",  "0123413505151",  "0150123452351",  "1234513505050105050",  "04501234145067",  "01050123451234507350",  "0105050501235157",  "0505045012352351",  "0103450134513567",  "010501345123461",  "051350123451350",  "01234512345051047",  "01234512350505010507373457",  "01045013451345060",  "012345134505050107373610",  "01234513450501507457",  "01050513501234513460",  "010505123501234530147",  "01501234513013451467",  "0504512350123451201350",  "01503501234512373737561",  "0123413013505045015060",  "01234513450547367",  "012345120134505010505101514517",  "012345120134505050105123450",  "012345120123450505010505123013450",  "012345120134504501051367",  "01234513450501051460",  "0123451230134503450150",  "0123451230135050505050105051234505050",  "01050504513012345050501234513505050",  "010501234505012345012034501234505073750",  "012345123505051460",  "012345123450505050151",  "01045135012341351",  "01234513013450350104501361",  "010512345050123451450",  "01050513505050505012345302451",  "010513501234512301234505073461",  "01051350134512345050505050",  "0105051234505012345012050123450505050505050",  "0105051234505012301234512360250",  "01234513505050105051350",  "01234503450",  "123451350501050451301461",  "1234513505010451350",  "13010505050501234512301350505050561",  "0505134505012345201460",  "0512301345050123450134505050767",  "05123450123413461",  "05012301234514737351",  "10505050123413012345050",  "0513450123401201345050505750",  "01501234512301235050507347357",  "01501234512301345057467",  "01450123412350505046561",  "035013413451047350",  "0351350123451301345060",  "03450501234512345067",  "04501230123420137",  "01512350123451345610",  "0150501234512013450505050"};
    string arrActions3[] = {"130105050105012345123467",  "12050501050123513467",  "13513505013050207450",  "1301050501045012351234567",  "01235134501305027450",  "0123513450130502057",  "130105050105050123451234505060",  "12050505010505012345123467",  "123513450105015067",  "1205010501235123457",  "013010501501351457",  "0120505050105012345123473567",  "1345134501305727351",  "120505010505012345123450560",  "1235123450150572060",  "1234512345012050501507357",  "12301050501050123523457",  "12345134501505015057",  "123450105715057",  "01301050104501345123457",  "013050105012347350567",  "013450130106161",  "134512350130502050",  "01345123450130505017450",  "123451234501301050501057",  "01235123450130105015057",  "0123512345050130105050105051",  "130105050105045050123412345050615150",  "13010505050105050123451234505050",  "123451234501572167",  "013010505010505050123451234505061510",  "01230105050501050123451234505060",  "13010505010505012341234505057",  "012301050501050501234512345067",  "130150501501234512347367",  "012345012050320451",  "130105050501050501234512345050567",  "012351205050105051350123451234505610",  "1050501050123451357",  "0123451234505013050501506351",  "12345123450130105050106450",  "1234501301560360",  "15050105012345123450",  "1234501301050",  "0123513450135120601567",  "130501050501234512345050615150",  "1050105012351350",  "0123451234505012345130501305012347",  "012345013513050137151",  "012050501301050501234512345067",  "12050503501235123461",  "1205050501050504501234512345057",  "134105010505134501234512345057",  "0123512345013010505010506450",  "135010502051",  "01305013501234737350560",  "01234512050501205051234501234512345056150",  "1345123450125050",  "134120505010505135012345123473505057",  "120501501345124505150",  "12341345010501505061",  "105015012345123457",  "01301505015051234501234512345050",  "013513012345012301050173457",  "01234512345050507374",  "01340103501050351350123451347350",  "012345123451050105737373735",  "0130501501234512345050507",  "013513450130156360",  "13512050505035050501050503501234512345057",  "1351230105010345012345123567",  "135120450150135123560",  "13512301050104513501234761",  "01235120501051345012345123457",  "0123512050501050513450123451234510505051301012345123450505",  "012351201050501501234512345050567",  "013451230123405050734",  "012351234501303503450",  "0134512345050105050517350",  "013451234505013010505050501467",  "012350505130150505010512350123451236345056157",  "01235012050150747",  "0134513010505045012345123450560",  "01234513450505012301050501050634505060",  "013013412345010105050501751",  "012345134505050130105010506457",  "0104501350503450123513450105010505051345123735",  "0134120105010505123505012345123450506157",  "01341205050120505051350505012345123450505050505067",  "01340350123457",  "01341050501501234512347346157",  "0134105050105051350501234512345050615157",  "150150135124760",  "0135035012345123473560",  "0130105050130105050501234512345050505050347",  "01301050505010503501234512345050",  "01301050120505012345050",  "013413450107",  "01301050105120134501234512345050",  "01301050501234505050",  "1234512345012050501205073651",  "0123412345050123050502073560",  "0123412345050501305050105035060",  "1201050505010505012341234747361",  "123450505012050501205064560",  "1205015035012345123450",  "1205010504501234513560",  "01234504105035010505123450123451234505056150",  "012341205050105013451234512345063461",  "0123450505013050103450",  "1301501501234513450",  "130105050505010505012345123473450507",  "120104501205045013012345123450360",  "120105050450105012345123473507",  "120105050150134512360",  "1050501012345124750",  "1234512345050505050350123010505012050513560",  "1050450134134757",  "10505050105012345123451050505051234512513475",  "13012341234505012050501050350",  "12050505015013451234501050505010512341234734734507",  "12050505050105050450123451234505057",  "123412345013010505010450",  "12305010350134512360",  "1230505013050130123451234505057",  "123050505010505012345123450507",  "1230105050501050123412347347375067",  "1301050505050145012340123401235134503451345045050505010460",  "1205050105050501234134505067",  "12345050105050105060",  "120503501504501345134567",  "12050345012345124561",  "120505050120505050123451234737567",  "1205050501050504501234123450505067",  "12050504505012010505012345123450505150",  "130130105050501501501234512345050",  "130105015050130123451234610",  "0123010505050105050123451234510105050512345123450505",  "0123010501050501234512345067",  "01050150130123451234513560",  "0123451234501351050105360",  "1301050501050350123450",  "0123010501505012345123450507",  "1301050103450123457",  "015015013451234513467",  "1305050104501234512473567",  "01050501050123412345105050512345123473736",  "130505013010505050123451234505050",  "0123010505050120501234512345050",  "130105050150123451345134505035015051",  "01234512345050135120501301061361",  "13413450101503517351",  "130105050501050501234123450505615157",  "01234512345050135120505012050454561",  "01234512345050501305017461",  "01234512345050501345010301050105051013450",  "01234512345050501235130501050610",  "0123451234505012345120505010513561",  "0123451234505012345120505012050512012345050",  "012050505010501230123451234734735067",  "0123451234505013010505050105050651",  "0120505050150123451234505057",  "01234512345050120105010457",  "012345123450501341205016457",  "01505050501501234123450",  "01234510504501051345012345123461",  "012305050105050123412345056151",  "01230505050150134512345050",  "13035050150134512345615151",  "1250501501234512345035050",  "0123451205010503512345050501234512345050506157",  "0123451205050105050512345050123451234505050",  "01234512050501050512345050123451234505050505050",  "012345120505010513450123451234505050",  "012345120104501501234512347347360",  "012345010501050350",  "010130134123450130105050145451",  "01351201050105134501234513013467",  "0135120105010513450123451357",  "0135130105050105120134501234512301350345050",  "1230123451234505050504501205012050",  "01351301050501051201345012345123460",  "013512351235105150734736",  "0135123512345150734737",  "13034501230345013012346151",  "1303501450134513450",  "134123450130105050147",  "1205012050123012345123450505050450",  "101234512345021050",  "1351201505014501234513450",  "1505014501234513467",  "145013451345150360"};
    string arrActions4[] = {"013413645151",  "013413637",  "0134136357150",  "01341363457161",  "0134136346051",  "01301350513572157",  "013451363607",  "013413463735167",  "013013512357207",  "013013635707",  "01341351350167",  "013013637",  "0130134635067",  "01234135136161",  "01345134136345160",  "013413513507350",  "134512350303030150",  "013451351235060161",  "0134512350561",  "0134013515050",  "01350150734",  "13501350357057",  "013013451235050151",  "012050120501205012341301350450350505050",  "013013450451351345060",  "0130134504015734",  "01230123456150",  "013013501516363635",  "0130130134635151",  "01235130123451234501505010636364635",  "01012341234012345016151",  "01301340134505135015050150",  "01234134504513513505050560",  "0123412341351350150501234567",  "012351235050151",  "0123451230123451345050",  "0123451345135135015160",  "012345120134012345050501505035050",  "012345101234123505050513507351",  "01234510123451301345035051345050",  "012345123451345073506150",  "0123451301301234134513450760",  "012345134013451301050505051363636",  "012351234505050571510",  "0101341346346051",  "010134135051350150",  "010134501350513501637",  "013505134134505061",  "013501350451357217",  "013503451351",  "013503504502760",  "0135134015075",  "01351345134513505015067",  "013451235063457161",  "13013013451350135035051060",  "1341340135041235050",  "0134513513505061",  "01345134513450307360",  "013451345051234501737373751",  "0134513450413502167",  "0134513013413506151",  "05012345134134501505150",  "1013512351",  "101340134501363457151",  "1010130123451341363515057",  "014075",  "015013451350123457151",  "013415012345134507361",  "013413501505717634",  "013451201345050505061",  "13501234635057",  "013450134505135173737",  "01345013013450573767",  "013412012345123450505057",  "0134130135057",  "013413451305015073737347345"};
    string arrActions5[] = {"13512345021060",  "1351234502060",  "130105050501351234735060",  "1351234501515067",  "01205050135124760",  "135123450131060",  "1351234501301515057",  "13512345013167",  "1351234502161",  "1205013512357",  "1205050135124507",  "130501353467",  "12050501351251460",  "1351350152061",  "130501352347",  "130501352350",  "135135050142067",  "135135050152060",  "13513505013157",  "135135050143167",  "120505050135123473737367",  "13010505013512345050",  "130105050135012457",  "13010501351234760",  "120505013513451",  "130105050135123450610",  "12050450136412360",  "013512345025061",  "013513450150357",  "1301045013512467",  "1305045013512457",  "13010505050501351234560",  "1050135123451",  "013013513450130157357",  "1235123450130305057",  "135041345013050",  "13505123450151061",  "13010505012350123450560",  "01234513010505012345041234507",  "1351350202160",  "1350123450505013107457",  "0135123450501351205060",  "013512345050501205050",  "01351205050123451234560",  "01301050501234512345050560",  "1201351512461",  "1230505013451234560",  "1205050135051234505157",  "1205050130135123450",  "130505013505123450505710",  "015013450123460",  "1305050134501234505050",  "012345120450135012345050",  "0123451230105050134512345050",  "013010505050505013451234505060",  "0123050501345051234507",  "0130134501505",  "012301050505012013505050505050503451234505050505050",  "01234120505050135012345050505015123450505064",  "012341205050134501234505615151",  "012050501234505045035123473507",  "01234050450123450123450567",  "01301050501013505012345050505050450",  "01234120501201345012345056150",  "01234105012345123450505050",  "012301050123450512345067",  "01230105050123450505034123450506150",  "01205050501345123451050505050151234505050734",  "01205050501234512345067",  "0130134503412450",  "01235134505067151",  "012345120501234503401234505050",  "01234512050501351234567",  "012345120501234505034012345050",  "01234513451",  "01035012345034512347373757",  "012345051205012012350505012345050",  "010505045013013450345041230123451050505015123463734734735",  "0123451010505012345051301234505057",  "012350105045012345123450",  "0105050505013505123451050505050120512514736",  "012013450501234501235104567",  "01235051205050123450123456157",  "0123450123450505050120505050",  "0123450505040123450505012056515",  "012345034505050505010735",  "01350512345012301504761",  "013505012345012305067",  "01351204501234513561",  "13010503505013505012345050",  "1235045012345012345105015051234505",  "1234013013015050501501012350504123450",  "12340350135123450",  "013513010501201345050512345067",  "1230345050135123450",  "130134510504501201234505123450505157150",  "13013451230134101301501045050150501501501501234505050501234505050",  "1301301050505010123451234505051067",  "13050505013501234505056157",  "13410505050134501234505050",  "13412050135123450",  "13050501350123450505050",  "0135010450134512345061",  "0135012345050501345010305073650",  "13012345105035012012345050512345050505050450501517",  "120450123503512345050",  "101350512345050570167",  "12010505050123450512345050",  "1050505012345123450567",  "1013505012345050505050501351205050507",  "105050134512347351",  "1050135123475051",  "101234505051345050501234503010505073750",  "1205050505013505123450505050",  "12301013451345050",  "12050505013450503412347360",  "12301050501351234505050501512346",  "013515050134512347347373750",  "0135150123451234734737561",  "12301050504501350501234567",  "123010505013512347",  "1230105045013505123450",  "12050505012345051234505050",  "13512050450135134561",  "135051234505013046151",  "0134505051234510505050501207637",  "135050123450505013010505050",  "15012345035012345134734757",  "013412050134505123450505050",  "15013451234501351205050",  "013410501345051234737351",  "15050501351251350",  "1351301045012301345124567",  "1351301035013513451",  "013412050505050505050134501234505050505050561517",  "1450123463450",  "01345120505015013450512345047",  "0134512301035013013504012347356057",  "13450501234505045013050560"};
    string arrActions6[] = {"1350642350",  "01350512350",  "013501234617",  "01350501234610",  "01350123473567",  "013504512357",  "1350513645060",  "013504123457",  "0123505050123450567",  "0123505134737357",  "0134134567",  "013503512357",  "13451547",  "0135050451235610",  "0123505045123467",  "0123450505123450505610",  "01350134734560",  "0135012367",  "01345035134560",  "01234505050501234505056157",  "0134105012357",  "013501347561",  "012350505050123450505050",  "013512347347350",  "0135035234750",  "0123505050501234505050",  "013513010505012345050560",  "0135130105012345050",  "0123513045013450",  "01235015045012345617",  "012345050505050123450505615150",  "0123450105012345050",  "01301345012301234503450503610",  "0123013450505050513012345050505050",  "01230135040123450",  "0123451205035012345050",  "01234505130105012345050",  "012345051301234505050",  "0123451234505051561",  "01234513010503451301350123456157",  "0123501050123450506151517",  "0123512050123450610",  "012345010513010504501234505050",  "012345010505012345050",  "0123450105050123450505050",  "012350503501230123450505150",  "0123504513010512301345012345050505615151510",  "012350504010350134737",  "012350505123450505050",  "01235050505010505050123450505050",  "012345050501501234505050505050",  "012345050150350123450505050",  "012345050505050401234505050",  "012345050513010505120134501234505050",  "013513012345067",  "0134513010123450561",  "0134513010505051201012345050123450505050",  "1341351",  "013451301505050123450505050",  "013451305012450",  "013450340135123013513451515150",  "0134120505012345050"};
    string arrActions7[] = {"01345016450",  "0134507347",  "013450736460",  "12350151",  "123570151",  "1234501751",  "01345017373451",  "1234501737350",  "012345073747",  "01234507351",  "1350202151",  "0123450736450",  "1345057051",  "134135016350",  "1350202717",  "13013450151",  "134505057151",  "0123450505061",  "134506",  "135135017347347350",  "1501350134513450",  "01234505050505017373737350",  "13405",  "013013450505",  "013013450135016345617",  "013012340134505016360",  "012340505",  "01301234505050146360",  "0123450501050",  "01015013451363450",  "0135050123012346363456151",  "123451235050501450",  "123512350105010506",  "123513501646151",  "12340123450503506450",  "123013450150350",  "1234505014634510",  "1234505050561561",  "130134135050351",  "1345015073450",  "013451561734",  "13012013450350345050506347",  "1301230134505050",  "130120134501505064617",  "01345134501502051",  "050501247561",  "05014501234134561",  "015012345050527030134",  "01501234513512350461",  "015013405236363634",  "0150130251",  "015012341373473450",  "01450123513737351",  "01450501251",  "01503501230123634567",  "01504503501230130134505234735",  "01504501301451",  "015050503450130120135767",  "0150505012347347347",  "01505013513463651",  "013413505021737",  "15035012301351351050505134635",  "0130501301347074",  "134513450501513515150",  "13451235017351"};
    string arrActions8[] = {"10123534567",  "010134513567",  "010123463467",  "012351346010",  "015012345123450505057",  "01501235134761",  "13451235710",  "01012460",  "0150123451234505056151",  "012345123450570167",  "0123512345050267",  "01235123450150",  "01345123450150",  "01505012345123450507",  "010501234512373457",  "01050123451234517",  "0150123412345060",  "0101347345061",  "012345123450567150",  "0150123451234505151",  "0123451345670",  "015012345123617",  "013463451",  "0101230123451234515057",  "01012301234505167",  "010123412351345050",  "0123012345123450",  "01301301301301234513473456150",  "010505012345123450506167",  "0105012345051301013451234505050",  "0105010123412345123450505050150",  "0105012341234505050",  "010123513010123512345050",  "01013401345123457",  "0101351234512347367",  "01013512345134505050",  "13013450157067",  "134501503451",  "0150134512013451234560",  "01340105012345050560"};
    string arrActions9[] = {"0123450301560",  "012345032067",  "012345020560",  "135013157",  "1350501315160",  "0123450150561510",  "012345050501315610",  "0123450505013013505067",  "013450150561",  "13502015057",  "012345050501204567",  "013451064",  "01234505051301345050560",  "0123450501505610",  "01301450123460",  "1501234751",  "0123450501450560",  "01234505123505151",  "01301234501567",  "0123450501234512035061517",  "01234503505615151",  "0123450135120460",  "0123450123513034567",  "13450501234734747350",  "0123450505012345120505050",  "012345010610",  "0123450764",  "01234505130134505056150",  "0130134505050123450505050351",  "01301345050123451050505130134505074",  "0123013413450350",  "013012301234503450105073473634",  "012351351350150",  "010123013501010505035015051",  "0123405050634",  "012014505050123460",  "012301345123501450",  "0123014505050123450610",  "01234513450505050123450505050",  "010505012345010505141413635",  "012345134501346157",  "012345013512327",  "01235012345047347360",  "0123450120351302517",  "0123512050513010123450505012347357",  "0123450104013560",  "012345010505130135050",  "01234501050351345050",  "0123450105041350",  "01234501305051301345050",  "012012301234512301350145015015050150505034503501567",  "0123450505013412050513045123501345050",  "0123450505015050",  "01234505050505050123013505050505050",  "0123450505050120450505050",  "0123450505016151",  "01234505050501305130134505061517",  "0123450505050345012045050505050",  "0123450505050501203505050",  "01234505050501235120450505050",  "01234505050501303505050",  "012345034505050",  "01234513513450105120103450123450506151",  "01234505012345034134505050",  "01350135050123457",  "1301501347",  "1013734751",  "01345120450123463450",  "13505012345105050505134734737",  "01340150123473451",  "145050123450561"};
    otherActions.push_back(make_pair(0, "01234767"));
    otherActions.push_back(make_pair(8, "012347560"));
    otherActions.push_back(make_pair(0, "01234760"));
    otherActions.push_back(make_pair(4, "01234757"));
    otherActions.push_back(make_pair(1, "0124767"));
    otherActions.push_back(make_pair(9, "0123475610"));
    otherActions.push_back(make_pair(0, "012345050615150"));
    otherActions.push_back(make_pair(9, "012345050617"));
    otherActions.push_back(make_pair(4, "0123450506157"));
    otherActions.push_back(make_pair(0, "01234505161515157"));
    otherActions.push_back(make_pair(9, "01234505615157"));
    otherActions.push_back(make_pair(0, "01235056157"));
    otherActions.push_back(make_pair(6, "012345056167"));
    otherActions.push_back(make_pair(9, "12345051515157"));
    otherActions.push_back(make_pair(8, "101351357"));
    otherActions.push_back(make_pair(9, "0123475050"));
    otherActions.push_back(make_pair(6, "01234735050"));
    otherActions.push_back(make_pair(1, "135032157"));
    otherActions.push_back(make_pair(0, "10123473560"));
    otherActions.push_back(make_pair(2, "15012347367"));
    otherActions.push_back(make_pair(8, "15012347357"));
    otherActions.push_back(make_pair(7, "1234513571757"));
    otherActions.push_back(make_pair(1, "135031457"));
    otherActions.push_back(make_pair(9, "013501357"));
    otherActions.push_back(make_pair(1, "13501357"));
    otherActions.push_back(make_pair(1, "13503151"));
    otherActions.push_back(make_pair(7, "13457270161"));
    otherActions.push_back(make_pair(1, "013503737357"));
    otherActions.push_back(make_pair(1, "135037350"));
    otherActions.push_back(make_pair(7, "135037357"));
    otherActions.push_back(make_pair(9, "134570150"));
    otherActions.push_back(make_pair(0, "0123450516157"));
    otherActions.push_back(make_pair(4, "01235061510"));
    otherActions.push_back(make_pair(7, "134570157"));
    otherActions.push_back(make_pair(1, "134570351"));
    otherActions.push_back(make_pair(9, "1345720357"));
    otherActions.push_back(make_pair(1, "13570357"));
    otherActions.push_back(make_pair(7, "0134513517357"));
    otherActions.push_back(make_pair(4, "013513501515160"));
    otherActions.push_back(make_pair(8, "0150123451460"));
    otherActions.push_back(make_pair(4, "0135135032067"));
    otherActions.push_back(make_pair(2, "0123451357160"));
    otherActions.push_back(make_pair(4, "0135135015157"));
    otherActions.push_back(make_pair(4, "013513503717"));
    otherActions.push_back(make_pair(2, "0135135037157"));
    otherActions.push_back(make_pair(7, "13513501757"));
    otherActions.push_back(make_pair(4, "0135123503167"));
    otherActions.push_back(make_pair(1, "1450151357"));
    otherActions.push_back(make_pair(9, "15012513461"));
    otherActions.push_back(make_pair(5, "01501253457"));
    otherActions.push_back(make_pair(8, "015012351357"));
    otherActions.push_back(make_pair(5, "01501345134560"));
    otherActions.push_back(make_pair(7, "0150134513567"));
    otherActions.push_back(make_pair(2, "015013453467"));
    otherActions.push_back(make_pair(1, "150134513457"));
    otherActions.push_back(make_pair(2, "015013513457"));
    otherActions.push_back(make_pair(7, "015013463457"));
    otherActions.push_back(make_pair(9, "15013473460"));
    otherActions.push_back(make_pair(1, "150123457"));
    otherActions.push_back(make_pair(7, "015013636346157"));
    otherActions.push_back(make_pair(1, "01501351357"));
    otherActions.push_back(make_pair(1, "01501345157"));
    otherActions.push_back(make_pair(7, "14501357"));
    otherActions.push_back(make_pair(7, "134516357"));
    otherActions.push_back(make_pair(1, "134571467"));
    otherActions.push_back(make_pair(4, "13573751"));
    otherActions.push_back(make_pair(7, "0134571757"));
    otherActions.push_back(make_pair(1, "135737350"));
    otherActions.push_back(make_pair(9, "135737360"));
    otherActions.push_back(make_pair(0, "0134517351"));
    otherActions.push_back(make_pair(1, "1350151"));
    otherActions.push_back(make_pair(4, "013450351"));
    otherActions.push_back(make_pair(9, "134517357"));
    otherActions.push_back(make_pair(0, "013450357"));
    otherActions.push_back(make_pair(4, "013460367"));
    otherActions.push_back(make_pair(3, "01450151"));
    otherActions.push_back(make_pair(8, "134517360"));
    otherActions.push_back(make_pair(8, "012351346717"));
    otherActions.push_back(make_pair(0, "01245610"));
    otherActions.push_back(make_pair(9, "012456157"));
    otherActions.push_back(make_pair(8, "123451617"));
    otherActions.push_back(make_pair(9, "01234516150"));
    otherActions.push_back(make_pair(4, "012356157"));
    otherActions.push_back(make_pair(8, "012345156157"));
    otherActions.push_back(make_pair(4, "012345615157"));
    otherActions.push_back(make_pair(8, "012515617"));
    otherActions.push_back(make_pair(9, "01234505057"));
    otherActions.push_back(make_pair(7, "012345150560"));
    otherActions.push_back(make_pair(4, "0134505057"));
    otherActions.push_back(make_pair(1, "13505057"));
    otherActions.push_back(make_pair(0, "13506160"));
    otherActions.push_back(make_pair(4, "1351505067"));
    otherActions.push_back(make_pair(7, "0123513567157"));
    otherActions.push_back(make_pair(6, "01251456157"));
    otherActions.push_back(make_pair(6, "013512345717"));
    otherActions.push_back(make_pair(9, "135016150"));
    otherActions.push_back(make_pair(2, "135016167"));
    otherActions.push_back(make_pair(1, "1350205160"));
    otherActions.push_back(make_pair(0, "1350272060"));
    otherActions.push_back(make_pair(7, "01234515057"));
    otherActions.push_back(make_pair(1, "013502057"));
    otherActions.push_back(make_pair(9, "01234737"));
    otherActions.push_back(make_pair(1, "1345037"));
    otherActions.push_back(make_pair(2, "135027"));
    otherActions.push_back(make_pair(9, "01234615151"));
    otherActions.push_back(make_pair(2, "01235136717"));
    otherActions.push_back(make_pair(8, "135135057167"));
    otherActions.push_back(make_pair(7, "134513570167"));
    otherActions.push_back(make_pair(5, "013513460157"));
    otherActions.push_back(make_pair(4, "013513570157"));
    otherActions.push_back(make_pair(4, "13451357157"));
    otherActions.push_back(make_pair(6, "01351234615151"));
    otherActions.push_back(make_pair(0, "01234513505150"));
    otherActions.push_back(make_pair(6, "012513456157"));
    otherActions.push_back(make_pair(0, "01251345060"));
    otherActions.push_back(make_pair(9, "01234505160"));
    otherActions.push_back(make_pair(7, "012347350515150"));
    otherActions.push_back(make_pair(2, "01251345050"));
    otherActions.push_back(make_pair(6, "012351356157"));
    otherActions.push_back(make_pair(5, "01234734610"));
    otherActions.push_back(make_pair(1, "01234736157"));
    otherActions.push_back(make_pair(8, "01234610"));
    otherActions.push_back(make_pair(7, "01234617"));
    otherActions.push_back(make_pair(8, "012346157"));
    otherActions.push_back(make_pair(8, "01246157"));
    otherActions.push_back(make_pair(0, "012345151560"));
    otherActions.push_back(make_pair(6, "0123473560"));
    otherActions.push_back(make_pair(8, "0123461515157"));
    otherActions.push_back(make_pair(8, "012345057"));
    otherActions.push_back(make_pair(4, "0123735067"));
    otherActions.push_back(make_pair(7, "13571567"));
    otherActions.push_back(make_pair(4, "13505157"));
    otherActions.push_back(make_pair(1, "1345721567"));
    otherActions.push_back(make_pair(6, "012351346150"));
    otherActions.push_back(make_pair(6, "013512345615150"));
    otherActions.push_back(make_pair(0, "01257"));
    otherActions.push_back(make_pair(8, "01234515157"));
    otherActions.push_back(make_pair(6, "13451561"));
    otherActions.push_back(make_pair(8, "012351561"));
    otherActions.push_back(make_pair(6, "01236367"));
    otherActions.push_back(make_pair(0, "01236460"));
    otherActions.push_back(make_pair(8, "01245157"));
    otherActions.push_back(make_pair(6, "012363460"));
    otherActions.push_back(make_pair(0, "0134510"));
    otherActions.push_back(make_pair(0, "0134561"));
    otherActions.push_back(make_pair(8, "014561"));
    otherActions.push_back(make_pair(0, "013567"));
    otherActions.push_back(make_pair(1, "013510"));
    otherActions.push_back(make_pair(0, "0134734505610"));
    otherActions.push_back(make_pair(6, "0135147350"));
    otherActions.push_back(make_pair(8, "013451450"));
    otherActions.push_back(make_pair(6, "0134737560"));
    otherActions.push_back(make_pair(8, "013473560"));
    otherActions.push_back(make_pair(0, "01347360"));
    otherActions.push_back(make_pair(4, "01347357"));
    otherActions.push_back(make_pair(0, "013747457"));
    otherActions.push_back(make_pair(0, "013734767"));
    otherActions.push_back(make_pair(6, "0137347357"));
    otherActions.push_back(make_pair(6, "01373634567"));
    otherActions.push_back(make_pair(5, "013634567"));
    otherActions.push_back(make_pair(1, "0134735060"));
    otherActions.push_back(make_pair(7, "1345727160"));
    otherActions.push_back(make_pair(1, "134515060"));
    otherActions.push_back(make_pair(6, "013513460"));
    otherActions.push_back(make_pair(3, "0151347357"));
    otherActions.push_back(make_pair(4, "0135134517"));
    otherActions.push_back(make_pair(9, "01351345160"));
    otherActions.push_back(make_pair(4, "015134737"));
    otherActions.push_back(make_pair(1, "134572157"));
    otherActions.push_back(make_pair(9, "01514561"));
    otherActions.push_back(make_pair(9, "1501347357"));
    otherActions.push_back(make_pair(1, "01351561"));
    otherActions.push_back(make_pair(4, "01351235150"));
    otherActions.push_back(make_pair(6, "01351235167"));
    otherActions.push_back(make_pair(8, "152461"));
    otherActions.push_back(make_pair(4, "135147367"));
    otherActions.push_back(make_pair(9, "135137360"));
    otherActions.push_back(make_pair(1, "014767"));
    otherActions.push_back(make_pair(4, "0147360"));
    otherActions.push_back(make_pair(3, "1350357"));
    otherActions.push_back(make_pair(5, "137361"));
    otherActions.push_back(make_pair(1, "137350"));
    otherActions.push_back(make_pair(6, "0147357"));
    otherActions.push_back(make_pair(1, "13573737"));
    otherActions.push_back(make_pair(4, "135151050"));
    otherActions.push_back(make_pair(3, "150147357"));
    otherActions.push_back(make_pair(4, "01351357057"));
    otherActions.push_back(make_pair(1, "0150136360"));
    otherActions.push_back(make_pair(2, "141350"));
    otherActions.push_back(make_pair(3, "1501513461"));
    otherActions.push_back(make_pair(0, "0134135150"));
    otherActions.push_back(make_pair(1, "10501352357"));
    otherActions.push_back(make_pair(4, "015013635151"));
    otherActions.push_back(make_pair(1, "10501351360"));
    otherActions.push_back(make_pair(7, "01501376467"));
    otherActions.push_back(make_pair(3, "0150501351350"));
    otherActions.push_back(make_pair(8, "01505013513457"));
    otherActions.push_back(make_pair(1, "050135137"));
    otherActions.push_back(make_pair(4, "0151345060"));
    otherActions.push_back(make_pair(7, "0501345157"));
    otherActions.push_back(make_pair(5, "12050501352467"));
    otherActions.push_back(make_pair(9, "1505012347357"));
    otherActions.push_back(make_pair(3, "120505050135123457"));
    otherActions.push_back(make_pair(7, "15050123467"));
    otherActions.push_back(make_pair(3, "130150136461"));
    otherActions.push_back(make_pair(3, "130505013451234560"));
    otherActions.push_back(make_pair(9, "015050501234734737360"));
    otherActions.push_back(make_pair(5, "01501351234513457"));
    otherActions.push_back(make_pair(9, "0123450105123450615157"));

    otherActions.push_back(make_pair(10, "1451"));
    otherActions.push_back(make_pair(4, "013636051"));
    otherActions.push_back(make_pair(19, "135707"));
    otherActions.push_back(make_pair(14, "137"));
    otherActions.push_back(make_pair(4, "01351350307"));
    otherActions.push_back(make_pair(18, "013451"));
    otherActions.push_back(make_pair(64, "13513636051"));
    
    arrActions[0] = make_pair<int, string*>(sizeof(arrActions0) / sizeof(string), arrActions0);
    arrActions[1] = make_pair<int, string*>(sizeof(arrActions1) / sizeof(string), arrActions1);
    arrActions[2] = make_pair<int, string*>(sizeof(arrActions2) / sizeof(string), arrActions2);
    arrActions[3] = make_pair<int, string*>(sizeof(arrActions3) / sizeof(string), arrActions3);
    arrActions[4] = make_pair<int, string*>(sizeof(arrActions4) / sizeof(string), arrActions4);
    arrActions[5] = make_pair<int, string*>(sizeof(arrActions5) / sizeof(string), arrActions5);
    arrActions[6] = make_pair<int, string*>(sizeof(arrActions6) / sizeof(string), arrActions6);
    arrActions[7] = make_pair<int, string*>(sizeof(arrActions7) / sizeof(string), arrActions7);
    arrActions[8] = make_pair<int, string*>(sizeof(arrActions8) / sizeof(string), arrActions8);
    arrActions[9] = make_pair<int, string*>(sizeof(arrActions9) / sizeof(string), arrActions9);
    
    //ifstream fin(argv[1]);

    string tempLine, strSym;
    string::iterator strIt;
    vector <string> vecSym;
    bool onlyDot, onlyDotYet = true;
    while(!getline(cin, tempLine).eof())
    {
        onlyDot = true;
        strSym.clear();
        for (strIt = tempLine.begin(); strIt != tempLine.end() - 1; strIt ++) {
            if (*strIt == '%' || *strIt == '#' || *strIt == '@' || *strIt == '.') {
                strSym.push_back(*strIt);
                if (*strIt != '.') {
                    onlyDot = false;
                    onlyDotYet = false;
                }
            }
        }
        
        if (onlyDot && !onlyDotYet) {
            vecSym.push_back(strSym);
            break;
        }
        if (!onlyDotYet) {
            if (vecSym.size() == 0) {
                vecSym.push_back(string(strSym.size(), '.'));
            }
            vecSym.push_back(tempLine);
        }
    }

    vector <Symbol> zSymbols = breakSymbols(vecSym);
    vector <Symbol>::iterator symIt;
    multimap <char, string>::const_iterator mapIt;
    double min = 10000, comp = 0;
    char whatSymbol;
    bool first = false, finded = false;
    char pix;
    int i = 0, j = 0;
    ostringstream oss(ostringstream::out);
    vector <pair <int, string> >::iterator otherActionsIt;
    for (symIt = zSymbols.begin(); symIt != zSymbols.end(); symIt++) {
        min = 10000;
        comp = 0;
        whatSymbol = 'f';
        finded = false;
        for (i = 0; i < 10; i++) {
            for (j = 0; j < arrActions[i].first; j++) {
                if ((*symIt).test(arrActions[i].second[j], first)) {
                    oss << i;
                    finded = true;
                    break;
                }
            }
            if (finded == true) {
                break;
            }
        }
        if (!finded) {
            for (otherActionsIt = otherActions.begin(); otherActionsIt != otherActions.end(); otherActionsIt++) {
                if ((*symIt).test((*otherActionsIt).second)) {
                    if ((*otherActionsIt).first == 10) {
                        if ((*symIt).getBorderNums() == 1) {
                            oss << 0;
                        } else {
                            oss << 1;
                        }
                    } else if ((*otherActionsIt).first == 19) {
                        if ((*symIt).getBorderNums() == 1) {
                            oss << 1;
                        } else {
                            oss << 9;
                        }
                    } else if ((*otherActionsIt).first == 14) {
                        if ((*symIt).getBorderNums() == 1) {
                            oss << 1;
                        } else {
                            oss << 4;
                        }
                    } else if ((*otherActionsIt).first == 18) {
                        if ((*symIt).getBorderNums() == 1) {
                            oss << 1;
                        } else {
                            oss << 8;
                        }
                    } else if ((*otherActionsIt).first == 64) {
                        if ((*symIt).getBorderNums() == 1) {
                            oss << 4;
                        } else {
                            oss << 6;
                        }
                    }  else {
                        oss << (*otherActionsIt).first;
                    }
                    finded = true;
                    break;
                }
            }
        }
    }
    cout << oss.str();
    cout << endl;    
    return 0;
}

void fillSymbol(int x, int y, const vector <string>& sym, map <pair <int, int>, char> & points, int* minmax) {
    pair <int, int> p(x,y);
    if (points.count(p) > 0) {
        return;
    }
    if (x < minmax[0]) {minmax[0] = x;}
    if (x > minmax[1]) {minmax[1] = x;}
    if (y < minmax[2]) {minmax[2] = y;}
    if (y > minmax[3]) {minmax[3] = y;}
    if (sym[y][x] == '@' || sym[y][x] == '#' || sym[y][x] == '%') {
        points[p] = sym[y][x];
        if (x != sym[y].size() - 1) {
            fillSymbol(x+1, y, sym, points, minmax);
            if (y != sym.size() - 1) {
                fillSymbol(x+1, y+1, sym, points, minmax);
            }
        }
        
        if (y != sym.size() - 1) {
            fillSymbol(x, y+1, sym, points, minmax);
            if (x != 0) {
                fillSymbol(x-1, y+1, sym, points, minmax);
            }
        }
        if (x != 0) {
            fillSymbol(x-1, y, sym, points, minmax);
            if(y != 0) {
                fillSymbol(x-1, y-1, sym, points, minmax);
            }
        }
        
        if (y != 0) {
            fillSymbol(x, y-1, sym, points, minmax);
            if (x != sym[y].size() - 1) {
                fillSymbol(x+1, y-1, sym, points, minmax);
            }
        }
    }
}

bool nearPoint(int tcX, int x, int width, int fCount) {
    if (fCount == 1) {
        return abs(tcX - width/2) > abs(x-1 - width/2);
    } else if (fCount == 2) {
        return abs(tcX - width/3) > abs(x-1 - width/3);
    }
}
vector <Symbol> breakSymbols(vector <string>& sym) {
    vector <Symbol> vectSyms;
    if (sym.size() != 0) {
        int x, y = sym.size()/2;
        map <pair <int, int>, char> points;
        map <pair <int, int>, char>::iterator pIt;
        vector < vector <string> > newVecSym;
        int minmax[4];
        for(x = 0; x < sym[0].size(); x++) {
            if (sym[y][x] != '.') {
                points.clear();
                minmax[0] = minmax[1] = x;
                minmax[2] = minmax[3] = y;
                fillSymbol(x, y, sym, points, minmax);
                if (points.size() > 5) {
                    newVecSym.push_back(vector <string>(minmax[3] - minmax[2] + 1, string(minmax[1] - minmax[0] + 1, '.')));
                    for (pIt = points.begin(); pIt != points.end(); pIt++) {
                        newVecSym.back()[(*pIt).first.second - minmax[2]][(*pIt).first.first -  minmax[0]] = (*pIt).second;
                    }
                }
                for (pIt = points.begin(); pIt != points.end(); pIt++) {
                    sym[(*pIt).first.second][(*pIt).first.first] = '.';
                }
            }
        }        
        while (newVecSym.size() < 3) {
            vector < vector <string> >::iterator rVec;
            if (newVecSym.size() == 1 || newVecSym[0][0].size() > newVecSym[1][0].size()) {
                rVec = newVecSym.begin();
            } else {
                rVec = newVecSym.begin() + 1;
            }
            bool up = false;
            vector <pair <int, int> > xMin(1, make_pair(-1, -1));
            int width = (*rVec)[0].size();
            int height = (*rVec).size();
            int yprev = height;
            for (x = 0; x < width; x++) {
                for (y = 0; y < height; y++) {
                    if ((*rVec)[y][x] != '.') {
                        if (yprev > y) {
                            if (!up) {
                                if (x > 3 && (*rVec)[0].size() - x > 3) {
                                    if (xMin[0].first == -1 || nearPoint(xMin[0].first, x, width, newVecSym.size())) {
                                        xMin[0] = make_pair(x-1, yprev-1);
                                    }
                                }
                                up = true;
                            }
                        } else if (yprev < y) {
                            up = false;
                        }
                        yprev = y;
                        break;
                    }
                }
            }

            if (xMin[0].first != -1) {
                //ищем путь вниз
                bool go = true;
                pair <int, int> np(0, 0);
                
                int dx = 0;
                while (go) {
                    go = false;
                    for (dx = -1; dx < 2; dx ++) {
                        np = make_pair(xMin.back().first + dx, xMin.back().second);
                        if ((*rVec)[np.second][np.first] == '.' && (*rVec)[np.second+1][np.first] == '.') {
                            xMin.push_back(make_pair(np.first, np.second+1));
                            go = true;
                        }
                    }
                }
                //вес путь до точки
                multimap <double, vector <pair <int, int> > > open;
                vector <pair <int, int> > closed;
                open.insert(pair<double, vector <pair <int, int> > > (0, xMin));
                multimap <double, vector <pair <int, int> > >::iterator oIt;
                map <char, double> table;
                table['.'] = 1;
                table['%'] = 3;
                table['#'] = 5;
                table['@'] = 8;
                
                
                double val = 0;
                vector <pair <int, int> > npair;

                oIt = open.begin();
                pair <int, int> p = (*oIt).second.back();

                while (p.second != height - 1) {
                    npair = (*oIt).second;
                    open.erase(oIt);
                    for (dx = -1; dx < 2; dx ++) {
                        if (p.first + dx < 3) {
                            continue;
                        }
                        
                        np = make_pair(p.first + dx, p.second + 1);
                        if (find(closed.begin(), closed.end(), np) == closed.end()) {
                            val = table[(*rVec)[np.second][np.first]];
                            if (dx != 0) {val *= 1.5;}
                            vector <pair <int, int> > npairx = npair;
                            npairx.push_back(np);
                            open.insert(pair<double, vector <pair <int, int> > > (val, npairx));
                        }
                    }
                    closed.push_back(p);
                    oIt = open.begin();
                    p = (*oIt).second.back();
                }
                //Разрезаем
                vector <string> vecSymIns(height, string (width, '.'));
                int lmax = 0, rmin = 10000;
                
                vector <pair <int, int> >::iterator veIt = (*oIt).second.begin();
                int curX = 0;
                for (y = 0; y < (*veIt).second; y++) {
                    curX = (*veIt).first + 1;
                    vecSymIns[y].replace(curX, width - curX, (*rVec)[y].substr(curX, width - curX));
                    (*rVec)[y].replace(curX, width - curX, width - curX, '.');
                }
                
                for (veIt = (*oIt).second.begin(); veIt != (*oIt).second.end(); veIt++) {
                    curX = (*veIt).first + 1;
                    vecSymIns[(*veIt).second].replace(curX, width - curX, (*rVec)[(*veIt).second].substr(curX, width - curX));
                    (*rVec)[(*veIt).second].replace(curX, width - curX, width - curX, '.');
                    if (lmax < (*veIt).first) {
                        lmax = (*veIt).first;
                    }
                    if (rmin > (*veIt).first) {
                        rmin = (*veIt).first;
                    }
                }
                vector <string>::iterator vecSIt;
                for (vecSIt = (*rVec).begin(); vecSIt != (*rVec).end(); vecSIt++) {
                    (*vecSIt).resize(lmax + 2);
                }
                
                for (vecSIt = vecSymIns.begin(); vecSIt != vecSymIns.end(); vecSIt++) {
                    (*vecSIt) = (*vecSIt).substr(rmin-1);
                }
                
                newVecSym.insert(rVec+1, vecSymIns);
            } else {
                break;
            }
        }
        vector < vector <string> >::iterator it;
        for (it = newVecSym.begin(); it != newVecSym.end(); it++) {
            vectSyms.push_back(Symbol(*it));
        }
    }
    return vectSyms;
}
