#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

//#include<weights.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.8;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

/*
 * Neural Network classes and functions
 * */

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {0.00656,0.00808,0.00674,0.13762,0.36540,0.39939,0.42264,0.19765,0.01484,-0.08798,-0.08035,-0.04750,0.05705,0.22523,0.28877,0.22623,0.10187,0.02450,0.00617,-0.00669,0.04769,0.14610,0.23722,0.28184,0.24054,0.20195,0.05996,-0.05619,-0.11736,-0.00035,0.13022,0.24027,0.35440,0.25227,0.08613,0.00939,-0.01159,-0.04905,0.01640,0.08105,0.14739,0.15544,0.19266,0.10731,0.18791,0.08293,-0.01520,0.00850,0.06938,0.19207,0.34762,0.20128,0.07213,-0.01947,-0.04317,-0.02896,-0.02487,0.02844,0.04430,-0.00538,0.11089,0.11239,0.14905,-0.05529,-0.17975,0.02838,0.05877,0.17378,0.22165,0.10416,0.05169,-0.01439,-0.01249,-0.02691,-0.02179,0.01012,-0.01107,-0.11795,-0.11310,-0.07144,-0.13237,-0.25430,-0.26453,0.10705,0.10199,0.09284,0.04668,0.01557,0.03372,-0.02067,-0.01940,-0.00425,-0.02525,-0.03283,0.02352,-0.23336,-0.17498,-0.10037,-0.14762,-0.35136,-0.14334,0.15666,0.09923,-0.01113,-0.01870,-0.01105,0.00115,-0.01959,-0.02023,-0.00609,-0.00020,0.02709,-0.03403,-0.15045,-0.05507,-0.10817,-0.17409,-0.38946,-0.05870,0.14841,0.07203,-0.10276,-0.06924,-0.05211,0.00063,-0.02037,-0.02211,-0.00527,-0.00420,-0.00330,-0.03573,-0.10940,-0.13404,-0.13120,-0.18528,-0.30490,0.13453,-0.00689,-0.07270,-0.12790,-0.06954,-0.00483,0.00593,-0.01329,-0.02165,-0.00667,-0.00083,0.00386,-0.03778,-0.05867,-0.05837,-0.10854,-0.23827,-0.15251,0.09295,-0.08178,-0.12540,-0.13241,-0.08505,0.00283,-0.00031,-0.02094,-0.02190,-0.00713,-0.00017,-0.00433,-0.04983,-0.06609,-0.06218,-0.03236,0.05203,0.05454,0.00919,0.00804,-0.05668,-0.11380,-0.04066,0.00101,0.00829,-0.01965,-0.02135,-0.00553,0.00100,-0.01072,-0.05001,-0.05811,-0.06810,0.01257,0.22087,0.02270,-0.19908,-0.01682,-0.01246,-0.09572,-0.03964,-0.00467,0.00536,-0.01213,-0.02128,-0.00417,0.00432,-0.01226,-0.05135,-0.06027,-0.07788,0.09407,0.17003,-0.01840,-0.19417,0.02391,-0.12163,-0.08063,-0.05011,-0.01459,-0.00222,-0.02099,-0.02369,-0.00649,0.00326,-0.01101,-0.05278,-0.08485,-0.05728,-0.00040,0.00702,0.03674,-0.07358,-0.02354,-0.13285,-0.12844,-0.10590,-0.01314,-0.00432,-0.02001,-0.02308,-0.00676,-0.00637,-0.02985,-0.10279,-0.16628,-0.00727,-0.01667,0.17830,0.08830,-0.08824,-0.03956,-0.11834,-0.19428,-0.10947,-0.06883,-0.05729,-0.02033,-0.01985,-0.00770,-0.01787,-0.09167,-0.15092,-0.19417,-0.12954,0.11592,0.22481,0.09274,-0.09020,-0.05049,-0.18092,-0.16453,-0.17016,-0.10261,-0.05986,-0.07592,-0.02087,-0.03084,-0.02802,-0.13791,-0.21291,-0.26175,-0.11801,0.06424,0.07831,-0.11681,-0.24737,-0.20028,-0.29939,-0.25499,-0.18193,-0.08180,-0.00262,-0.02394,-0.00101,-0.02986,-0.06072,-0.10273,-0.19945,-0.18331,-0.13986,-0.05621,-0.11144,-0.24923,-0.35104,-0.24762,-0.28662,-0.22669,-0.17568,-0.02700,-0.00285,-0.02724,-0.00105,-0.00455,-0.03995,-0.15489,-0.32850,-0.32900,-0.23971,-0.23705,-0.08553,-0.29334,-0.47878,-0.41076,-0.35310,-0.28432,-0.16075,-0.05279,-0.00093,0.00115,0.12744,};
float weights_input_1[] = {-0.00192,0.00788,0.00821,-0.16691,-0.19115,-0.09940,-0.10378,-0.09986,-0.24904,-0.38501,-0.35110,0.03885,0.23578,0.14714,0.20921,0.17142,-0.11734,0.00396,0.00005,-0.02919,-0.12457,-0.00895,-0.17947,-0.30809,-0.33295,-0.07106,-0.31739,-0.40797,-0.32555,-0.03318,0.07263,0.16986,0.11362,0.38298,-0.04300,-0.09944,-0.03524,-0.13942,-0.02584,-0.02296,-0.08732,-0.34792,-0.19395,-0.15541,0.05267,0.08309,-0.01274,0.17458,-0.09539,-0.04922,0.11677,0.09333,-0.01765,-0.13633,-0.03540,-0.10391,-0.04993,-0.04229,-0.26433,-0.21134,-0.03904,-0.10083,-0.04519,0.08614,0.15387,-0.26819,-0.16619,-0.10806,-0.12879,-0.28889,-0.07572,-0.11384,-0.03742,-0.10304,-0.06084,0.09622,0.08630,-0.11070,-0.11033,-0.02879,-0.05110,0.16799,-0.22893,-0.33617,-0.36325,-0.26970,-0.34974,-0.37788,-0.27638,-0.11198,0.00219,-0.10442,0.04012,0.00746,0.01455,-0.13107,-0.10679,-0.08801,0.05253,0.18823,-0.38615,-0.71037,-0.56221,-0.88067,-0.72545,-0.58930,-0.33815,-0.14214,0.00086,-0.10179,0.04330,0.07539,0.15101,0.14822,0.04279,-0.05175,-0.02201,0.35774,0.25660,-0.21585,-0.63740,-0.83333,-0.74759,-0.47975,-0.23938,-0.14337,0.00125,-0.06111,0.01583,0.06514,0.33549,0.49246,-0.11916,0.31504,0.26538,0.29994,0.40643,0.25278,0.29503,-0.19932,-0.21093,-0.29263,-0.23342,-0.23400,0.00275,-0.08905,0.04771,0.14930,0.52607,0.54412,0.28612,0.17544,-0.03122,-0.01846,0.05335,0.47796,0.30445,0.33030,0.19833,0.18700,-0.20289,-0.14463,0.00146,-0.09015,0.04809,0.26552,0.36658,0.25160,0.36722,0.12715,-0.15771,-0.17044,-0.00472,0.06169,0.41844,0.29219,0.17825,0.30030,-0.01186,-0.12912,0.04988,-0.04046,0.08220,0.02468,0.05803,-0.01120,-0.04827,0.12678,-0.17802,-0.16933,-0.06673,-0.07026,0.18847,0.14112,0.17140,0.18404,0.14965,-0.09967,0.04966,-0.03277,0.08693,-0.07079,-0.26638,-0.13765,0.14375,-0.11671,0.07464,0.11513,0.01577,-0.05447,0.18397,0.08705,0.12038,0.19255,0.14543,-0.10040,0.13207,0.00781,0.08703,-0.08136,-0.15104,-0.03251,0.12799,-0.03137,0.02852,0.30156,0.07395,0.02032,0.19477,0.12701,0.16954,0.28623,0.03934,-0.04435,0.13339,0.00141,0.13444,-0.08698,-0.17379,-0.07223,0.11828,0.01885,-0.01535,0.26120,0.05855,-0.05625,0.04136,0.21338,0.20165,0.30235,0.10105,0.06995,-0.03502,0.00399,0.08505,-0.10348,-0.43374,-0.41954,-0.25796,0.07072,0.14746,0.16190,0.08330,0.16196,-0.11139,0.14381,0.06419,0.08649,0.22426,-0.01418,-0.03515,-0.01590,0.00703,-0.21653,-0.34119,-0.37762,-0.35787,-0.08479,0.10128,0.09836,0.09491,-0.05526,-0.04141,0.17665,0.15897,0.12034,0.15545,-0.03768,0.00056,-0.13572,0.04404,-0.07574,-0.06256,-0.17574,-0.03984,-0.07489,0.19510,0.24084,-0.10066,-0.00095,0.10232,0.10606,0.14807,0.17970,0.00700,-0.13910,-0.00019,0.01907,-0.05635,0.10337,0.29030,-0.12515,-0.04213,-0.01374,-0.06275,-0.05101,-0.00312,0.32571,0.18250,0.25182,0.00135,-0.13532,0.00829,0.00108,0.01439,};
float weights_input_2[] = {-0.00221,-0.05032,-0.05169,-0.04048,-0.13957,-0.31759,-0.39068,-0.13900,0.03754,-0.10154,-0.15075,-0.09401,-0.00414,0.06691,-0.05803,0.37867,0.00633,-0.00170,-0.00182,-0.04324,-0.11533,-0.12193,-0.23687,-0.18922,-0.10282,0.30232,-0.12570,0.04443,0.15735,0.15607,0.05442,-0.15611,-0.07160,0.36119,0.00885,0.01519,0.00682,-0.03108,-0.13242,-0.11234,-0.19920,-0.39338,-0.01107,0.07769,0.35500,-0.01469,-0.11662,-0.20977,-0.08102,-0.16744,0.22520,0.19315,0.00870,0.03215,0.00508,0.01709,-0.00641,0.09279,-0.14102,0.23624,0.36296,0.14561,-0.02544,0.13599,-0.31068,-0.34561,-0.24907,-0.05933,0.06017,0.08902,0.00446,0.00947,0.00782,0.01707,0.06451,0.02952,0.14952,0.26085,0.07762,0.20073,-0.08559,-0.46048,-0.22356,-0.45316,-0.17277,0.05892,-0.00102,0.11873,0.03184,0.01158,0.00786,0.03472,0.14625,0.17529,0.29230,0.22092,0.38857,0.26305,-0.01446,-0.47589,-0.63559,-0.42955,-0.37942,-0.24093,-0.03208,0.03582,0.16436,0.02072,0.02789,-0.01583,0.15535,0.27970,0.56830,0.80665,0.58353,0.51499,-0.09233,-0.17676,-0.25531,-0.20655,-0.35844,-0.36197,-0.14789,0.08197,0.17102,0.03738,0.02777,-0.01517,0.15878,0.34173,0.53298,0.46883,0.59527,0.42632,0.35631,0.08963,0.24354,0.03072,-0.20621,-0.30100,-0.03795,0.14050,0.16871,0.04513,0.02695,-0.01043,0.09228,0.26550,0.42474,0.29415,0.12329,0.14733,0.04895,0.03060,0.00536,0.07700,-0.47480,-0.21384,0.27755,0.18773,0.20548,0.04508,0.02336,-0.00970,0.08843,0.09782,0.12355,0.16884,0.41435,0.04056,-0.17554,-0.27691,-0.19225,-0.27321,0.17065,0.23773,0.31513,0.21529,0.20484,0.04503,0.02692,-0.01211,0.06963,0.13047,0.27043,0.32074,0.65131,0.54575,0.38318,0.12051,-0.00024,-0.25467,0.00804,0.33611,0.39021,0.13531,0.26472,0.07293,0.02496,-0.01273,-0.08843,0.17034,0.08514,0.22482,0.29530,0.25017,-0.00525,-0.29971,-0.06736,0.01815,0.20057,0.16747,0.32504,-0.07608,0.10018,0.07318,0.03358,-0.05608,-0.17705,-0.03470,-0.12260,-0.02250,-0.11178,-0.25096,-0.69211,-0.74347,-0.09560,0.17200,0.03957,0.04406,0.08668,-0.18132,0.15514,0.05465,-0.02413,-0.02386,-0.25030,-0.19503,-0.28529,-0.14065,-0.12148,-0.26356,-0.46137,-0.42385,0.04293,0.25733,-0.03374,0.08529,0.04638,-0.14283,0.01895,-0.01630,-0.03352,-0.06224,-0.28621,-0.06595,-0.25515,-0.25591,-0.15020,0.06767,-0.12827,-0.05599,-0.10215,0.11221,-0.02487,0.10526,-0.22187,-0.07956,-0.00628,0.00024,0.00231,-0.07568,-0.32987,-0.17738,-0.18826,-0.01540,0.10408,-0.00845,-0.12723,-0.56800,0.11542,-0.20979,-0.11894,-0.05508,-0.06017,-0.11662,-0.09686,0.00552,-0.00039,-0.06758,-0.30823,-0.43925,-0.20056,0.18556,0.44793,0.28737,0.02982,-0.13821,-0.33405,-0.09038,-0.37150,-0.21476,-0.16684,-0.14160,-0.00316,0.02209,-0.00534,0.00968,-0.17099,-0.18596,0.08347,0.00048,-0.06462,0.24996,0.08675,-0.13021,-0.11109,-0.37603,-0.38892,-0.37341,-0.39560,-0.18901,-0.00375,0.00146,-0.02246,};
float weights_input_3[] = {0.00108,-0.00057,-0.00392,-0.00298,0.00901,0.15501,0.11480,0.03445,-0.05691,0.10938,0.11324,-0.03311,0.06855,0.10045,-0.02119,0.01910,-0.08376,0.00099,-0.00175,0.03927,-0.06248,-0.04648,0.16994,0.12397,0.16673,0.09053,0.15424,0.10004,-0.00860,-0.13239,-0.12321,-0.04004,-0.01011,-0.01041,-0.02729,-0.03096,0.03953,0.00933,-0.01917,0.04270,0.21206,0.19889,0.23449,0.23130,0.12902,0.17227,0.03683,-0.07789,-0.13317,-0.09126,0.00746,-0.01300,-0.06895,-0.00708,0.04062,-0.01715,0.02971,0.08889,0.16822,0.26609,0.08096,0.15032,0.02320,0.22005,0.09266,0.07769,-0.14757,-0.03860,-0.06597,-0.05972,-0.06431,0.02606,0.05115,-0.01874,0.01564,0.18215,0.22224,0.41579,0.14954,-0.10212,-0.29456,0.02319,0.04586,-0.06399,-0.20689,-0.08725,-0.07884,-0.02398,-0.05437,0.03900,0.05160,-0.02330,0.06415,0.21449,0.26732,0.42051,0.18840,-0.24662,-0.50800,0.04703,0.07404,0.13907,-0.05196,-0.07739,0.03003,0.00078,0.01007,0.03630,0.04815,-0.02315,0.05279,0.13428,0.25668,0.50527,0.03216,-0.29224,-0.29603,0.06310,-0.07300,0.09307,-0.11678,0.07553,0.06444,0.07913,0.00560,0.05392,0.05007,-0.02417,0.06364,0.15662,0.21850,-0.04529,-0.01716,-0.37427,-0.20446,-0.03937,-0.15668,0.15325,0.08521,0.17253,0.22406,0.15000,0.01762,0.01869,0.05041,-0.03742,0.00716,0.08031,0.12061,0.10415,0.00948,-0.23317,-0.52578,-0.32383,-0.23498,0.22522,0.26341,0.29770,0.21436,0.15550,0.01447,0.01977,0.03640,-0.03479,-0.00498,-0.15302,0.03059,0.12379,-0.06380,-0.27243,-0.32269,0.08664,0.06471,0.23804,0.21131,0.23385,0.10466,0.11458,0.00346,0.02225,0.05902,-0.02702,-0.09322,-0.35035,-0.33394,-0.14937,0.02037,0.26417,0.72694,0.69280,0.50503,0.05430,-0.22027,-0.01253,-0.04966,-0.00222,-0.00549,0.02393,0.05992,-0.05046,-0.14321,-0.45070,-0.45168,-0.59114,-0.06892,0.14312,0.52187,0.68147,0.25418,-0.05829,-0.32084,-0.16823,-0.21274,-0.03903,-0.08335,0.02176,0.05840,-0.07189,-0.19795,-0.51892,-0.69226,-0.73204,-0.34641,-0.26690,0.15455,0.24019,-0.03494,-0.10504,-0.34991,-0.26663,-0.23256,-0.07307,-0.10018,0.04861,0.06028,-0.03833,-0.13783,-0.38688,-0.45279,-0.41559,-0.09040,-0.07619,0.19535,0.26758,0.02659,-0.13604,-0.28776,-0.12385,-0.18090,-0.07357,-0.05989,0.05301,0.03818,-0.05171,-0.12933,-0.23131,-0.14048,-0.19996,0.00062,0.09751,0.17168,0.24590,0.15872,-0.09986,-0.23190,-0.18188,-0.12022,-0.12726,-0.05262,0.06086,0.03610,-0.03228,-0.10071,-0.07080,0.13323,-0.03972,-0.20862,-0.20852,0.00701,0.05842,0.10033,0.04100,-0.07242,-0.09677,-0.21774,-0.18639,-0.02716,0.03880,-0.00060,-0.05716,-0.07758,-0.10869,0.16237,-0.01194,-0.15141,-0.04837,-0.16204,-0.17336,-0.18316,-0.05341,-0.01500,-0.05999,-0.08694,-0.05983,0.00507,0.00655,-0.00131,0.00383,0.06271,0.03233,0.08173,0.12172,0.00599,-0.23803,-0.43949,-0.24961,0.06312,0.09652,0.10465,0.17334,0.11371,0.00009,0.00415,-0.00140,0.06137,};
float weights_input_4[] = {0.00062,0.01475,0.01629,0.00609,0.14127,0.05904,0.04360,-0.17156,0.04933,0.02251,0.17934,-0.03478,-0.04455,-0.35958,-0.59250,-0.22576,0.01691,-0.00177,-0.00062,0.03119,0.02407,0.00250,0.19357,0.38324,0.10906,-0.04082,0.01724,0.05412,0.01998,-0.03868,-0.22465,-0.10061,-0.14413,-0.39828,-0.02051,-0.00404,0.01435,0.03137,0.03065,0.00558,0.29572,0.52170,0.19880,-0.11355,-0.34692,-0.06378,-0.17414,-0.24094,0.04514,0.21343,0.08067,0.14389,0.00409,-0.04130,0.01619,-0.00029,-0.00327,0.07579,0.37855,0.13103,-0.13676,-0.16822,-0.26058,-0.06162,0.10799,0.33871,0.04392,0.15901,0.33121,0.34054,0.05491,0.01326,0.01517,-0.00060,-0.03487,0.01750,0.04245,-0.06649,-0.08050,-0.32508,-0.00592,0.17175,0.43646,0.43142,0.23816,0.34473,0.45006,0.33925,0.04628,0.01493,0.00409,-0.02285,-0.08120,-0.01475,-0.17501,-0.16013,-0.23550,-0.01594,0.00216,0.05866,0.40590,0.44878,0.45489,0.75209,0.52707,0.41518,-0.02082,0.01161,-0.01668,-0.00338,-0.09058,-0.02949,-0.39474,-0.32382,-0.26635,-0.10679,0.14492,-0.17774,-0.09011,0.37450,0.57001,0.70457,0.44206,0.31511,-0.08905,0.00189,-0.01669,-0.01521,-0.07099,-0.17108,-0.52304,-0.46968,-0.07864,-0.02916,0.01624,-0.04473,-0.02308,0.28639,0.12042,0.08098,0.00907,0.06246,-0.09988,-0.02475,-0.01630,-0.01600,-0.10379,-0.34146,-0.45197,-0.45387,0.19513,0.19899,0.39192,0.25899,0.20673,0.10836,-0.01210,-0.32397,-0.44743,-0.19081,-0.16556,-0.05882,-0.01779,-0.01716,-0.10477,-0.27046,-0.19488,0.13744,0.28690,0.37298,0.18124,0.19019,0.27359,0.56897,0.02630,-0.25460,-0.27805,-0.15036,-0.22685,-0.05921,-0.02081,-0.01823,-0.06241,-0.12705,-0.13262,0.19032,0.19078,0.23934,0.25665,0.45936,0.81527,0.40881,-0.00547,-0.00057,-0.02719,0.01571,-0.28248,-0.11561,-0.01932,-0.01053,0.10155,-0.05538,0.01995,-0.09625,-0.10557,0.30375,0.53289,0.71684,0.56300,0.26153,-0.12957,0.03235,0.08939,0.10376,-0.22345,-0.11704,-0.06575,0.02382,0.17360,-0.00686,-0.15949,-0.29811,-0.28034,0.12770,0.51618,0.48225,0.12433,-0.03720,0.00824,0.10811,0.23128,0.18961,-0.19914,-0.11007,-0.00645,-0.04253,0.05403,0.02173,-0.06852,-0.21542,-0.38209,-0.07728,0.26531,0.20543,-0.08659,0.02655,-0.05177,0.14130,0.06095,-0.00543,-0.13797,-0.03655,0.05373,-0.02472,0.01806,0.06509,0.08859,0.00583,-0.25902,-0.32783,-0.11841,-0.22278,-0.15348,-0.18647,-0.06496,-0.16617,0.12079,-0.07302,-0.10493,-0.00375,0.01605,-0.06727,0.00023,0.21294,0.02614,-0.12530,-0.12102,-0.19214,-0.20708,-0.06193,-0.19729,0.11302,-0.01790,-0.17880,-0.04062,-0.11122,-0.07587,0.01665,-0.00144,-0.03719,0.01769,0.20134,-0.00844,0.20964,-0.54413,-0.25080,-0.32907,-0.14155,-0.19359,-0.08839,0.06293,0.04528,-0.16338,-0.07782,0.00225,0.01342,-0.00089,-0.07923,0.10465,0.05037,-0.19738,-0.01725,-0.05619,-0.22135,-0.35132,-0.17112,-0.02032,0.01083,0.10716,-0.02470,0.13058,0.06180,0.00058,-0.00067,0.13232,};
float weights_input_5[] = {0.00905,0.00707,0.00626,0.10071,0.31741,0.34848,0.37468,0.15198,-0.04308,-0.09756,-0.09225,-0.05746,0.08738,0.22462,0.26466,0.20465,0.11397,0.02636,0.00741,-0.02025,0.04295,0.14661,0.22172,0.25544,0.18798,0.13460,0.00637,-0.06458,-0.09592,-0.02011,0.09695,0.27042,0.36197,0.24964,0.07759,0.00796,-0.02728,-0.06387,0.02492,0.07805,0.13512,0.10266,0.15099,0.05064,0.16823,0.10939,-0.00215,-0.03638,0.02854,0.19792,0.35934,0.20715,0.07459,-0.04500,-0.04946,-0.02133,-0.01392,0.02417,0.04286,-0.02359,0.06568,0.07742,0.15790,0.03617,-0.09770,-0.02011,0.03398,0.17334,0.24588,0.10595,0.05428,-0.02932,-0.02661,-0.02260,-0.01006,0.00383,0.00105,-0.12494,-0.14613,-0.09989,-0.09653,-0.17078,-0.21519,0.05676,0.11736,0.09593,0.06336,0.02290,0.03184,-0.03918,-0.03949,-0.01139,-0.01254,-0.04020,0.01004,-0.22441,-0.22063,-0.13636,-0.13240,-0.19608,-0.09297,0.10839,0.13006,-0.00821,-0.01031,-0.00914,-0.00434,-0.04110,-0.03859,-0.01180,0.00008,0.01534,-0.06127,-0.19646,-0.13425,-0.16963,-0.13975,-0.22048,-0.02639,0.13371,0.09863,-0.11650,-0.07277,-0.05267,-0.00583,-0.04195,-0.03916,-0.01387,-0.01016,-0.02316,-0.07902,-0.15030,-0.19367,-0.19922,-0.14979,-0.18609,0.16782,0.03446,-0.06739,-0.14803,-0.08111,-0.01189,0.00206,-0.03258,-0.04110,-0.01429,-0.00073,-0.01133,-0.07793,-0.10402,-0.11183,-0.13982,-0.16481,-0.06721,0.11534,-0.07746,-0.13850,-0.16236,-0.11768,-0.00779,-0.00359,-0.03922,-0.03928,-0.01458,0.00100,-0.00497,-0.07249,-0.09439,-0.11470,-0.06581,0.07071,0.09697,0.02516,-0.00820,-0.08078,-0.13446,-0.07358,-0.00818,0.00869,-0.04091,-0.03893,-0.01403,0.00224,-0.00615,-0.04745,-0.07401,-0.09492,-0.03932,0.19354,0.03727,-0.16416,-0.04947,-0.03593,-0.10163,-0.07080,-0.00930,0.00524,-0.02761,-0.03837,-0.01362,0.00666,0.00788,-0.03719,-0.07233,-0.10048,0.07079,0.15595,0.01848,-0.09314,-0.00168,-0.14784,-0.10888,-0.07260,-0.01700,-0.00830,-0.04126,-0.04477,-0.01859,0.00717,-0.00317,-0.06226,-0.11159,-0.06211,-0.01221,0.02811,0.09311,0.00697,-0.03708,-0.17663,-0.14859,-0.12102,-0.01225,-0.00864,-0.04097,-0.04659,-0.01842,-0.00353,-0.01395,-0.11668,-0.19245,-0.00803,0.01655,0.17643,0.14716,-0.03197,-0.06146,-0.14427,-0.21531,-0.13551,-0.07499,-0.06233,-0.04036,-0.03827,-0.02011,-0.02052,-0.09287,-0.15991,-0.22865,-0.14768,0.11749,0.21886,0.12972,-0.03414,-0.04813,-0.19986,-0.19404,-0.18995,-0.10316,-0.06481,-0.10134,-0.03791,-0.05882,-0.03310,-0.13047,-0.21342,-0.28307,-0.13007,0.05527,0.06646,-0.02128,-0.19334,-0.20304,-0.30771,-0.26737,-0.17770,-0.07231,-0.00270,-0.04276,0.00068,-0.05591,-0.06494,-0.11687,-0.18859,-0.17700,-0.12243,-0.06829,-0.15265,-0.22057,-0.32137,-0.27604,-0.26682,-0.19860,-0.14138,-0.02142,-0.00222,-0.05179,0.00023,-0.00500,-0.06716,-0.17922,-0.30468,-0.27424,-0.19735,-0.24103,-0.14864,-0.26981,-0.41527,-0.35596,-0.28249,-0.23495,-0.13710,-0.07174,0.00119,-0.00129,0.11613,};
float weights_input_6[] = {0.00203,0.06570,0.06908,-0.08937,0.03433,0.43856,0.49218,0.27513,0.08873,0.07749,-0.01608,0.03209,0.23898,0.27495,0.50338,0.17629,-0.05500,0.02710,0.00080,0.02350,-0.01257,0.03462,0.04733,0.35420,0.31073,0.07414,0.14855,0.03306,-0.01179,0.01566,0.14378,0.31405,0.38638,0.31886,0.01692,-0.06855,-0.04178,-0.09574,0.05264,-0.00849,0.13274,0.23117,0.36826,0.14366,0.07819,0.11658,0.21271,0.18665,0.18235,0.21403,0.06939,0.09638,0.06915,-0.08830,-0.06619,-0.11047,-0.02099,-0.06319,0.03489,0.02113,0.30508,0.28403,0.33826,0.13685,0.18011,-0.03817,0.19361,-0.11083,-0.10910,-0.10046,-0.02916,-0.03838,-0.04249,-0.11110,-0.04122,-0.11293,0.00241,-0.05118,0.09528,-0.00987,0.02553,0.12695,0.04048,-0.07754,-0.11262,-0.30552,-0.39117,-0.16938,-0.02746,-0.04583,-0.04874,-0.09623,-0.04598,-0.20635,-0.05773,0.01954,-0.30591,-0.07267,-0.16797,0.26137,-0.09621,-0.28646,-0.30488,-0.43303,-0.35203,-0.10884,-0.01285,-0.04522,-0.05034,-0.03232,-0.02633,-0.11357,-0.07578,-0.26376,-0.30225,-0.28436,-0.02903,0.35338,0.16987,-0.18831,-0.23591,-0.43502,-0.25208,-0.13739,-0.00493,-0.04579,-0.05138,-0.03488,0.02153,-0.09836,-0.17382,-0.17354,-0.34831,-0.37840,-0.02956,0.30154,0.30490,-0.12083,-0.12861,-0.05916,-0.25892,-0.03108,0.00147,-0.04451,-0.04968,-0.03509,0.05930,-0.03445,-0.10549,-0.15607,-0.31763,-0.12397,0.15273,0.28703,0.08734,-0.04209,0.04600,0.12214,-0.21636,-0.00416,0.00143,-0.04631,-0.04866,-0.03598,0.05660,-0.08273,-0.24549,-0.34368,-0.55434,-0.11653,0.30377,0.23097,-0.11764,-0.07630,-0.08785,-0.08847,0.11666,-0.00961,-0.01025,-0.04741,-0.03496,-0.02247,0.02450,-0.25518,-0.41698,-0.79555,-0.79239,-0.61860,-0.20191,-0.26585,-0.40791,-0.26969,0.12399,0.04286,0.17593,0.16921,-0.01560,-0.04080,-0.03133,-0.02900,-0.03218,-0.39205,-0.65646,-0.89103,-0.70938,-0.36333,-0.23169,-0.29740,-0.27413,-0.09976,0.09090,0.21963,0.18026,0.28500,0.00062,-0.04469,0.00793,-0.00097,-0.07196,-0.14956,-0.25811,-0.43357,-0.32823,-0.41313,-0.38736,-0.11646,0.01586,0.05220,0.05109,0.15523,0.07061,0.27957,-0.00722,-0.03539,0.01068,0.02032,0.09134,0.13555,0.10492,-0.05645,-0.06225,-0.23034,-0.15172,0.09278,0.11107,-0.06362,0.09455,-0.00733,0.13933,0.21338,-0.07127,-0.03515,-0.04568,0.03138,0.14690,0.22818,0.14557,-0.11273,-0.29899,0.06175,0.26098,0.20793,0.24823,0.16008,0.06330,0.03846,0.09185,-0.13997,-0.08061,-0.11941,-0.04632,-0.01284,0.14830,0.21761,-0.01271,-0.27894,-0.28542,-0.04784,0.06018,0.19431,0.11127,0.02550,-0.04971,0.09169,-0.02463,-0.22461,0.00844,-0.04921,0.00150,-0.05627,0.08379,0.07331,0.23986,0.11494,0.15555,0.20070,0.27356,0.23013,0.02175,-0.36831,0.07914,0.05603,-0.12615,-0.05568,0.00928,-0.14169,-0.00070,-0.02070,-0.13444,-0.06917,-0.07696,0.27990,0.39542,0.23213,0.07395,0.15730,-0.18192,-0.30768,-0.19207,-0.21797,-0.20463,-0.09188,0.01022,0.00113,0.08818,};
float weights_input_7[] = {-0.00240,-0.00349,-0.00208,-0.09607,-0.19663,-0.18459,-0.11123,-0.17371,-0.38490,-0.40964,-0.28635,-0.19608,-0.03101,0.14671,0.01729,0.08651,0.14624,-0.00398,-0.00202,-0.07651,-0.00042,-0.02158,-0.12744,-0.06812,-0.27213,-0.06825,-0.13817,-0.19836,-0.06240,-0.11402,0.10734,0.09336,0.12945,0.07344,0.03071,0.01479,-0.07439,-0.06206,-0.01640,-0.12875,0.03086,-0.16320,-0.28621,-0.01708,-0.18210,-0.09727,-0.22469,-0.10623,-0.15834,-0.05160,0.06669,0.07469,0.12712,-0.08744,-0.07297,0.01355,-0.05383,-0.09401,-0.20900,0.00566,-0.07625,0.11024,-0.19970,0.02601,0.25499,-0.23174,-0.37500,-0.16232,-0.11136,-0.20556,0.06869,-0.13344,-0.07417,0.01333,-0.03008,-0.11124,0.16027,-0.03763,0.01726,0.00465,0.11009,0.12569,0.01107,-0.19021,-0.37007,-0.25804,-0.07303,-0.23772,-0.22374,-0.13278,-0.03147,0.00922,-0.01445,-0.12120,-0.02571,0.02111,-0.07188,-0.02271,0.00038,0.23842,-0.17257,-0.45003,-0.39148,-0.24865,-0.29391,-0.37616,-0.40550,-0.17654,-0.03796,0.00817,-0.02971,-0.11026,0.00216,-0.08029,-0.06244,0.06581,0.37754,0.63270,0.30600,-0.10954,-0.28127,-0.41541,-0.40798,-0.27774,-0.33583,-0.18682,-0.03743,0.05088,-0.07869,-0.35235,-0.05718,-0.07273,0.02105,0.53663,0.83251,0.81300,0.51995,0.41097,0.31753,-0.17001,-0.43314,-0.42246,-0.34168,-0.29611,-0.03531,0.03589,-0.00995,-0.25725,-0.37415,-0.43687,0.06731,0.49775,0.75136,0.86586,0.53959,0.46158,0.09318,-0.27114,-0.41866,-0.34802,-0.27380,-0.20262,-0.03779,0.03585,-0.01786,-0.36783,-0.18527,-0.12421,0.12742,0.46074,0.39272,0.38909,0.20574,0.08021,-0.01640,-0.07714,-0.30427,-0.09720,-0.12974,-0.19556,-0.03456,0.03578,-0.04879,-0.20942,0.08624,-0.09507,0.14283,0.00125,-0.27979,-0.12192,0.08708,0.24149,0.26248,0.14261,0.19735,0.09592,0.06989,-0.13337,-0.03600,0.03794,-0.08469,-0.14523,0.04189,0.19524,-0.05395,-0.29535,-0.29150,-0.08159,0.17344,0.15601,0.24269,0.19543,0.38517,0.13048,0.09979,-0.13125,-0.00755,0.00200,-0.05910,-0.23546,0.03359,-0.01846,-0.12125,-0.25106,-0.18620,0.04689,-0.09717,-0.07160,0.08459,0.09288,0.22931,0.15306,0.10955,-0.07934,-0.00626,0.03151,0.03515,-0.12110,0.11667,-0.11936,-0.15315,-0.18911,-0.37079,-0.11512,-0.28111,-0.21252,-0.05584,0.04370,0.20034,0.11313,0.13488,0.07944,-0.07505,0.04506,0.10738,0.24848,0.17677,-0.11490,-0.19695,-0.19446,-0.21492,-0.15090,-0.35680,-0.09246,0.08903,0.26673,0.27993,0.16593,0.28616,-0.05381,-0.07213,-0.00660,0.10379,0.07350,0.05213,-0.17125,-0.16050,0.09161,0.12389,0.09831,-0.18071,0.06493,0.01283,0.44052,0.41021,0.26413,0.16613,-0.07475,-0.00033,-0.03428,0.07245,0.15649,0.01581,-0.01094,-0.14202,-0.04074,0.10518,0.05759,0.25502,0.15805,0.36570,0.45714,0.25254,0.24473,-0.00098,-0.05813,-0.00028,-0.00049,-0.08723,0.05888,0.11233,-0.09077,0.16139,0.05271,-0.03663,0.14434,0.36603,0.46430,0.30160,0.25232,-0.05407,-0.05272,0.00171,-0.00090,0.14094,};
float weights_input_8[] = {-0.00049,0.04897,0.04951,0.03123,0.15852,0.51620,0.51475,0.52831,0.23898,-0.02072,-0.13014,-0.22832,0.03862,0.19460,0.27670,0.12513,-0.11060,0.00763,-0.00103,0.10618,-0.00405,0.04751,0.15391,0.38685,0.48121,0.24044,0.30396,0.19003,0.03284,0.09588,0.13347,0.15454,0.23544,0.14446,0.01692,-0.07521,0.05546,0.02227,0.08765,0.14427,0.32067,0.28330,0.37285,0.30201,-0.00651,0.16509,0.40009,0.18685,0.06251,0.16385,-0.05392,-0.02167,-0.04965,-0.03342,0.05710,-0.07301,0.06503,0.13119,0.14518,0.23289,0.15483,0.14284,-0.13930,0.05715,0.05246,0.14137,0.19763,-0.05035,-0.00240,-0.10708,-0.11422,0.03710,0.06860,-0.07148,0.00483,0.17969,-0.15249,0.07974,0.10511,-0.14355,-0.28853,-0.13098,-0.16925,0.05233,-0.24827,-0.15408,-0.32598,-0.13401,-0.11532,0.04744,0.06475,-0.09043,-0.04414,-0.05393,-0.21551,0.05893,-0.07183,-0.10896,-0.27853,-0.13029,0.04624,-0.01757,-0.28329,-0.26437,-0.15878,-0.01269,-0.04762,0.04897,0.04758,-0.04391,-0.05628,-0.06898,-0.12113,-0.02106,-0.19824,-0.16532,-0.29874,-0.13209,0.08714,0.06910,-0.14772,-0.11558,-0.01876,0.00855,-0.04262,0.04151,0.04661,-0.04269,-0.00661,-0.01637,-0.22712,-0.39273,-0.37642,-0.19428,-0.22683,-0.06145,0.01830,-0.01914,0.17036,0.39776,0.01891,0.12865,-0.03054,0.03107,0.04778,-0.05854,-0.02500,-0.01853,0.02017,0.20848,0.22987,0.24731,-0.26168,-0.33447,-0.26354,0.18289,0.46714,0.55471,0.22757,0.11568,-0.03569,0.02991,0.03597,-0.05935,-0.03200,-0.12319,-0.08368,-0.10779,-0.07892,0.00785,-0.18133,-0.08794,-0.21545,0.39898,0.46291,0.14730,0.26520,0.04014,-0.04178,0.03147,0.04008,-0.06626,-0.06821,-0.53678,-0.73733,-0.62485,-0.54861,-0.19944,-0.07789,-0.07433,0.18488,0.29407,0.13379,0.06275,0.14138,0.25612,-0.05428,0.03331,0.04083,-0.06842,-0.11697,-0.61827,-0.97769,-1.02687,-0.48508,0.06104,0.20170,0.07101,0.08470,0.35926,0.03866,0.04178,-0.00525,0.30137,-0.04717,0.03265,0.05453,-0.06048,-0.20477,-0.21564,-0.46506,-0.53949,-0.23083,-0.17305,-0.11995,-0.04594,-0.06794,0.24121,0.12795,0.03472,0.01168,0.25637,-0.10695,0.03583,0.07080,-0.06168,-0.07653,0.03911,-0.09599,-0.14608,-0.08618,-0.21000,-0.10306,-0.08078,0.02018,0.19134,0.05277,0.04954,0.08030,0.21968,-0.06505,0.04273,0.05711,-0.03076,-0.01739,-0.00387,0.17957,0.09138,-0.00612,0.05621,0.05233,-0.07046,0.19378,0.16603,-0.01404,0.02316,0.23723,-0.17008,-0.03100,0.05497,0.05872,0.04482,0.05546,0.20113,0.19175,0.04654,-0.23475,-0.25251,-0.17439,-0.01407,0.03754,0.24602,0.09897,0.02348,-0.12112,-0.28890,0.00063,0.05460,-0.00022,0.03444,0.19168,0.23498,0.37215,0.21757,-0.17340,0.06055,-0.00534,-0.07544,-0.04943,-0.26625,-0.21749,-0.34647,-0.47367,-0.14475,-0.01239,-0.02800,-0.00004,0.00073,0.17701,0.19446,0.11345,0.25364,0.16667,-0.07558,-0.37466,-0.38754,-0.55158,-0.66182,-0.54978,-0.50631,-0.28965,-0.01779,-0.01287,0.00061,0.15472,};
float weights_input_9[] = {0.00377,0.00354,0.00248,-0.02444,0.09835,0.11660,0.11241,-0.05651,-0.14252,-0.00233,-0.02414,0.02858,0.27605,0.30807,0.16090,0.16124,0.05871,0.03493,0.00324,-0.01792,-0.04772,0.10872,0.05542,0.02572,-0.02407,-0.01379,-0.07132,-0.10137,-0.11051,-0.00226,0.00930,0.35611,0.32476,0.22307,0.08083,-0.03124,-0.02026,-0.10046,-0.00744,0.04377,-0.01063,-0.20758,0.09141,-0.19042,0.11855,0.19709,0.00177,0.00957,-0.09950,0.21669,0.31240,0.19933,0.05294,-0.08530,-0.03692,-0.07251,-0.02685,-0.01488,0.01050,-0.14238,-0.01641,0.03312,0.22223,0.29037,0.12305,-0.04361,-0.05687,0.14284,0.22879,0.05426,0.02743,-0.01615,-0.01915,-0.07198,-0.01063,-0.03354,0.07382,-0.12260,-0.18208,-0.13608,0.08939,0.23510,0.05782,0.04591,0.12743,0.08500,0.00708,-0.04330,0.00636,-0.02367,-0.02734,-0.06175,0.00328,-0.02631,0.07909,-0.18257,-0.21535,0.00350,0.11334,0.38335,0.21889,0.06035,0.15029,-0.06733,-0.04477,-0.06069,-0.00934,-0.02722,-0.02830,-0.06165,0.01144,0.05563,0.06622,-0.09908,-0.09926,-0.13165,-0.02655,0.15249,0.13309,0.17226,0.13176,-0.15109,-0.08865,-0.06646,-0.00840,-0.02705,-0.02634,-0.06190,-0.00488,0.05044,0.05370,0.09865,-0.12536,-0.25594,-0.23086,-0.06690,0.15060,0.09252,-0.03400,-0.17004,-0.06275,-0.04309,-0.00716,-0.02929,-0.02743,-0.06242,0.00678,0.04672,0.17841,0.18269,0.08472,-0.22576,-0.13879,0.01646,0.06545,-0.05071,-0.11028,-0.08640,-0.11140,-0.04026,-0.02048,-0.03265,-0.02621,-0.06289,0.01559,0.18225,0.23691,0.26817,0.14118,-0.08763,0.05045,0.12444,0.10642,0.02332,-0.08524,-0.05733,-0.05455,-0.05397,-0.01943,-0.03457,-0.02811,-0.06410,0.03639,0.14460,0.12814,0.23805,0.05498,-0.03973,0.19994,0.23698,0.05868,-0.05425,-0.10181,-0.04189,-0.09732,-0.05539,-0.03274,-0.04085,-0.02802,-0.06001,0.12234,0.21218,0.16878,0.12006,-0.07993,0.03877,0.19995,0.29284,0.23796,0.08715,-0.18261,-0.08189,-0.09039,-0.00913,-0.01646,-0.04641,-0.03619,-0.03507,0.15213,0.15094,0.07599,-0.07661,-0.09446,0.00778,0.23060,0.44041,0.39682,0.19329,-0.14459,0.01417,0.00968,0.07754,-0.02228,-0.03639,-0.01611,-0.05026,0.09582,0.07666,-0.03548,-0.19057,-0.07021,0.04062,0.31703,0.49432,0.37824,0.20855,-0.04648,-0.12834,-0.10782,-0.03328,-0.07039,-0.01127,-0.00575,-0.06096,-0.02204,-0.16546,-0.29801,-0.45626,-0.48822,-0.10490,0.22900,0.31490,0.28724,0.10888,-0.26436,-0.31362,-0.27741,-0.13855,-0.07674,-0.07256,-0.02775,-0.08748,-0.08595,-0.17036,-0.28491,-0.44838,-0.38057,-0.21518,0.02196,0.08836,0.02068,-0.06254,-0.25849,-0.28883,-0.17944,-0.04501,0.02483,-0.02644,-0.00086,-0.11997,-0.12444,-0.19722,-0.21208,-0.28943,-0.26460,-0.26816,-0.28136,-0.21738,-0.29411,-0.21922,-0.03898,0.01833,0.02081,0.01075,0.02332,-0.08919,-0.00095,-0.01594,-0.10903,-0.16288,-0.19621,-0.20733,-0.18728,-0.35773,-0.36978,-0.26172,-0.15745,0.11522,0.05290,0.09753,0.11761,-0.02313,0.02397,0.00113,-0.11299,};
float weights_input_10[] = {0.00351,-0.02073,-0.02041,-0.01183,0.01276,0.16054,0.06767,0.03716,-0.06068,0.17530,0.06229,-0.04675,0.00708,0.21337,0.05259,-0.03979,0.00713,0.00262,0.00400,-0.05351,-0.02925,0.05106,0.22739,0.01236,0.10383,-0.04127,0.23781,0.13066,0.05982,-0.15920,-0.03158,0.17153,0.14673,0.00009,-0.02580,-0.01357,-0.03223,-0.04723,0.00651,0.04993,0.03476,0.19738,0.03064,0.16711,0.25330,0.21780,0.08418,-0.06466,-0.03773,0.08802,0.12663,0.00358,-0.00331,-0.06496,-0.00726,0.00505,0.00992,-0.07221,0.07414,-0.04406,-0.09395,0.11787,0.40555,0.13433,0.11640,0.04792,-0.04639,0.13419,0.06676,-0.02404,0.01098,-0.02257,-0.03211,0.00605,-0.02418,-0.03433,0.08638,0.08037,0.11941,0.00551,0.02099,0.10460,0.02843,0.11042,0.05750,0.02609,-0.04212,0.01418,0.01829,-0.02516,-0.03013,-0.01724,0.02138,0.08396,0.03021,0.13489,0.08088,-0.19981,-0.24533,0.18451,0.10013,0.20168,0.09490,0.05583,0.00002,-0.01005,-0.02311,-0.02313,-0.03040,-0.04119,-0.00044,0.02542,-0.02247,-0.05990,-0.22782,-0.30538,-0.11778,0.19382,0.04186,0.09571,-0.04062,0.09030,0.00563,-0.04376,-0.02937,-0.02323,-0.03213,-0.04035,-0.02823,-0.01848,-0.10355,-0.29115,-0.37805,-0.57340,-0.23591,-0.02646,-0.10650,-0.01056,-0.05599,0.12614,0.04591,-0.03190,-0.02723,-0.01662,-0.03242,-0.03683,-0.01950,-0.02934,-0.35057,-0.31426,-0.41303,-0.40288,-0.30371,-0.07909,0.06416,0.04609,-0.00760,0.09138,0.00737,-0.07204,-0.01830,-0.02040,-0.02968,-0.03474,-0.01926,-0.16503,-0.17956,-0.25590,-0.49617,-0.37937,-0.22428,0.06304,-0.07857,-0.17755,-0.18665,-0.06415,-0.19237,-0.08146,-0.01724,-0.01919,-0.04490,-0.05195,-0.13152,-0.18216,-0.10032,-0.25123,-0.26109,-0.26206,0.13934,0.24194,-0.04498,-0.22276,-0.34287,-0.28342,-0.35401,-0.11622,-0.04300,-0.00711,-0.04010,-0.07753,-0.18493,-0.21660,0.06655,-0.11659,-0.00021,-0.10940,0.22678,0.37194,-0.01871,-0.35885,-0.40470,-0.35081,-0.31767,-0.15149,-0.06089,-0.00815,-0.06513,-0.12114,-0.23200,-0.30672,-0.17849,-0.16624,0.14990,0.06191,0.49025,0.36925,-0.17751,-0.47045,-0.47215,-0.37881,-0.27178,-0.10964,-0.01120,0.02456,-0.06741,-0.07750,-0.18136,-0.24864,-0.09315,0.04618,0.28671,0.27505,0.20086,0.16542,-0.21859,-0.38561,-0.38763,-0.20007,-0.19765,-0.00212,0.06443,0.01969,-0.03270,-0.08137,-0.13044,-0.22327,0.09671,0.22785,0.41036,0.19466,0.05520,-0.00649,-0.06077,-0.17008,-0.10427,0.02057,0.04397,0.13349,0.02385,0.02194,-0.03236,-0.10115,-0.09837,-0.09964,0.25659,0.23612,0.16237,0.15842,0.11091,0.15794,-0.05336,-0.10952,0.13389,0.16930,0.06545,0.11011,0.01691,-0.02956,0.00109,-0.07889,0.00470,0.00850,0.15578,-0.03490,0.12548,0.11798,-0.03851,-0.11384,0.01023,0.04768,0.34033,0.28652,0.25652,0.05340,0.00645,-0.04585,0.00255,0.01724,0.09236,0.06234,0.02636,-0.04198,0.01150,-0.24118,-0.25062,0.04737,0.09055,0.23760,0.37647,0.36316,0.19631,0.01372,0.00729,-0.00111,0.08140,};
float weights_input_11[] = {0.00277,-0.02640,-0.02833,-0.00969,0.03165,0.26057,0.15298,0.10522,-0.05988,0.08097,0.01163,-0.04918,0.05625,0.30834,0.18352,0.00869,0.02092,0.00432,0.00184,-0.06969,-0.02562,0.06518,0.22746,0.06123,0.10518,-0.04310,0.18619,0.09675,0.06000,-0.15281,0.01780,0.21647,0.25769,0.04916,-0.02130,-0.00424,-0.04316,-0.05000,0.00951,0.06955,0.03999,0.22425,-0.01313,0.17135,0.23489,0.22821,0.10733,-0.06828,-0.02373,0.10346,0.17424,0.02800,0.01302,-0.05293,-0.01099,0.02063,0.01570,-0.07823,0.05547,-0.08906,-0.12319,0.08904,0.36896,0.12290,0.07856,0.01424,-0.11318,0.12764,0.06083,-0.04344,0.01153,-0.04045,-0.04348,0.02049,-0.03079,-0.03899,0.04559,0.04133,0.14258,0.06397,0.02704,0.06412,-0.04871,0.05316,-0.00456,-0.00947,-0.08311,-0.01224,0.02069,-0.04032,-0.04383,-0.00752,0.00677,0.10117,-0.00652,0.10759,0.14243,-0.15364,-0.21158,0.13029,0.04847,0.18004,0.08245,0.03276,-0.03623,-0.03731,-0.03506,-0.04054,-0.04409,-0.03783,-0.02476,0.00530,-0.08138,-0.00941,-0.12562,-0.22430,-0.04779,0.19308,0.08124,0.11167,-0.04632,0.06530,-0.00908,-0.07423,-0.03975,-0.04107,-0.04426,-0.03907,-0.05793,-0.05163,-0.13266,-0.24649,-0.31722,-0.47646,-0.15860,-0.00998,-0.06720,0.03694,-0.01841,0.14081,0.04747,-0.05961,-0.03941,-0.02920,-0.04340,-0.03832,-0.05249,-0.06124,-0.35381,-0.23346,-0.35483,-0.38823,-0.30719,-0.07562,0.11836,0.10257,0.04389,0.12872,0.03134,-0.07373,-0.02052,-0.03207,-0.04221,-0.03826,-0.05208,-0.18739,-0.15183,-0.23231,-0.44466,-0.39536,-0.22845,0.07518,-0.04720,-0.17287,-0.14339,-0.04900,-0.20356,-0.08181,-0.02361,-0.03374,-0.03827,-0.03212,-0.12025,-0.18897,-0.10568,-0.23772,-0.23246,-0.21396,0.19024,0.26200,-0.01708,-0.20874,-0.32493,-0.31787,-0.38686,-0.12251,-0.03233,-0.01498,-0.03316,-0.05393,-0.16805,-0.21806,0.04051,-0.09961,-0.00121,-0.07056,0.25560,0.39109,0.00151,-0.36495,-0.40405,-0.41496,-0.33791,-0.17046,-0.05803,-0.01428,-0.04059,-0.07666,-0.21342,-0.32131,-0.18057,-0.11831,0.23472,0.13908,0.56075,0.40755,-0.18071,-0.50680,-0.46847,-0.43226,-0.28621,-0.10968,-0.01642,0.00950,-0.04097,-0.03819,-0.16828,-0.29208,-0.09211,0.05012,0.32803,0.32406,0.22745,0.19337,-0.25388,-0.38612,-0.39380,-0.21903,-0.19738,0.00367,0.06852,0.00181,-0.04482,-0.04496,-0.11746,-0.24445,0.08178,0.21205,0.44465,0.22579,0.06455,-0.00845,-0.06524,-0.17826,-0.12251,0.00475,0.06110,0.13155,0.03846,0.01450,-0.04351,-0.09018,-0.07089,-0.08720,0.28812,0.25572,0.15763,0.13733,0.12814,0.16818,-0.06216,-0.14712,0.12861,0.16623,0.09565,0.11186,0.01626,-0.04184,-0.00037,-0.08796,0.02828,0.05739,0.18659,-0.03047,0.08871,0.06734,-0.05563,-0.09569,-0.00884,0.07321,0.29011,0.23412,0.21489,0.05828,0.00319,-0.04967,0.00114,0.02609,0.09412,0.08600,0.04644,-0.03493,-0.03235,-0.26461,-0.23757,-0.01742,0.02307,0.16913,0.30956,0.29335,0.13548,0.00752,0.00286,0.00050,0.10252,};
float weights_input_12[] = {0.00060,-0.00244,-0.00205,-0.15427,-0.25072,-0.38518,-0.35845,-0.39970,-0.31234,-0.08903,-0.11281,-0.06659,0.08233,0.02710,-0.22810,-0.17701,-0.05672,-0.00113,0.00012,-0.04984,-0.07939,0.02221,-0.11361,-0.33467,-0.27915,-0.24486,-0.17883,-0.18145,-0.12861,-0.04161,-0.16387,0.14990,-0.00186,-0.08171,-0.06839,-0.06246,-0.05007,-0.11543,-0.01510,0.00228,-0.18096,-0.49149,-0.07731,-0.33714,-0.18710,-0.00355,-0.06275,0.00645,-0.22051,-0.04627,-0.11156,-0.08117,-0.02548,-0.13912,-0.04871,-0.06377,-0.03240,-0.04485,-0.09353,-0.21905,-0.07894,-0.05716,0.12297,0.15206,0.30737,0.02352,-0.11945,-0.06710,-0.13666,-0.08418,-0.00350,-0.05056,-0.04831,-0.06543,-0.00475,-0.08324,0.04962,-0.08500,-0.10232,-0.18383,0.02520,0.31007,0.23083,0.07623,0.05703,-0.09830,-0.09215,-0.10973,-0.04455,-0.05133,-0.04776,-0.06482,0.02265,-0.08894,-0.00673,-0.07372,-0.06714,-0.03291,0.05388,0.63406,0.25876,-0.15295,0.01633,-0.11581,-0.09788,-0.10873,-0.04718,-0.05910,-0.04593,-0.06648,0.02164,-0.01725,0.05366,-0.08208,-0.15039,-0.18467,-0.08759,0.40939,0.18409,-0.03119,0.04637,-0.14045,-0.12337,-0.04763,-0.04119,-0.05825,-0.04789,-0.06314,-0.00582,0.00433,0.10295,0.14475,-0.15694,-0.34407,-0.17944,0.10925,0.05590,0.11673,0.06746,-0.11986,-0.06181,-0.05500,-0.04346,-0.09047,-0.04722,-0.06264,0.02211,0.01429,0.16813,0.18934,-0.06290,-0.31210,-0.11758,-0.00596,-0.09463,0.04432,0.08869,0.03636,-0.13926,-0.08244,-0.06320,-0.08599,-0.04847,-0.06470,0.02651,0.20146,0.24012,0.27412,0.05472,-0.16865,-0.16770,-0.14720,0.00296,0.05784,-0.01528,0.05446,-0.06273,-0.08368,-0.05884,-0.08491,-0.09558,-0.11241,-0.01993,0.10627,0.20713,0.24769,0.09069,-0.13955,-0.11969,0.10923,0.13639,-0.03184,-0.13009,0.05726,-0.08260,-0.09886,-0.06212,-0.10564,-0.09557,-0.11105,0.03150,0.17701,0.20342,0.20437,0.02401,-0.13808,0.01799,0.27450,0.40976,0.04526,-0.12068,-0.05661,-0.10400,-0.08076,-0.05233,-0.10736,-0.11799,-0.11663,0.05457,0.04534,0.05053,-0.01094,-0.07263,-0.07956,0.14674,0.41706,0.48525,0.09428,-0.19042,0.04496,0.02223,-0.01136,-0.05080,-0.08098,-0.11070,-0.12819,0.00151,-0.02512,-0.04716,-0.14512,-0.09016,-0.03279,0.05524,0.35597,0.39417,0.12817,-0.09025,-0.05006,-0.09639,-0.09290,-0.05257,-0.03546,-0.04166,-0.13402,-0.06795,-0.15660,-0.24317,-0.34964,-0.38484,-0.18654,0.04385,0.23020,0.31561,0.09909,-0.20994,-0.18709,-0.20960,-0.07862,-0.03854,-0.06727,-0.05101,-0.13335,-0.11330,-0.15355,-0.16803,-0.24496,-0.26097,-0.28998,-0.05953,0.24854,0.15880,0.04052,-0.04599,-0.02288,-0.06134,-0.03551,0.00329,-0.04769,-0.00024,-0.13119,-0.07967,-0.13499,-0.11800,-0.18859,-0.12507,-0.19652,-0.20890,-0.01255,0.03977,-0.05987,0.26163,0.22386,0.17566,0.02890,0.01366,-0.11535,-0.00121,-0.00689,-0.08929,-0.02255,-0.02850,-0.08201,-0.05060,-0.15383,-0.30355,0.06628,0.27625,0.48431,0.32801,0.36615,0.24635,-0.02950,0.01572,-0.00037,-0.07125,};
float weights_input_13[] = {0.00413,0.05328,0.05533,-0.01214,0.16538,0.06653,0.16262,-0.08113,-0.09208,0.07970,0.23486,0.06501,0.10127,-0.23356,-0.29335,-0.24921,0.02639,0.02788,0.00387,0.01255,0.08277,0.08970,0.23460,0.21530,0.25758,0.12927,0.19380,0.25567,0.19804,0.15176,0.00418,0.27982,0.14991,-0.21996,0.03419,-0.03626,-0.04225,-0.08275,0.10680,0.05112,0.11201,0.24291,0.36207,-0.07405,-0.13828,-0.01204,0.00638,0.12535,0.01887,0.22355,0.01626,0.00919,0.04424,-0.09811,-0.07598,-0.08906,0.02732,0.05487,0.20811,0.09509,0.09750,0.14009,0.09854,0.10952,0.11700,0.17131,0.14130,0.07964,0.19249,0.11991,0.01320,-0.02783,-0.04295,-0.08880,0.03856,-0.16461,-0.08584,-0.16108,-0.19225,-0.18583,0.03903,0.12255,0.17336,0.31797,0.39368,0.23037,0.27961,0.04385,0.00197,-0.04226,-0.05489,-0.06599,-0.05280,-0.33484,-0.12448,-0.15310,-0.34562,0.04887,0.01523,0.43322,0.46332,0.21844,0.42301,0.46493,0.23847,0.07879,0.00445,-0.04222,-0.05785,-0.01135,-0.03145,-0.13204,-0.10105,-0.41008,-0.23264,-0.28705,-0.01207,0.12785,0.16255,0.20495,0.43553,0.16012,0.08400,0.03974,-0.01264,-0.04410,-0.05661,-0.01474,0.00617,-0.17734,-0.11627,-0.15085,-0.12563,-0.31545,-0.21095,0.17854,0.22869,0.06545,-0.11136,-0.12748,-0.17948,-0.00606,-0.01042,-0.05129,-0.05765,-0.00737,0.04139,-0.15397,-0.07706,-0.20694,-0.13886,-0.08467,0.25479,0.32714,-0.02530,-0.30567,-0.14365,-0.30721,-0.56655,-0.22444,-0.06056,-0.06302,-0.05437,-0.00907,0.04778,0.17658,0.07199,0.09149,-0.26815,0.06348,0.36280,0.34347,0.06675,-0.01856,-0.37854,-0.31079,-0.20178,-0.22250,-0.08970,-0.06398,-0.17571,-0.12976,-0.04281,0.24696,0.23174,0.13329,-0.08789,-0.20752,-0.22909,-0.08547,-0.20857,-0.01143,-0.00204,0.07954,-0.03716,-0.05504,-0.12893,-0.10466,-0.17638,-0.12781,0.08408,0.25520,0.26166,0.13851,-0.13838,-0.07833,-0.22283,-0.09964,0.09077,0.17169,0.04679,0.21998,0.02388,0.14011,0.00460,-0.11230,-0.18405,-0.08067,0.15433,0.28984,0.24018,-0.01618,-0.20739,-0.13005,-0.17149,0.14795,0.27941,0.15195,-0.02888,0.28431,0.10113,0.18915,0.00950,-0.10005,-0.14911,-0.11688,0.17128,0.32078,0.26902,0.06260,-0.18418,-0.15890,-0.09579,0.16662,0.13437,0.11327,0.08489,-0.04436,0.00189,0.06288,-0.00751,-0.05430,-0.01327,-0.10135,0.12019,0.25916,0.13734,-0.04116,-0.34531,-0.22988,-0.05820,-0.09228,0.08075,0.05937,-0.07136,-0.22841,-0.15249,-0.00870,-0.01324,-0.08595,-0.04353,-0.04889,0.08096,0.02661,-0.16966,-0.24997,-0.15969,-0.03784,-0.19122,0.15305,-0.04884,0.15073,-0.17928,-0.29340,-0.23603,0.02291,0.05311,-0.04905,-0.00064,-0.03324,0.04963,-0.07215,-0.26179,-0.21213,-0.38012,-0.22763,-0.32571,-0.12330,0.12479,-0.19692,-0.00222,-0.12071,-0.00967,0.07108,0.01271,-0.10922,-0.00165,-0.07749,-0.13664,-0.35667,-0.66050,-0.39325,-0.17400,-0.18671,-0.31323,-0.02358,-0.01663,-0.04417,-0.08227,-0.06167,0.09474,0.04728,0.01354,0.00102,-0.08991,};
float weights_input_14[] = {0.00362,0.00441,0.00319,0.02114,0.14308,-0.03041,0.02715,-0.20855,-0.01315,0.05584,0.07737,0.33116,0.05593,-0.04105,0.19265,-0.03130,-0.03540,0.00903,0.00162,-0.00035,-0.01122,0.11973,0.03841,-0.08281,-0.26737,0.05910,-0.16904,-0.13175,-0.07230,0.16089,0.03401,0.11334,0.13294,0.28123,0.04951,-0.02600,-0.00741,-0.03567,0.00873,0.06906,-0.16209,-0.41558,-0.18050,-0.30982,0.16144,-0.03270,0.04456,0.24621,-0.04691,-0.02383,0.08884,0.05549,-0.02833,0.00559,-0.00702,-0.04023,-0.03108,0.00446,-0.10106,-0.31780,-0.10440,-0.22714,-0.13086,-0.15056,0.00883,0.08450,-0.01436,0.00660,-0.03840,-0.03400,-0.01641,0.05765,-0.01519,-0.03905,0.04471,-0.03362,-0.13418,-0.19386,-0.28256,-0.08485,0.12400,-0.02138,0.05216,0.21077,0.18556,0.08640,0.06939,-0.07609,-0.00234,0.04555,-0.01864,-0.03082,0.06036,-0.09123,0.03451,-0.20533,-0.10463,-0.00594,0.33347,0.04577,0.11424,-0.01229,-0.03807,-0.34281,-0.21614,-0.24575,0.10989,0.04957,-0.00974,-0.03001,0.12152,0.06680,0.09695,-0.23675,0.03407,-0.14856,-0.20378,-0.26028,0.00172,-0.18721,-0.29656,-0.36336,-0.17099,-0.18428,0.14890,0.05202,-0.00872,-0.02881,0.11982,0.16315,0.35968,0.29987,0.12073,-0.01081,-0.34415,-0.39707,-0.15877,-0.17803,-0.21419,-0.26513,0.13431,0.05915,0.14717,0.06550,-0.00685,0.03436,0.13575,0.28453,0.58573,0.47339,0.06756,-0.17027,-0.31411,-0.51089,-0.11697,-0.11491,-0.10097,0.18900,0.30361,0.24759,0.14738,0.06828,0.00223,0.03437,0.14605,0.69454,0.25846,0.05494,-0.00138,-0.16256,-0.21588,-0.32844,-0.06152,-0.35181,-0.13875,0.16380,0.36627,0.23208,0.17715,0.06807,0.00296,0.04483,0.22023,0.50356,0.42532,0.37453,0.23220,-0.04448,-0.14422,-0.26565,-0.54255,-0.42684,-0.21893,0.01591,-0.02386,-0.08727,0.16559,0.07221,0.00155,0.04426,0.23522,0.46625,0.44704,0.68731,0.46960,-0.06390,-0.03438,-0.21864,-0.34199,-0.34739,-0.20107,-0.10528,-0.20584,-0.17178,0.13602,0.06780,-0.02071,0.03656,0.23682,0.27112,0.36710,0.64028,0.42048,0.35355,0.17924,0.02575,0.18407,-0.02752,-0.21896,0.01480,-0.14380,-0.16470,0.10523,-0.00757,-0.03281,0.01770,0.09762,0.00276,-0.04232,0.32064,0.33383,0.34543,0.28772,0.00948,0.17816,0.11981,-0.02295,-0.02364,-0.19973,-0.10557,-0.00912,-0.01529,-0.01107,0.01034,0.02314,-0.21826,-0.39230,0.08688,0.32396,0.27761,0.08120,-0.17926,0.06084,0.14751,-0.11645,0.00459,-0.36273,0.00536,-0.01145,-0.00772,-0.01060,-0.06369,-0.11143,-0.40610,-0.49112,-0.06334,0.42681,0.24660,0.00629,-0.07778,0.17187,-0.04632,-0.12056,-0.26612,-0.12533,0.17446,0.02943,-0.00952,-0.00120,-0.04412,-0.08475,-0.31493,-0.45188,-0.38980,0.13327,-0.00032,0.01104,0.06365,0.21248,0.33506,-0.15697,-0.20688,0.08580,0.12690,0.00050,-0.04365,0.00008,0.00409,-0.05682,-0.28280,-0.29913,-0.31337,-0.24235,-0.07249,0.25785,0.03672,0.14860,0.23377,-0.01607,0.08157,0.05078,-0.04976,-0.00230,-0.00153,-0.40212,};
float weights_input_15[] = {0.00085,0.03394,0.03548,0.09497,0.22681,0.60516,0.57155,0.66560,0.12095,-0.20218,-0.28711,-0.34320,-0.03383,0.20760,0.29533,0.10755,-0.00098,0.00505,-0.00046,0.06892,0.06947,0.04868,0.20205,0.41147,0.41999,0.19537,0.15769,-0.00646,-0.13574,-0.14109,0.10526,0.14239,0.32690,-0.04015,-0.00071,0.00026,0.03498,0.06381,0.07416,0.08563,0.16247,0.39075,0.21731,0.31755,-0.07169,-0.01909,0.18959,0.07157,0.15038,0.21116,0.06998,-0.02686,-0.00374,0.01185,0.03447,-0.00370,0.03342,0.01318,0.07044,0.10175,0.03735,-0.01323,-0.03023,-0.14376,-0.14882,0.14673,0.18015,0.11296,0.12351,-0.02914,-0.04704,0.00941,0.03535,-0.00152,0.00605,0.00259,-0.31963,0.00351,0.23840,0.00316,-0.13113,-0.30536,-0.26337,0.15045,-0.02726,-0.01618,-0.13065,-0.02475,-0.02424,0.01054,0.02904,-0.01050,-0.07104,-0.09976,-0.28339,0.03196,0.18004,0.07776,-0.14454,-0.37023,0.01016,0.24664,0.14930,0.14417,0.11023,0.10523,-0.03317,0.01146,0.01968,0.02219,-0.11223,-0.24658,-0.33808,-0.14135,0.04474,0.18305,0.07975,-0.20033,0.03634,0.17571,0.24281,0.21053,0.17952,0.09825,-0.05355,0.00561,0.01863,0.01560,-0.07941,-0.29554,-0.54231,-0.40489,-0.19775,0.03928,-0.11247,-0.23136,-0.09853,0.06050,0.09755,0.30226,-0.00899,0.03872,-0.05559,0.00221,0.01869,-0.01383,-0.08176,-0.29272,-0.46768,-0.15917,0.04586,0.18302,-0.12029,-0.10780,0.01860,0.03568,0.16554,0.12840,-0.13210,-0.11422,-0.05623,-0.00751,0.01872,-0.01549,-0.07937,-0.30166,-0.22225,-0.26095,-0.34891,-0.05427,-0.11821,-0.00281,-0.05437,0.16930,0.14200,-0.07442,-0.07168,-0.19631,-0.10549,-0.00944,0.03288,0.00002,-0.05513,-0.21712,-0.29543,-0.41956,-0.56659,-0.39404,-0.24943,-0.21198,-0.09420,0.13118,0.13371,-0.15579,-0.05109,0.09178,-0.13353,-0.00717,0.03353,0.00217,-0.05053,-0.11973,-0.31151,-0.54792,-0.50520,-0.00163,0.01882,-0.03765,-0.17042,0.11682,0.10745,-0.18042,-0.05318,0.19249,-0.08464,-0.00807,0.03987,0.01855,-0.04741,0.01348,0.03631,-0.21307,-0.08346,0.20562,0.17228,-0.03882,-0.30245,-0.03320,0.06211,-0.19587,-0.02579,0.20630,-0.07116,0.01417,0.05028,0.01704,0.01369,0.17692,0.29457,0.08449,0.04825,0.20674,0.02784,-0.20429,-0.30970,-0.02196,-0.03352,-0.14702,0.18795,0.18081,-0.00588,0.01998,0.03617,0.03422,0.06596,0.15190,0.43041,0.36856,0.30144,0.17826,-0.04026,-0.34902,-0.16927,-0.03010,0.09856,0.05950,0.45952,0.01083,0.00190,0.03720,0.03599,0.08703,0.15623,0.24172,0.32449,0.21191,0.09531,0.01495,-0.09030,-0.07840,-0.13595,-0.03799,0.12460,0.16478,0.03117,-0.04977,-0.00432,0.03510,-0.00038,0.10255,0.19187,0.27750,0.28061,0.11108,-0.19563,-0.00819,-0.01853,0.05458,0.07651,-0.07325,-0.01364,-0.09938,-0.15866,-0.10234,-0.00987,0.02905,0.00250,0.01477,0.14910,0.10109,0.05243,0.17867,0.02060,-0.17415,-0.20292,-0.11299,-0.47297,-0.50979,-0.25826,-0.35795,-0.21632,0.07383,-0.00859,-0.00017,0.15595,};
float weights_hidden_0[] = {-0.08876,-2.34420,3.07475,-1.60274,-1.95110,-0.32357,-0.04467,-3.79920,-1.22418,-0.52964,-0.01847,-0.10007,-0.62162,-0.36974,3.60329,-0.45918,-2.87654,};
float weights_hidden_1[] = {-1.12181,0.27732,-1.68671,1.52392,-0.29138,-0.13340,1.60637,0.79059,-0.73746,1.23308,2.47316,1.76853,2.53979,1.08251,-1.33324,-1.70491,1.42680,};
float weights_hidden_2[] = {-0.99736,-0.94362,-2.18979,1.50377,1.08010,-1.35015,-1.62184,-1.42820,0.86121,-1.79253,2.78807,3.30742,-0.80956,-1.32655,-0.06258,1.82678,-0.10704,};
float weights_hidden_3[] = {-0.34568,-0.86840,-3.36502,-1.83351,1.63522,-0.33531,2.07927,0.88487,2.09931,-1.37980,-1.15657,-1.28256,-1.13024,2.26017,-1.08041,2.10623,0.52611,};
float weights_hidden_4[] = {-0.04177,1.66883,-1.42960,-0.91415,0.81886,0.00300,-1.54787,-0.00772,-1.15519,2.74542,-1.57346,-1.63621,3.08220,1.25096,1.79987,-1.12906,0.21305,};
float weights_hidden_5[] = {-0.12049,2.63468,1.27115,0.13498,-2.73749,-0.23752,2.76391,1.27063,1.78463,-0.20299,-0.56450,-0.27336,-0.54790,-1.53503,-1.67333,1.33165,0.27642,};
float weights_hidden_6[] = {-0.28206,3.52189,1.51945,-0.77636,-2.76789,-0.38449,-1.38514,3.53794,-2.35626,-1.17471,-0.58349,-0.52227,-0.05503,-1.84370,1.79055,-3.05178,-0.33874,};
float weights_hidden_7[] = {3.31453,-0.83815,-1.42010,0.52226,-0.22662,3.15869,0.83783,-1.79670,0.98957,1.61217,1.03738,1.14895,-0.99150,1.17009,0.42486,0.95796,1.91024,};
float weights_hidden_8[] = {-0.23599,-2.24021,2.18792,-1.51301,2.43202,-0.20258,-1.80731,3.10108,-2.94835,-0.52339,-0.59309,-0.52436,-0.99403,0.24227,-2.21938,0.28985,-0.99647,};
float weights_hidden_9[] = {0.00882,-0.88921,2.06025,2.95873,2.02405,-0.24809,-0.86753,-2.60910,2.70628,-0.01891,-1.80888,-1.83709,-0.49242,-0.98194,-1.16205,-0.21536,-0.08392,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_14[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

void WriteImage(const Image& input_image) {

	for (int y = 0; y < input_image.y_size(); ++y) {
		for (int x = 0; x < input_image.x_size(); ++x) {
			cout << input_image.at(x, y);
		}
		cout << endl;
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 0; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = cc_segmenter_.GetNumOfSegments(im);

		if (num_of_segments > kMaxNumOfDigits) {
			num_of_segments = nn_segmenter_.GetNumOfSegments(im);
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


