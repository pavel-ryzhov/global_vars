// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={29,22,32,-1,4,7,12,3,-3,-6,8,-9,-2,-4,-16,-1,15,16,-8,0,10,-5,-8,-13,-11,-2,4,-14,-11,-11,-18,-5,9,0,7,-3,0,9,-6,-14,-9,4,18,-4,12,2,-5,-3,11,9,0,-15,-4,0,3,-16,1,7,5,-13,0,-17,3,-17,13,-6,1,9,28,23,3,10,-7,15,16,-1,5,12,16,24,4,-8,10,7,16,6,-6,-5,-5,-1,2,0,-4,-4,12,15,19,15,21,2,8,-2,-10,-12,-13,-4,-23,-35,-20,-3,8,35,35,18,-6,-22,-3,-13,0,-12,-22,-23,-13,-14,-13,-28,-16,7,24,16,-7,-19,-6,1,3,-16,-6,0,-4,-16,-5,-14,25,2,23,15,2,-17,-12,-16,-4,-10,-5,-10,-14,-13,-1,2,4,-17,18,38,13,9,3,-6,7,0,-4,-8,0,-6,7,-8,2,-2,15,8,9,14,1,16,-1,-3,-3,11,1,-10,0,-9,-18,-9,20,3,6,7,11,11,7,-1,-5,7,8,2,-1,4,16,-28,-5,-4,6,14,6,18,23,16,-11,17,3,-9,2,-1,-5,-21,7,10,5,-3,5,11,1,-3,-12,-3,5,-13,1,8,-4,-12,14,-6,-8,-8,-23,-14,-3,-9,-14,-10,-7,-11,-2,13,-17,-3,5,16,-14,1,-58,-9,-14,-1,-25,-18,-10,6,36,36,18,27,-21,24,26,10,-35,1,-3,-3,-28,-17,-7,-23,-19,-18,-8,22,18,34,17,-8,7,18,10,0,-24,7,-12,2,-3,-22,-25,25,21,-24,8,-12,1,21,38,-14,-5,26,-3,-14,1,-42,-40,14,-15,-16,17,-4,7,32,20,31,13,41,0,21,12,-12,-10,6,-14,13,2,-16,4,22,16,9,7,2,-33,15,-14,-21,5,24,14,39,-9,-6,-4,-15,19,7,-14,17,-4,-6,-28,-5,3,25,22,13,14,-16,-26,-23,5,13,0,-33,-29,-41,-10,-36,-14,13,8,-20,-25,-30,-19,16,-9,10,-8,15,4,3,-7,-29,-5,29,-4,0,-47,-23,0,-25,-1,19,-9,19,-4,-34,0,3,29,7,-16,14,-2,-29,-10,5,10,-7,-5,-8,-3,17,16,32,12,-17,-6,-47,-1,-6,-7,-1,-3,8,-3,2,14,14,13,20,-27,-25,-5,-51,9,-15,13,9,-5,9,8,-11,2,37,42,28,7,-41,7,8,-17,-24,-6,-5,7,26,0,3,3,22,6,-9,-3,-14,9,-6,-4,-30,-14,-3,15,16,-14,14,6,17,-3,17,35,28,24,1,22,30,-5,-39,-14,-29,0,-33,-17,-14,-10,16,41,73,15,0,11,-2,13,-2,13,-6,3,-17,-13,-13,-22,-7,-1,-14,1,-3,-10,5,-23,-20,5,3,-16,-4,-16,6,0,-10,-27,-2,19,-7,5,4,-3,-3,-17,-10,-21,-18,-4,-9,14,-2,-12,-2,10,-7,-9,6,3,7,-5,-9,-7,-13,-3,7,11,-1,13,-3,-2,-2,-6,-7,19,13,11,-1,10,-1,2,0,8,-2,-2,14,18,11,5,-2,11,-1,-6,-8,15,-7,0,0,0,3,16,7,8,33,10,-11,1,-1,-20,0,-1,-9,6,-4,11,-2,33,7,8,-3,-20,-6,0,-17,-20,-27,-2,-19,0,-5,4,5,12,-13,0,1,3,-2,0,-4,-13,-4,-2,-12,18,3,6,3,-10,-38,4,25,15,4,5,12,7,-3,-7,-8,0,-15,-2,-16,-15,-36,11,-1,-8,11,17,6,4,-11,-13,-5,5,-9,-19,-19,-27,-37,18,-12,-6,-13,0,4,12,-1,5,7,3,-10,-6,-20,-6,3,25,3,-6,-5,11,25,17,0,14,2,-13,-10,18,-8,8,11,23,1,-12,8,14,24,35,-6,0,5,5,4,2,-15,14,25,16,22,10,15,4,-3,6,6,13,17,-6,-8,-14,6,12,42,12,43,23,-15,-16,-18,0,-10,2,-1,-6,3,-2,19,45,23,110,37,83,30,-18,45,0,-14,-17,-16,12,-23,-60,-12,-31,-27,18,13,-36,-3,-12,-34,9,-6,-46,-12,-18,5,-10,3,-14,-46,15,22,23,-29,46,18,15,-3,1,6,-28,-3,3,-5,-19,-34,23,-7,27,-18,12,-19,2,-24,-31,-14,1,-19,-6,-37,-8,21,-10,-39,40,-54,43,35,39,0,-20,33,3,-7,19,2,64,34,1,-35,-20,-48,-27,-47,60,28,16,22,19,33,14,22,27,27,44,-34,-59,-86,25,-37,-8,14,-20,-22,-14,13,-18,19,-14,-20,54,13,-13,-27,22,-17,36,36,-16,-45,3,-3,-5,6,-37,-61,59,-10,26,-25,-30,-7,16,18,7,22,25,0,-3,1,7,-4,13,-50,5,-49,-26,-44,10,3,-29,5,10,-1,3,61,27,19,43,11,27,-29,-25,-19,-10,-35,27,-14,22,-20,28,20,92,-10,37,-12,-27,4,19,-28,4,-46,-10,-28,-15,11,10,-15,-7,65,65,22,-17,-11,37,16,-21,-57,5,6,31,3,-7,-20,36,12,82,27,-1,2,-9,56,24,-32,-13,-16,-9,-54,19,-12,-22,0,38,-4,-37,-5,-45,11,25,-3,22,10,18,-20,-2,-28,8,-14,84,82,4,6,-38,-8,-12,-5,-45,7,-24,-29,-34,-14,-53,-27,9,9,9,7,-2,-10,-3,5,-4,-15,-7,-1,7,-6,2,-2,5,0,-5,-9,-9,-14,3,-12,-14,-7,0,-12,-2,2,1,1,11,-12,3,-15,-4,-10,-7,-18,-7,0,4,-11,3,1,2,2,12,-2,-9,-15,-6,-11,-11,-21,1,-12,-2,-5,-3,-10,-6,-8,6,-6,-3,0,-10,-2,2,-7,-2,-10,4,7,11,-2,-3,-4,10,-11,-1,-7,0,-2,1,-5,5,-2,9,2,10,-6,-6,-9,1,1,-6,6,-2,5,-4,8,2,5,1,-6,2,-2,-4,-7,0,-2,1,8,6,3,-3,-7,-12,3,-4,-10,4,-5,4,-2,5,10,9,12,17,10,13,0,7,2,6,1,4,4,12,5,15,15,23,16,6,9,6,0,9,7,2,-4,5,6,4,5,2,17,4,16,2,9,13,4,10,15,2,2,5,-8,3,-4,4,13,4,4,6,10,15,9,12,17,8,3,4,-9,11,0,19,7,-17,-3,10,21,4,2,10,12,15,6,-6,4,1,-3,6,-4,-11,-17,-2,-8,-6,-2,0,-6,9,-3,-2,-7,2,1,13,-9,-10,-21,-19,-16,-21,-14,-5,-6,-5,4,-2,-5,3,11,16,6,3,-17,-9,-27,-17,-20,-4,-18,-2,-6,3,11,22,-6,87,-4,18,36,30,-9,10,-38,-3,-53,4,-37,-17,3,52,-19,10,-39,48,25,21,29,18,-6,-28,-56,-30,-32,-27,-11,42,34,-3,7,31,-27,-12,3,16,-1,-46,17,35,43,-1,-43,14,-13,-18,-2,5,17,38,15,-2,-39,12,-9,15,-23,12,-59,-23,-43,-52,-8,-45,15,24,-18,3,30,-9,-25,-31,8,14,-15,-53,-2,46,-5,51,17,16,39,14,-32,5,-6,-9,-22,16,-17,27,3,11,20,-19,5,0,56,19,-27,8,24,20,-52,-45,-19,-11,51,-9,-16,11,56,-24,20,-11,-3,-1,14,18,35,16,3,11,0,62,5,15,39,-50,-8,1,-59,-1,-2,-22,19,-15,-27,-47,35,5,0,-35,-37,-10,49,-60,-23,19,12,-6,-64,8,-17,20,-16,-42,-29,-25,-43,-3,46,-35,-28,11,-38,-13,-35,41,28,-9,26,20,-58,15,27,13,-31,-35,-7,22,-5,17,-11,-1,13,-51,-12,27,1,25,32,-15,31,-13,-2,36,13,4,11,-21,38,34,20,79,16,-5,-22,-13,-4,4,25,50,6,0,-4,-13,-1,26,1,48,41,-1,2,-13,-61,-6,19,-1,36,-31,49,-13,4,19,-62,36,21,1,48,-16,-26,-32,-14,-8,10,-21,-18,11,-14,-13,-16,32,15,14,-11,-11,14,-6,-21,-8,-14,-19,0,-4,-4,-7,19,7,-16,-27,-15,-5,-9,-8,-14,-25,9,-32,-13,-15,-28,18,-25,-3,-2,-18,-4,16,-3,-4,-6,10,-4,-32,-15,0,-46,-12,35,-4,-31,-9,0,1,-14,-22,-24,-4,18,-27,-38,-7,10,-29,33,38,-20,17,2,9,15,11,10,36,-7,-22,-24,-14,12,-20,-6,30,0,-1,7,9,-22,8,-16,18,8,2,-33,-21,-20,-38,-34,41,33,6,-19,-12,-18,-3,-2,2,6,8,27,5,4,-13,-31,33,35,-10,-21,4,-12,21,19,-8,11,6,-3,2,16,26,-27,15,44,23,-9,-3,-21,-4,-9,-7,8,6,-1,2,7,11,-23,12,24,14,14,4,-13,5,-14,-21,-2,17,14,8,-4,19,-21,14,51,57,6,13,31,20,-9,-2,-8,10,1,16,13,11,-12,0,1,16,1,-7,26,8,-8,0,-10,3,-9,16,-30,-6,-15,3,0,10,-8,-17,18,12,-8,-3,-18,-19,16,19,-28,30,27,-4,-19,25,38,33,26,29,-5,15,7,-8,-9,2,6,-13,-9,-15,-8,16,0,13,5,14,-14,18,-5,-11,-11,-32,-4,45,32,36,9,13,-3,-18,-11,2,8,-28,-38,-25,-15,7,12,-1,-7,20,29,47,28,11,6,-8,-9,-12,-3,-2,-6,-7,-3,7,23,15,5,-1,-5,13,8,7,-14,6,2,4,-17,-16,1,9,23,14,14,15,-3,8,5,6,14,10,-2,-7,-13,-2,0,9,10,-9,17,-3,-11,3,-1,-2,12,6,0,2,-20,-5,8,21,5,23,8,8,-19,8,12,6,-3,10,5,4,-10,4,14,-5,-10,11,3,3,2,4,-4,-6,-17,-9,-12,8,-1,-4,21,10,-7,16,1,-8,-4,-23,1,-12,-9,-9,-8,-3,-22,-8,1,-28,-11,14,10,-15,-9,-21,-11,-4,7,2,0,16,-7,-5,-8,-6,22,7,-5,-13,-17,12,-15,-13,-10,-7,-2,-6,-4,7,-2,-5,-3,1,2,0,4,14,4,-7,-11,-8,-7,-1,-3,-8,-15,-3,-1,12,18,2,-4,16,14,-3,9,14,-11,2,-2,1,-9,3,-9,17,11,-3,7,5,37,25,5,-2,10,2,22,-7,-13,-15,1,11,-2,8,8,16,7,2,-5,-4,3,-2,11,0,-1,-3,-9,3,2,-6,-8,6,5,-7,7,-4,8,2,-8,-3,-17,-13,10,9,0,9,-7,7,-4,2,9,-2,-11,-2,-15,-3,-21,-7,-11,8,-7,8,-27,-25,6,4,-5,-16,-14,-1,-23,-2,-23,-21,-3,52,26,12,29,17,3,17,-23,-22,-9,5,-13,-9,-31,3,-2,29,10,-6,-2,-18,-22,-10,-5,-26,-11,-2,-43,-12,-20,-26,0,10,9,-1,-6,12,27,1,-17,-9,-38,-13,-38,10,-24,-5,5,33,-22,29,13,-4,-7,11,-36,10,-13,-11,-30,29,-6,2,-33,1,13,15,-8,15,24,-16,-1,-34,-8,-8,-2,2,-11,35,8,6,15,11,15,16,-19,4,-8,-32,-21,2,-3,6,16,44,28,-22,8,3,24,16,57,37,6,32,0,-5,-36,4,23,3,-6,-15,-51,-16,-11,-11,23,43,-14,-22,10,-14,-23,-10,-32,-1,-63,-20,-8,-13,-36,17,8,-9,22,33,23,8,1,3,3,14,-13,18,1,45,29,33,19,-3,24,23,20,25,5,5,5,1,-29,57,35,31,-16,13,3,-18,-16,18,23,5,21,9,4,13,-29,19,25,-7,-17,-26,11,-35,-12,1,-9,3,-12,-22,22,-17,13,52,29,24,-7,-12,6,10,-29,-16,-21,-1,-11,-23,19,-7,11,32,15,-5,-28,-13,-10,7,6,1,3,0,-2,-13,12,-17,18,0,23,0,23,4,21,0,-5,15,-3,-20,-28,-8,9,18,16,54,-7,-23,-7,-14,-18,-6,3,-29,-15,-32,-36,-33,30,-5,-8,19,22,5,5,16,19,23,-8,-10,15,3,0,3,-46,-17,16,36,10,23,-19,-28,-3,-9,-3,-4,9,-1,-43,-23,-7,-16,-27,35,9,-5,0,11,6,4,1,-32,8,9,6,-7,-17,-4,2,36,6,13,-1,-10,-1,0,-50,-3,11,11,-6,13,-32,-19,9,19,-1,19,-14,22,-6,-19,4,8,5,12,-30,11,0,11,9,38,9,26,0,3,10,4,-11,13,-5,16,3,-14,-17,9,25,29,21,18,17,4,7,12,-6,-36,-12,13,-4,-13,9,22,32,13,10,26,-24,26,-1,-1,-7,-8,-1,-24,-13,15,-1,5,32,-10,-1,13,22,8,8,9,-7,-1,3,-24,1,-7,-3,17,19,-28,-44,2,7,2,25,38,9,13,-5,-1,-23,-1,3,8,-1,3,-26,-35,-41,-12,17,24,2,13,17,4,-3,-1,12,12,17,-11,-27,2,-15,1,-38,21,0,-9,4,-11,-6,7,-10,-24,-11,26,-1,10,-7,-9,-10,-14,12,8,13,-15,1,17,1,16,-25,25,5,12,-9,3,-12,-1,2,-20,14,1,-5,9,-4,-23,-21,8,15,-2,-6,-11,3,7,-26,-32,-22,0,-14,10,-20,7,-4,18,-14,-1,-3,-3,-29,2,-17,-24,-21,-21,-31,-25,-18,-12,-8,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	bool pe=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf) {
			if (cnt==m) {yright[k]=j; lf=false; k++;}
			if (cnt<m-6) pe=true;
		}
		
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=m-1; i>=0; i--){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xbottom[k]=i+1; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xtop[k]=i-1; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])-4&&pe) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-1&&pe) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])-3&&pe) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])-3&&pe) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; 
						if (k=='.') s++; 
						break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

