#define INPUT_BUFFER 64000
#define H_WIDTH 20
#define H_HEIGHT 30

#include <iostream>

#include <ctime>

#include <string.h>

using namespace std;


class Hopfield {
public:
	Hopfield(int size, int iterations=500, int m_pat=100, int printOnLine=20);
	~Hopfield();

	void teach(const char *pattern);
	int find(const char *pattern);
	int swaps() { return swapsCount; }
	char* getPattern() { return x; };
	void neuroDump();
	int findMatchPattern();
private:
	int N;
	char *x,*y,*w;
	char **patterns;
	int iMax,pCount,maxPCount;
	int printOnLine;
	int swapsCount;
};

Hopfield::Hopfield(int size, int iterations, int m_pat, int onLine) {
	if (size<1) return;
	N = size;
	x = new char[N];
	y = new char[N];
	w = new char[N*N];
	for (int i = 0; i<N; i++)
		for (int j = 0; j<N; j++)
			w[i*N+j] = 0;
	iMax = iterations;
	maxPCount = m_pat;
	patterns = new char*[maxPCount];
	pCount = 0;
	printOnLine = onLine;
}

Hopfield::~Hopfield() {
	delete [] x;
	delete [] y;
	delete [] w;
}

void Hopfield::teach(const char *pattern) {
	patterns[pCount] = new char[N];						// выделим память под новый образ
	memcpy(patterns[pCount++],pattern,sizeof(char)*N);	// и запомним его
	// затем обучим сеть распознавать этот образ (создадим аттрактор)
	for (int i=0; i<N; i++)
		for (int j=0; j<N; j++)
			if (i==j) w[i*N+j]=0; else w[i*N+j] += pattern[i]*pattern[j];
//	cout << "Teaching complete. " << pCount << " attractors exists." << endl; 
}

int Hopfield::find(const char *pattern) {
	// здесь нам необходимо распознать образ, сеть уже обучена
	memcpy(x,pattern,sizeof(char)*N);	// поместим полученный образ на вход
	swapsCount = 0;	// перестановок еще не было

	int step = 0;						// число шагов

	bool change;	// никаких изменений не произошло
	int net;		// тут будем аккумулировать входной сигнал нейрона
	int val;		// новое значение нейрона

	do {
		change = 0;
		for (int r = 0; r<N; r++) {		// циклически обработаем каждый нейрон сети
			net = 0;							// изначально на входе ноль
			for (int i = 0; i<N; i++)			// прибавим к нему вес каждой активной связи
				net += x[i]*w[i*N+r];
			
			if (net) {	// что-то получилось? Перестраиваем нейрон
				val = (net>0) ? 1 : -1;	// итак, вот новое состояние
				if (val != x[r]) {		// что-то изменилось?
					change = 1;				// да!
					swapsCount++;			// учтем перестановку
					x[r] = val;
				}
			}
		}								// все нейроны обработаны, теперь посмотрим, что из этого вышло

		step ++ ;	// вот и еще одна итерация
	} while (change && step<iMax);

/*
	cout << "Recognizing finished on step " << step << " of " << iMax << "." << endl;

	int match;
	if ((match = findMatchPattern())>=0) 
		cout << "Match with pattern #" << match << "." << endl;
	else
		cout << "Dismatch with any pattern." << endl;
*/
	return step;
}

void Hopfield::neuroDump() {
	int n = 0;
	while (n<N) {
		for (int i = 0; i<printOnLine; i++, n++) {
			if (n>=N) break;
			cout << (x[n]==1?'@':'.');
		}
		cout << endl;
	}
	cout << endl;
}

int Hopfield::findMatchPattern() {
	for (int i = 0; i<pCount; i++)
		if (!memcmp(patterns[i],x,sizeof(char)*N)) return i;
	return -1;
}


class Pattern {
public:
	Pattern(int x=3, int y=3);
	~Pattern();
	void Fill(int x, int y, const char *input);
	void Normalize();
	static void printPattern(int w, int h, const char *pattern);
	inline char* getData() { return data; }
	inline char* getSource() { return source; }
private:
	char *data;
	char *source;
	int width,height;
	int srcw,srch;
};

Pattern::Pattern(int x, int y) {
	data = new char[x*y];
	width = x;
	height = y;
	source = NULL;
}
Pattern::~Pattern() {
	delete [] data;
	delete [] source;
}

void Pattern::Fill(int x, int y, const char *input) {
	if (source) delete [] source;
	source = new char [x*y];
	memcpy(source,input,sizeof(char)*x*y);
	srcw = x;
	srch = y;
}

void Pattern::Normalize() {
	float scaleX = (float)srcw / width;
	float scaleY = (float)srch / height;

	for (int x = 0; x < width; x++)
		for (int y = 0; y < height; y++)
		{
			// [x;y] - coords in data matrix
			// try interpolate this pixel
			int srcX = (int)(scaleX*x);
			int srcY = (int)(scaleY*y);
			data[y*width+x] = source[srcY*srcw+srcX];
		}
}

void Pattern::printPattern(int w, int h, const char *pattern) {
	cout << "Printing pattern " << w << "x" << h << ": " << endl;	
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			cout << (pattern[i*w+j]==1?'@':'.');
		}
		cout << endl;
	}
}




const char number0_1[] = 
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number1_1[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};
const char number2_1[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};
const char number3_1[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number4_1[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
};
const char number5_1[] =
{
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number6_1[] =
{
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number7_1[] =
{
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
};
const char number8_1[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number9_1[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
};

const char number0_2[] = 
{
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,+1,+1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
};
const char number1_2[] =
{
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};
const char number2_2[] =
{
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
};
const char number3_2[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,-1,-1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,-1,-1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
};
const char number4_2[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
};
const char number5_2[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
};
const char number5_3[] =
{
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number6_2[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,
+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number6_3[] =
{
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
};
const char number7_2[] =
{
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
};
const char number8_2[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
};
const char number8_3[] =
{
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,+1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,+1,+1,+1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
};
const char number9_2[] =
{
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,
+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,-1,-1,+1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,+1,+1,+1,+1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
+1,+1,-1,-1,-1,-1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,+1,
};





int findPattern(Hopfield **h, int num, const char *pattern) {
	for (int i=0; i<num; i++) {
//		cout << "Number" << i << ", steps: " << (h[i]->find(pattern));
//		cout << ", swaps: " << (h[i]->swaps()) << endl;
		h[i]->find(pattern);
	}
	int minSwaps = h[0]->swaps();
	int minSwapsNetwork = 0;
	for (int i=1; i<num; i++)
		if (minSwaps > h[i]->swaps()) {
			minSwaps = h[i]->swaps();
			minSwapsNetwork = i;
		}
	return minSwapsNetwork;
}

int main() {
/*
	cin.get();
	srand(clock());

	clock_t ct1 = clock();
*/
	// Создадим сети.
	Hopfield **networks = new Hopfield*[10];
	for (int i=0; i<10; i++) networks[i] = new Hopfield(H_WIDTH*H_HEIGHT,500,1,H_WIDTH);

	// Обучим их.
	networks[0]->teach(number0_1);
	networks[0]->teach(number0_2);
	networks[1]->teach(number1_1);
	networks[1]->teach(number1_2);
	networks[2]->teach(number2_1);
	//networks[2]->teach(number2_2);
	networks[3]->teach(number3_1);
	networks[3]->teach(number3_2);
	networks[4]->teach(number4_1);
	//networks[4]->teach(number4_2);
	networks[5]->teach(number5_1);
	networks[5]->teach(number5_2);
	networks[5]->teach(number5_3);
	networks[6]->teach(number6_1);
	networks[6]->teach(number6_2);
	networks[6]->teach(number6_3);
	networks[7]->teach(number7_1);
	//networks[7]->teach(number7_2);
	networks[8]->teach(number8_1);
	networks[8]->teach(number8_2);
	//networks[8]->teach(number8_3);
	networks[9]->teach(number9_1);
	//networks[9]->teach(number9_2);

	// Разберем поток ввода.
	char c = 0;			// Сюда будем считывать символы.
	int inpWidth = 0;	// Запомним ширину области данных
	int inpHeight = 0;	// и высоту области полезных данных.
	// Будем читать строку до конца - определим ее ширину.
	do {
		c = cin.get();
		inpWidth++;
	} while (c!=13 && c!=10);
	inpWidth--;	// Не учитываем последний символ - перевод строки.
	for (int i = 0; i < (inpWidth+1)*4; i++) cin.get();	// Пропустим еще 4 строки.

	// Считано 5 первых строк, начинаются полезные данные.

	// Выделим память для полезных данных.
	char *inp = new char[INPUT_BUFFER];
	// Проследим за переполнением памяти (у нас есть всего лишь INPUT_BUFFER байт памяти!).
	int overflow = 0;

	// Будем считывать построчно - выделим для этого памяти.
	char *inpLine = new char[inpWidth];
	
	// Далее - хитрый алгоритм чтения, читает все подряд, пока не встретит строку из одних точек.
	int clearLine = 0;
	while (!clearLine) {
		clearLine = 1;	// Допустим, строка пустая...
		for (int i = 0; i < inpWidth; i++) {
			c = cin.get();
			inpLine[i] = c;
			if (c != '.') clearLine = 0;	// Ан нет, не пустая.
		}
		if (!clearLine) {
			// Строка не пустая, но прежде чем засунуть ее в нашу память, проверим, есть ли там место.
			overflow += inpWidth;
			if (overflow > INPUT_BUFFER) { cout << "Input buffer overflow."; return 0; }
			// Если мы тут оказались - место есть. Копируем.
			memcpy(inp+inpHeight*inpWidth,inpLine,sizeof(char)*inpWidth);
			// Вот еще одна строка... это надо запомнить.
			inpHeight++;
		}
		cin.get();	// Пропускаем символ перевода строки.
	}
	// Итак, мы нашли пустую строку - вероятно, данные закончились.
	
	// Дочитаем еще 4 пустые строки.
	for (int i = 0; i < (inpWidth+1)*4; i++) cin.get();

	// Все данные считаны, самое время с ними разобраться.

/*	здесь выводится на экран содержимое памяти

	cout << "---------------------" << endl;

	for (int j = 0; j < inpHeight; j++) {
		for (int i = 0; i < inpWidth; i++) {
			cout << (char)inp[j*inpWidth+i];
		}
		cout << endl;
	}

	cout << "---------------------" << endl;
*/

	// На данный момент мы имеем матрицу inp[inpWidth x inpHeight] с полезными данными.
	
	// Выделим память для хранения отдельно взятого образа.
	char *inpPattern = new char[inpWidth*inpHeight];

	// Создадим объект Pattern.
	Pattern *pattern = new Pattern(H_WIDTH,H_HEIGHT);

	int coord;	 // вспомогательная переменная

	// Будем считывать данные столбацами.
	char *inpColumn = new char[inpHeight];
	
	int column = 0;			// текущий столбец
	int clearColumn;		// Столбец пустой?
	int patternStart = -1;	// Столбец, с которого начинается текущий образ.
	int patternWidth = 0;	// Вспомогательная переменная.
	while (column < inpWidth) {
		// Считываем очередной столбец.
		clearColumn = 1;	// Пусть столбец пуст...
		for (int i = 0; i < inpHeight; i++) {
			coord = i*inpWidth+column;
			if (inp[coord] == '@') clearColumn = 0;	// Столбец не пуст.
			// Преобразуем символы в -1/+1, для обработки нейросетью.
			inp[coord] = (inp[coord] == '@' || inp[coord] == '#') ? +1 : -1 ;
		}

		// Итак, мы проверили столбец column, дальше - логика:

		// если образ еще не начался
		if (patternStart == -1 && (!clearColumn)) {
			// Образ не начат, а строка не пуста. Самое время начать заполнять образ ;)
			patternStart = column;
		}

		// если образ уже начался
		if (patternStart >= 0 && (clearColumn || column == inpWidth-1)) {
			if (!clearColumn) column++;	// если это конец данных - сместим "пустой столбец" правее
			// Образ заполняется, а мы нашли пустой столбец или конец данных: 
			// очевидно, образ завершен и следует его обработать.
			// Текущий образ начинается в столбце patternStart, и заканчивается в столбце column-1
			// Ловко копируем память строками.
			patternWidth = column - patternStart;
			for (int i = 0; i < inpHeight; i++)
				memcpy(inpPattern+i*patternWidth,inp+i*inpWidth+patternStart,sizeof(char)*patternWidth);

			// Засовываем все в Pattern, чтобы получить матрицу нужного размера
			// (вектор нужной длины, чтоб подать его на вход нейросети)
			pattern->Fill(patternWidth,inpHeight,inpPattern);
			pattern->Normalize();
			
			// Готово, отдаем данные на анализ.
//			cout << "Result: " << (int)(findPattern(networks, 10, pattern->getData())) << endl;
			cout << (int)(findPattern(networks, 10, pattern->getData()));

			// Образ обработан, мы готовы искать новый.
			patternStart = -1;	
		}

		column++;	// счетчик цикла
	}

	// Освободим всю память.
	delete [] inpPattern;
	delete [] inpColumn;
	delete [] inpLine;
	delete [] inp;

	delete pattern;

	for (int i=0; i<10; i++) delete networks[i];
	delete [] networks;

/*
	cout << endl << endl << endl << "--------------------------" << endl << "Performance:" << endl;
	clock_t ct2 = clock();
	cout << "Clocks per second: " << CLOCKS_PER_SEC << endl;
	cout << "Execute clocks: " << (ct2-ct1) << endl;
	cout << "Execute time: " << (double)(ct2-ct1)/CLOCKS_PER_SEC << " sec." << endl;
*/
}