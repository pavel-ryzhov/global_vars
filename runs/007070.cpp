#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.88;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {0.00153,-0.01083,0.00219,-0.02838,-0.10046,-0.35059,-0.30040,-0.51482,-0.11603,-0.17001,0.10286,0.43521,0.11922,-0.32232,-0.13137,-0.10487,-0.02806,-0.00204,0.00065,-0.02552,-0.00377,0.06281,-0.23156,-0.45135,-0.51619,-0.34051,-0.21147,-0.25181,-0.13836,0.11707,0.12832,-0.21572,-0.21742,0.10393,-0.00594,-0.00987,-0.01352,-0.02081,-0.00867,0.01447,-0.32051,-0.48042,-0.48493,-0.48589,0.03105,-0.19096,-0.09681,0.17030,-0.01651,-0.16601,-0.22846,0.05148,-0.02122,-0.01776,-0.01280,-0.02133,-0.04579,-0.00724,-0.29790,-0.26425,-0.26483,-0.41091,-0.09402,-0.34647,-0.09357,0.07737,-0.12108,-0.04595,-0.05115,-0.04552,0.04772,-0.00770,-0.01943,-0.02206,-0.02387,0.00696,-0.17452,-0.13006,-0.34467,-0.09453,0.10762,-0.20571,-0.00846,0.02184,-0.08647,0.08035,0.04651,-0.06543,0.07627,-0.01377,-0.01495,-0.01755,0.03773,-0.02868,-0.06814,-0.01968,-0.23429,-0.07325,0.38994,0.01479,0.13472,-0.11093,-0.10041,-0.33507,-0.26598,-0.23196,0.02234,-0.01719,-0.00852,-0.01166,0.05298,0.07420,0.14462,0.10701,-0.02994,-0.20260,0.02594,-0.09451,0.19568,-0.12490,-0.24949,-0.38632,-0.28346,-0.21440,0.06191,-0.02026,-0.01069,0.00335,0.04317,0.14303,0.42867,0.34984,0.08335,0.07849,0.01664,-0.39685,-0.19644,-0.29037,-0.03822,-0.29014,-0.00622,-0.07377,-0.01850,-0.02690,-0.00826,0.01067,0.15250,0.32186,0.64778,0.60909,0.17493,-0.05638,0.11955,-0.29743,-0.13827,-0.00850,-0.12794,0.13381,0.29073,0.17799,-0.00941,0.00286,-0.00821,0.00958,0.19722,0.57932,0.53842,0.35944,0.30172,-0.03759,0.13240,-0.05693,-0.08225,-0.20050,0.01432,0.17935,0.27572,0.30906,0.07943,0.00015,-0.01159,0.02379,0.24521,0.52527,0.64324,0.62374,0.51283,0.34408,-0.06273,-0.27248,-0.41525,-0.20052,-0.01111,0.06463,0.03489,0.11209,0.07873,0.00112,-0.02122,0.04320,0.19059,0.50859,0.56812,0.85385,0.47086,-0.09355,-0.26253,-0.26134,-0.15658,-0.11771,-0.00578,-0.03730,-0.06567,-0.02155,0.05623,0.00157,-0.01972,0.05642,0.21665,0.29401,0.42355,0.65045,0.31890,0.12157,-0.31060,-0.16250,0.18953,0.09553,0.04584,0.32205,0.27184,0.08483,0.12989,-0.00186,-0.01992,-0.00083,0.11140,0.07585,-0.07529,0.31801,0.09878,0.18169,-0.09619,-0.13608,0.19825,0.17148,0.18773,0.00392,-0.01824,0.07280,0.12718,0.08455,-0.01466,-0.01266,0.02721,-0.17327,-0.37697,-0.05255,0.00441,0.03821,-0.10464,-0.17307,0.05016,0.25915,-0.01726,0.00660,-0.25451,0.07979,0.15759,0.05721,-0.01477,-0.02630,-0.08424,-0.36578,-0.54971,-0.44731,0.00277,-0.05415,0.17212,-0.19550,-0.04948,0.00729,0.01921,-0.17697,-0.09166,0.18831,0.17263,-0.01272,-0.00033,-0.01531,-0.08549,-0.34990,-0.58689,-0.57209,-0.44759,-0.33830,0.15369,0.09243,0.17045,0.19648,-0.18546,-0.08122,0.08770,0.20188,0.00231,-0.02222,-0.00119,0.00457,-0.08957,-0.24029,-0.38454,-0.54055,-0.42153,-0.16154,0.26779,0.19807,0.49112,0.48386,0.05708,0.18931,0.11787,-0.02869,0.00184,-0.00094,-0.20795,};
float weights_input_1[] = {0.01338,0.02950,0.01102,0.05638,0.28278,0.28574,0.24844,0.03606,-0.12625,0.08204,0.00979,0.11676,0.26899,0.31292,0.23360,0.12205,0.13147,0.03702,0.01206,-0.01158,0.05741,0.10529,0.20517,0.17811,0.05031,0.08677,0.01421,0.12410,0.03181,-0.09132,0.07954,0.32437,0.31344,0.19093,0.02541,0.02554,-0.03854,-0.06289,0.02947,0.04245,0.10108,0.02115,0.23609,0.03573,0.39925,0.35964,-0.04233,-0.20848,-0.04887,0.14852,0.32010,0.16840,0.06337,-0.06963,-0.05673,0.01080,-0.00131,0.06048,0.07809,0.04549,0.15191,0.23780,0.33793,0.30136,-0.00979,-0.16951,-0.01474,0.06978,0.17957,0.08646,0.05983,-0.03669,-0.03587,0.01168,0.01023,0.02258,0.09939,0.04698,-0.10929,-0.10308,0.05421,-0.01319,-0.05670,-0.07325,-0.00069,0.00097,0.00293,0.02432,0.04426,-0.05969,-0.06072,0.00723,0.00698,-0.02623,0.04229,-0.11445,-0.29349,-0.32778,-0.15874,0.18991,0.04255,0.02704,-0.04264,-0.11780,-0.07414,0.00652,0.00362,-0.06015,-0.05976,0.00751,0.01305,0.04609,0.01291,-0.11582,-0.24519,-0.23842,0.02046,0.24513,0.01560,0.13204,-0.01381,-0.23931,-0.09157,-0.04601,0.00373,-0.05951,-0.05804,-0.00473,0.00862,0.00839,-0.07460,-0.11584,-0.23517,-0.41255,0.14933,0.24568,0.25850,0.13823,-0.17386,-0.21891,-0.07205,0.00359,0.01780,-0.04563,-0.05939,-0.00627,-0.01626,-0.02138,-0.07464,-0.15086,-0.28695,-0.14442,-0.00467,0.13192,0.13407,0.07812,-0.20009,-0.21210,-0.08371,0.00828,0.00634,-0.05953,-0.05789,-0.00469,-0.04095,-0.08584,-0.14737,-0.17780,-0.34738,-0.30604,0.09551,0.25165,-0.03758,-0.15567,-0.19944,-0.13897,-0.04167,-0.01278,0.02794,-0.02761,-0.06399,-0.01591,-0.05307,-0.10976,-0.19447,-0.28983,-0.30049,-0.22495,0.30978,0.05182,-0.18063,-0.12798,-0.18217,-0.10392,-0.05034,-0.02062,0.06152,-0.00506,-0.04947,-0.01916,-0.04093,-0.11847,-0.15499,-0.35748,-0.40720,-0.00556,0.14920,0.12011,-0.01268,-0.05346,-0.27047,-0.12929,-0.06659,-0.02497,0.03151,-0.02932,-0.08545,-0.05183,-0.05891,-0.11538,-0.31985,-0.39717,-0.37186,-0.31301,-0.02763,0.09666,0.07630,-0.00770,-0.31702,-0.25164,-0.16565,-0.03723,0.03430,-0.02059,-0.08938,-0.02377,-0.07043,-0.09257,-0.30260,-0.28902,-0.19385,-0.18894,0.08183,0.22503,-0.00546,-0.20846,-0.38809,-0.31642,-0.20705,-0.08982,-0.03341,-0.04933,-0.05882,-0.03153,-0.07099,-0.15854,-0.18863,-0.26704,-0.39465,-0.02762,0.16906,0.28793,0.05657,-0.11430,-0.28190,-0.23349,-0.27022,-0.10321,-0.07221,-0.15100,-0.05951,-0.09018,-0.08708,-0.12269,-0.18470,-0.26296,-0.22044,-0.00312,0.02668,0.17417,-0.16077,-0.18764,-0.20080,-0.24927,-0.14513,-0.04963,0.01505,-0.05829,0.00352,-0.08551,-0.12360,-0.07801,-0.06341,-0.04301,0.02246,0.11478,-0.12188,-0.12052,-0.27820,-0.27946,0.00445,0.09582,0.07214,0.04413,0.01797,-0.06633,0.00190,-0.02882,-0.11986,-0.14633,-0.17856,-0.01221,-0.03230,0.00314,-0.20835,-0.22560,-0.31163,-0.17345,0.05510,0.11085,0.07569,-0.02169,0.01447,-0.00042,0.09636,};
float weights_input_2[] = {-0.00122,-0.00007,0.00519,-0.04755,-0.21131,-0.30359,-0.36260,-0.20313,-0.17877,0.06731,0.04797,0.23582,0.14996,-0.19816,-0.30739,-0.20675,-0.07995,-0.00250,-0.00079,0.00519,-0.04178,-0.03134,-0.15783,-0.16998,-0.20095,-0.14384,-0.05342,0.11737,0.03487,0.02956,-0.06364,-0.16230,-0.30173,-0.22097,-0.08735,-0.03449,0.00413,-0.03018,-0.00080,0.03220,-0.06431,-0.25642,0.13948,-0.13894,-0.14699,0.01523,0.03145,0.01730,-0.06400,-0.18790,-0.28984,-0.18297,-0.08990,-0.07568,-0.00188,-0.03280,0.03239,0.07404,-0.01374,0.04498,-0.00410,0.04943,-0.07028,0.19363,0.28402,0.09333,0.00471,-0.19355,-0.21151,-0.08143,-0.03218,-0.00287,0.01327,-0.03295,0.03985,0.10870,0.11183,0.13548,-0.08935,-0.16102,-0.08144,0.21190,0.33802,0.05860,0.06395,-0.07432,-0.05663,-0.05016,-0.02208,0.00813,0.01786,-0.02205,0.08195,0.05813,0.08842,0.11460,-0.20420,-0.30772,-0.17103,0.44280,0.19706,-0.12681,0.04176,-0.02246,-0.00612,-0.01700,0.00977,0.00421,0.01487,-0.02047,0.08834,0.15981,0.17327,0.15485,-0.24552,-0.18573,-0.09864,0.42982,0.05664,-0.09960,-0.05276,-0.00338,0.00626,0.02903,0.01693,0.00825,0.01489,-0.01877,0.07536,0.20846,0.25281,0.12373,-0.00164,-0.14550,0.01818,0.25706,-0.18174,0.00869,-0.06484,-0.00511,0.05192,0.05004,0.01659,-0.01028,0.01641,-0.02542,0.06541,0.14020,0.26844,0.20451,0.06526,0.05679,0.05053,-0.00855,-0.28463,0.10583,0.04027,0.11635,0.05768,0.04463,-0.00879,-0.00754,0.01350,-0.02217,0.05577,0.09486,0.16931,0.27953,0.07668,0.05639,-0.02287,0.00805,-0.02786,0.00895,0.04733,0.10961,0.12557,0.03286,-0.01040,-0.00664,-0.01183,-0.05364,-0.02480,-0.01316,-0.12176,-0.00002,0.11311,0.22244,0.09840,0.15875,0.22915,0.05246,-0.00244,0.22303,0.07966,0.00451,-0.01832,-0.03535,-0.00921,-0.06760,-0.01800,-0.11114,-0.18354,-0.19212,-0.11201,0.12233,-0.02494,0.07563,0.20984,0.05334,0.07020,0.19045,-0.00162,0.02064,-0.00914,-0.03241,-0.04494,-0.10454,-0.03333,-0.10251,-0.32820,-0.37707,-0.38175,-0.31945,-0.29842,-0.11437,0.26979,0.20955,0.08860,0.13342,-0.01435,0.02735,0.00637,0.00277,-0.04054,-0.08507,-0.05419,-0.04818,-0.22035,-0.32896,-0.39659,-0.38790,-0.30800,0.12954,0.23305,0.11870,0.12203,0.04531,-0.10485,-0.03480,-0.01965,0.02981,0.02253,-0.08403,-0.04611,-0.00156,-0.12685,-0.30297,-0.51083,-0.32075,-0.17729,0.23831,0.18129,0.09541,0.00053,-0.09020,-0.23285,-0.08906,-0.04997,-0.01925,0.00966,-0.05698,-0.06218,0.05881,-0.08614,-0.31105,-0.30661,-0.30553,-0.18096,0.18650,0.11203,0.14769,0.11295,-0.11666,-0.18045,-0.11520,-0.00641,0.00903,0.00068,-0.03016,-0.03815,-0.00947,-0.09066,-0.10571,0.00174,-0.07480,-0.13692,0.04559,-0.00037,-0.19010,0.20269,0.13929,0.03235,-0.04413,0.00779,-0.02355,0.00146,-0.01088,-0.02603,0.01815,0.05233,0.11779,0.11246,0.16584,-0.33640,-0.07490,0.13685,0.16747,0.24554,0.25489,0.16272,-0.01554,0.00839,0.00052,-0.03307,};
float weights_input_3[] = {0.00355,0.04366,0.04485,-0.02434,0.18891,0.49095,0.54491,0.53147,0.04791,-0.06804,-0.16340,-0.13068,0.23370,0.19485,0.17715,0.15378,0.07532,0.04293,0.00154,-0.03094,0.06930,0.04483,0.12188,0.44848,0.34596,0.38354,0.04673,0.04820,0.10182,0.02334,-0.07119,0.15698,0.28026,-0.03312,-0.05466,0.04284,-0.05391,-0.06852,0.01006,-0.06226,0.12450,0.17456,0.36676,0.10419,0.03622,0.10050,-0.03799,0.03283,-0.01338,0.16229,0.18626,0.04954,0.04499,-0.03579,-0.10984,-0.02700,-0.06028,-0.06882,0.09921,0.03739,0.36251,0.28680,-0.05116,0.13256,0.00934,-0.10992,-0.10044,0.01859,0.09190,-0.11991,-0.09216,-0.08218,-0.05587,-0.02728,-0.01220,-0.17435,-0.11397,-0.05098,0.04932,-0.11017,-0.31446,-0.04500,-0.03144,-0.08532,0.01916,0.05014,-0.10254,-0.13543,-0.15363,-0.10663,-0.06947,0.01253,-0.09766,-0.30031,-0.09940,-0.06042,-0.15328,0.04018,-0.00278,0.10610,0.09838,0.10048,0.16742,0.19970,0.05210,-0.01188,-0.08372,-0.11359,-0.07321,0.05146,-0.09155,-0.17708,-0.22514,-0.18743,0.19646,0.18729,0.28778,-0.00886,0.08553,0.20507,0.39797,-0.01136,-0.06519,-0.03609,-0.10446,-0.11501,-0.07313,0.04839,-0.07212,-0.30579,-0.52050,-0.12181,0.06163,0.30888,0.12660,0.25308,0.55129,0.32862,-0.15927,-0.11195,-0.31210,-0.08672,-0.06809,-0.11760,-0.09228,0.01531,-0.00030,-0.33264,-0.40076,-0.34427,0.18308,0.14919,0.37074,0.40960,0.30397,0.01170,-0.17634,-0.46229,-0.60726,-0.23878,-0.08714,-0.13127,-0.09365,0.01367,0.02514,-0.18418,-0.19968,-0.04695,-0.02055,0.07321,0.40477,0.39367,0.22060,0.25912,-0.07298,-0.25491,-0.12066,-0.10581,-0.14316,-0.12019,-0.10343,0.00595,0.06438,0.02115,-0.10551,-0.17335,-0.37683,-0.46371,-0.18101,-0.22404,0.06974,0.18029,0.22372,0.08775,0.22607,0.13222,-0.12987,-0.13240,-0.08220,0.04910,0.14861,0.14786,-0.18889,-0.36483,-0.69611,-0.12446,-0.21122,-0.13942,0.23512,0.32542,0.07649,0.20587,0.31361,0.37384,-0.05217,-0.14485,-0.03893,0.13468,0.19590,0.24217,0.28748,-0.11321,-0.33660,-0.13078,-0.11280,0.17064,0.46868,0.45046,0.17955,0.34034,0.38300,0.40125,-0.07846,-0.11994,-0.01727,0.11669,0.22304,0.32722,0.41746,-0.14556,-0.15990,-0.23351,-0.10444,0.41674,0.27400,0.27987,0.04192,0.09244,0.36954,0.19142,-0.08650,-0.03494,-0.03955,0.11715,0.13404,0.22429,0.11460,-0.33414,-0.73712,-0.41131,-0.14273,0.14768,0.23269,0.07863,-0.07117,-0.28449,0.15161,-0.08953,-0.09884,-0.05689,-0.06445,0.05417,0.14345,0.15212,-0.14758,-0.38181,-0.54213,-0.25117,-0.45692,-0.08663,-0.06033,0.05381,-0.24280,-0.16869,-0.18290,-0.16362,-0.07149,-0.07073,0.00970,-0.03816,0.03935,0.11274,-0.03302,-0.23008,-0.40369,-0.23956,-0.05527,0.05583,-0.10442,-0.20039,0.14177,-0.02121,-0.03574,-0.03875,0.02186,-0.08912,0.00774,-0.03648,-0.16759,-0.25532,-0.28421,-0.27638,-0.20234,-0.28494,-0.34065,-0.10964,-0.21105,-0.20898,-0.10052,-0.31028,-0.12346,0.01545,0.01247,-0.00421,-0.10738,};
float weights_input_4[] = {-0.00068,0.02039,0.02955,-0.15946,-0.23081,-0.19263,-0.21864,-0.14571,-0.33703,-0.28376,-0.27759,0.20074,0.33887,0.14035,0.10079,0.04460,-0.08291,0.00030,-0.00242,-0.02574,-0.05624,-0.04286,-0.15800,-0.31643,-0.36989,-0.14262,-0.23087,-0.10161,-0.18010,-0.11267,0.11414,0.09821,-0.05500,0.20823,-0.08045,-0.06724,-0.04565,-0.09576,-0.02512,-0.02754,-0.09343,-0.35564,-0.10671,-0.21180,-0.02134,0.17506,0.09133,0.23826,0.04813,-0.13100,-0.14985,-0.02403,-0.03691,-0.13311,-0.04426,-0.06734,-0.07497,-0.04454,-0.31582,-0.07091,-0.08004,-0.03707,-0.10821,0.11767,0.38907,-0.08620,-0.05812,-0.22112,-0.42595,-0.26572,-0.08029,-0.12829,-0.04468,-0.06946,-0.07119,0.02306,0.03842,-0.02106,-0.14408,-0.19438,0.01646,0.23214,0.05643,-0.21705,-0.30174,-0.29531,-0.50531,-0.33516,-0.22891,-0.13257,-0.01052,-0.06843,0.00735,-0.05303,0.04054,-0.00150,-0.10843,-0.16116,0.03949,0.44210,0.02490,-0.54328,-0.48131,-0.68453,-0.66573,-0.51979,-0.28577,-0.15657,-0.01129,-0.04687,0.02307,0.02102,0.03663,-0.09803,-0.19743,-0.14284,-0.06330,0.46035,0.26915,-0.40714,-0.57068,-0.78774,-0.72972,-0.32935,-0.17468,-0.15761,-0.01280,-0.01510,0.04053,0.01326,0.23672,0.27158,-0.08414,0.00244,0.33175,0.44073,0.30380,0.24005,0.17099,-0.15984,-0.26054,-0.16316,-0.20228,-0.24532,-0.01243,-0.02657,0.08396,0.18150,0.43668,0.26412,0.20445,0.20311,0.13459,0.15394,-0.00915,0.55908,0.36382,0.37272,0.21886,0.17672,-0.17589,-0.13625,-0.01284,-0.02931,0.08727,0.21991,0.33089,0.08700,0.08734,-0.04406,-0.22894,-0.19446,-0.12363,-0.17737,0.37525,0.25470,0.17664,0.35926,-0.03575,-0.12767,-0.01593,-0.03170,0.05514,0.02549,0.02553,-0.18056,-0.27798,0.00930,-0.27027,-0.20271,-0.02568,-0.21287,0.14720,0.20938,0.16501,0.25037,0.10719,-0.10953,-0.01545,-0.02567,0.00938,-0.09711,-0.34445,-0.33835,-0.21427,-0.28094,-0.05649,0.07041,0.12901,-0.16127,0.28136,0.18359,0.11675,0.22660,0.10705,-0.10759,0.05514,0.01621,0.00135,-0.10278,-0.15435,-0.05894,-0.06120,-0.28266,-0.19643,0.17689,0.23759,0.08406,0.33132,0.36542,0.21352,0.31712,0.04533,-0.02410,0.05319,0.01324,0.04234,-0.12294,-0.17220,-0.08760,0.04258,-0.15441,-0.23883,0.45979,0.12354,-0.03759,-0.04819,0.32455,0.12855,0.29598,0.11638,0.12332,-0.04341,0.00530,0.01395,-0.03769,-0.37241,-0.31413,-0.28871,-0.11883,-0.09468,0.35581,0.16947,0.06113,-0.15136,0.13340,-0.13255,0.05089,0.21090,0.00215,-0.04247,-0.01557,-0.03616,-0.14564,-0.27446,-0.16154,-0.03074,-0.12269,-0.02641,0.24707,0.25024,0.01212,0.16352,0.15814,-0.06967,0.10243,0.19619,-0.04220,0.00060,-0.09113,0.06545,-0.06929,0.03099,-0.14217,0.17736,-0.17555,0.08526,0.35237,-0.05452,-0.23015,0.26529,0.18000,0.15291,0.18998,0.00716,-0.11340,0.00221,-0.00042,-0.06802,0.11440,0.31784,0.03914,0.15221,0.11895,-0.13684,0.08869,0.20171,0.49411,0.29463,0.39275,0.05543,-0.07564,0.00864,-0.00055,-0.07104,};
float weights_input_5[] = {-0.00621,-0.00381,-0.00816,0.03650,-0.11933,-0.14291,-0.26086,-0.12104,0.28574,0.24485,0.15840,-0.14192,-0.23665,-0.18470,-0.16515,-0.18117,-0.06037,-0.05087,-0.00810,0.04945,0.02927,-0.12117,-0.14685,-0.03295,-0.00291,-0.00505,0.09828,0.12077,0.06452,0.06003,-0.15027,-0.31977,-0.33466,-0.24085,-0.04152,0.01571,0.05345,0.12215,-0.01033,-0.11640,-0.10705,0.13639,-0.05432,0.21307,-0.17181,-0.26638,-0.03730,-0.07336,-0.05448,-0.29627,-0.29512,-0.16580,-0.06895,0.09824,0.05579,0.05947,0.04709,-0.09121,-0.00682,0.28049,0.08616,0.11340,-0.16907,-0.24067,-0.21613,-0.10597,-0.18823,-0.34024,-0.23726,-0.00078,-0.04157,0.03230,0.05188,0.05599,0.01780,-0.06557,0.04605,0.18497,0.27511,0.24819,0.12669,-0.10128,-0.06662,-0.20203,-0.31883,-0.18301,0.04165,0.04843,0.01613,0.05392,0.06227,0.06422,-0.01098,0.00627,0.04590,0.28064,0.20986,0.11312,-0.01335,-0.23240,-0.21382,-0.03536,-0.20670,0.04378,0.04991,0.04648,0.04185,0.06879,0.06359,0.06387,-0.00285,-0.07788,0.07431,0.19262,0.10739,0.03827,0.24271,0.05437,-0.12110,-0.13697,-0.21499,0.07780,0.16244,0.05380,0.04129,0.07059,0.06317,0.06054,0.02122,-0.04450,0.07350,0.00731,0.07710,0.11696,0.41518,0.18460,-0.15071,-0.20172,0.08479,0.21368,0.19010,0.10281,0.03577,0.08995,0.06226,0.06014,-0.07915,-0.04061,-0.08393,-0.01142,-0.08320,0.11018,0.30324,0.21672,0.00537,-0.08979,0.05816,0.04101,0.21322,0.12339,0.12353,0.09555,0.06352,0.06188,-0.10409,-0.20497,-0.24766,-0.22559,-0.17172,-0.03283,0.08054,-0.08952,-0.02973,0.09690,-0.01367,0.00880,0.02137,0.05182,0.10900,0.05727,0.08240,0.07672,-0.10940,-0.15608,-0.19777,-0.26653,-0.09749,-0.06536,-0.01525,-0.01200,0.00225,0.09213,-0.03333,0.02043,0.06483,0.00051,0.07053,0.13601,0.08266,0.08912,-0.15120,-0.20001,-0.23137,-0.14737,0.02556,-0.15951,-0.11325,-0.17497,-0.09458,0.05898,0.18634,0.17102,0.13260,0.03780,0.07974,0.14733,0.07344,0.04074,-0.16594,-0.24309,-0.17790,-0.08030,-0.12580,-0.07877,-0.30156,-0.55364,-0.28573,0.02666,0.08990,0.00265,-0.08892,-0.09413,0.04325,0.11685,0.04358,0.04430,-0.08920,-0.10731,-0.01886,0.01297,-0.09324,-0.07526,-0.19921,-0.63579,-0.16331,0.00713,0.18795,0.02244,-0.01272,-0.00352,0.04665,-0.00923,0.02123,0.04886,0.01679,0.15704,0.32329,0.31583,0.38526,0.22258,0.03886,-0.21364,-0.16815,-0.02622,0.35123,0.19343,0.13229,0.03166,0.07625,0.05212,0.06306,0.09565,0.07644,0.15024,0.25465,0.36447,0.34735,0.38666,0.32698,-0.10122,0.06043,0.21574,0.08501,0.23477,0.16270,0.10478,0.03698,0.04789,-0.00296,0.14168,0.08105,0.16147,0.13979,0.25437,0.27959,0.35258,0.30293,0.03864,0.29600,0.27496,-0.14963,-0.12449,0.03291,0.08509,-0.01794,0.12666,-0.00411,0.01522,0.12147,0.18049,0.26029,0.27705,0.19305,0.18029,0.44706,0.32653,0.25476,-0.16790,-0.08811,-0.12790,-0.10448,0.10381,-0.01363,0.00003,0.20501,};
float weights_input_6[] = {0.00858,-0.00761,-0.00722,0.03642,0.24945,0.33211,0.37707,0.37031,0.15479,-0.05660,-0.06440,0.18393,0.23269,0.43877,0.71720,0.47798,0.12380,0.05204,0.01023,-0.05180,0.01658,0.11249,0.18326,-0.00422,0.04192,0.34667,0.10414,0.15052,0.18027,0.28272,0.37256,0.20064,0.39883,0.54365,0.14943,0.03681,-0.04324,-0.08525,-0.01747,-0.07567,-0.03888,-0.23942,-0.06835,0.07318,0.58905,0.32661,0.23916,0.24546,0.10241,-0.16706,-0.00141,0.09813,0.14747,0.03207,-0.05210,-0.01849,-0.05309,-0.12957,-0.09951,-0.04372,0.15678,0.16235,0.63943,-0.11705,-0.40373,-0.41018,0.08133,0.02787,-0.15435,-0.19377,-0.00253,-0.02698,-0.04444,-0.02072,-0.00871,-0.16750,-0.12715,-0.07116,-0.28775,0.28055,0.07854,-0.55981,-0.81726,-0.46832,-0.01136,-0.18529,-0.25283,-0.30414,-0.02048,-0.05648,-0.06041,-0.02006,-0.02125,-0.19016,-0.11982,0.00304,-0.07342,0.11658,0.08116,-0.58212,-0.44802,-0.26064,-0.26831,-0.68163,-0.48069,-0.41955,0.04133,-0.06000,-0.05406,-0.03338,-0.00944,-0.13437,0.02881,0.10143,0.37053,-0.01736,-0.12929,-0.40830,0.23083,-0.22026,-0.29995,-0.73833,-0.50860,-0.37108,0.10778,-0.06193,-0.05382,-0.03006,-0.01310,-0.03817,0.28359,0.43640,0.09917,-0.05199,-0.20673,-0.34821,0.20580,-0.09151,-0.13739,-0.19254,-0.08801,-0.04955,0.10925,-0.00754,-0.05229,-0.01324,0.06597,0.20168,0.47490,0.59491,-0.09312,-0.41401,-0.46526,-0.57164,-0.08907,0.23898,-0.02355,0.19759,0.52904,0.20399,0.11851,0.00618,-0.05926,-0.02041,0.10451,0.40396,0.24986,-0.10560,-0.28441,-0.69722,-0.38209,-0.35833,-0.15705,-0.54824,-0.07075,-0.04785,0.45591,0.14026,0.17553,0.02376,-0.05105,-0.01563,0.20321,0.27416,0.14434,-0.22061,-0.57367,-0.76440,-0.18923,-0.47480,-0.73203,-0.52741,-0.29970,-0.29347,0.03504,-0.00043,0.22802,0.04702,-0.05751,0.00498,0.15056,0.22082,-0.08261,0.02366,-0.17572,-0.35819,-0.13273,-0.53895,-0.43629,-0.23907,-0.13546,-0.13618,0.01443,-0.03758,0.15655,0.03306,0.00457,0.08246,0.13052,0.27461,0.19533,0.51268,0.40109,0.29215,0.16990,-0.14120,0.03868,0.06954,0.07721,0.24084,0.25121,-0.03618,0.12517,-0.00729,-0.00201,0.05595,0.11903,0.14365,0.01898,0.54368,0.60359,0.49670,0.43269,0.10475,0.22725,0.10090,0.01620,-0.12623,0.07370,0.10559,0.06590,-0.01609,-0.07025,0.03822,0.01368,-0.22350,-0.30036,0.15714,0.24330,0.34398,0.36879,0.10024,0.29782,0.37234,-0.10300,0.02799,-0.29499,0.03098,0.06014,-0.02403,-0.05974,0.01168,-0.02728,-0.47417,-0.12177,0.13060,0.28316,0.21501,0.30876,-0.08621,0.21126,-0.10397,-0.09693,-0.29196,-0.06120,0.00792,0.06809,-0.05216,0.00009,-0.06202,-0.13825,-0.25446,-0.14694,-0.32174,0.32822,0.03290,0.11906,0.28026,-0.02705,0.08116,-0.32165,-0.25505,-0.08691,-0.02924,-0.00145,-0.07087,-0.00491,0.01862,-0.22459,-0.29234,-0.24191,-0.22617,-0.06742,0.09183,0.40762,0.15859,-0.13107,0.13929,-0.43246,-0.24086,-0.24807,-0.15382,-0.00264,0.00125,-0.10031,};
float weights_input_7[] = {-0.00001,-0.00228,-0.00972,0.06236,-0.11559,-0.10563,-0.25864,-0.16906,-0.02559,0.24106,0.24473,0.11068,-0.00890,-0.14410,-0.11024,-0.12069,-0.11631,-0.01614,-0.00111,0.06217,-0.02852,-0.04643,-0.04604,-0.19231,0.01560,-0.01890,0.18063,0.37747,0.19149,-0.08203,-0.15209,-0.19259,-0.12190,-0.14705,-0.00018,-0.01644,0.04619,0.04003,0.03080,0.17435,-0.13003,-0.09739,0.27013,0.04045,0.27476,0.31420,0.34764,0.07967,0.02165,-0.18344,-0.13215,-0.13107,-0.05803,0.10478,0.04849,-0.01737,0.07387,0.13657,-0.00932,0.11408,0.12786,0.15476,0.17283,0.28088,0.15636,0.35022,0.13375,0.07168,-0.15764,0.01285,-0.01207,0.11806,0.04784,-0.01832,0.04014,0.18314,0.01711,0.44212,0.29929,0.08441,0.12620,0.01275,0.30179,0.28353,0.11451,0.03107,0.02022,0.05970,0.10532,0.12526,0.03539,-0.00970,0.04632,0.25107,0.22113,0.40595,0.31430,-0.10724,-0.23316,-0.04455,0.18956,0.27740,0.06701,0.17889,0.24462,0.18077,0.20265,0.13510,0.03691,-0.01339,0.07562,0.23060,0.18903,0.48701,-0.03503,-0.17389,-0.36713,-0.11884,-0.18918,-0.00773,-0.07037,0.34839,0.32478,0.22451,0.16697,0.13679,0.03799,-0.04342,0.04267,0.38877,0.19815,0.09457,-0.05377,-0.41937,-0.37875,-0.23391,-0.57183,-0.20440,-0.22693,0.23731,0.41011,0.33167,0.17177,0.16839,0.05649,-0.01610,0.01321,0.29357,0.29192,0.25826,-0.09198,-0.22567,-0.51262,-0.55156,-0.54108,-0.14267,-0.03259,0.34282,0.48840,0.20782,0.16189,0.11181,0.05646,-0.01456,-0.00705,0.21487,0.13081,0.14604,-0.26143,-0.36324,-0.40483,-0.23874,-0.23521,-0.23240,-0.03496,0.16735,0.26086,0.02195,0.06566,0.10634,0.04327,-0.03229,-0.07190,0.04871,-0.10463,0.01238,-0.10041,0.08581,0.25464,0.24595,-0.09462,-0.24655,-0.28539,-0.06441,-0.27055,-0.16200,-0.06932,0.08947,0.02948,-0.09235,-0.11894,-0.08480,0.00522,-0.10839,0.08856,0.16681,0.13551,0.13458,-0.05865,-0.14678,-0.22666,-0.25691,-0.45270,-0.23419,-0.09609,0.09734,0.01955,-0.08563,-0.17263,-0.15110,-0.36232,-0.26833,-0.02603,-0.07094,0.09364,-0.07867,0.06045,-0.11857,-0.29294,-0.33022,-0.44764,-0.27087,-0.07695,0.06331,0.01374,-0.04444,-0.14998,-0.21512,-0.37271,-0.15969,-0.00380,-0.07679,0.07176,0.14155,0.22191,-0.04609,-0.28668,-0.20801,-0.40560,-0.19170,-0.05008,0.01853,0.05275,-0.04571,-0.13230,-0.20447,-0.19829,-0.02681,0.21204,-0.02087,0.08195,0.25756,0.27733,-0.03116,-0.17937,-0.03721,-0.17007,-0.03367,-0.10587,0.13476,0.05511,0.02037,-0.09213,-0.10398,0.08991,0.12134,0.02642,-0.21121,0.03865,0.24203,0.17425,-0.06952,0.18800,-0.11275,-0.23243,-0.08628,-0.09328,0.07227,-0.00135,0.03991,-0.02383,-0.15986,-0.03354,-0.06702,0.07081,-0.04667,-0.17782,0.10255,0.07001,0.05986,0.12850,0.05653,0.09295,-0.12882,0.00839,0.06710,0.00071,0.01040,0.10034,0.05663,0.03107,0.08635,-0.13241,-0.04242,-0.24237,-0.18166,0.06196,0.05375,0.24577,0.40987,0.32519,0.07995,0.00760,-0.00053,-0.17954,};
float weights_input_8[] = {0.00440,-0.01078,-0.01612,-0.05458,-0.02987,0.11210,0.12819,0.17041,-0.13526,-0.14978,-0.02340,-0.02392,-0.10680,0.00841,0.11751,0.06450,0.02604,0.00641,0.00446,-0.04602,-0.03129,0.02984,0.08937,0.00067,0.07136,-0.02572,-0.03195,-0.01518,0.06022,-0.17925,-0.03669,0.02961,0.28706,0.06706,-0.01454,-0.00660,-0.03894,-0.02232,0.01830,0.04462,0.02368,0.02093,-0.14340,-0.12830,-0.04616,0.13365,0.02194,0.01270,-0.14589,0.08190,0.20675,0.06333,0.02001,-0.05516,0.00687,0.02645,-0.00660,-0.05181,0.03074,-0.21344,-0.18112,-0.14546,0.12710,0.07182,0.13359,0.05196,-0.11477,0.20764,0.15982,-0.05061,0.01561,-0.03303,-0.03942,0.02997,-0.03104,-0.06604,-0.01069,-0.07757,-0.00720,0.05624,0.05580,0.17248,0.02793,0.09374,0.14886,0.07163,0.08143,-0.01657,0.00435,-0.03625,-0.04384,-0.01942,-0.02555,0.00454,-0.06216,-0.03786,0.16381,0.01693,0.07555,0.15474,0.16022,0.12864,0.17764,0.14113,0.14436,-0.01761,-0.06153,-0.03982,-0.04319,-0.03294,-0.06865,-0.05830,-0.15859,-0.15390,-0.05163,-0.03230,-0.00843,0.06421,0.18094,0.15515,0.13128,0.11682,0.05092,-0.02654,-0.07589,-0.04194,-0.04527,-0.03538,-0.11050,-0.10586,-0.14937,-0.07532,-0.18847,-0.08887,-0.32036,-0.18398,-0.02959,0.17685,0.02908,-0.00855,0.02674,-0.09849,-0.07334,-0.04298,-0.04017,-0.03022,0.00362,-0.07881,-0.14123,-0.09335,-0.15639,-0.32000,-0.37300,-0.24564,0.00713,0.12204,0.00457,-0.03943,-0.09570,-0.16221,-0.08781,-0.05672,-0.03861,-0.03229,0.02118,-0.00139,0.08645,0.01262,-0.05692,-0.13310,-0.22848,-0.07741,0.12023,0.03291,-0.11990,-0.10418,-0.17345,-0.10863,-0.09225,-0.04069,-0.05413,-0.04411,0.02680,0.04888,0.11428,0.11083,0.04165,0.07511,0.17480,0.29722,0.20877,-0.00930,-0.19866,-0.27629,-0.29590,-0.10913,-0.08667,-0.04777,-0.05755,-0.05242,-0.00160,0.07241,0.23634,0.17904,0.14855,0.19932,0.24748,0.41263,0.22553,-0.18273,-0.40699,-0.50913,-0.28123,-0.19125,-0.08765,-0.04844,-0.05896,-0.03461,0.00981,-0.01272,0.10777,0.07695,0.38570,0.41372,0.73249,0.67655,0.15026,-0.38877,-0.41863,-0.39137,-0.08600,-0.08397,-0.06612,-0.04059,-0.05282,-0.04296,-0.04480,-0.14589,0.00946,0.17686,0.27474,0.39044,0.38312,0.47617,-0.00248,-0.25420,-0.35168,-0.16237,-0.01922,-0.03542,0.05362,0.05063,-0.03197,-0.05183,-0.10963,-0.24948,-0.02121,0.07680,0.21043,0.00950,0.03096,0.08190,-0.00891,-0.11737,-0.24897,-0.15946,0.13972,0.15915,0.03650,0.09770,-0.03932,-0.07116,-0.06752,-0.15760,0.15948,0.11410,0.00711,-0.11610,-0.00544,0.17602,-0.03654,-0.20459,0.02496,-0.04645,0.13937,0.15302,-0.02596,-0.03357,-0.00129,-0.07005,0.03968,-0.04980,-0.03503,-0.09791,-0.11270,-0.22614,-0.18408,-0.03383,0.03918,0.06240,0.17442,0.09618,0.20571,0.01305,0.00228,-0.04679,-0.00120,0.01563,0.03864,0.00675,-0.05712,-0.18332,-0.16123,-0.23465,-0.27803,-0.06411,0.08336,0.32966,0.30263,0.17381,0.20526,0.00784,0.00111,0.00112,-0.03608,};
float weights_input_9[] = {0.00011,0.00218,0.01282,0.05284,0.18785,0.64413,0.59197,0.81615,0.10827,-0.29145,-0.44092,-0.32982,0.01015,0.28165,0.29797,0.17645,-0.07999,0.00851,-0.00169,0.07114,-0.03647,0.04501,0.16831,0.54211,0.58102,0.56178,0.13730,0.10079,-0.26868,-0.00867,0.13062,0.21257,0.20205,0.03442,-0.00530,-0.04860,0.06932,0.01763,0.04276,0.16352,0.40832,0.30834,0.49649,0.37830,-0.12505,-0.02452,0.15909,0.16906,0.07589,0.26067,-0.08195,-0.06440,-0.05722,-0.01933,0.07105,-0.03685,0.12459,0.22002,0.21424,0.22351,0.20358,0.15406,-0.30153,0.05508,-0.12028,0.07490,0.25587,-0.08514,-0.04792,-0.17367,-0.15407,-0.00947,0.08323,-0.03684,0.04705,0.23698,-0.22698,-0.01133,0.16028,-0.07921,-0.44034,-0.11389,-0.34940,0.02020,-0.26513,-0.25012,-0.42253,-0.14318,-0.17708,0.01219,0.08536,-0.04673,0.03713,-0.04132,-0.12163,-0.01986,0.07306,0.00699,-0.24709,-0.29775,-0.09020,-0.07621,-0.31245,-0.33600,-0.22405,-0.02504,-0.11309,0.00926,0.07877,-0.04512,-0.02680,-0.09136,-0.11454,-0.03298,-0.03536,0.06521,-0.26770,-0.21996,-0.03022,-0.00959,-0.20930,-0.12375,-0.04487,0.02163,-0.09686,0.01692,0.07765,-0.04473,-0.02209,-0.02823,-0.26445,-0.37278,-0.30142,-0.04931,-0.29045,-0.13591,-0.07716,0.15358,0.23868,0.47236,0.04339,0.14875,0.00015,0.01060,0.07302,-0.11367,-0.14234,-0.12391,0.04669,0.15503,0.55529,0.51726,-0.28590,-0.23714,-0.29951,0.24996,0.50152,0.54231,0.17614,0.19864,-0.01603,0.00042,0.06340,-0.10779,-0.17283,-0.21343,-0.02683,-0.06519,0.23378,0.32270,-0.16874,-0.07868,-0.25080,0.39342,0.56751,0.10092,0.31237,0.04506,-0.02413,0.00764,0.07192,-0.11468,-0.21341,-0.67311,-0.77724,-0.69855,-0.63109,-0.12757,-0.08987,-0.02852,0.26026,0.31281,0.23230,0.14592,0.20972,0.21256,-0.02357,0.01303,0.07486,-0.10175,-0.21126,-0.70954,-1.17572,-1.26637,-0.56403,0.26438,0.42623,0.27070,0.15703,0.33864,0.19023,0.20402,-0.01820,0.43106,-0.04963,0.01355,0.11820,-0.07648,-0.27294,-0.26775,-0.45541,-0.53375,-0.36841,-0.03094,0.11847,0.10938,-0.00771,0.35301,0.19732,-0.15284,-0.20244,0.28535,-0.21319,0.04098,0.12497,-0.06874,-0.09265,-0.01579,0.04079,-0.23863,-0.01418,-0.31413,-0.02394,0.10367,0.05246,0.29956,0.01589,0.17351,0.11160,0.25268,-0.11312,-0.01750,0.07570,-0.05675,-0.05335,0.00278,0.09914,-0.02264,-0.01474,0.06484,0.03633,0.10559,0.21729,0.04323,-0.09931,-0.05639,0.30270,-0.16196,-0.12229,0.02371,0.06852,0.06171,0.02925,0.23634,0.03700,0.06480,-0.16626,-0.24233,-0.42258,-0.02226,-0.02374,0.26796,-0.09484,0.05680,-0.18785,-0.40467,-0.08960,0.06320,-0.00397,0.00007,0.22334,0.32455,0.45798,0.21180,-0.11103,0.07445,-0.12680,-0.00626,-0.20072,-0.24419,-0.13270,-0.55124,-0.62341,-0.27687,-0.01437,0.00999,-0.00053,-0.01491,0.21043,0.25659,0.28639,0.42987,0.23214,-0.06609,-0.49848,-0.33612,-0.66050,-0.59573,-0.62963,-0.70163,-0.45123,-0.06668,-0.01489,0.00045,0.13254,};
float weights_input_10[] = {0.00589,0.00487,-0.00221,0.00986,0.11589,0.09548,0.11909,0.00383,-0.22551,-0.06724,0.00409,0.12941,0.22425,0.12828,0.12683,0.12862,0.08357,0.04423,0.00489,-0.01963,-0.01048,0.11715,0.06635,-0.01649,-0.08008,-0.05415,-0.09356,-0.03534,0.00090,0.01892,0.05544,0.24585,0.28691,0.11638,0.02298,0.02127,-0.02414,-0.05086,0.00642,0.02139,0.05318,-0.20007,0.10422,-0.07188,0.13141,0.21942,-0.10161,-0.04965,-0.13456,0.15971,0.24321,0.11468,0.02579,-0.05583,-0.03089,-0.01614,-0.01625,0.02936,0.05241,-0.13529,-0.00306,0.12872,0.21918,0.30103,0.17247,0.04713,-0.01693,0.13503,0.22277,0.05131,0.03701,0.00256,-0.02356,-0.01481,0.00600,0.00926,0.09352,-0.04417,-0.21369,-0.08754,-0.04975,0.21094,0.12942,0.15313,0.18143,0.14103,0.08195,-0.00217,0.00628,-0.01517,-0.03103,-0.01723,0.03413,-0.01076,-0.01358,-0.13345,-0.26713,-0.13029,0.00949,0.34292,0.23692,0.16588,0.19554,0.06339,0.03477,-0.01403,-0.01262,-0.02637,-0.03284,-0.01822,0.03219,0.13289,0.02277,-0.09689,-0.14519,-0.07879,-0.04050,0.19819,0.18184,0.30528,0.20529,-0.08439,-0.08662,-0.02730,-0.01413,-0.02688,-0.03168,-0.01606,0.00206,0.09641,0.01498,0.04190,-0.06047,-0.08892,-0.17949,0.05158,0.21671,0.27817,-0.06492,-0.19458,-0.14208,-0.06905,-0.01051,-0.03188,-0.03041,-0.01830,0.07422,0.03322,0.11955,0.04659,0.01613,-0.13987,-0.18166,-0.14183,0.05056,0.05840,-0.07527,-0.12877,-0.19299,-0.11540,-0.07617,-0.03876,-0.03081,-0.01857,0.08984,0.13089,0.18379,0.25126,0.06943,-0.11887,-0.07595,0.05858,0.13281,0.04962,-0.16912,-0.05724,-0.02642,-0.06908,-0.07470,-0.02214,-0.06383,-0.05013,0.05571,0.11178,0.11103,0.13858,0.09873,-0.01188,0.03694,0.05221,0.00418,0.03363,-0.11556,-0.02831,-0.06524,-0.02871,-0.07171,-0.08665,-0.06348,-0.05773,0.10158,0.13149,0.17016,0.10483,-0.13517,0.09519,-0.01259,0.12674,0.14522,0.10207,-0.29396,-0.14883,-0.09620,-0.04377,-0.07272,-0.09321,-0.09375,-0.05025,0.12284,0.16666,0.05524,-0.07980,-0.09172,0.03970,0.24246,0.42202,0.33932,0.13822,-0.23064,-0.14011,-0.03038,0.07075,-0.02016,-0.06068,-0.06589,-0.04494,0.03702,0.07302,-0.05861,-0.11650,-0.11555,0.07399,0.25316,0.47297,0.20311,0.08207,-0.06949,-0.12198,-0.03991,-0.02838,-0.06022,0.03357,0.00732,-0.05646,-0.06082,-0.14726,-0.21938,-0.36541,-0.54525,-0.15209,0.03532,0.23319,0.11326,0.06561,-0.25476,-0.25118,-0.21037,-0.05461,-0.10078,-0.04418,-0.03050,-0.06211,-0.11665,-0.18720,-0.19783,-0.46059,-0.46556,-0.35209,-0.25466,0.04639,-0.13157,-0.08424,-0.20014,-0.27574,-0.17213,-0.04888,-0.01209,-0.01529,0.00743,-0.06567,-0.11653,-0.13942,-0.21973,-0.29502,-0.34676,-0.23175,-0.29701,-0.26984,-0.24144,-0.27151,0.12571,0.13332,0.08940,-0.01460,0.03188,-0.05295,0.00847,-0.01966,-0.09815,-0.15092,-0.26618,-0.23683,-0.18728,-0.12887,-0.44098,-0.25344,-0.07763,0.08304,0.15265,0.16562,0.23817,0.02415,0.02804,-0.00205,-0.13926,};
float weights_input_11[] = {-0.00186,0.06401,0.06779,0.00542,0.22096,0.27944,0.27838,0.15596,0.00221,0.19680,0.20391,-0.02079,-0.07175,-0.15384,-0.15864,-0.36715,-0.00353,0.00085,0.00055,0.03307,0.13960,0.11199,0.42857,0.24740,0.29818,-0.16418,0.17031,0.28351,0.18305,-0.16088,-0.08500,0.24622,0.18275,-0.26878,-0.04240,-0.01349,-0.02606,0.01041,0.06085,0.11794,0.23369,0.44278,0.07423,0.12948,-0.07538,0.06400,0.10860,-0.05108,0.12178,0.20567,0.00350,-0.05195,-0.02001,-0.06440,-0.02477,0.00215,-0.01486,-0.05808,0.16513,-0.00785,-0.15167,0.21223,0.17759,0.00919,0.23056,0.28415,0.24628,0.07727,0.10671,-0.01372,-0.01327,-0.03600,-0.02792,0.00240,-0.07940,-0.13283,-0.19129,-0.12715,0.09910,-0.07506,0.25085,0.24781,0.17975,0.46214,0.19780,0.06303,0.08892,-0.00153,-0.01843,-0.03993,-0.02667,-0.01277,-0.14286,-0.19627,-0.36735,-0.18155,-0.18353,-0.22858,-0.12025,0.49491,0.38671,0.47611,0.43840,0.39328,0.14658,-0.02519,-0.10291,-0.03817,-0.03530,0.03195,-0.16259,-0.25254,-0.46787,-0.49450,-0.58161,-0.49575,-0.06158,0.20983,-0.00567,0.19389,0.32478,0.29937,0.08951,-0.07230,-0.11049,-0.04874,-0.03545,0.02226,-0.03492,-0.33273,-0.46364,-0.48166,-0.36952,-0.67969,-0.29411,0.05194,-0.27739,0.04023,-0.01335,0.23553,-0.05860,-0.09616,-0.11069,-0.04784,-0.03947,0.01481,-0.00685,-0.17089,-0.53868,-0.51427,-0.30419,-0.10384,0.10951,0.26441,0.18788,-0.04992,0.28393,0.10274,-0.40842,-0.24765,-0.11542,-0.04989,-0.03918,0.01321,-0.02762,-0.30592,-0.30675,-0.34425,-0.72744,-0.10857,0.16350,0.61163,0.05643,-0.03472,-0.27317,-0.20961,-0.47204,-0.31250,-0.12322,-0.04851,-0.12789,-0.07469,-0.19835,-0.31509,-0.22333,-0.43945,-0.57448,-0.39961,-0.10002,0.01018,-0.23404,-0.03472,-0.02404,-0.31360,-0.41230,-0.20107,-0.15568,-0.05178,-0.10947,-0.09327,-0.23023,-0.43044,-0.10829,-0.43270,-0.26379,-0.16539,0.06680,0.01042,-0.08335,-0.19315,-0.13622,-0.26626,-0.36490,-0.05288,-0.07858,-0.05321,-0.12343,-0.12552,-0.22939,-0.18773,-0.23910,-0.25261,0.01540,-0.00428,0.38912,0.14057,-0.26508,-0.40186,-0.23804,-0.43292,-0.43754,0.01113,-0.04451,-0.01101,-0.11954,-0.07838,-0.03336,-0.06705,-0.07525,0.04255,0.17367,0.18756,0.07251,-0.02570,-0.34069,-0.44150,-0.26613,-0.37210,-0.22600,0.08009,0.05246,-0.00554,-0.02685,-0.05582,0.14082,0.24190,0.38222,0.33417,0.45793,0.27090,-0.05582,-0.23856,-0.05120,-0.12642,0.07381,-0.10491,0.21191,0.16792,0.03867,-0.02912,-0.02508,0.01083,0.18304,0.29498,0.32265,0.36374,0.26536,0.25567,0.00221,0.32335,-0.16414,0.15816,0.10639,0.11185,0.05810,0.15459,0.07046,-0.03171,-0.00009,0.03442,0.29006,0.46401,0.38132,0.13471,0.00406,0.03865,-0.15770,0.01021,0.27628,0.05668,0.14708,0.09592,0.22919,0.23440,0.00884,-0.04306,0.00300,0.00516,0.17353,0.13390,-0.02969,0.13694,0.13220,0.05607,-0.26437,0.02847,-0.13432,-0.07552,0.12746,0.21842,0.27072,0.21489,0.00839,0.00022,0.39356,};
float weights_input_12[] = {0.00190,0.00751,-0.00134,0.12619,0.14137,0.40936,0.23502,0.30639,0.30639,0.34799,0.26152,0.07070,0.17572,0.28463,0.29910,0.05807,-0.13053,0.00538,0.00183,0.08015,-0.00559,-0.00379,0.20364,0.12577,0.28931,0.16032,0.24294,0.32688,0.10708,-0.00839,0.03793,0.14466,0.14994,-0.00324,-0.01713,-0.00146,0.04324,0.03395,0.03225,0.29593,0.01153,0.15985,0.38040,0.16375,0.31991,0.32880,0.53512,0.14503,0.17877,-0.00295,-0.04905,-0.15642,-0.08994,0.10640,0.04438,-0.03375,0.08624,0.25592,0.08757,-0.00477,0.12686,0.07805,0.22149,0.14773,-0.05994,0.12944,0.16663,0.12759,-0.14829,-0.03432,-0.08571,0.11443,0.04547,-0.03263,0.02982,0.27671,-0.13715,0.15634,0.12897,0.03868,-0.08575,-0.22730,-0.01172,0.01225,0.08202,-0.06499,-0.15786,-0.01552,0.08607,0.11330,0.02356,-0.02935,0.01061,0.28982,0.11625,0.10346,0.28821,-0.01070,-0.16256,-0.26622,0.05402,0.16555,0.07552,0.03100,0.10821,0.13539,0.27813,0.13240,0.02831,-0.03181,0.04129,0.16127,0.05687,0.37041,0.15148,0.10449,-0.22401,-0.24349,-0.13772,-0.01328,0.02545,0.20989,0.18413,0.14228,0.24002,0.13478,0.02702,-0.05840,0.04305,0.36720,0.07017,0.16765,-0.01213,-0.32998,-0.52705,-0.29306,-0.27753,-0.24159,-0.19601,0.18014,0.30820,0.36145,0.27368,0.21566,0.05405,-0.02482,-0.02369,0.25040,0.22170,0.40380,-0.14372,-0.44309,-0.81126,-0.63444,-0.50864,-0.28954,0.09881,0.51402,0.51764,0.25177,0.23789,0.15193,0.05343,-0.02542,-0.05093,0.20021,0.01381,0.13347,-0.22553,-0.47035,-0.62383,-0.46982,-0.38781,-0.32168,0.20813,0.31039,0.37446,0.03240,0.11064,0.16317,0.06216,-0.02217,-0.08495,-0.00841,-0.31267,-0.07878,-0.30699,-0.01333,0.24950,0.21963,-0.28515,-0.47629,-0.21776,-0.04366,-0.17030,-0.12230,-0.01306,0.13836,0.03851,-0.08195,-0.11885,-0.07659,-0.19595,-0.31621,0.06244,0.36553,0.26319,0.11232,-0.20200,-0.35318,-0.16151,-0.25754,-0.44155,-0.18655,-0.08144,0.14050,0.03281,-0.08775,-0.16706,-0.04694,-0.29128,-0.24494,0.12584,0.19110,0.16442,-0.00471,-0.01846,-0.20021,-0.11339,-0.19970,-0.35707,-0.26090,-0.10736,0.09928,0.03095,-0.03493,-0.15055,-0.07928,-0.26451,-0.05851,0.25909,0.08671,0.24660,0.16781,0.20039,-0.00515,-0.09664,-0.08245,-0.27948,-0.09072,-0.01943,-0.02396,0.04119,-0.04851,-0.15130,-0.17520,-0.22671,0.12289,0.37769,0.19455,0.22480,0.29975,0.26985,-0.06142,-0.03134,-0.08873,-0.07009,-0.04310,-0.13627,0.14234,0.04253,0.00632,-0.09304,-0.06667,0.20809,0.34799,0.10825,-0.17296,0.00841,0.14738,0.13671,-0.24805,0.07909,-0.25050,-0.34921,-0.24081,-0.15676,0.07012,-0.00279,0.02034,-0.05583,-0.19758,0.16778,0.11441,0.14274,-0.01376,-0.18575,0.04446,-0.22128,-0.26626,-0.13049,-0.31621,-0.17372,-0.29213,-0.01144,0.06371,-0.00443,0.00399,0.07989,-0.05171,0.01208,0.09640,-0.16302,-0.15547,-0.17143,-0.21224,-0.35817,-0.47596,-0.16263,0.01042,0.05690,0.00747,-0.00895,-0.00078,-0.22440,};
float weights_input_13[] = {-0.00083,-0.00643,-0.01255,-0.17749,-0.34373,-0.34519,-0.29174,-0.13710,-0.17288,-0.37660,-0.29822,0.07838,0.14760,0.33331,0.05740,0.31373,0.05030,-0.00267,-0.00163,-0.07823,-0.07780,-0.13817,-0.33651,-0.49797,-0.45650,-0.08443,-0.22159,-0.32172,-0.35640,-0.24296,0.21134,0.11109,-0.08023,0.32932,-0.06389,-0.01870,-0.07027,-0.10131,-0.08645,-0.08920,-0.22325,-0.24950,-0.37567,-0.11781,0.12749,0.01717,-0.16362,-0.07533,-0.04049,-0.07072,0.10210,-0.04711,0.00728,-0.14407,-0.07005,-0.01183,-0.10173,-0.05744,-0.30378,0.05444,0.06220,0.05292,0.05124,0.02564,-0.04379,-0.57868,-0.27315,-0.15755,-0.17629,-0.24084,-0.02635,-0.18184,-0.06921,-0.01210,-0.09534,0.06642,0.17294,0.11630,0.05387,0.14758,0.12552,0.04615,-0.33991,-0.62763,-0.16955,-0.19025,-0.47455,-0.29036,-0.15175,-0.18382,-0.03218,-0.01208,0.03129,0.21043,0.26185,0.16581,0.16671,0.01291,0.15853,0.17803,-0.51436,-0.75831,-0.38482,-0.64755,-0.69668,-0.50679,-0.31055,-0.22045,-0.03065,-0.02518,0.03276,0.17589,0.24792,0.34164,0.06643,0.14841,0.17718,0.49550,0.17607,-0.54101,-0.54310,-0.73931,-0.80472,-0.43696,-0.20683,-0.22222,-0.03017,0.00920,0.00968,0.04188,0.23643,0.36710,-0.13463,0.20686,0.55182,0.44894,0.40756,0.05373,0.26338,-0.22520,-0.43281,-0.42663,-0.25641,-0.23189,-0.03031,0.00232,0.01846,0.09136,0.24037,0.08716,-0.05507,-0.01045,0.18071,0.39121,0.22951,0.50200,0.12569,0.14030,0.04181,-0.05097,-0.23679,-0.11619,-0.03697,-0.00434,0.00660,0.03485,0.24285,-0.05636,0.21294,0.06553,-0.01836,-0.12075,-0.16190,-0.28678,0.35990,0.16238,-0.05659,0.20316,-0.04043,-0.11136,-0.02027,0.00767,-0.01233,-0.04023,-0.07198,-0.09010,-0.06955,0.09979,0.14590,0.04257,0.02039,-0.25500,0.21202,0.02007,-0.04712,0.14501,0.15708,-0.09570,-0.02039,0.01195,-0.07552,-0.12945,-0.29304,0.02329,0.04265,-0.17681,0.31905,0.27910,0.06917,-0.25611,0.25049,-0.05973,0.07483,-0.03736,0.11426,-0.09594,0.02694,0.01211,-0.08584,-0.21108,-0.18275,0.09537,0.03890,-0.04004,0.10062,0.25563,0.01672,-0.01825,0.22945,0.07592,0.11400,0.06025,0.07472,0.00235,0.02782,0.03149,-0.04087,-0.07600,-0.10864,-0.09793,0.06487,0.11895,-0.02276,0.25273,-0.06250,-0.13232,-0.16970,0.10486,0.02318,0.20772,0.20317,0.08568,-0.07941,0.02806,-0.05105,-0.02309,-0.33869,-0.31054,-0.12346,0.11072,0.09317,0.14745,-0.00606,0.01564,-0.03025,0.13456,-0.12629,0.04748,0.23640,-0.02772,-0.06964,-0.03027,-0.09972,-0.15555,-0.06419,-0.09310,-0.02045,0.17889,0.26814,0.06773,0.16386,-0.24744,0.15275,0.25663,0.17741,0.19547,0.19252,-0.07118,0.00114,-0.10858,-0.08366,-0.17987,0.12906,-0.08836,0.06222,-0.07718,0.24549,0.23582,-0.13501,-0.15595,0.24538,0.33136,0.17251,0.15882,0.00447,-0.08434,0.00195,0.00709,-0.16433,0.13365,0.43923,-0.03863,-0.00279,-0.18574,0.11168,0.33941,0.18999,0.46612,0.15663,0.30392,-0.00195,-0.12099,0.00683,0.00077,0.04018,};
float weights_input_14[] = {-0.00016,-0.04999,-0.05064,0.06047,-0.13072,-0.28495,-0.32464,-0.14041,0.16722,-0.01063,0.04277,-0.21428,-0.12273,-0.08543,0.06446,0.34684,0.05992,-0.00286,0.00110,-0.02609,-0.08283,-0.07851,-0.30116,-0.21748,-0.29097,0.05824,-0.12985,-0.14097,0.00202,0.17076,-0.04318,-0.31772,-0.19183,0.19407,0.04708,0.05718,0.01610,0.03423,-0.05542,-0.25086,-0.08272,-0.29897,-0.24469,-0.08377,0.09032,-0.10416,-0.35529,-0.08517,-0.23206,-0.22754,0.09871,0.07945,0.02791,0.10171,0.01440,0.04363,0.04493,-0.06586,-0.04351,-0.02815,-0.04899,-0.14243,-0.03700,-0.18330,-0.50316,-0.49804,-0.37399,-0.06158,0.07889,0.07809,0.01855,0.03373,0.01599,0.04221,0.05044,-0.07223,0.18463,0.03174,-0.25872,0.18463,0.01282,-0.12280,-0.42723,-0.62196,-0.24274,-0.00677,0.07887,0.07876,0.02874,0.03315,0.02005,0.05751,0.11234,0.02861,0.22459,0.15571,0.05026,0.30894,0.19754,-0.33872,-0.33108,-0.29365,-0.34507,-0.21936,-0.00859,0.07557,0.08291,0.04085,0.02787,0.01205,0.13496,0.06759,0.39175,0.52535,0.52255,0.42186,0.19717,-0.03671,-0.04943,0.04453,-0.17403,-0.26680,-0.03138,0.08425,0.08852,0.04813,0.02767,0.01964,0.04457,0.09662,0.36520,0.55301,0.47712,0.51686,0.44184,0.06993,0.34519,0.01028,-0.01447,-0.34439,-0.00410,0.07101,0.08867,0.05221,0.03407,0.03554,-0.01045,-0.08948,0.28879,0.36673,0.26813,0.02070,0.10929,0.03453,0.03352,0.05787,-0.43237,-0.29086,0.27224,0.14939,0.09773,0.05376,0.03462,0.03494,0.00089,0.01176,0.20290,0.39149,0.83782,0.10738,0.00893,-0.32406,0.11778,0.31337,0.10174,0.10522,0.38787,0.19694,0.09117,0.05414,0.08703,0.08499,0.11074,0.11184,0.29205,0.56355,0.85959,0.44060,0.39357,0.23778,0.24192,0.28995,-0.05221,0.29266,0.41581,0.16688,0.15345,0.05773,0.06528,0.09335,0.13215,0.20819,0.21321,0.42504,0.38948,0.19054,0.07387,0.10458,0.15061,0.37291,-0.01914,0.21915,0.38481,0.02551,0.07481,0.06132,0.07233,0.10906,0.12976,-0.04702,0.08949,0.08920,0.06141,0.16363,-0.30454,-0.13288,0.22728,0.48699,0.02493,0.30818,0.38737,-0.01936,0.05173,0.01707,0.06863,0.07749,-0.05387,-0.21320,-0.13404,-0.03990,-0.12307,-0.10189,-0.03689,-0.28701,0.28493,0.50492,0.23313,0.27771,0.26353,-0.07078,-0.01805,0.00279,0.01105,0.05765,-0.18328,-0.36304,-0.22488,-0.29613,-0.37205,-0.10372,0.06446,-0.00574,-0.04466,0.15881,-0.00836,0.04292,-0.08749,-0.06358,-0.01568,0.01721,0.01503,0.01657,-0.20059,-0.42315,-0.30716,-0.21693,-0.27736,-0.09211,0.08337,-0.61169,-0.01834,-0.04507,-0.22541,-0.13461,0.10340,-0.11979,-0.08739,0.02624,-0.00049,0.01133,-0.27535,-0.40952,-0.40787,-0.10020,-0.10167,0.14140,0.09524,-0.35856,-0.32313,0.15066,-0.37448,-0.15369,-0.17881,-0.20624,-0.00477,0.08505,-0.00474,-0.01061,-0.15032,-0.13205,-0.10435,-0.20048,-0.30946,-0.19283,0.25762,-0.01788,0.17866,-0.06650,-0.24305,-0.34097,-0.27666,-0.16850,-0.00431,0.00122,-0.10806,};
float weights_input_15[] = {-0.00093,-0.00095,-0.00888,-0.14706,-0.33708,-0.30599,-0.30538,-0.08927,-0.21541,-0.10151,0.06703,0.07007,-0.12887,-0.22292,-0.23706,-0.20582,-0.09347,-0.01166,-0.00151,-0.04079,-0.05426,-0.05757,-0.11951,-0.24779,-0.13085,-0.24917,-0.09920,0.00262,0.04809,-0.16012,-0.13106,-0.11438,-0.15988,-0.26096,-0.10195,-0.03879,-0.04013,-0.05569,-0.01633,0.11111,-0.06962,-0.17943,-0.11601,-0.30848,-0.29082,-0.03502,0.06294,-0.02371,-0.17748,-0.15152,-0.24462,-0.21395,-0.05034,-0.07666,-0.02940,-0.01918,-0.03212,0.03805,-0.01317,-0.16509,-0.18218,-0.16167,-0.00307,0.07522,0.35444,0.10462,-0.07825,-0.03577,-0.15865,-0.09147,-0.02529,-0.03852,-0.03969,-0.01941,-0.03356,0.07232,-0.00471,0.03857,0.07678,-0.01948,0.04374,0.32196,0.34867,0.16836,0.21189,-0.02897,-0.06989,-0.04977,-0.02834,-0.03058,-0.03586,-0.02575,-0.01106,0.07750,-0.05898,0.08303,0.20090,-0.07452,0.01130,0.42139,0.27410,0.04439,0.23721,0.11833,0.07541,-0.02457,-0.04257,-0.03609,-0.03777,-0.02765,-0.02509,0.00528,-0.09544,-0.02330,-0.12903,-0.05368,-0.08546,0.28235,0.26187,0.03674,0.16739,0.15906,0.03314,0.00803,-0.04963,-0.03630,-0.03617,-0.02676,-0.04638,0.02158,-0.06054,0.01965,-0.15424,-0.13404,-0.30674,-0.00192,-0.11163,0.17723,0.06859,0.04983,-0.04942,-0.09238,-0.05185,-0.05555,-0.03581,-0.02629,0.03935,-0.01044,-0.02777,-0.05510,-0.27419,-0.35131,-0.25776,-0.19747,-0.20763,0.13589,0.19114,0.09041,-0.16787,-0.16954,-0.12455,-0.05747,-0.03549,-0.02839,0.05133,0.07828,0.06443,0.05134,-0.22555,-0.16161,-0.37768,-0.21549,-0.00830,-0.09701,0.01356,0.00088,-0.15291,-0.14331,-0.13327,-0.05781,-0.06626,-0.05614,0.01583,0.07994,0.08954,0.03625,-0.10729,-0.03441,-0.20999,0.10588,0.23520,-0.10478,-0.14414,-0.14308,-0.24907,-0.10147,-0.14365,-0.13320,-0.06403,-0.06128,0.01699,0.10194,0.13329,0.05108,0.02172,0.09735,0.06536,0.26323,0.29290,-0.15516,-0.12887,-0.31884,-0.27144,-0.13500,-0.14528,-0.13091,-0.06290,-0.04182,0.03634,0.09530,-0.02007,-0.03847,0.19164,0.27539,0.46245,0.44798,0.23067,-0.31510,-0.16027,-0.14070,-0.01503,-0.03202,-0.10812,-0.10196,-0.05262,-0.04146,0.00643,0.02368,-0.09105,0.06499,0.09550,0.16900,0.04496,0.36071,0.07936,-0.21478,-0.23063,-0.00722,0.06330,0.06119,0.03456,-0.02082,-0.02282,-0.05348,-0.04742,-0.02142,-0.13886,0.02677,0.01772,-0.16785,-0.21933,0.03959,0.06830,-0.10038,-0.23645,-0.07502,0.13978,0.16444,0.02657,0.07400,-0.03436,-0.05998,-0.03419,0.04025,0.16099,0.02403,-0.13293,-0.37056,-0.28824,0.15104,0.08130,-0.10061,0.13644,0.09606,0.08094,0.01509,-0.06673,-0.03174,0.00190,-0.06111,0.05978,0.06808,0.12115,0.01768,-0.06525,-0.36185,-0.32563,0.03327,0.16472,0.02236,0.45501,0.37217,0.25980,-0.02459,0.01051,-0.05999,0.00539,0.02638,0.03511,0.15208,0.27560,0.05099,0.09170,-0.02448,-0.39592,0.04823,0.39026,0.59530,0.57386,0.48646,0.36786,0.03783,0.01317,0.00041,-0.07011,};
float weights_hidden_0[] = {1.88300,-0.38741,-0.76364,-1.76243,-1.67741,0.75803,3.48069,1.97664,-0.81638,-2.37162,-0.69243,-0.97849,2.32094,-2.20518,0.90279,-0.53305,0.09242,};
float weights_hidden_1[] = {-1.03233,1.62968,2.32885,0.08997,1.94559,-1.36424,-1.44351,1.44028,0.44653,-1.47584,1.35111,1.46732,0.25272,1.28336,-2.30140,2.20111,1.07811,};
float weights_hidden_2[] = {-0.62997,-1.64167,-1.14271,-2.28665,-1.05607,0.53922,-1.22713,1.78134,2.32169,0.63380,-1.16906,2.99846,1.88783,-0.89614,-2.39923,1.62580,-0.23232,};
float weights_hidden_3[] = {-0.34918,-0.65729,0.11493,2.24224,0.00018,1.63658,-1.50772,-1.73937,-1.66824,2.19785,-1.00110,3.36987,-2.25289,-1.50066,-2.93693,-0.77370,-1.07107,};
float weights_hidden_4[] = {2.79099,-1.22496,0.87460,1.51546,0.99234,-2.73645,0.36366,-0.99335,1.71530,-0.96649,2.29739,-2.47538,-1.58859,0.47982,0.79787,1.70290,0.65565,};
float weights_hidden_5[] = {-2.42977,-0.31067,-0.49186,1.40729,1.82037,-0.22654,2.46669,-1.55547,-0.55319,3.04144,-0.82413,-1.67935,0.11606,2.95961,0.56947,-0.58281,0.96438,};
float weights_hidden_6[] = {3.18665,-0.30816,-0.09780,-2.67151,2.52852,0.89512,1.63874,-1.42119,-1.14786,-2.87546,-1.17300,-1.25226,-1.86638,3.43343,1.02487,-0.89240,0.51870,};
float weights_hidden_7[] = {-0.50533,3.07470,-1.31388,1.34536,-1.37870,-2.67964,1.47959,0.15902,1.05439,1.28939,1.33164,1.43208,1.51096,-1.62457,-1.47328,-1.44067,0.25522,};
float weights_hidden_8[] = {-1.21178,-0.06714,-0.92631,1.22033,-2.40624,2.60100,-2.65127,-1.50175,-0.06963,-3.07752,-0.25075,-0.74828,-2.16636,-0.10295,3.66877,-0.41444,-2.38750,};
float weights_hidden_9[] = {-1.72866,-0.02503,1.42455,-1.12213,-0.77837,0.54782,-2.57453,1.86415,-1.32579,3.57975,0.10120,-2.11952,1.91570,-1.81675,2.04877,-0.85799,0.20549,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_15[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


