#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<math.h>

using std::vector;
using std::string;

using std::cout;
using std::endl;
using std::cin;

typedef int Feature;

const int kNotVisited = -1;
const double kCCSegmenterThreshold = 0.88;

const int kFeatureImageXSize = 18;
const int kFeatureImageYSize = 18;

const double kNormalizerDigitAspectRatio = 1.0;

const int kMaxNumOfDigits = 3;

const int kNumInput = 325;
const int kNumHidden = 17;
const int kNumOutput = 10;
float weights_input_0[] = {0.00014,-0.00113,-0.00527,-0.12198,-0.23456,-0.29252,-0.22013,-0.17602,-0.33113,-0.23791,-0.01881,0.09217,0.13040,-0.06402,-0.19274,-0.11121,-0.04849,0.01993,0.00009,-0.05074,-0.04575,0.06611,-0.14999,-0.24027,-0.25008,-0.19490,-0.18976,-0.15512,-0.04202,-0.04462,-0.07515,0.03237,-0.05290,-0.12266,-0.07895,-0.01622,-0.04944,-0.08251,-0.00958,0.04827,-0.07704,-0.27828,-0.05077,-0.26560,-0.17706,0.00446,-0.07462,-0.02554,-0.10064,-0.04224,-0.09093,-0.08502,-0.02028,-0.06935,-0.04987,-0.03414,-0.03454,0.00837,-0.03916,-0.18613,-0.08527,-0.02213,0.09241,0.11030,0.31012,0.11197,-0.02935,-0.00175,-0.05014,-0.03549,-0.00443,-0.02679,-0.04902,-0.03603,-0.00143,0.04999,0.06347,-0.05882,-0.11685,-0.12085,0.01790,0.25098,0.28847,0.15855,0.15321,0.04478,-0.01002,-0.02373,-0.02262,-0.02623,-0.04780,-0.03582,0.02573,0.04407,-0.04811,-0.09483,-0.14941,-0.15112,0.02425,0.44702,0.22490,0.04521,0.16821,0.09996,0.01464,-0.01366,-0.01851,-0.04798,-0.04937,-0.03446,0.02792,0.13257,0.00740,-0.08629,-0.17874,-0.09266,0.00022,0.32080,0.25425,0.05942,0.12417,0.04869,-0.04335,0.00562,-0.01897,-0.04761,-0.04774,-0.03432,-0.00724,0.09137,0.04967,0.11805,-0.12089,-0.11391,-0.21590,0.00529,-0.02075,0.11102,0.00001,-0.04145,-0.09699,-0.04756,-0.02119,-0.06359,-0.04752,-0.03666,0.06952,0.07544,0.16054,0.13616,-0.05139,-0.14466,-0.08932,-0.10534,-0.05520,0.06840,0.03008,-0.02015,-0.18482,-0.11177,-0.07436,-0.06288,-0.04827,-0.03692,0.08164,0.17196,0.22145,0.23518,0.09209,-0.02159,-0.07227,-0.09064,0.08193,0.01500,-0.03467,0.01222,-0.08011,-0.06048,-0.07971,-0.06415,-0.07612,-0.06203,0.05748,0.09538,0.15469,0.07359,0.01932,-0.07209,-0.13783,0.01884,0.12301,-0.03808,-0.05705,0.00551,-0.11959,-0.02121,-0.10154,-0.11998,-0.06956,-0.05196,0.10510,0.19096,0.12449,0.04266,-0.16033,-0.01439,-0.09714,0.09257,0.22193,0.03487,-0.12029,-0.09378,-0.09598,-0.02852,-0.11255,-0.11988,-0.05560,-0.01336,0.12923,0.20660,0.05676,-0.05191,-0.09277,-0.04812,0.13735,0.37374,0.38219,0.07177,-0.08839,-0.01881,0.02715,0.07930,-0.05798,-0.07172,-0.04925,-0.02438,0.09959,0.14400,-0.04371,-0.09937,-0.18295,-0.03430,0.04522,0.44852,0.21871,0.02724,-0.08848,-0.03631,0.02647,0.03524,-0.05359,-0.00063,-0.01537,-0.02876,0.01876,0.02264,-0.16372,-0.31302,-0.46869,-0.25394,-0.05793,0.31513,0.16742,0.06255,-0.21139,-0.15463,-0.05515,0.02103,-0.06713,-0.03129,-0.04796,-0.06607,-0.04102,-0.03005,-0.09683,-0.37971,-0.38535,-0.41693,-0.22961,0.16960,0.02378,-0.04326,-0.01433,-0.05061,-0.05455,-0.01025,-0.01077,-0.02570,0.00173,-0.10859,-0.05578,-0.04502,-0.07482,-0.20600,-0.20112,-0.33741,-0.27199,-0.06349,-0.08414,-0.17835,0.31047,0.27585,0.12636,-0.01771,0.01960,-0.08184,0.00106,-0.01581,-0.08414,-0.03954,-0.02076,-0.03949,0.03765,-0.03282,-0.38265,-0.10854,0.04942,0.36460,0.32915,0.29684,0.25439,0.00689,0.01780,-0.00013,-0.00331,};
float weights_input_1[] = {0.00248,-0.00195,-0.00026,0.13160,0.22165,0.20697,0.24572,0.23185,0.13073,0.02911,-0.13131,-0.09155,-0.10737,-0.20993,-0.01641,-0.03659,-0.02172,0.00150,0.00287,0.06753,-0.00305,0.02344,0.21127,0.25972,0.33717,0.32477,0.12175,0.05263,-0.08235,-0.07573,-0.01095,-0.13204,0.08182,-0.07690,0.00908,-0.01680,0.04434,0.03080,0.06474,0.11198,0.17847,0.25054,0.22243,0.07442,0.02368,0.07044,-0.01012,-0.06370,-0.08463,0.05564,0.21725,0.02102,-0.06289,-0.00442,0.04534,-0.03886,0.10056,0.16898,0.23752,0.21119,0.02057,-0.07671,-0.26187,0.05181,-0.16408,0.20652,0.01975,0.12944,0.19190,0.08420,-0.01601,0.06205,0.04787,-0.03623,0.05658,0.23581,0.05436,0.14850,-0.00973,-0.13379,-0.41019,-0.26172,-0.14439,0.21943,0.06051,0.20187,0.23384,0.10204,0.04066,0.07393,0.04849,-0.04372,0.06532,0.23081,0.05262,0.08999,0.00786,-0.25433,-0.41519,-0.45355,-0.05752,0.29785,0.09279,0.23027,0.31598,0.15236,0.05423,0.07514,0.04279,-0.04151,0.08557,0.19234,0.11288,0.29800,0.08163,-0.18145,-0.44984,-0.53905,-0.12884,0.27589,0.01442,0.27891,0.30858,0.15584,0.04895,0.09414,0.04122,-0.04173,0.02870,0.19682,0.16369,-0.10630,0.14685,-0.01976,-0.32598,-0.40960,-0.28334,0.11316,-0.03214,0.20936,0.34694,0.17425,0.04802,0.06952,0.06638,-0.02054,-0.02204,0.06880,0.07837,0.09994,0.29492,0.15385,-0.40449,-0.38155,-0.12118,0.23056,0.05149,0.19399,0.25147,0.12743,0.04264,0.06854,0.07109,-0.01585,-0.02413,-0.08784,-0.06207,0.05517,0.09839,0.03633,-0.09323,0.17096,0.27547,0.49734,0.10082,0.12703,0.06636,0.07267,0.01042,0.08227,0.07077,-0.01575,-0.07445,-0.24640,-0.41917,-0.13991,0.10032,0.53294,0.67900,0.58348,0.51224,0.42699,-0.14268,-0.07361,-0.12260,-0.00696,0.01617,0.08149,0.04290,-0.04869,-0.05772,-0.27583,-0.47772,-0.46698,0.11213,0.48002,0.62553,0.53080,0.19026,0.23205,-0.24230,-0.20194,-0.20409,-0.02829,-0.01458,0.08129,-0.01032,-0.10381,-0.06348,-0.29008,-0.60810,-0.66129,-0.25588,-0.01242,0.22825,0.02424,-0.17138,0.03059,-0.26514,-0.31028,-0.19832,-0.06451,-0.04501,0.08854,-0.00166,-0.12306,-0.12464,-0.18232,-0.43371,-0.35306,-0.16374,-0.05419,0.12634,-0.06184,-0.09486,-0.06668,-0.18947,-0.19365,-0.17337,-0.10686,-0.03144,0.07040,0.04623,-0.12166,-0.10964,-0.08673,-0.06952,-0.06290,-0.05541,0.01400,0.03341,-0.08244,-0.03788,-0.00814,-0.25514,-0.24152,-0.12066,-0.11865,-0.07140,0.03757,0.04254,-0.05548,-0.05764,-0.03210,0.07160,-0.07252,-0.20120,-0.32485,-0.04512,-0.09884,-0.11272,0.11518,-0.17831,-0.21278,-0.20007,-0.14872,-0.01124,0.06435,-0.00081,0.02649,-0.00489,-0.01413,-0.01986,0.11721,-0.41515,-0.25662,-0.35014,-0.34629,-0.22979,-0.04836,-0.23787,-0.30956,-0.26617,-0.05438,-0.00653,0.05197,0.00071,-0.00562,0.12487,-0.00537,-0.16854,0.02851,-0.13980,-0.27484,-0.57325,-0.63650,-0.27687,-0.14794,-0.22643,-0.18642,-0.04861,0.00322,-0.00652,0.00022,0.22455,};
float weights_input_2[] = {-0.00111,0.02268,0.01464,-0.19056,-0.37759,-0.34851,-0.30374,-0.07955,-0.26199,-0.35564,-0.42667,0.11442,0.05738,0.20893,0.21868,0.20327,-0.11809,0.02576,-0.00012,-0.02495,-0.09474,-0.12782,-0.34434,-0.60717,-0.55115,0.00140,-0.27503,-0.36610,-0.44198,-0.26445,0.09185,0.13142,-0.03852,0.45702,-0.13799,-0.04648,-0.04645,-0.11241,-0.03458,-0.06018,-0.25400,-0.41447,-0.33730,-0.30491,0.12801,0.08740,-0.13719,0.16389,0.01079,-0.18911,-0.04591,-0.05875,-0.11142,-0.13456,-0.04693,-0.07049,-0.06444,-0.01668,-0.41452,-0.07192,0.02708,0.03879,0.15607,0.18016,0.03111,-0.40218,-0.05488,-0.13989,-0.36411,-0.38486,-0.08658,-0.08987,-0.04725,-0.06993,-0.08126,0.13327,-0.09815,0.12825,0.00461,0.01091,0.08462,-0.13866,-0.44250,-0.46512,-0.23194,-0.22876,-0.59881,-0.49181,-0.26263,-0.09388,0.03674,-0.07046,0.08073,0.02618,0.21425,0.10879,0.04829,-0.25339,0.05824,0.21760,-0.38983,-0.64988,-0.42392,-0.90199,-0.87187,-0.77882,-0.32965,-0.15187,0.03542,-0.05218,0.08987,0.10156,0.20492,0.36273,0.04408,-0.07412,0.04772,0.49453,0.14717,-0.48087,-0.69325,-0.90919,-0.98697,-0.59303,-0.21080,-0.15120,0.03591,0.02826,0.07952,0.10991,0.33956,0.35373,-0.14306,0.07236,0.56692,0.49088,0.28321,0.05317,0.30674,-0.16592,-0.33173,-0.31484,-0.25220,-0.27325,0.03702,0.00688,0.15744,0.23437,0.42114,0.24853,-0.02067,0.00379,-0.07494,0.18004,0.04870,0.64373,0.22577,0.47395,0.34824,0.20278,-0.20382,-0.16300,0.03152,0.00002,0.13124,0.23537,0.30319,-0.10720,0.04423,0.02311,-0.10167,-0.07618,-0.23494,-0.13660,0.52582,0.37883,0.27692,0.36389,-0.00487,-0.14845,0.03661,0.00395,0.10748,0.08816,-0.07748,-0.13498,-0.25514,0.10412,0.05240,-0.04262,-0.19258,-0.32751,0.23577,0.05357,0.13138,0.25821,0.17164,-0.11171,0.03903,0.01085,0.04088,-0.17687,-0.28427,-0.26665,-0.04975,-0.25100,0.27598,0.27982,-0.04811,-0.25980,0.35623,-0.03722,0.00852,0.11582,0.11367,-0.11337,0.09227,-0.03011,0.01157,-0.17466,-0.11348,-0.05119,-0.03841,-0.26937,-0.09141,0.27739,0.09078,0.01346,0.34465,0.13299,0.08165,0.28634,0.09073,-0.01799,0.08937,-0.02482,-0.01774,-0.08285,-0.10245,-0.03004,0.09116,-0.05428,-0.04150,0.40979,-0.09415,-0.16745,-0.13553,0.14116,0.05469,0.32198,0.17640,0.15375,-0.03393,-0.01586,-0.02759,-0.14627,-0.41043,-0.20450,-0.05470,0.23481,0.20772,0.45249,0.08478,0.18790,0.02246,0.35583,-0.17768,0.16860,0.31821,0.04779,-0.04769,-0.01129,-0.12147,-0.25278,-0.16392,-0.00900,0.03742,0.09436,0.18632,0.11872,0.10108,-0.12122,0.30606,0.40248,0.06120,0.21879,0.29918,-0.01857,0.00047,-0.15938,-0.14996,-0.25467,0.18318,-0.12217,0.24687,-0.13729,0.24581,0.36868,-0.18857,-0.03970,0.22973,0.23308,0.15951,0.24414,0.01518,-0.12031,-0.00064,0.01729,-0.15131,0.03605,0.49658,0.09557,0.24328,0.08382,0.06919,0.28817,0.05699,0.40503,0.15462,0.44856,0.03698,-0.06947,0.01442,-0.00072,-0.08755,};
float weights_input_3[] = {0.00072,0.03096,0.02397,-0.04436,-0.00198,0.12466,0.12053,0.02816,-0.15950,0.06468,-0.01597,0.22688,0.23200,0.33605,0.10908,0.09454,0.01644,0.02338,-0.00003,-0.00975,-0.00647,-0.01928,0.08572,0.12863,-0.00970,0.01642,0.09314,0.09887,-0.02609,-0.03412,-0.02061,0.29700,0.13473,0.12876,-0.01803,-0.01665,-0.03398,-0.08446,-0.01261,0.10566,0.01270,0.04788,0.21066,0.06283,0.13692,0.17495,0.17809,-0.01023,0.08103,0.10513,-0.00525,0.03496,0.01786,-0.07549,-0.05569,-0.04444,-0.03357,0.06008,-0.00211,0.16193,0.15548,0.23069,0.19064,0.27397,0.19596,-0.01508,0.08507,-0.06155,-0.11510,-0.09410,-0.01440,-0.04147,-0.03076,-0.04282,-0.03088,0.03727,0.01523,0.13365,-0.06294,-0.15988,-0.06969,0.04599,0.16106,-0.02353,0.02586,-0.05176,-0.24997,-0.13332,-0.04559,-0.05597,-0.03442,-0.02217,-0.00915,-0.00027,0.14724,0.03144,-0.18743,-0.19225,-0.15850,0.28841,0.01814,-0.13045,-0.01631,-0.08924,-0.24288,-0.12152,-0.05628,-0.05674,-0.03512,-0.01354,-0.01030,0.08327,0.10623,0.06195,-0.21353,-0.10407,0.00536,0.33439,0.08278,-0.07392,-0.01895,-0.10749,-0.23698,-0.11797,-0.05308,-0.05632,-0.03354,-0.02329,0.00607,0.07931,0.02783,0.08653,-0.17976,-0.33297,0.08697,0.30382,0.19721,0.03941,-0.03055,0.01717,-0.19111,-0.06375,-0.03639,-0.05750,-0.04018,-0.04103,0.01158,0.06712,0.01015,-0.04342,-0.28497,-0.03672,0.10208,0.20461,-0.00697,0.00354,0.04597,0.16349,-0.14151,-0.05207,-0.03632,-0.06084,-0.03984,-0.03951,-0.02209,-0.05488,-0.03553,0.00542,-0.36347,-0.17623,0.01970,0.13338,-0.11672,-0.24309,0.04244,0.17247,-0.00156,-0.05626,-0.03480,-0.05680,-0.05806,-0.06507,-0.10494,-0.13220,-0.19002,-0.28702,-0.38495,-0.19614,0.07239,0.00652,-0.12263,-0.25153,0.08221,0.25171,0.02758,-0.02192,-0.03367,-0.05625,-0.03856,-0.08787,-0.13764,-0.20558,-0.30984,-0.49267,-0.47803,-0.11833,-0.04171,-0.05681,-0.09700,-0.18378,0.11517,0.29043,-0.00665,0.03545,-0.03111,-0.05879,-0.04030,-0.08939,-0.18724,-0.13888,-0.24074,-0.31168,-0.41956,-0.40775,-0.25933,-0.02578,0.02918,0.02977,0.11544,0.15361,-0.17502,0.02247,-0.02785,-0.02247,-0.04273,-0.02578,-0.05576,0.05297,0.01180,-0.23757,-0.17075,-0.31750,-0.17251,0.14021,-0.01864,-0.12665,-0.02005,0.16795,-0.07889,0.00180,-0.03518,-0.01652,-0.03480,-0.02933,0.00114,0.16032,-0.03939,-0.20902,-0.35166,-0.14567,0.03536,0.26914,0.12452,-0.06581,0.01641,0.03047,-0.20374,-0.14054,-0.06114,-0.07395,-0.03419,-0.03972,0.01070,0.20046,-0.01402,-0.17646,-0.22403,-0.09475,-0.17732,0.15423,0.01331,-0.13890,-0.00589,-0.03596,-0.19417,-0.14316,-0.00224,-0.03705,0.00365,-0.06818,0.00327,-0.00671,0.17852,0.05088,0.16257,0.05708,-0.01639,0.05996,-0.18632,-0.44032,0.12556,0.14307,-0.02499,0.00947,0.02867,-0.07949,0.00240,-0.01405,-0.07825,-0.06031,0.04563,0.17381,0.23108,0.09929,-0.23140,-0.04834,-0.24529,-0.23748,0.15119,0.21114,0.03024,-0.02274,0.02669,-0.00188,-0.00722,};
float weights_input_4[] = {0.01122,0.01244,0.01032,0.14607,0.42341,0.46335,0.49527,0.21426,0.01033,-0.02100,-0.08105,-0.00710,0.10386,0.24358,0.33957,0.22525,0.10910,0.03351,0.01194,0.00178,0.07623,0.15547,0.31643,0.28407,0.21795,0.15381,0.03846,-0.01736,-0.06771,-0.01924,0.13730,0.27795,0.39528,0.25399,0.08000,0.02590,-0.01316,-0.03982,0.04781,0.08525,0.17453,0.10401,0.16466,0.13502,0.35267,0.23800,0.01769,-0.08723,0.05778,0.23284,0.40976,0.21278,0.07609,-0.00468,-0.03302,-0.01814,-0.01663,0.04952,0.06780,-0.01445,0.11658,0.07030,0.13591,0.03690,-0.11239,-0.00035,0.06725,0.21762,0.25271,0.10023,0.04536,-0.00173,-0.01361,-0.01769,-0.01193,0.02234,0.01662,-0.05620,-0.11976,-0.10863,-0.15394,-0.24204,-0.22801,0.05106,0.13006,0.09348,0.07503,0.01818,0.02279,-0.02142,-0.02393,-0.00609,-0.01335,0.00012,0.05076,-0.16598,-0.20356,-0.15543,-0.17359,-0.27517,-0.06728,0.12890,0.05751,-0.04050,-0.02664,-0.01791,-0.00120,-0.02141,-0.02372,-0.00774,0.00170,0.05196,-0.03741,-0.18469,-0.13949,-0.16433,-0.19769,-0.30346,-0.05198,0.16462,0.03848,-0.11786,-0.08604,-0.04685,-0.00196,-0.02224,-0.02448,-0.00956,-0.00077,-0.01545,-0.06583,-0.14502,-0.23857,-0.22551,-0.21619,-0.25166,0.16159,0.05393,-0.11627,-0.13898,-0.08014,-0.00104,0.00589,-0.00986,-0.02052,-0.00316,-0.00120,-0.01048,-0.08328,-0.13393,-0.20059,-0.21112,-0.28614,-0.17209,0.16809,-0.08345,-0.16644,-0.15030,-0.08330,-0.00400,-0.00359,-0.02014,-0.02001,-0.00541,-0.00262,-0.02811,-0.10376,-0.15697,-0.18477,-0.15939,0.00469,0.05315,-0.01617,-0.06757,-0.08838,-0.13025,-0.06482,-0.01087,0.00628,0.00961,-0.02160,-0.00398,-0.01235,-0.04015,-0.10441,-0.14647,-0.13167,-0.11776,0.19440,0.00940,-0.22040,-0.08596,-0.11258,-0.14602,-0.07445,-0.01611,0.03248,0.01615,-0.02436,-0.00832,-0.01946,-0.06204,-0.10334,-0.13074,-0.12688,0.04358,0.15938,0.06046,-0.08683,-0.05300,-0.20271,-0.16124,-0.09203,-0.03218,0.02322,0.00971,-0.02670,-0.01965,-0.02566,-0.07166,-0.14932,-0.18006,-0.08241,-0.08264,0.02380,0.04579,-0.04535,-0.10412,-0.22817,-0.24392,-0.16118,-0.04200,0.02370,0.00860,-0.02974,-0.01454,-0.02373,-0.07150,-0.19320,-0.17347,0.02690,-0.04188,0.13034,0.11582,-0.02237,-0.13558,-0.24933,-0.26756,-0.15847,-0.08454,-0.03217,0.00790,-0.02482,-0.01419,-0.02795,-0.12634,-0.17670,-0.13827,-0.09874,0.05828,0.16984,0.10519,-0.02707,-0.11628,-0.22293,-0.20775,-0.20498,-0.10107,-0.06645,-0.08135,-0.02457,-0.03278,-0.03714,-0.15400,-0.25371,-0.28139,-0.17390,-0.01587,0.02473,0.00378,-0.20106,-0.24463,-0.31439,-0.27013,-0.18418,-0.09213,-0.00152,-0.02027,-0.00102,-0.03707,-0.05276,-0.10661,-0.20145,-0.21474,-0.19674,-0.06615,-0.15181,-0.16207,-0.30718,-0.28491,-0.26851,-0.19199,-0.15081,-0.02870,-0.00261,-0.02561,-0.00006,-0.01717,-0.03581,-0.14724,-0.33406,-0.29364,-0.25415,-0.21183,-0.17068,-0.30992,-0.42707,-0.37954,-0.30363,-0.24006,-0.14464,-0.05314,-0.00202,-0.00178,0.06711,};
float weights_input_5[] = {0.00024,-0.00544,-0.00312,-0.12143,-0.24286,-0.31639,-0.21215,-0.12207,-0.28956,-0.24701,-0.02129,0.05755,0.01908,-0.22659,-0.17935,-0.10027,-0.05416,0.03364,0.00100,-0.04940,-0.04877,-0.02809,-0.17979,-0.23749,-0.20013,-0.14739,-0.20103,-0.15108,-0.00102,-0.16344,-0.11891,-0.10853,0.00370,-0.09166,-0.07853,-0.00384,-0.04481,-0.08181,-0.00930,-0.14343,-0.19608,-0.27550,-0.03142,-0.29978,-0.20376,0.01061,-0.11635,-0.09759,-0.13061,-0.14538,-0.03906,-0.06652,-0.02682,-0.05771,-0.04475,-0.03875,-0.03285,-0.17603,-0.13100,-0.17679,-0.04094,-0.11517,0.06801,0.00654,0.25559,0.00586,-0.08861,-0.08042,0.00468,-0.01970,-0.00645,-0.00858,-0.04439,-0.03929,-0.00247,-0.12975,-0.02989,-0.03508,-0.06432,-0.15675,0.06858,0.25930,0.19901,0.04841,0.06861,-0.04980,0.05156,-0.00698,-0.02806,-0.00976,-0.04323,-0.03755,0.01998,-0.13676,-0.22157,-0.06779,-0.06493,-0.14623,0.09453,0.42496,0.23699,-0.01682,0.06963,-0.02393,0.08986,-0.00445,-0.02555,-0.04832,-0.04382,-0.03912,0.01946,-0.04440,-0.14351,-0.13089,-0.07105,-0.02528,0.01685,0.26728,0.23368,-0.00016,0.03290,-0.06864,0.01652,0.02455,-0.02447,-0.05007,-0.04179,-0.03848,-0.01082,-0.08850,-0.07749,0.02139,-0.00884,-0.04777,-0.20016,-0.07365,-0.06782,0.14221,-0.01546,-0.12012,-0.00880,-0.01470,-0.02511,-0.06836,-0.04245,-0.03837,0.07679,-0.08014,0.08944,0.09115,-0.04029,-0.20281,-0.16285,-0.24516,-0.13244,0.14660,0.00640,-0.08009,-0.09231,-0.08284,-0.07181,-0.06722,-0.04339,-0.03717,0.09460,0.05222,0.15231,0.16686,0.11701,-0.04315,-0.11121,-0.21097,0.06686,0.04109,-0.04025,-0.07506,0.01987,-0.01054,-0.07414,-0.06660,-0.06909,-0.06431,0.08665,0.09653,0.20601,0.12737,0.16085,0.03752,-0.10814,0.04571,0.20280,-0.03686,-0.11637,-0.13451,-0.02379,0.00635,-0.08955,-0.11112,-0.06647,-0.05411,0.12581,0.20129,0.16354,0.10520,-0.01703,0.04019,-0.01309,0.17154,0.30871,-0.00712,-0.19927,-0.25476,-0.01942,-0.01875,-0.10089,-0.11087,-0.03548,-0.00007,0.15609,0.17089,0.07406,-0.01105,0.04248,0.03004,0.20204,0.39736,0.41276,-0.01254,-0.19853,-0.13139,0.14150,0.10361,-0.04005,-0.05032,-0.03287,-0.01903,0.11236,0.07718,-0.06703,0.01274,-0.07306,0.06764,0.07516,0.45508,0.21330,-0.05225,-0.23658,-0.16381,0.08834,0.05649,-0.02838,0.03529,0.00178,-0.02401,0.02569,-0.07588,-0.13743,-0.17771,-0.29894,-0.16615,-0.06801,0.29677,0.17467,0.00676,-0.32546,-0.24144,0.01942,0.05919,-0.03111,0.01512,-0.04419,-0.05196,-0.03587,-0.15923,-0.09451,-0.25457,-0.24391,-0.37352,-0.15515,0.19774,0.05297,-0.10088,-0.04573,-0.11271,0.02117,0.04334,0.01163,-0.00534,-0.00230,-0.10412,-0.04434,-0.04766,-0.06981,-0.12898,-0.13447,-0.30007,-0.15944,0.08286,0.04164,-0.12013,0.22447,0.16186,0.17166,0.00327,0.01462,-0.07858,-0.00170,-0.01252,-0.06219,0.01506,0.04889,0.03413,0.09106,0.01378,-0.25509,0.01493,0.19423,0.44502,0.33562,0.26349,0.27816,0.01524,0.01363,0.00046,0.06337,};
float weights_input_6[] = {-0.00894,-0.04949,-0.04371,0.01054,-0.04296,-0.22719,-0.09638,-0.04560,0.17130,-0.10171,-0.04000,-0.23513,-0.08370,-0.25464,-0.04181,0.09458,0.04186,-0.01247,-0.00909,-0.02663,-0.03243,-0.06935,-0.17123,-0.05047,-0.14231,0.05932,-0.09423,-0.06568,0.08181,0.22586,0.05588,-0.26785,-0.19729,-0.00719,0.05563,0.03765,0.04986,0.06752,-0.04741,-0.24480,0.08121,-0.12220,-0.20013,0.04456,-0.25885,-0.33757,-0.28274,0.07141,-0.07548,-0.14798,-0.10104,0.04577,0.04204,0.10056,0.03812,0.04872,0.04926,-0.08477,0.01114,0.05752,-0.01781,-0.14822,-0.30924,-0.38843,-0.31923,-0.23393,-0.09155,-0.16870,-0.01781,0.13586,0.01548,0.01352,0.05012,0.04872,0.09902,-0.16239,0.07046,-0.13296,-0.18578,0.12229,-0.06105,-0.02013,-0.20350,-0.38968,-0.18129,-0.06897,0.12524,0.13935,0.04288,0.01777,0.05072,0.06258,0.03232,-0.19270,-0.06481,-0.07919,-0.14375,0.34281,0.25114,-0.14941,-0.12821,-0.22601,-0.26637,-0.12406,0.04336,0.16052,0.08227,0.02782,0.05082,0.04055,0.02001,-0.11840,0.09645,0.01796,0.31753,0.30460,0.19204,-0.06519,0.00516,-0.07503,-0.11837,-0.24566,0.09390,0.13086,0.08943,0.03024,0.05117,0.05703,-0.01034,-0.07231,0.15760,0.15445,0.46147,0.53599,0.23676,0.05332,0.16287,-0.21663,-0.04599,-0.24579,0.06082,0.07250,0.08787,0.03488,0.02363,0.03008,-0.04793,-0.10409,0.22782,0.21046,0.39998,0.21308,0.28671,0.12076,0.07447,-0.19900,-0.24983,-0.32557,0.09901,0.11821,0.10179,0.04395,0.02445,0.03229,0.00097,0.08623,0.10215,0.14805,0.61393,0.26077,0.22405,-0.02672,0.16101,0.23165,-0.11863,-0.15786,0.18961,0.14316,0.09727,0.02344,0.05661,0.07782,0.14364,0.16560,0.10624,0.18180,0.43177,0.15979,-0.09756,-0.14369,-0.01343,0.25657,0.18391,0.14127,0.44905,0.18835,0.12636,0.03604,0.06561,0.14533,0.19232,0.22103,-0.07342,0.25155,0.13636,-0.01622,-0.26715,-0.26825,0.05023,0.40800,0.30975,0.33426,0.43265,0.18112,0.13476,0.03550,0.10275,0.17592,0.25562,0.20013,0.16588,0.24587,0.03819,0.19430,-0.44163,-0.29412,0.15030,0.48516,0.29165,0.37060,0.40353,0.10763,0.07632,-0.03619,0.10496,0.10682,0.15772,0.08502,0.13395,0.15148,-0.16064,-0.06958,-0.19818,-0.36201,0.20804,0.54366,0.50700,0.15361,0.25696,0.04577,-0.02102,-0.06761,0.04865,0.11882,0.12614,0.07422,0.15926,-0.04901,-0.32287,-0.06287,-0.06280,-0.15350,-0.01166,0.25163,0.22412,-0.03676,0.04155,-0.05794,0.06219,0.00277,0.05063,0.10685,0.07057,-0.04858,-0.02741,-0.03440,-0.07171,0.14663,0.09307,-0.32236,0.12315,0.26806,-0.22014,-0.10573,0.17406,-0.01596,-0.01520,0.01588,-0.00497,0.08113,-0.00876,0.08453,-0.09494,0.04137,-0.08853,0.14354,0.19169,-0.06303,0.06821,0.19223,-0.41700,-0.34658,-0.15860,-0.07100,-0.04638,0.07405,-0.00935,0.00659,-0.06883,0.00336,0.02391,0.04609,-0.01283,0.14344,0.39336,0.06369,0.10816,-0.18708,-0.53950,-0.55213,-0.28216,-0.05594,-0.04555,-0.00088,0.01478,};
float weights_input_7[] = {-0.00177,-0.00923,-0.00493,-0.03213,-0.23770,-0.18197,-0.26752,-0.13466,0.11610,0.29521,0.29517,0.26411,-0.05710,-0.30879,-0.21682,-0.39165,-0.30494,-0.05176,-0.00113,0.05734,-0.02621,-0.10153,-0.17397,-0.12996,0.06060,-0.19130,0.10233,0.17343,0.03675,0.03645,-0.22532,-0.34444,-0.33007,-0.33372,-0.16563,-0.05701,0.05516,0.07186,0.00617,0.00384,-0.19278,0.01759,0.35780,-0.01106,0.03563,0.01980,0.22575,-0.05427,0.17363,-0.24144,-0.30700,-0.37682,-0.19295,0.06179,0.06781,0.00325,0.07856,-0.03725,-0.01324,0.05720,-0.02282,-0.20971,0.07824,-0.14857,-0.05190,0.03845,0.29153,-0.10157,-0.08326,0.02005,-0.11296,0.09462,0.05748,0.00433,0.03951,0.07027,-0.07277,0.24130,0.16330,0.00334,-0.04942,0.11574,0.33153,0.10205,0.27657,0.01408,0.13538,0.06178,0.21376,0.13587,-0.00550,0.00294,0.04539,0.11951,0.05420,0.04746,0.15935,0.01520,0.03168,0.03202,0.28036,0.21583,0.26332,0.15615,0.37545,0.29617,0.40309,0.15188,0.00167,-0.00019,0.07900,0.18794,0.10814,0.29733,-0.08536,0.02929,-0.45775,-0.22698,-0.05933,-0.31152,0.02467,0.42657,0.49085,0.27863,0.33589,0.15641,0.00125,-0.06515,0.11833,0.57479,0.19667,0.10607,-0.05272,-0.35550,-0.74365,-0.55354,-0.80982,-0.50586,-0.34037,0.30370,0.58835,0.40349,0.39868,0.29690,0.00833,-0.05874,0.01759,0.48185,0.45244,0.70184,-0.18648,-0.56286,-0.61008,-0.70790,-0.53706,-0.37161,0.08578,0.47473,0.67753,0.39354,0.35508,0.21534,0.00836,-0.05936,0.02066,0.49132,0.18254,0.23390,-0.24481,-0.53641,-0.64135,-0.53413,-0.23822,-0.18810,0.04878,0.18578,0.52910,0.12653,0.20811,0.20501,0.01659,-0.05267,-0.00310,0.21367,-0.15439,0.10631,-0.10109,-0.02051,-0.09345,-0.03867,-0.20606,-0.58572,-0.26172,-0.12373,-0.38365,-0.15915,-0.02965,0.15958,0.00909,-0.07941,-0.07305,0.08825,-0.12611,-0.03959,0.19012,0.22419,-0.09357,-0.24277,-0.39439,-0.46202,-0.29461,-0.34670,-0.58425,-0.23437,-0.10591,0.16242,-0.01907,-0.04260,-0.09666,0.05395,-0.26959,0.01368,0.25355,0.24851,0.03452,-0.24994,0.06524,-0.12374,-0.29046,-0.41425,-0.47029,-0.26788,-0.09604,0.12211,-0.02367,-0.03827,-0.09129,-0.06102,-0.40622,0.05991,0.15781,0.22970,0.16304,-0.05695,0.36955,0.23381,0.00726,-0.27406,-0.40769,-0.31072,-0.17367,-0.04400,0.05920,-0.03578,-0.09943,-0.30330,-0.19769,0.14497,0.37539,0.20933,0.10920,0.09588,0.47188,0.11750,-0.08748,-0.25270,-0.20958,-0.24107,-0.33864,0.01156,0.05866,0.01856,-0.09529,-0.14728,0.04316,0.20045,0.27587,-0.17735,-0.05056,0.05857,0.41031,0.00667,0.18969,-0.36760,-0.24235,-0.27262,-0.14117,0.06714,-0.00107,0.05200,0.06812,-0.10216,0.18027,0.17044,0.41172,0.15528,-0.04556,0.28722,0.30601,0.17825,0.05552,-0.12031,0.02344,-0.24821,-0.00338,0.06532,-0.00072,0.03440,0.15542,0.21130,0.04217,0.44443,0.13829,0.03939,-0.07267,0.03796,0.16105,0.07968,0.14088,0.15552,0.30048,0.08789,0.00037,-0.00037,0.07018,};
float weights_input_8[] = {0.00509,-0.00333,-0.02454,0.02960,0.07677,0.24302,0.16111,0.18919,-0.02090,0.09606,0.04463,-0.00523,-0.01146,0.19964,0.17020,0.01615,0.02748,0.00476,0.00534,-0.02587,0.00781,0.06852,0.19787,0.08407,0.17656,-0.01642,0.10077,0.12763,0.06906,-0.18260,0.00800,0.13663,0.23749,0.01848,-0.00001,0.00371,-0.07358,-0.06580,0.02720,0.09842,0.02175,0.15800,-0.02328,0.05268,0.23239,0.34511,0.16230,-0.14640,-0.01658,0.04551,0.15909,-0.04854,0.01457,-0.02113,-0.03771,-0.00452,0.00091,-0.00656,0.08999,-0.09721,-0.04134,0.05963,0.29485,0.16894,0.06579,-0.01620,-0.07494,0.09995,0.07520,-0.05896,0.02316,-0.00734,-0.07368,-0.00509,-0.05794,0.04301,0.05888,0.09673,0.17552,0.11070,0.13763,0.04917,-0.05452,0.03703,0.04134,-0.00358,-0.03088,-0.02935,0.02616,-0.01029,-0.07072,-0.04120,-0.01204,0.18405,0.02949,0.06421,0.27694,-0.09089,-0.07271,0.08302,0.05024,0.17545,0.09258,0.02177,0.04351,-0.06798,0.00471,-0.01142,-0.07215,-0.06582,0.00307,0.07607,-0.09939,-0.06048,-0.09839,-0.13809,-0.04673,0.07302,0.01246,0.13715,-0.00131,0.07972,0.05397,-0.08993,-0.00631,-0.01151,-0.07316,-0.08272,-0.02368,0.02159,-0.17081,-0.18696,-0.26667,-0.36918,-0.13492,-0.07647,-0.13829,0.11480,-0.06633,0.09814,0.07085,-0.04896,-0.00197,0.00244,-0.01980,-0.02794,-0.01386,-0.02274,-0.30551,-0.24105,-0.31653,-0.34570,-0.35783,-0.16256,0.00553,0.14012,0.04259,0.10359,0.09230,-0.07004,-0.00454,-0.00228,-0.01895,-0.02859,-0.03830,-0.19939,-0.16472,-0.25905,-0.45036,-0.36996,-0.28813,-0.06211,-0.11825,-0.18141,-0.14828,-0.05288,-0.15191,-0.09180,-0.00788,0.00199,-0.02398,-0.03793,-0.11475,-0.21740,-0.21075,-0.28282,-0.29753,-0.11514,0.27200,0.28937,0.03947,-0.19236,-0.38651,-0.39339,-0.41659,-0.11604,-0.01137,0.00314,-0.06388,-0.10778,-0.14289,-0.25443,-0.03116,-0.17133,0.02900,0.07587,0.29877,0.35827,0.00642,-0.31843,-0.44126,-0.52498,-0.35684,-0.21763,-0.02992,0.00528,-0.07918,-0.13182,-0.19150,-0.31078,-0.25522,-0.20369,0.21890,0.13699,0.60742,0.34311,-0.17924,-0.49079,-0.44180,-0.55942,-0.30261,-0.13624,0.00880,0.02793,-0.08311,-0.08245,-0.14047,-0.29830,-0.15995,0.07944,0.33641,0.31075,0.26181,0.19035,-0.25153,-0.40260,-0.48943,-0.30173,-0.19263,-0.02216,0.06761,0.01904,-0.07307,-0.09370,-0.11404,-0.24754,-0.01072,0.19242,0.49335,0.18182,0.05264,0.00378,-0.03850,-0.16489,-0.16652,-0.02964,0.08950,0.16621,-0.02364,-0.01522,-0.06982,-0.11174,-0.09206,-0.12409,0.23935,0.30173,0.23975,0.06196,0.12960,0.22057,-0.01938,-0.15836,0.15657,0.09463,0.12199,0.13358,-0.00282,-0.01740,0.00344,-0.06566,0.00178,-0.02177,0.10772,0.01838,0.09425,-0.02462,-0.10901,0.00378,0.02718,0.13904,0.21837,0.21223,0.18971,0.01450,0.01943,-0.01704,0.00484,0.01208,0.08420,0.09477,0.03144,-0.02528,-0.07059,-0.26721,-0.16667,-0.01938,-0.00519,0.20736,0.31285,0.23657,0.13285,0.01715,0.02193,-0.00036,0.14219,};
float weights_input_9[] = {0.00626,0.09699,0.11459,-0.06591,0.13666,0.62393,0.66398,0.65034,-0.19371,-0.17094,-0.33555,0.09469,0.28592,0.37142,0.50458,0.23470,-0.01708,0.02937,0.00529,0.05704,0.07090,0.08540,0.10309,0.50945,0.30510,0.35108,0.14238,0.17074,-0.10649,-0.10521,0.05933,0.34806,0.38643,0.31293,0.04267,-0.05244,-0.02266,-0.05601,0.03150,-0.03370,0.19347,0.14904,0.51053,0.22018,0.13911,0.14535,0.25859,0.16771,0.22300,0.21040,0.02988,0.13637,0.10047,-0.04347,-0.03914,-0.07213,-0.05107,-0.09883,0.02961,0.16187,0.46927,0.33105,0.10410,0.02843,0.03644,-0.11670,0.42763,-0.11245,0.00782,-0.17504,-0.03147,-0.02248,-0.02102,-0.07239,-0.06156,-0.21030,-0.10876,-0.00832,0.14738,-0.18222,-0.14404,0.07763,-0.04588,-0.12120,-0.00067,-0.21715,-0.44199,-0.20752,-0.08599,-0.03162,-0.02916,-0.06493,-0.12152,-0.31005,-0.22203,-0.04164,-0.29427,0.03745,-0.15428,0.16933,-0.11605,-0.45228,-0.34503,-0.42542,-0.38055,-0.13527,-0.07705,-0.03334,-0.03152,0.00984,-0.13285,-0.20368,-0.12762,-0.41392,-0.26224,0.06402,0.03130,0.34879,0.14393,-0.25274,-0.12516,-0.48527,-0.28977,-0.12820,-0.06557,-0.03484,-0.03042,-0.00392,0.01803,-0.25746,-0.44578,-0.44908,-0.52801,-0.37422,-0.35092,0.04734,0.30110,0.13892,-0.19107,-0.00087,-0.31042,-0.03522,-0.00248,-0.02667,-0.05047,-0.01316,0.07074,-0.10436,-0.26165,-0.15166,-0.01674,0.19947,-0.02577,0.15996,-0.00163,0.06946,0.11954,0.05537,-0.18124,-0.01368,-0.00730,-0.03425,-0.04893,-0.01338,0.06485,-0.10044,-0.21076,-0.32441,-0.27975,0.09647,0.14384,0.22068,-0.01660,-0.07780,0.00623,-0.17700,0.15608,-0.09469,-0.01680,-0.03392,-0.04397,-0.01345,0.05624,-0.30717,-0.41615,-0.88823,-0.89839,-0.73069,-0.52130,-0.44876,-0.41641,-0.09057,0.25237,0.07315,0.29289,0.28481,-0.02698,-0.02746,-0.00968,0.01707,0.00215,-0.31439,-0.71899,-0.80442,-0.70449,-0.18347,-0.37383,-0.37762,-0.17408,0.06631,0.22653,0.19227,0.25859,0.51988,0.00420,-0.03671,0.04250,0.06250,-0.05431,-0.02372,-0.24644,-0.31540,-0.22732,-0.20754,-0.33789,-0.12928,0.07169,0.29624,0.23915,0.00623,-0.03759,0.44283,-0.07049,-0.06859,0.03962,0.09440,0.14353,0.29089,0.18361,0.09743,0.27819,-0.05658,-0.12874,0.31358,0.00973,0.07268,0.05162,-0.03434,0.19041,0.36134,-0.16096,-0.06644,-0.02914,0.09434,0.20990,0.16301,0.15534,0.05624,-0.15555,0.13287,0.26287,0.36105,0.14410,0.19729,0.05748,-0.02461,0.13220,-0.17600,-0.13201,-0.12471,-0.02716,0.04297,0.20633,0.20314,-0.17384,-0.25829,-0.22961,-0.01524,-0.24665,0.23855,-0.01919,0.02367,-0.03911,0.05097,-0.08194,-0.23117,-0.02847,-0.04449,0.00439,-0.04664,0.12667,0.14201,0.13387,-0.09752,0.11309,0.24796,0.13018,0.39338,-0.09305,-0.40768,0.20971,-0.12243,-0.14346,-0.04377,0.02705,-0.13384,0.00222,-0.03179,-0.10806,-0.11982,-0.19199,0.14080,0.14149,0.20236,-0.24873,0.08117,-0.43987,-0.40847,-0.37214,-0.33028,-0.22800,-0.02904,0.02113,-0.00252,0.14952,};
float weights_input_10[] = {-0.00034,0.05453,0.07226,0.00546,0.05905,0.51057,0.46148,0.67085,0.12888,0.09588,-0.15214,-0.11700,-0.02292,0.09368,0.22243,0.08143,-0.04513,0.00191,0.00177,0.05827,0.02697,-0.06763,0.21878,0.49484,0.36480,0.45611,0.24649,0.20968,-0.04898,-0.24770,0.03485,0.08479,0.25397,0.03952,-0.06797,-0.04457,0.00871,0.00208,0.08136,0.01315,0.33188,0.40865,0.53981,0.30876,-0.24759,0.01139,0.33270,-0.11979,-0.02374,0.06835,0.05549,-0.06853,-0.08442,-0.11235,0.00822,-0.02261,0.13992,0.05207,0.25560,0.18246,0.21431,0.39148,-0.05813,0.17244,0.20613,-0.01837,0.22666,-0.18560,-0.12806,-0.12848,-0.10992,-0.06518,0.03183,-0.02164,0.02193,0.11661,0.04619,-0.01497,0.19994,0.05251,-0.24282,0.22502,-0.01118,0.06634,0.02585,-0.40305,-0.30191,-0.11250,-0.08898,-0.03476,0.03379,-0.03306,0.04783,0.05829,-0.03496,-0.10731,0.24235,-0.12682,-0.40696,-0.10356,-0.08145,-0.14905,-0.18666,-0.21206,-0.08437,-0.01967,-0.09579,-0.03889,0.02192,0.00823,-0.01457,-0.05962,-0.25088,-0.06571,-0.05476,-0.01238,-0.23597,0.05693,-0.00335,-0.20781,-0.10378,-0.02348,0.06649,0.03167,-0.09534,0.00018,0.01945,0.00337,0.03204,-0.09379,-0.22129,-0.33955,-0.18567,-0.16260,-0.20175,0.33605,0.16065,0.26416,0.13481,0.40216,0.11713,0.14710,-0.01924,-0.04277,0.01612,-0.06125,-0.09664,-0.18923,-0.06137,-0.04304,0.25827,0.27582,-0.43720,-0.06164,-0.19681,0.33546,0.67982,0.47452,0.14260,0.15046,-0.03447,-0.05391,-0.00028,-0.05356,-0.13904,-0.46083,-0.17787,-0.25377,-0.07150,0.09522,-0.42270,-0.26832,-0.07636,0.24898,0.45432,0.05979,0.11085,0.01143,-0.04455,-0.05069,-0.00173,-0.08784,-0.25517,-0.70643,-0.93200,-0.75246,-0.67789,-0.18599,0.08680,0.24336,0.51743,0.12416,0.11273,-0.00799,0.02425,0.12176,-0.05753,-0.04964,0.00651,-0.10748,-0.24506,-0.94747,-1.12712,-1.20492,-0.50959,0.18227,0.60055,0.40597,0.45868,0.10587,0.13226,-0.00038,-0.07850,0.24343,-0.10682,-0.04973,0.00463,-0.12326,-0.33666,-0.61835,-0.76448,-0.75115,-0.36874,-0.37653,0.19308,0.17145,0.03399,0.09659,0.15301,-0.27550,-0.28427,0.05222,-0.19993,0.01019,0.01794,-0.07736,-0.12820,-0.18493,-0.18797,-0.25244,0.12459,-0.28065,0.08654,0.43497,-0.00157,-0.01696,-0.18115,-0.01122,0.00292,-0.01363,-0.09173,-0.06086,0.01533,-0.07038,0.00944,0.05059,0.03269,0.03276,0.09356,-0.05126,0.17642,0.43032,0.27143,-0.11514,-0.13883,-0.18597,0.12588,-0.16109,-0.11781,-0.04733,0.01024,0.00090,0.12905,0.27611,0.31906,0.29510,-0.18507,-0.41883,-0.29263,0.34519,0.14528,0.11983,0.00628,-0.00439,-0.04003,-0.38014,-0.08480,0.00529,-0.00055,-0.00040,0.20434,0.34439,0.65350,0.51877,0.32235,-0.00961,-0.16476,0.11576,-0.24985,-0.36572,0.07175,-0.22180,-0.35283,-0.19160,0.00240,-0.04256,-0.00153,-0.00037,0.13969,0.25482,0.41222,0.60642,0.38795,0.04537,-0.39588,-0.27575,-0.42373,-0.31306,-0.28871,-0.32407,-0.19862,-0.00333,0.00372,-0.00060,0.38295,};
float weights_input_11[] = {0.00109,0.05869,0.06341,-0.01429,0.17534,0.24342,0.29068,0.09109,-0.12306,0.12249,0.12614,0.10505,-0.04601,-0.19723,-0.23291,-0.44019,-0.05908,-0.00377,0.00033,0.05976,0.08673,0.08548,0.34846,0.31005,0.29967,-0.18253,0.06454,0.14101,0.04003,-0.09827,-0.08882,0.17334,0.04121,-0.31066,0.00291,-0.06331,0.01032,-0.00389,0.05615,0.07158,0.15516,0.46344,0.23710,0.06770,-0.19705,-0.06081,0.16573,0.06475,0.23114,0.21358,-0.08156,-0.10404,-0.00419,-0.05680,0.00995,-0.05347,-0.01049,-0.06400,0.11973,-0.00276,-0.04622,0.05363,0.00958,0.09267,0.44292,0.57710,0.49007,0.09668,-0.01596,0.00434,-0.00632,0.00851,0.00574,-0.05521,-0.00881,-0.04421,-0.20447,0.00454,0.09515,-0.25029,0.11619,0.26848,0.43768,0.71951,0.24509,0.10013,0.11130,0.00790,-0.01418,0.00205,0.00886,-0.05941,-0.05119,-0.11864,-0.27802,-0.12850,-0.31569,-0.34780,-0.09045,0.44664,0.51963,0.54566,0.40940,0.37367,0.20480,-0.02081,-0.01494,0.00656,0.00248,-0.01107,-0.05894,-0.14409,-0.45089,-0.66792,-0.65416,-0.58730,-0.12746,0.07027,-0.01601,0.09615,0.20331,0.32599,0.19034,-0.02053,-0.02590,0.00003,0.00190,-0.01660,0.06938,-0.20434,-0.47228,-0.62298,-0.42270,-0.71356,-0.47526,-0.15403,-0.52112,-0.05910,-0.02739,0.24259,0.08876,-0.01903,-0.03026,-0.00262,-0.00824,-0.01683,0.08811,-0.05806,-0.43963,-0.55002,-0.19571,-0.01847,0.04204,0.01236,-0.09839,-0.18752,0.30910,0.22113,-0.26119,-0.12483,-0.03871,-0.00281,-0.00194,-0.01666,0.07403,-0.12951,-0.29741,-0.36148,-0.69939,-0.07705,0.06362,0.37355,-0.08046,-0.09470,-0.30201,-0.20156,-0.32408,-0.20025,-0.04591,-0.00180,-0.05366,-0.06441,-0.05789,-0.13570,-0.11707,-0.44642,-0.58171,-0.41015,-0.30316,-0.15974,-0.28005,-0.03849,-0.07692,-0.28789,-0.30837,-0.14334,-0.13914,-0.01327,-0.03102,-0.08587,-0.09200,-0.27822,-0.10144,-0.39005,-0.23882,-0.17546,-0.08394,-0.03709,-0.05388,-0.08153,-0.10697,-0.23139,-0.27931,0.02473,-0.05839,-0.01111,-0.04323,-0.10902,-0.11000,-0.04222,-0.11887,-0.24791,-0.04502,-0.13520,0.21254,0.07422,-0.18571,-0.23198,-0.20126,-0.33439,-0.28856,0.01685,-0.02743,0.02343,-0.03995,-0.07756,0.07506,0.07800,0.05541,0.02154,0.04069,0.15817,-0.00838,0.01762,-0.29027,-0.38726,-0.24183,-0.34283,-0.18825,0.09265,-0.01829,0.02975,0.00724,-0.06196,0.24322,0.28773,0.38128,0.35790,0.42616,0.13044,-0.09594,-0.22210,-0.03511,-0.13023,0.07135,-0.10190,0.16803,0.12916,-0.03916,0.00015,0.01355,-0.01201,0.21983,0.31769,0.28532,0.33159,0.35430,0.22161,0.03063,0.41823,-0.07796,0.21732,0.15245,0.10295,-0.05982,0.18835,0.06459,0.00016,0.00075,0.03230,0.29068,0.47728,0.29090,0.18979,-0.01699,-0.05304,-0.03651,0.17060,0.39834,0.06159,0.19728,0.11061,0.23607,0.21360,0.01616,-0.05382,0.00519,0.00058,0.20159,0.16418,0.06476,0.21786,0.19935,0.07888,-0.17658,0.06636,-0.10045,-0.07350,0.19778,0.22893,0.21553,0.19091,0.01678,-0.00112,0.31124,};
float weights_input_12[] = {-0.00174,-0.00375,-0.00401,-0.12916,-0.29108,-0.36732,-0.29382,-0.16853,-0.26876,-0.22612,-0.00275,-0.02441,0.03747,-0.18998,-0.23149,-0.13985,-0.05665,0.02169,0.00019,-0.04081,-0.05040,0.05137,-0.21681,-0.28482,-0.27221,-0.19945,-0.18021,-0.15186,-0.00369,-0.09060,-0.15331,-0.09293,-0.09047,-0.17530,-0.08002,-0.00615,-0.03871,-0.06638,-0.01529,-0.04081,-0.09274,-0.29126,-0.07737,-0.28627,-0.25421,-0.02997,-0.15574,-0.07262,-0.15553,-0.12115,-0.11872,-0.12128,-0.02905,-0.04838,-0.03653,-0.02950,-0.04283,-0.08573,-0.03637,-0.18447,-0.08877,-0.04884,0.03704,0.03093,0.24977,0.09587,-0.07503,-0.04434,-0.04112,-0.03249,-0.00692,-0.01158,-0.03684,-0.03020,-0.00181,-0.02023,0.06120,-0.04671,-0.06269,-0.08030,0.05446,0.29338,0.23880,0.13814,0.11858,0.02207,0.04173,-0.00443,-0.01878,-0.00801,-0.03648,-0.02778,0.02451,-0.03213,-0.13273,-0.05677,-0.08906,-0.11818,0.06125,0.45972,0.24485,0.10310,0.15494,0.11070,0.09539,0.00991,-0.01755,-0.03865,-0.03663,-0.02731,0.02569,0.05307,-0.07003,-0.11895,-0.11990,-0.08140,0.04604,0.33949,0.26382,0.10767,0.11477,0.06695,0.02916,0.02757,-0.01777,-0.03826,-0.03686,-0.02823,-0.01868,0.01679,-0.02600,0.06834,-0.07320,-0.07250,-0.14994,0.02316,-0.06807,0.14167,-0.00973,-0.03107,-0.03725,-0.03818,-0.01894,-0.05414,-0.03894,-0.02867,0.07747,0.00851,0.10925,0.08081,-0.01245,-0.11549,-0.01700,-0.08418,-0.07158,0.11225,0.02742,-0.04542,-0.15867,-0.11449,-0.07945,-0.05332,-0.03731,-0.02958,0.08927,0.11481,0.16489,0.18870,0.12213,-0.00817,-0.03532,-0.08983,0.15067,0.10192,-0.07514,-0.03531,-0.06273,-0.04836,-0.08742,-0.05339,-0.06465,-0.05597,0.07059,0.03216,0.10355,0.02913,0.05058,-0.04593,-0.12101,0.05925,0.19375,0.03517,-0.11302,-0.06344,-0.11155,-0.01042,-0.10748,-0.11439,-0.05795,-0.04695,0.11374,0.15327,0.08258,-0.00685,-0.12645,0.01580,-0.05119,0.12723,0.26754,0.07169,-0.19590,-0.17794,-0.07743,-0.02330,-0.12048,-0.11418,-0.03823,-0.00137,0.14130,0.16276,-0.01184,-0.11987,-0.06501,0.04440,0.19220,0.36612,0.39356,0.08805,-0.17056,-0.09562,0.05525,0.08940,-0.06269,-0.06178,-0.03324,-0.01498,0.11146,0.09150,-0.12230,-0.07145,-0.17359,0.06903,0.08411,0.38985,0.20562,0.02678,-0.11703,-0.09456,0.06409,0.04992,-0.05107,0.01269,0.00061,-0.01784,0.02830,-0.02777,-0.14523,-0.24639,-0.40709,-0.18998,-0.06583,0.25255,0.15291,0.07613,-0.22581,-0.19144,0.00513,0.04918,-0.06518,-0.00690,-0.03819,-0.04381,-0.03128,-0.09748,-0.05150,-0.30423,-0.34476,-0.41130,-0.21007,0.12655,0.01254,-0.01522,-0.03914,-0.07486,-0.01402,0.00036,-0.01861,-0.00846,-0.00100,-0.08608,-0.04044,-0.01723,-0.05788,-0.13974,-0.18947,-0.31837,-0.24899,-0.07274,-0.01174,-0.09292,0.26852,0.22853,0.13441,-0.02960,0.01179,-0.06581,-0.00034,-0.00911,-0.05903,0.01734,0.04821,0.04420,0.08229,-0.02277,-0.34199,-0.05275,0.14197,0.41225,0.29865,0.23962,0.26568,0.02073,0.01280,-0.00091,0.04851,};
float weights_input_13[] = {0.00199,-0.01288,-0.01770,0.02414,0.11980,-0.14704,-0.06419,-0.44795,-0.12136,-0.03253,0.29646,0.51519,0.24432,-0.00992,0.08919,0.17404,0.08386,0.06522,0.00163,-0.05035,-0.02733,0.13125,0.07765,-0.29348,-0.42265,-0.03882,-0.13277,-0.11593,-0.05634,0.12800,0.33616,0.25196,0.18180,0.41038,0.00673,0.01970,-0.03809,-0.08850,0.00892,0.03512,-0.02092,-0.12037,-0.10305,-0.18009,0.22790,0.17516,-0.12867,0.02796,-0.08954,0.06730,0.40638,0.19508,-0.01952,-0.10673,-0.03961,-0.03790,-0.03695,0.01250,0.01267,-0.07075,-0.15053,-0.01729,0.20245,0.11502,0.02166,-0.12081,-0.17704,-0.06296,0.21751,0.09772,-0.02751,-0.06601,-0.03791,-0.03659,-0.01081,0.07246,0.18509,-0.15177,-0.36812,-0.06521,0.15181,0.19382,-0.12469,-0.09401,0.00754,-0.01568,0.04175,-0.06979,-0.09126,-0.09214,0.00646,-0.03361,0.07180,0.05431,0.01533,-0.20930,-0.35054,-0.24815,0.15359,0.22382,-0.14011,-0.14827,-0.09599,-0.43683,-0.41370,-0.32102,-0.12447,-0.12947,0.00545,-0.04129,0.07012,0.14698,0.07807,-0.01702,-0.13726,-0.21237,0.02511,0.20531,0.13393,-0.03981,-0.39054,-0.53943,-0.48273,-0.31257,-0.06078,-0.12930,0.00412,0.00026,0.01854,0.10184,0.37128,0.26404,0.16294,0.12356,0.34238,0.28881,0.43499,0.25814,-0.01056,-0.41041,-0.17596,-0.16832,-0.10705,-0.12880,0.00424,0.00122,0.02395,0.17538,0.44646,0.27717,0.17370,0.00481,-0.09043,0.17152,0.41119,0.27080,-0.12115,0.02782,0.07571,0.08668,-0.10118,-0.07589,0.00469,-0.00241,0.01905,0.28488,0.30862,0.23357,0.31765,-0.06731,-0.06564,-0.06712,0.09494,-0.09157,0.00992,0.03758,0.05513,0.23581,-0.00911,-0.05299,-0.01448,-0.01896,-0.00654,0.18880,0.31284,0.31776,0.25353,0.13043,0.35117,0.17894,-0.13697,-0.19297,-0.15245,-0.06988,0.07050,-0.04122,0.07104,-0.05350,-0.01279,-0.02026,0.00921,0.00989,0.24531,0.42167,0.41154,-0.00328,0.33502,0.27619,0.05748,-0.17343,-0.15043,-0.09425,0.04066,-0.14631,0.03857,-0.05302,-0.00255,-0.04888,0.00651,-0.03864,-0.01761,0.22590,0.19118,-0.02504,0.22393,0.27252,0.18631,-0.12939,-0.11875,-0.01496,0.06158,-0.06157,0.07718,0.04319,-0.00676,-0.06101,-0.07006,-0.15177,-0.31281,0.08393,0.19753,0.06747,0.35998,0.35056,0.15078,-0.18092,-0.08250,-0.12450,-0.14337,-0.04834,0.11720,0.07119,-0.02050,-0.06020,-0.11044,-0.28942,-0.41294,-0.18870,-0.06242,0.13106,0.28726,0.22493,0.03263,0.00265,-0.21401,-0.16937,-0.44433,0.01137,0.10710,-0.04798,-0.03797,-0.08839,-0.20194,-0.47011,-0.41421,-0.32757,-0.04838,0.07247,0.20252,-0.00836,-0.13717,-0.06526,-0.27137,-0.29933,-0.16782,0.10125,0.16684,-0.01920,0.00217,-0.14754,-0.16667,-0.37785,-0.39076,-0.38253,-0.07969,0.00987,-0.05339,-0.15887,-0.23621,-0.12583,-0.20123,-0.04308,0.05950,0.20146,0.01672,-0.07366,-0.00042,-0.03939,-0.12882,-0.20720,-0.20814,-0.47269,-0.17273,0.00350,0.00670,-0.08310,0.26222,0.49632,0.10419,0.14718,0.12707,-0.07008,0.01402,-0.00012,-0.19693,};
float weights_input_14[] = {0.00141,0.01705,-0.00012,0.01257,0.17062,0.10541,0.08739,-0.00815,-0.00215,0.20438,0.23972,-0.26999,-0.18847,-0.30100,-0.34731,-0.22134,0.12935,-0.02187,0.00017,0.00720,0.06305,0.05824,0.32757,0.26064,0.21909,-0.26983,0.15032,0.24820,0.27214,-0.07839,-0.25403,0.03141,0.08496,-0.33443,0.07965,0.01649,-0.00588,0.05310,-0.01787,0.09069,0.15441,0.37755,0.00079,0.12970,-0.18439,-0.08090,-0.11662,-0.31480,0.00337,0.14098,0.04670,0.20794,0.09877,0.00528,0.01415,0.06227,-0.03861,-0.07799,0.19412,-0.03082,-0.12665,0.14104,0.15320,-0.07516,0.12186,0.14694,-0.07446,0.18054,0.28648,0.27544,0.16345,-0.02205,-0.01188,0.06111,-0.09593,-0.24223,0.06486,-0.17093,0.10438,0.05760,0.22494,0.23244,0.20203,0.25895,0.05726,0.24575,0.37383,0.31816,0.14789,-0.02689,-0.01116,0.03806,-0.14810,-0.14541,-0.21696,-0.16262,-0.03775,0.01158,-0.08783,0.22182,0.23058,0.33511,0.37279,0.74935,0.42883,0.28893,-0.01298,-0.01067,-0.01660,0.04106,-0.20253,-0.24451,-0.33048,-0.51612,-0.34789,-0.19317,0.13330,0.16074,-0.05533,0.44977,0.54695,0.51067,0.30057,0.19932,-0.05577,-0.01815,-0.01412,0.02737,-0.14197,-0.39064,-0.54224,-0.25436,-0.25901,-0.41654,0.04421,0.21788,0.13789,0.36604,0.13698,0.02263,-0.13718,-0.12964,-0.13261,-0.01492,-0.01791,0.03112,-0.12000,-0.43490,-0.78743,-0.71584,-0.49033,-0.06987,0.56844,0.58453,0.42306,-0.11018,0.10662,-0.44001,-0.62850,-0.52799,-0.14588,-0.01641,-0.01216,0.03054,-0.14726,-0.53196,-0.39052,-0.14001,-0.50022,0.06391,0.38164,0.57698,0.33749,0.12198,-0.33583,-0.27885,-0.70093,-0.45233,-0.19772,-0.01898,-0.07312,-0.02863,-0.22702,-0.17013,0.13731,-0.17616,-0.05564,-0.12972,0.02542,0.17506,-0.00684,0.15020,0.03634,-0.15485,-0.30209,-0.23841,-0.12342,-0.03377,-0.05808,-0.03863,-0.15473,-0.11552,0.28804,0.01273,-0.04742,0.01877,-0.05140,0.09496,-0.04001,-0.01505,-0.10305,-0.14941,-0.09081,-0.09213,-0.08232,-0.03282,-0.08616,-0.07318,-0.15856,-0.08397,0.01893,-0.16965,0.03148,0.09586,0.30903,0.09587,-0.37822,-0.49719,-0.27244,-0.31662,-0.14803,-0.03820,-0.04228,-0.02081,-0.08467,-0.04935,-0.06247,-0.01184,-0.02354,-0.08559,-0.05237,0.21462,-0.04258,-0.22351,-0.51375,-0.56630,-0.22470,-0.16499,0.02720,0.00757,0.05613,-0.01498,-0.02627,-0.04874,0.09590,0.40802,0.42618,0.18677,0.25061,0.08024,-0.19163,-0.40564,-0.41911,-0.39007,0.08781,-0.09352,0.37088,0.11298,0.03954,-0.03585,-0.00318,-0.00748,0.19234,0.45044,0.45813,0.32000,0.21834,0.26371,-0.01073,0.11331,-0.25969,-0.04968,-0.03663,0.17868,0.23134,0.06065,-0.02124,-0.02621,0.00389,0.06306,0.17357,0.51314,0.17628,0.35994,0.04191,0.03999,-0.21914,-0.25466,0.07318,-0.08722,0.07084,0.18035,0.15335,0.16005,0.01785,0.03293,0.00559,-0.01254,0.14165,0.16050,0.02279,0.07539,0.15451,0.05742,-0.20952,-0.09706,-0.15194,-0.36593,0.18721,0.07727,0.23437,0.18255,0.02091,0.00049,0.57071,};
float weights_input_15[] = {0.00060,0.00024,-0.00554,-0.11233,-0.21317,-0.27105,-0.22504,-0.20302,-0.31687,-0.19589,0.00180,0.08844,0.14291,-0.06174,-0.18306,-0.10285,-0.03863,0.01978,0.00145,-0.05197,-0.04197,0.05770,-0.13520,-0.22787,-0.24958,-0.20059,-0.16673,-0.11230,-0.02966,-0.02384,-0.06375,0.04057,-0.04433,-0.11830,-0.07982,-0.00987,-0.04996,-0.08010,-0.00370,0.04623,-0.07680,-0.26666,-0.02632,-0.21462,-0.13072,0.03910,-0.06125,-0.02314,-0.10911,-0.04236,-0.07241,-0.08132,-0.02326,-0.07105,-0.05148,-0.02945,-0.02067,0.02199,-0.02657,-0.15150,-0.07329,0.03470,0.10935,0.16222,0.31360,0.12584,-0.04954,-0.01096,-0.03002,-0.02997,-0.00372,-0.02853,-0.04886,-0.02928,0.00211,0.05331,0.07441,-0.03353,-0.12576,-0.10028,0.01829,0.25378,0.30647,0.17179,0.14617,0.04975,0.00777,-0.02056,-0.01993,-0.02593,-0.05094,-0.02959,0.02841,0.05580,-0.02393,-0.07557,-0.16828,-0.14042,0.02443,0.45318,0.22840,0.05706,0.16578,0.11151,0.02514,-0.01062,-0.01658,-0.04974,-0.05186,-0.02816,0.02966,0.14918,0.03095,-0.05145,-0.17338,-0.09275,0.03624,0.34131,0.24884,0.08195,0.13164,0.04703,-0.03954,0.00350,-0.01712,-0.04909,-0.05060,-0.03178,0.00281,0.10519,0.05982,0.11324,-0.11728,-0.09698,-0.15771,0.05567,0.01497,0.09230,-0.01464,-0.05223,-0.09737,-0.05216,-0.01566,-0.06228,-0.04958,-0.02952,0.06510,0.06471,0.15481,0.13141,-0.07118,-0.13869,-0.06062,-0.07038,-0.03895,0.04943,0.01273,-0.04387,-0.19414,-0.11267,-0.07463,-0.06300,-0.05060,-0.03016,0.07356,0.15272,0.21646,0.24009,0.07600,-0.03556,-0.04808,-0.05170,0.09335,0.02837,-0.06108,-0.00106,-0.08950,-0.06943,-0.07978,-0.06284,-0.07724,-0.05752,0.05123,0.09913,0.14387,0.07472,0.02075,-0.06893,-0.09092,0.03003,0.13854,-0.00855,-0.06710,0.01183,-0.12604,-0.02445,-0.10272,-0.12151,-0.07017,-0.05022,0.09682,0.18451,0.12764,0.03754,-0.19436,-0.01086,-0.10802,0.08113,0.23235,0.06922,-0.13126,-0.08440,-0.09559,-0.03282,-0.11144,-0.12080,-0.06008,-0.01574,0.12070,0.20564,0.04999,-0.06539,-0.14097,-0.06327,0.11051,0.35713,0.40043,0.10914,-0.09629,-0.02916,0.00555,0.06828,-0.05883,-0.07603,-0.05622,-0.02313,0.08875,0.14473,-0.04786,-0.12678,-0.22997,-0.05175,0.05007,0.41785,0.21945,0.04118,-0.05501,-0.04976,0.00771,0.02448,-0.05767,-0.01045,-0.01845,-0.02818,0.00558,0.02144,-0.16322,-0.34862,-0.53080,-0.25304,-0.02923,0.31469,0.16672,0.07047,-0.18268,-0.16700,-0.08569,0.00333,-0.07514,-0.04002,-0.04982,-0.06831,-0.05292,-0.03269,-0.10820,-0.41687,-0.42930,-0.40340,-0.21705,0.14680,0.01525,-0.04003,-0.03365,-0.08063,-0.07782,-0.02406,-0.01521,-0.02737,-0.00052,-0.10762,-0.07188,-0.06957,-0.10088,-0.23649,-0.22938,-0.31296,-0.27047,-0.11686,-0.11202,-0.19560,0.28809,0.24958,0.10655,-0.02472,0.02053,-0.07981,0.00003,-0.01969,-0.09623,-0.06784,-0.05930,-0.06999,0.00681,-0.04316,-0.38766,-0.12508,0.02591,0.27809,0.30445,0.27332,0.24089,0.00609,0.01947,-0.00069,-0.01917,};
float weights_hidden_0[] = {-0.69244,-2.40255,-1.15615,-0.41458,-0.24507,-0.40264,1.52212,6.08586,0.01688,-0.39048,-3.38653,-0.41270,-0.60594,-0.75773,-1.67547,-0.69645,-1.46978,};
float weights_hidden_1[] = {1.82911,-1.11858,1.54313,2.14390,-0.28543,1.33316,-3.36936,0.44349,1.25313,0.83212,0.52233,0.66760,1.60254,0.85130,0.68509,1.84559,1.44915,};
float weights_hidden_2[] = {-0.63700,1.58063,-0.56266,-1.18590,-1.03778,-0.24866,-2.42649,2.42798,3.26640,-1.93780,0.78463,2.41230,-0.26845,-1.40854,2.33144,-0.87058,0.53954,};
float weights_hidden_3[] = {-0.53563,-0.65760,-1.90911,0.42607,-1.03157,-0.82656,0.52171,-2.17984,-2.19403,2.51253,2.05687,3.92820,-0.57883,-1.79198,2.11983,-0.56376,0.98434,};
float weights_hidden_4[] = {2.47683,-0.02160,0.38928,-0.84804,-0.42915,2.91898,0.74851,-0.48860,-1.46723,-1.24891,-2.04774,-1.55942,2.62016,1.30892,-1.60705,2.34159,0.76653,};
float weights_hidden_5[] = {-0.36535,-1.50190,2.92432,0.75338,-0.19929,-0.49068,0.45887,-1.54546,-0.28488,3.18698,3.02006,-2.22764,-0.48421,-0.96257,-2.10942,-0.41032,-0.11870,};
float weights_hidden_6[] = {-1.08643,-1.12327,4.56327,-0.55142,-0.27560,-0.46675,1.40302,-1.48310,-0.83536,-2.00729,-3.07713,-1.04791,-1.00023,2.86237,-1.94642,-1.15361,-0.97677,};
float weights_hidden_7[] = {-0.53730,2.15197,-1.21468,0.51236,3.99353,-0.95416,-2.61416,-1.96232,1.79065,1.83232,0.54397,0.98109,-1.13467,1.43460,0.73672,-0.41271,0.99932,};
float weights_hidden_8[] = {-0.21242,-0.96455,-2.94578,-0.73833,-0.18127,-0.38722,2.72237,-3.23336,0.06401,-1.94184,-2.00613,-1.42757,-0.01724,-1.09784,3.33831,-0.08005,-2.67686,};
float weights_hidden_9[] = {-0.22254,4.03840,-1.60264,-0.08131,-0.27033,-0.48842,0.97906,1.94746,-1.58703,-0.81668,3.64821,-1.36001,-0.10164,-0.42948,-1.87272,-0.05532,0.53161,};


class NeuralNetwork {

	vector<vector<double> > weights_input_;
	vector<vector<double> > weights_hidden_;

	vector<Feature> input_;
	vector<double> hidden_;
	vector<double> output_;

	public:

	NeuralNetwork(int num_input, int num_hidden, int num_output) {

		weights_input_.resize(num_input + 1);
		for (int input = 0; input < weights_input_.size(); ++input) {
			weights_input_[input].resize(num_hidden);
		}
		weights_hidden_.resize(num_hidden + 1);
		for (int hidden = 0; hidden < weights_hidden_.size(); ++hidden) {
			weights_hidden_[hidden].resize(num_output);
		}

		input_.resize(num_input);
		hidden_.resize(num_hidden);
		output_.resize(num_output);
	}

	NeuralNetwork(const vector<vector<double> >& weights_input,
			const vector<vector<double> >& weights_hidden) {

		weights_input_ = weights_input;
		weights_hidden_ = weights_hidden;
		input_.resize(static_cast<int>(weights_input.size()) - 1);
		hidden_.resize(static_cast<int>(weights_hidden.size()) - 1);
		output_.resize(weights_hidden.front().size());
	}

	int Classify(const vector<Feature>& input) {

		FeedForward(input);

		int index = 0;
		double max = output_[index];
		for (int output = 0; output < output_.size(); ++output) {
			if (output_[output] > max) {
				index = output;
				max = output_[index];
			}
		}

		return index;
	}

	void Probabilities(const vector<Feature>& input, vector<double>* probabilities) {

		FeedForward(input);

		probabilities->clear();
		*probabilities = output_;
	}

	private:

	void FeedForward(const vector<Feature>& features) {

		input_ = features;

		for (int hidden = 0; hidden < hidden_.size(); ++hidden) {

			double sum = 0;
			for (int input = 0; input < input_.size(); ++input) {
				sum += input_[input] * weights_input_[input][hidden];
			}
			//bias node
			sum += -weights_input_[input_.size()][hidden];

			hidden_[hidden] = Sigmoid(sum);
		}

		double norm = 0;
		for (int output = 0; output < output_.size(); ++output) {

			double sum = 0;
			for (int hidden = 0; hidden < hidden_.size(); ++hidden) {
				sum += hidden_[hidden] * weights_hidden_[hidden][output];
			}
			//bias node
			sum += -weights_hidden_[hidden_.size()][output];

			output_[output] = exp(sum);
			norm += output_[output];
		}

		for (int output = 0; output < output_.size(); ++output) {
			output_[output] /= norm;
		}
	}

	double Sigmoid(double input) {
		return 1.0 / (1 + exp(-input));
	}
};

void InitializeWeights(vector<vector<double> >* weights_input,
		vector<vector<double> >* weights_hidden) {

	weights_input->clear();
	weights_input->resize(kNumInput);
	for (int input = 0; input < kNumInput; ++input) {
		weights_input->at(input).resize(kNumHidden - 1);
	}

	for (int input = 0; input < weights_input->size(); ++input) {
		weights_input->at(input)[0] = weights_input_0[input];
		weights_input->at(input)[1] = weights_input_1[input];
		weights_input->at(input)[2] = weights_input_2[input];
		weights_input->at(input)[3] = weights_input_3[input];
		weights_input->at(input)[4] = weights_input_4[input];
		weights_input->at(input)[5] = weights_input_5[input];
		weights_input->at(input)[6] = weights_input_6[input];
		weights_input->at(input)[7] = weights_input_7[input];
		weights_input->at(input)[8] = weights_input_8[input];
		weights_input->at(input)[9] = weights_input_9[input];
		weights_input->at(input)[10] = weights_input_10[input];
		weights_input->at(input)[11] = weights_input_11[input];
		weights_input->at(input)[12] = weights_input_12[input];
		weights_input->at(input)[13] = weights_input_13[input];
		weights_input->at(input)[14] = weights_input_14[input];
		weights_input->at(input)[15] = weights_input_15[input];
	}

	weights_hidden->clear();
	weights_hidden->resize(kNumHidden);
	for (int hidden = 0; hidden < kNumHidden; ++hidden) {
		weights_hidden->at(hidden).resize(kNumOutput);
	}

	for (int hidden = 0; hidden < weights_hidden->size(); ++hidden) {
		weights_hidden->at(hidden)[0] = weights_hidden_0[hidden];
		weights_hidden->at(hidden)[1] = weights_hidden_1[hidden];
		weights_hidden->at(hidden)[2] = weights_hidden_2[hidden];
		weights_hidden->at(hidden)[3] = weights_hidden_3[hidden];
		weights_hidden->at(hidden)[4] = weights_hidden_4[hidden];
		weights_hidden->at(hidden)[5] = weights_hidden_5[hidden];
		weights_hidden->at(hidden)[6] = weights_hidden_6[hidden];
		weights_hidden->at(hidden)[7] = weights_hidden_7[hidden];
		weights_hidden->at(hidden)[8] = weights_hidden_8[hidden];
		weights_hidden->at(hidden)[9] = weights_hidden_9[hidden];
	}
}

/*
 * Image classes and functions
 * */

class Image {

	vector<vector<int> > image_;

	public:

	Image() {}

	Image(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}

	Image(const vector<vector<int> >& image_vector) {
		image_.resize(image_vector.size());
		for (int y = 0; y < image_vector.size(); ++y) {
			image_[y].resize(image_vector[y].size());
			for (int x = 0; x < image_[y].size(); ++x) {
				image_[y][x] = image_vector[y][x];
			}
		}
	}

	Image(const Image& rhs) : image_(rhs.image_) {}

	int& at(int x, int y) {
		return image_[y][x];
	}

	const int& at(int x, int y) const {
		return image_[y][x];
	}

	int y_size() const {
		return image_.size();
	}

	int x_size() const {
		if (y_size() == 0) {
			return 0;
		}
		return image_[0].size();
	}

	void resize(int x_width, int y_width) {
		image_.resize(y_width);
		for (int y = 0; y < y_width; ++y) {
			image_[y].resize(x_width);
		}
	}
};

class ImageProjection {

	public:

	static vector<int> GetXProjection(const Image& input_image) {

		vector<int> projection(input_image.x_size(), 0);
		for (int x = 0; x < input_image.x_size(); ++x) {
			for (int y = 0; y < input_image.y_size(); ++y) {
				projection[x] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static vector<int> GetYProjection(const Image& input_image) {

		vector<int> projection(input_image.y_size(), 0);
		for (int y = 0; y < input_image.y_size(); ++y) {
			for (int x = 0; x < input_image.x_size(); ++x) {
				projection[y] += input_image.at(x, y);
			}
		}
		return projection;
	}

	static double GetCenterOfMass(const vector<int> projection) {

		double center = 0;
		int norm = 0;
		for (int coord = 0; coord < projection.size(); ++coord) {
			center += coord * projection[coord];
			norm += projection[coord];
		}
		return center / norm;
	}
};


int SymbolToDigit(char symbol) {

	switch (symbol) {
		case '.':
			return 0;
		case '%':
			return 1;
		case '#':
			return 2;
		case '@':
			return 3;
	}

	return -1;
}

void ReadImage(Image* im) {

	vector<vector<int> > image_vector;

	string str;
	do {
		getline(cin, str);
		vector<int> line;

		if (!str.empty()) {
			for (int i = 0; i < str.size(); ++i) {
				int digit = SymbolToDigit(str[i]);
				if (digit >= 0 && digit <= 3) {
					line.push_back(digit);
				}
			}
			image_vector.push_back(line);
		}
	} while (!str.empty());

	im->resize(image_vector.front().size(), image_vector.size());
	for (int y = 0; y < image_vector.size(); ++y) {
		for (int x = 0; x < image_vector[y].size(); ++x) {
			 im->at(x, y) = image_vector[y][x];
		}
	}
}

/*
 * ImageNormalizer class
 * */

struct Box {
	int x_min;
	int y_min;
	int x_max;
	int y_max;

	Box(int x_min_value, int y_min_value, int x_max_value, int y_max_value) :
	x_min(x_min_value), y_min(y_min_value), x_max(x_max_value), y_max(y_max_value) {
	}
};


class ImageNormalizer {

	public:

	static Image Normalize(const Image& input_image, int x_width, int y_width,
			bool shrink_wide_image) {

		Box bounding_box = FindBoundingBox(input_image, shrink_wide_image);
		Image im = ExtractImage(input_image, bounding_box);
		Image normalized_image = Rescale(im, x_width, y_width);

		return normalized_image;
	}

	static Box FindBoundingBox(const Image& input_image, bool shrink_wide_image) {
		vector<int> y_projection = ImageProjection::GetYProjection(input_image);

		int y_min = 0;
		while (y_projection[y_min] == 0 && y_min + 1 < y_projection.size()) {
			++y_min;
		}

		int y_max = static_cast<int>(y_projection.size()) - 1;
		while (y_projection[y_max] == 0 && y_max > 0) {
			--y_max;
		}

		if (y_min > y_max) {
			y_min = 0;
			y_max = 0;
		}

		int y_width = y_max - y_min + 1;
		int x_width = static_cast<int> (y_width / kNormalizerDigitAspectRatio);

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);
		int x_center = ImageProjection::GetCenterOfMass(x_projection);


		int x_min = 0;
		while (x_projection[x_min] == 0 && x_min + 1 < x_projection.size()) {
			++x_min;
		}

		int x_max = static_cast<int>(x_projection.size()) - 1;
		while (x_projection[x_max] == 0 && x_max > 0) {
			--x_max;
		}

		if (shrink_wide_image) {
			x_min = x_center - 0.5 * x_width;
			x_max = x_center + 0.5 * x_width;
		} else {
			x_min = std::min(static_cast<int>(x_center - 0.5 * x_width), x_min);
			x_max = std::max(static_cast<int>(x_center + 0.5 * x_width), x_max);
		}

		return Box(x_min, y_min, x_max, y_max);
	}

	static Image ExtractImage(const Image& input_image, const Box& bbox) {

		Image out_image((bbox.x_max - bbox.x_min + 1), (bbox.y_max - bbox.y_min + 1));

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				out_image.at(x, y) = 0;

				int x_input = bbox.x_min + x;
				int y_input = bbox.y_min + y;

				if ((x_input >= 0 && y_input < input_image.y_size()) &&
						(x_input >= 0 && x_input < input_image.x_size())) {
					out_image.at(x, y) = input_image.at(x_input, y_input);
				}
			}
		}

		return out_image;
	}

	static Image Rescale(const Image& input_image, int x_width, int y_width) {

		Image out_image(x_width, y_width);

		for (int y = 0; y < out_image.y_size(); ++y) {
			for (int x = 0; x < out_image.x_size(); ++x) {

				double x_rescale = (static_cast<double> (input_image.x_size()) - 1) /
						(static_cast<int> (out_image.x_size()) - 1);
				int x_input = x * x_rescale;

				double y_rescale = (static_cast<double> (input_image.y_size()) - 1) /
						(static_cast<int> (out_image.y_size()) - 1);
				int y_input = y * y_rescale;

				out_image.at(x, y) = input_image.at(x_input, y_input);
			}
		}

		return out_image;
	}
};


/*
 * FeatureExtractor class
 * */

class FeatureExtractor {

	public:

	static void Extract(const Image& input_image, vector<Feature>* feature_vector,
			bool shrink_wide_image = true) {

		Image feature_image = ImageNormalizer::Normalize(
				input_image, kFeatureImageXSize, kFeatureImageYSize, shrink_wide_image);

		feature_vector->clear();
		for (int y = 0; y < feature_image.y_size(); ++y) {
			for (int x = 0; x < feature_image.x_size(); ++x) {

				if (feature_image.at(x, y) == 0) {
					feature_vector->push_back(0);
				} else {
					feature_vector->push_back(1);
				}
			}
		}
	}
};


/*
 * NNImageSegmenter class = Neural Network Image segmenter
 * */


struct SegmentationProbability {
	int size;
	vector<double> prob;

	SegmentationProbability() {}

	SegmentationProbability(int size_value, vector<double> probabilities_vector) : size(size_value),
			prob(probabilities_vector) {}
};


class NNImageSegmenter {

	NeuralNetwork* nnetwork_;

	public:

	explicit NNImageSegmenter(NeuralNetwork* nnetwork) : nnetwork_(nnetwork) {}

	int GetNumOfSegments(const Image& input_image) {
		vector<SegmentationProbability> probabilities;
		GetSegmentationProbabilities(input_image, kMaxNumOfDigits, &probabilities);

		int imax = 0;
		double max = probabilities[0].prob[imax];

		for (int num_segments = 1; num_segments < probabilities.size(); ++num_segments) {

			double mean_probability = 0;
			for (int segment = 0; segment < probabilities[num_segments].prob.size();
					++segment) {
				mean_probability += probabilities[num_segments].prob[segment];
			}
			mean_probability /= probabilities[num_segments].size;

			if (max < mean_probability) {
				imax = num_segments;
				max = mean_probability;
			}
		}

		return imax + 1;
	}

	void GetSegmentationProbabilities(const Image& input_image, int max_num_of_segments,
			vector<SegmentationProbability>* probabilities) {

		probabilities->clear();
		probabilities->resize(max_num_of_segments);
		vector<Image> images;

		for (int num_of_segments = 1; num_of_segments <= max_num_of_segments; ++num_of_segments) {

			probabilities->at(num_of_segments - 1).size = num_of_segments;
			SplitImage(input_image, num_of_segments, &images);

			for (int segment = 0; segment < num_of_segments; ++segment) {

				vector<int> features;
				FeatureExtractor::Extract(images[segment], &features, false);

				vector<double> classes_probabilities;
				nnetwork_->Probabilities(features, &classes_probabilities);

				double max_probability = *(std::max_element(classes_probabilities.begin(),
						classes_probabilities.end()));

				probabilities->at(num_of_segments - 1).prob.push_back(max_probability);
			}
		}
	}

	void SplitImage(const Image& input_image, int num_of_segments, vector<Image> *images) {

		images->clear();

		for (int segment = 0; segment < num_of_segments; ++segment) {

			int x_min = segment * input_image.x_size() / num_of_segments;
			int x_max = static_cast<int>((segment + 1) *
					input_image.x_size() / num_of_segments) - 1;
			int y_min = 0;
			int y_max = input_image.y_size() - 1;

			images->push_back(ImageNormalizer::ExtractImage(
					input_image, Box(x_min, y_min, x_max, y_max)));
		}
	}
};

/*
 * CCImageSegmenter class = Connected Components Image segmenter
 * */

class CCImageSegmenter {

	struct Compare {
	  bool operator() (int x, int y) { return (x > y);}
	} comparator;

	struct Point {
		int x;
		int y;

		Point(int x_value, int y_value) : x(x_value), y(y_value) {}
	};

	vector<int> cc_power_;
	int num_of_components_;


	public:

	CCImageSegmenter() {}

	int GetNumOfSegments(const Image& input_image) {

		FindConnectedComponents(input_image);

		double fraction_in_cc = 0;
		for (int i = 1; i < cc_power_.size(); ++i) {

			fraction_in_cc += static_cast<double>(cc_power_[i]) / cc_power_[0];
			if (fraction_in_cc >= kCCSegmenterThreshold) {
				return i;
			}
		}

		return num_of_components_;
	}

	private:

	void FindConnectedComponents(const Image& input_image) {

		num_of_components_ = 0;

		Image im_normalized = Normalize(input_image);
		Image im = Negate(im_normalized);

		int component = 0;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == kNotVisited) {
					++component;
					Mark(component, x, y, &im);
				}
			}
		}

		num_of_components_ = component;
		cc_power_.clear();
		cc_power_.resize(component + 1, 0);

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) > 0) {
					++cc_power_[0];
					++cc_power_[im.at(x, y)];
				}
			}
		}

		if (cc_power_.size() > 2) {
			vector<int>::iterator iter = cc_power_.begin();
			++iter;
			std::sort(iter, cc_power_.end(), comparator);
		}
	}

	void Mark(int component, int x, int y, Image* im) {

		im->at(x, y) = component;

		vector<Point> neighbours = PointNeighbours(x, y, *im);
		for (int index = 0; index < neighbours.size(); ++index) {

			if (im->at(neighbours[index].x, neighbours[index].y) == kNotVisited) {
				Mark(component, neighbours[index].x, neighbours[index].y, im);
			}
		}
	}

	vector<Point> PointNeighbours(int x, int y, const Image& im) {

		vector<Point> neighbours;
		for (int row = y - 1; row <= y + 1; ++row) {
			for (int column = x - 1; column <= x + 1; ++column) {

				if ((row >= 0 && row < im.y_size()) &&
						(column >= 0 && column < im.x_size())) {
					if (row != x || column != y) {
						neighbours.push_back(Point(column, row));
					}
				}
			}
		}

		return neighbours;
	}

	Image Normalize(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) == 3) {
					im.at(x, y) = 1;
				} else {
					im.at(x, y) = 0;
				}
			}
		}

		return im;
	}

	Image Negate(const Image& input_image) {

		Image im = input_image;

		for (int y = 0; y < im.y_size(); ++y) {
			for (int x = 0; x < im.x_size(); ++x) {
				if (im.at(x, y) != 0) {
					im.at(x, y) = kNotVisited;
				}
			}
		}

		return im;
	}
};

/*
 * ProjectionImageSegmenter class
 * */

class ProjectionImageSegmenter {

	public:

	int GetNumOfSegments(const Image& input_image) {

		vector<int> x_projection = ImageProjection::GetXProjection(input_image);

		int num_of_digits = 0;
		for (int x = 0; x + 1 < x_projection.size(); ++x) {
			if (x_projection[x] == 0 && x_projection[x + 1] > 0) {
				++num_of_digits;
			}
		}
		return num_of_digits;
	}
};


class Scanner {

	NeuralNetwork* nnetwork_;
	NNImageSegmenter nn_segmenter_;
	CCImageSegmenter cc_segmenter_;
	ProjectionImageSegmenter projection_segmenter_;

	public:

	Scanner(NeuralNetwork* neural_network) : nnetwork_(neural_network),
		nn_segmenter_(neural_network) {}

	void Recognize(const Image& im) {

		int num_of_segments = projection_segmenter_.GetNumOfSegments(im);

		if (num_of_segments != 3) {
			num_of_segments = cc_segmenter_.GetNumOfSegments(im);

			if (num_of_segments > kMaxNumOfDigits) {
				num_of_segments = nn_segmenter_.GetNumOfSegments(im);
			}
		}

		vector<Image> images;
		nn_segmenter_.SplitImage(im, num_of_segments, &images);

		for (int segment = 0; segment < num_of_segments; ++segment) {

			vector<int> features;
			FeatureExtractor::Extract(images[segment], &features);

			cout << nnetwork_->Classify(features);
		}
	}
};


int main() {
	Image in_image;
	ReadImage(&in_image);

	vector<vector<double> > weights_input;
	vector<vector<double> > weights_hidden;
	InitializeWeights(&weights_input, &weights_hidden);
	NeuralNetwork nnet(weights_input, weights_hidden);

	Scanner digit_scanner(&nnet);
	digit_scanner.Recognize(in_image);
	cout << endl;

	return 0;
}


