// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={16,17,15,4,11,2,-1,-4,-4,-5,-1,-6,1,3,-7,0,10,11,1,-3,7,-8,-5,-10,-8,-3,1,1,-6,-6,-13,2,12,3,0,-6,-5,0,-1,-9,4,5,7,-1,5,-5,-2,-2,10,0,5,-8,-1,3,4,-5,-2,4,6,-4,-3,-8,8,-10,0,5,2,-2,19,14,4,7,-6,8,7,2,8,5,7,15,1,-1,7,4,11,5,3,0,-6,2,1,1,-1,-3,9,16,16,2,10,-1,3,3,-7,-5,-14,-3,-12,-24,-9,-6,1,26,24,7,-5,-11,-4,0,-3,-15,-19,-16,-14,-11,-10,-9,-3,8,11,-1,-2,-8,-5,0,-2,-17,1,-3,-3,-13,-8,-5,12,-1,14,6,7,2,1,-5,-3,-13,-4,-13,-5,-2,-4,9,3,-6,13,13,10,6,4,-3,8,-1,-7,-5,1,1,6,-7,-7,-1,12,3,16,11,8,9,0,-2,-6,8,4,-7,3,-6,-9,-2,11,-2,1,-6,12,0,2,-8,-12,0,3,-1,4,1,3,-11,2,5,5,3,3,13,12,5,-10,8,-2,-10,3,-4,2,-16,4,3,10,0,2,6,2,-2,-3,-2,-4,-6,4,7,-9,-13,5,-3,-7,-5,-10,-9,-2,-6,-3,-5,-6,-2,3,-2,-8,2,12,19,-11,-12,-29,-12,-13,-14,-18,1,-7,7,23,19,5,22,0,27,7,9,-16,-4,-8,4,-9,-2,-2,-12,-4,-11,-5,11,13,11,0,9,8,13,11,13,-7,8,1,1,-2,-11,-12,14,6,-15,-1,-3,-8,0,17,7,6,15,0,-5,-8,-19,-11,11,-10,-3,12,1,2,9,5,16,10,14,-1,14,-1,-9,1,11,-1,4,-1,-9,-5,-3,17,6,-2,3,-2,16,-11,-6,6,9,11,6,-12,-15,-1,-10,8,0,-1,8,1,-5,-15,-12,4,20,15,20,-3,-1,-11,-10,4,2,-3,-14,-16,-14,-15,-19,-5,16,5,-13,-12,-15,-10,-1,-2,3,-9,4,-5,-8,-16,-14,2,12,1,-3,-20,-8,9,-8,2,8,2,4,-7,-5,-3,-2,6,0,-7,5,-3,-14,-5,4,7,4,-6,5,2,4,9,7,1,-6,-5,-22,2,-7,-2,10,-8,-3,-12,-3,7,3,10,3,-16,-16,2,-16,0,-14,10,6,-2,4,-7,-2,3,10,27,5,2,-18,10,3,-14,-5,-5,-16,2,-11,-5,4,-2,3,9,-6,2,-3,4,9,-9,-9,-9,0,-2,7,-7,17,-7,10,8,4,16,23,15,14,11,21,-4,4,-9,-4,1,-4,-2,11,3,7,16,28,13,6,11,6,15,2,9,0,-3,-11,-9,-3,-4,3,3,-10,-1,-5,-12,-3,-11,-12,-3,-3,0,2,-8,-6,4,-2,-17,2,5,-1,3,-6,-7,-3,-15,-8,-11,-6,0,-1,4,-4,0,-4,2,-1,-7,2,3,1,3,-7,-9,-5,-5,11,1,1,7,1,-6,-2,-6,-1,7,9,3,7,2,3,-6,0,10,-4,0,8,10,9,7,6,5,1,2,-2,3,-11,-4,-2,-2,3,8,13,4,17,6,1,3,-9,-18,0,-1,-3,-4,-10,5,2,15,1,2,-3,-10,-8,2,-5,-16,-9,-4,-3,0,7,14,21,4,-5,-2,5,5,6,4,4,-19,-2,-4,-6,12,1,8,5,-8,-22,2,15,11,2,5,8,-1,3,-3,2,-2,-17,-6,-10,-17,-32,7,-1,-10,1,5,-4,6,1,-3,1,-1,-17,-11,-13,-23,-23,6,-4,-6,-9,4,6,2,-3,-3,5,-7,-10,-4,-12,-8,-5,9,3,0,1,15,19,9,0,10,2,-3,-4,12,2,8,13,5,1,-2,4,10,8,17,0,-2,13,7,0,4,-7,0,19,10,10,2,5,4,-5,-2,-2,3,5,-4,-6,-2,0,12,22,16,27,13,-11,-10,-14,-6,-12,-4,-3,-8,-3,0,15,25,15,46,19,41,6,-14,25,-8,12,-3,-10,-8,-17,-30,-4,-11,-13,12,17,-10,-15,2,-20,13,14,0,4,0,-7,-8,3,-8,-28,21,2,5,-11,18,16,-3,-15,-5,-12,-8,-17,17,-3,-7,-22,13,13,29,4,0,-13,-26,-12,-13,10,3,-15,-8,-7,-16,17,-6,-11,28,-18,19,15,23,4,8,7,9,-5,13,12,26,14,-3,-25,-12,-24,-11,-21,14,10,28,2,5,37,18,4,7,11,20,-14,-39,-26,3,-15,-2,2,-2,-12,8,-5,0,-17,4,-6,20,7,-11,-17,8,-3,18,18,-20,-25,-11,-9,-1,-4,-35,-11,19,8,-2,-19,-6,-3,-8,28,5,4,9,20,11,11,5,-24,7,-14,1,-21,-8,-36,18,-1,-19,-5,0,9,-5,23,41,23,23,-1,5,1,-15,-21,-14,-7,-1,-14,4,-16,0,6,38,12,17,-16,3,-6,7,-2,4,-18,-18,-6,1,3,8,-1,7,17,19,24,-9,-5,29,-2,-1,-21,-1,4,5,-1,7,-20,14,-2,18,21,7,-4,-3,16,12,-6,-13,-2,-1,-12,-1,-26,2,6,28,-8,-3,-1,-21,3,-1,3,10,-8,-2,0,8,-6,-8,-8,36,22,6,-6,-22,-4,-20,-11,-23,-13,-24,-11,-4,10,-27,-23,8,10,10,8,3,-3,-2,4,-7,-10,0,0,10,-3,-1,-1,6,3,-10,-8,-8,-11,2,-9,-13,-6,-1,-11,1,-1,-4,6,6,-9,0,-8,-5,-13,-6,-17,-6,5,1,-6,2,4,3,3,5,-5,-8,-10,-7,-6,-10,-14,4,-3,-5,0,-6,-5,-7,-3,1,-3,0,5,-7,1,1,0,3,-5,1,8,8,1,-2,-1,5,-6,-2,-4,-3,-5,0,-2,6,-3,4,-5,7,-7,-5,-4,2,2,-5,9,-1,2,-3,11,3,6,0,-9,1,-3,-3,-4,-3,-3,2,7,5,6,-8,-4,-7,2,-7,-11,1,-10,-1,-1,2,5,6,11,12,7,8,5,6,3,5,-4,1,1,9,6,10,14,18,9,-3,2,1,-3,4,8,5,-7,-2,1,3,8,1,18,7,11,3,6,8,3,7,12,1,-3,4,-7,2,1,3,6,5,-3,5,9,6,4,13,12,3,-2,5,-6,6,-1,12,2,-12,0,9,12,-5,-1,9,7,4,-1,-5,5,2,2,3,-9,-10,-10,1,-9,-5,-5,-1,-5,4,-4,-1,-6,-3,-2,8,-12,-13,-16,-18,-13,-18,-9,-2,-3,0,7,-1,-6,2,8,9,5,0,-10,-12,-18,-14,-13,-3,-11,5,1,2,8,15,-7,11,8,16,20,26,3,-6,-20,-1,-17,-14,-25,-1,9,20,-7,8,-7,20,7,15,1,-2,-10,-10,-14,-8,-10,-3,-5,4,16,5,-11,15,11,-6,5,6,-1,-8,7,19,15,-5,-13,8,1,-2,-14,-9,-1,2,17,-12,-7,16,13,7,-15,4,-15,-15,-9,-22,-12,-15,21,6,6,1,0,-3,-9,-15,4,-2,-9,-21,-12,4,9,21,15,4,23,18,-14,7,-8,-9,-20,0,-19,5,-1,9,10,7,11,14,12,11,-3,0,2,2,-6,-27,11,7,5,3,4,-1,-4,-14,-10,-17,1,1,6,16,3,2,-13,19,-14,28,21,9,17,-6,-8,-5,-21,-7,-4,-6,-9,5,7,-7,7,5,-14,-17,-7,-4,17,-16,-1,-1,-8,-6,-22,2,1,8,-2,-14,-35,-19,-13,-5,4,-17,-12,13,-4,-13,-1,5,12,5,0,12,-2,9,-3,23,-7,-7,-1,0,-1,1,3,-5,5,1,8,21,-17,15,8,-3,-5,-15,-6,12,7,10,-1,3,0,8,10,39,18,-3,2,-5,-8,-6,13,20,10,16,-14,-11,5,10,5,34,27,7,-8,-3,-15,-16,-5,1,4,-9,-5,5,4,9,-4,18,17,3,28,-6,-18,-6,-20,-6,-2,1,-12,7,-22,3,6,30,17,10,-7,-11,0,-18,-13,-2,-2,-15,12,0,-12,-13,19,15,-4,-15,-9,-3,-5,2,4,-5,17,-26,-1,-3,-18,6,-9,3,-4,-6,0,6,-5,-8,-2,8,-10,-16,-19,-22,-34,0,23,6,-25,3,-6,-3,-16,-20,-14,-8,2,-13,-26,-1,0,-27,15,24,-10,3,-2,1,3,-1,6,20,-3,-6,-20,-6,-2,-12,-8,18,-2,-3,5,-7,-18,0,-4,0,-6,0,-27,-15,-14,-18,-16,29,9,-2,-15,-6,-14,3,6,4,4,12,9,3,0,-3,-11,31,21,-6,-7,12,-6,9,9,4,9,4,-3,14,24,12,-1,11,12,1,1,7,-13,-8,-1,-3,6,6,-11,8,1,15,-11,6,20,14,20,12,-1,7,-2,-15,-2,1,10,6,4,9,-9,14,31,33,18,7,21,10,-5,-6,0,8,-7,14,3,-3,0,-4,1,10,-7,-3,6,2,-10,4,-4,9,-1,20,-14,-12,-7,3,-2,-2,0,-7,10,10,-2,3,-2,-3,6,13,-6,16,13,-2,-17,13,-2,15,12,5,-5,1,7,6,3,-2,2,3,-7,-11,-4,2,-4,7,5,8,-6,6,-13,-15,-9,-10,2,15,8,18,9,3,-9,-2,-3,6,0,-10,-14,-13,-3,19,16,3,11,14,29,31,20,7,4,-10,-7,-12,-3,-10,-12,-7,1,9,15,13,7,3,-5,7,4,5,-10,6,4,4,-7,-12,1,9,17,16,10,11,-5,4,-1,0,4,4,0,-3,-15,0,-4,5,6,-3,7,-5,-7,1,-5,-4,6,6,8,8,-12,-3,10,17,-3,17,6,6,-11,6,6,4,-3,10,3,0,-2,8,10,-3,-8,7,-1,5,0,0,-8,4,-5,-9,-4,10,7,4,19,8,-13,10,3,-8,-4,-19,1,-8,-7,-9,-6,-3,-10,0,-3,-24,-11,12,10,-11,-7,-17,-1,-4,3,0,2,10,-1,-5,-8,-8,16,7,-5,-13,-9,12,-15,-7,-10,-3,2,-2,-6,7,-6,-5,-1,3,6,0,4,8,0,-3,-5,2,-1,-3,-7,-6,-7,-1,5,12,12,0,-6,6,6,-3,3,10,-11,0,-4,-1,-13,-1,-5,11,5,-1,5,3,19,21,3,4,8,2,12,-5,-5,-3,1,5,-4,4,2,10,3,0,-5,0,1,2,7,-2,-5,-1,-3,1,2,-8,-6,2,-3,-11,-1,0,8,6,-8,-3,-7,-5,8,5,0,5,-5,3,-6,-2,5,0,-7,0,-9,-1,-11,-3,-9,8,-1,6,-21,-19,-2,2,-1,-14,-12,-1,-5,0,-19,-19,-5,25,19,7,14,10,-8,6,-4,-11,2,-6,-6,-14,-12,-4,1,18,5,1,17,-1,3,1,-14,-3,-6,3,-24,-3,-3,-9,5,7,10,10,-11,-3,8,-4,-12,-10,-13,-10,-25,7,-17,4,-2,18,-1,8,-2,-3,-12,6,-3,5,-8,-2,-9,18,1,1,-12,2,12,12,-9,16,-3,-9,8,-13,-5,-11,3,9,4,18,5,-1,8,12,0,13,6,17,3,-11,-8,3,-4,11,9,27,11,-21,3,-2,-1,11,26,24,-1,11,-5,-4,-21,-11,-10,-6,-17,-14,-12,1,-8,-6,12,14,-3,-7,1,-15,-14,-5,-15,8,-22,-13,-7,-2,-9,8,3,-2,17,14,14,-5,-2,4,0,5,-12,3,14,24,22,32,6,-14,7,14,15,20,-2,6,12,8,-14,22,30,22,1,2,-12,-19,-13,1,2,6,10,6,1,16,6,8,6,0,-8,-9,8,-16,-7,-8,-2,8,-9,-15,-9,-6,8,33,4,3,-6,-5,5,-9,-2,-7,-6,0,-14,-6,8,4,8,5,10,0,-7,8,1,2,3,-4,2,3,-7,-2,-5,-4,-1,3,0,19,-2,-3,6,-9,0,-2,-8,-15,-21,1,-10,15,7,19,0,-10,2,-13,-3,-9,-4,-10,-12,-15,-13,-20,25,6,-3,15,0,-1,-7,6,13,15,-6,4,9,-3,-6,-5,-16,-9,2,16,12,9,-11,-12,-1,1,1,-2,9,-7,-15,-7,-1,-2,-17,23,9,-1,-6,7,10,2,-1,-12,4,-3,0,5,-7,-2,6,18,-4,3,-5,8,3,-2,-10,-9,3,5,2,9,-4,-7,3,7,1,-1,-4,18,0,-13,4,6,15,10,-14,7,2,-3,3,20,13,10,6,-5,4,4,5,-1,-5,0,-5,-8,-7,5,17,27,7,12,5,-2,-3,-2,-4,-24,-12,1,-12,-13,3,18,26,11,16,10,-8,10,-5,-5,7,-12,-7,-22,-13,3,1,3,22,-8,5,9,8,4,4,13,7,3,15,-12,9,7,-3,7,7,-12,-20,-2,7,2,13,20,19,9,1,7,-1,-3,1,4,3,5,-12,-19,-21,-8,7,10,4,-1,7,2,-1,-1,-4,2,3,-9,-19,-6,-15,1,-14,-1,-4,-11,-6,-3,-4,5,2,-4,-9,12,-3,4,-1,1,-8,-16,-4,6,15,-7,-5,15,1,10,-21,7,-1,2,-17,-3,-12,-3,-4,-12,4,-1,-3,9,0,-1,-11,8,7,4,-2,1,5,-3,-6,-10,-10,0,-14,-10,-8,5,-4,10,0,-3,5,3,-7,-12,-3,-8,-15,-17,-17,-17,-10,-8,-4,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf)
			if ((cnt==m-1)||(cnt==m)) {yright[k]=j; lf=false; k++;}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])+10) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

