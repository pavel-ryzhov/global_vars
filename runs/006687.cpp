// PROB:scanner
// LANG:C++
//

//#include "stdafx.h"
#include <queue>
#include <iostream>
#define MaxN 1000

using namespace std; 

queue <int *> Q;

struct Cell {int x; int y; };

Cell XY[17];

int weight[10][256]={15,16,12,1,8,3,0,-3,-3,-6,-2,-9,-2,0,-6,1,9,8,0,-2,8,-7,-4,-11,-7,-4,0,0,-7,-5,-14,3,11,2,1,-5,-4,-1,-2,-10,5,4,6,-2,4,-4,-1,-3,9,1,6,-7,-2,2,3,-6,-1,3,7,-3,-4,-7,9,-11,1,6,3,-3,18,13,3,6,-5,7,8,1,7,6,8,16,2,0,6,3,10,4,2,-3,-7,3,2,0,-2,-2,10,17,17,3,9,-2,4,4,-6,-6,-13,0,-11,-23,-8,-3,4,27,25,8,-4,-10,-3,-1,-2,-14,-18,-15,-15,-12,-11,-6,0,11,12,0,-1,-7,-6,-1,-1,-18,2,-4,-4,-14,-9,-4,15,2,13,7,8,1,0,-4,-2,-14,-3,-14,-6,-3,-5,10,6,-3,12,12,11,7,3,-2,7,-2,-6,-6,0,0,5,-6,-4,2,9,4,15,12,5,6,-1,-3,-5,7,3,-8,2,-5,-6,-1,8,-1,2,-3,11,1,3,-7,-11,1,4,0,3,2,6,-10,1,2,4,4,4,14,11,4,-9,7,-3,-11,4,-1,3,-17,3,0,7,-1,3,7,3,-1,0,-1,-3,-5,3,8,-10,-12,4,-4,-8,-4,-9,-8,-1,-5,-2,-4,-7,-3,2,-1,-7,3,12,13,-11,-8,-23,-10,-17,-10,-14,9,-1,13,21,17,3,16,2,21,5,7,-14,2,0,6,-7,-2,-2,-10,-6,-5,-1,7,13,9,0,15,8,15,9,13,-5,4,-1,-1,-6,-13,-10,18,8,-13,1,3,-6,0,19,5,0,5,-2,-7,-10,-19,-7,11,-8,-3,10,5,4,17,5,12,8,10,-3,10,1,-7,5,9,1,4,-1,-3,-5,-1,11,8,-2,-1,-4,12,-11,-4,10,7,15,6,-12,-15,1,-12,8,0,-1,4,1,-3,-11,-10,4,20,15,18,-1,-1,-9,-6,4,0,-3,-14,-14,-12,-15,-13,-3,12,7,-11,-10,-15,-6,-3,-4,1,-5,2,-9,-4,-16,-8,0,12,5,-1,-16,-10,9,-10,-4,4,2,0,-5,-1,-3,-2,2,0,-3,9,1,-14,-3,0,3,4,-6,7,4,2,9,9,-1,-6,-3,-18,2,-13,-4,4,-6,-1,-12,3,5,3,10,3,-18,-16,2,-14,-2,-18,10,2,2,0,-5,-2,-3,8,25,5,-2,-14,10,3,-12,-5,-3,-12,0,-13,-5,2,-2,3,9,-6,2,3,2,7,-7,-5,-9,-2,-8,5,-9,11,-7,6,8,2,14,27,13,14,11,27,0,6,-7,0,-3,-2,0,15,3,13,18,30,15,10,15,14,13,6,7,2,1,-9,-9,-7,-4,-1,1,-12,3,-1,-6,-3,-5,-6,1,-1,2,2,-4,-8,2,-2,-13,2,5,1,5,-6,-9,-3,-11,-6,-11,-8,2,-3,0,-6,0,-4,6,1,-5,4,5,1,1,-11,-9,-5,-3,9,3,-1,5,3,-4,-2,-4,5,5,3,1,7,4,1,-2,0,12,-4,0,6,6,5,5,6,3,-3,2,2,5,-9,0,-2,4,3,6,11,4,15,6,3,7,-3,-12,2,-1,-1,-6,-8,9,2,13,1,4,-1,-8,-6,2,-9,-14,-5,-2,-3,-2,1,10,15,0,-5,2,1,3,6,2,-2,-11,0,-4,-6,8,-1,6,5,-8,-16,2,11,9,0,5,6,1,1,-5,4,-2,-15,-4,-10,-13,-24,1,-1,-8,-1,5,-4,2,-1,-3,1,-1,-11,-7,-9,-17,-17,2,-2,-6,-5,4,4,-2,-1,-1,-1,-9,-12,-6,-8,-4,-7,9,1,-2,5,13,17,13,0,4,0,1,-6,8,4,8,9,9,3,-2,8,10,8,17,-2,-2,11,7,-2,4,-3,0,17,8,10,4,9,6,-3,-2,-2,3,3,-6,-6,-2,0,10,22,12,23,15,-7,-6,-14,-8,-12,-4,-1,-2,1,2,13,25,13,41,18,30,9,-5,20,-3,17,-2,-3,-11,-14,-25,-3,-10,-12,13,14,-9,-6,-1,-17,12,9,-3,-5,-7,-12,-7,2,-7,-25,14,1,6,-12,11,13,2,-12,0,-3,-5,-18,10,0,0,-19,14,14,20,-1,-1,-10,-21,-15,-8,13,4,-8,-13,-6,-11,18,-5,-8,17,-19,20,6,18,1,11,4,10,-2,10,9,21,17,6,-24,-21,-25,-2,-16,11,9,25,-3,8,28,19,-1,8,12,17,-13,-32,-19,0,-10,-5,-1,-13,-15,5,-2,-5,-20,-1,3,19,2,-12,-16,7,0,17,13,-17,-14,-12,-12,-6,-13,-30,-6,16,3,-7,-14,-7,-2,-13,21,14,3,8,15,8,8,10,-23,6,-11,0,-14,-9,-35,13,0,-14,-8,3,16,-6,16,32,12,22,4,6,0,-14,-16,-15,-12,-4,-11,5,-13,5,7,29,9,12,-21,-4,-5,8,-5,3,-21,-11,-3,0,-4,13,0,12,16,18,21,-2,10,20,-5,-2,-16,2,5,4,-6,6,-13,19,5,13,18,2,-7,0,5,3,-11,-6,-1,-2,-11,6,-23,1,-5,27,3,6,0,-20,4,2,8,11,-9,-1,-3,5,-1,-3,-7,29,25,5,3,-23,-5,-17,-10,-14,-12,-13,0,7,11,-20,-14,10,10,10,6,1,-5,-6,2,-7,-12,0,2,10,-1,1,5,8,5,-8,-8,-10,-11,2,-7,-13,-4,-1,-7,1,3,-2,10,8,-5,2,-6,-7,-13,-6,-15,-4,7,3,-4,2,6,3,5,5,-5,-8,-12,-9,-8,-10,-14,4,-1,-3,2,-8,-5,-7,-1,1,-3,-2,1,-5,1,1,2,3,-3,3,8,6,1,-2,1,5,-6,-4,-6,-1,-5,2,-2,6,-3,6,-5,5,-7,-5,-2,2,2,-5,7,1,2,-3,11,3,8,2,-7,1,-3,-3,-2,-3,-3,0,7,7,4,-8,-4,-5,4,-5,-9,1,-8,-1,-1,2,3,4,9,10,5,6,5,6,1,3,-2,1,1,7,4,12,12,16,7,-3,2,3,-3,4,8,5,-5,-2,3,3,8,3,18,7,9,3,6,6,1,7,12,1,-3,4,-7,0,1,5,4,3,-3,5,9,6,4,15,14,3,-2,5,-6,4,1,14,2,-12,0,7,10,-5,-1,9,7,2,1,-5,3,0,2,5,-9,-10,-10,-1,-9,-5,-5,-1,-5,2,-2,-3,-8,-5,-2,8,-10,-11,-14,-16,-11,-16,-7,0,-3,0,7,-3,-4,2,10,9,5,4,-4,-10,-14,-10,-7,-1,-11,3,1,0,8,15,-3,11,8,18,20,28,3,-6,-20,-1,-19,-16,-25,3,15,20,-5,8,-7,20,7,15,1,-2,-10,-6,-14,-6,-12,-3,-3,2,16,1,-17,11,9,-6,3,4,-3,-10,3,15,15,-3,-9,12,1,-6,-20,-9,-1,2,15,-14,-7,12,11,3,-15,4,-13,-15,-7,-26,-14,-15,19,4,2,-3,-4,-7,-13,-19,4,-4,-9,-23,-12,0,9,23,15,4,21,20,-14,5,-10,-11,-16,2,-17,1,-3,9,10,7,11,16,10,11,-1,0,2,4,-4,-25,13,7,3,3,6,-1,-8,-16,-14,-19,-3,-3,4,16,1,0,-13,17,-8,26,21,9,17,-4,-8,-5,-21,-9,-2,-6,-13,3,7,-7,11,3,-14,-17,-5,-6,17,-18,-5,-1,-8,-8,-22,2,1,4,0,-16,-35,-21,-15,-5,4,-17,-10,11,-8,-15,-1,5,12,1,0,10,-6,7,-3,23,-5,-5,1,-2,-5,-1,1,-5,5,-1,6,19,-19,9,8,1,-3,-13,-6,8,5,10,-1,3,2,4,8,35,16,-3,2,-3,-4,-4,15,18,8,16,-12,-7,5,8,3,28,19,7,-6,-3,-13,-12,-1,3,6,-7,-5,3,0,3,-6,14,13,-1,26,-6,-20,-8,-22,-10,-6,-3,-14,5,-20,3,4,28,15,8,-3,-9,2,-18,-7,-2,-6,-17,12,4,-4,-15,19,15,-4,-11,-9,1,-5,4,4,-7,11,-28,-5,-5,-14,6,-7,3,-4,-2,4,4,-3,-8,0,10,-8,-14,-13,-22,-30,6,27,8,-25,5,-6,-3,-12,-14,-14,-4,4,-7,-22,-1,2,-23,17,22,-4,1,2,-1,7,-1,0,18,-5,-8,-20,-4,-2,-12,-6,20,-2,-3,5,-7,-14,-2,-4,2,-6,-4,-27,-19,-12,-16,-12,31,7,-2,-11,-6,-8,1,8,8,2,6,5,1,0,-3,-11,31,19,-8,-5,10,-4,5,11,10,9,0,-5,12,20,6,-1,15,12,1,3,7,-7,-6,1,-3,8,4,-11,6,3,17,-3,10,22,14,20,10,1,5,-6,-15,-6,1,6,4,4,13,-3,14,29,27,18,7,21,8,-7,-6,0,6,-5,14,3,-1,4,-6,1,10,-7,-3,0,-6,-18,4,-8,3,3,20,-10,-8,-5,3,-2,0,2,-5,10,6,-8,5,-2,-1,6,15,-2,18,11,0,-15,11,0,15,12,3,-1,5,7,4,1,-2,4,3,-7,-7,-2,2,-4,9,5,10,-6,8,-7,-13,-9,-10,0,11,4,12,5,5,-9,0,-5,4,-4,-12,-16,-11,1,21,14,3,11,12,27,31,22,11,8,-6,-3,-8,-5,-10,-10,-9,-1,5,13,11,7,3,-1,9,8,9,-6,4,0,0,-9,-12,1,7,15,14,10,11,-1,8,3,4,4,4,-2,-3,-15,-2,-4,5,8,-3,9,-3,-3,5,-1,-2,4,6,8,8,-12,-3,10,15,-1,17,10,10,-7,10,8,2,-3,10,3,0,-2,8,8,-1,-6,9,3,9,4,2,-4,2,-7,-7,-4,10,7,2,15,10,-11,12,7,-4,-2,-17,-1,-10,-5,-7,-6,-3,-10,-4,-7,-22,-9,12,12,-9,-7,-17,-5,-4,5,2,2,6,-5,-9,-8,-6,16,7,-5,-13,-9,8,-15,-5,-8,-1,0,-6,-10,3,-6,-3,-1,3,6,0,2,6,2,-1,-3,0,-5,-7,-11,-6,-7,-1,5,10,12,2,-6,6,8,-3,3,8,-15,-4,-8,-1,-13,-1,-5,11,7,1,5,5,19,21,3,2,4,-2,8,-7,-5,-3,1,5,-2,4,2,10,3,0,-5,0,-1,-2,3,-4,-5,-1,-5,1,0,-10,-4,2,-3,-11,-1,0,6,0,-8,-3,-7,-7,6,3,-2,1,-7,3,-6,-2,5,-2,-9,-2,-7,1,-11,-3,-9,6,-3,4,-23,-17,-4,0,-3,-16,-14,-3,-3,0,-17,-19,-5,24,16,8,11,11,-5,5,-1,-8,1,-7,-5,-7,-7,-3,0,19,2,2,12,2,2,4,-13,-10,-9,0,-23,-4,-2,-4,6,6,9,9,-6,2,5,-3,-11,-7,-6,-7,-22,2,-18,1,-3,13,0,9,7,0,-9,5,-6,2,-3,1,-4,13,0,2,-9,-3,7,15,-2,13,-4,-6,1,-8,-8,-12,2,6,5,13,0,0,7,15,7,14,13,18,2,-8,-5,-2,-1,10,6,22,8,-14,0,-1,0,14,27,19,4,12,-4,-5,-12,-6,-7,-9,-14,-9,-9,0,-3,-5,9,11,4,-4,6,-14,-13,-4,-10,3,-17,-16,-2,5,-8,3,2,-3,16,17,13,-4,-5,1,1,2,-7,0,15,23,15,27,7,-11,10,13,10,17,-3,5,5,5,-5,19,27,19,4,5,-3,-12,-14,-2,1,5,9,3,-4,11,9,3,1,-1,-9,-4,5,-15,-10,-9,-1,3,-10,-14,-8,-1,7,28,1,0,-9,-8,-2,-14,-9,-6,-7,-5,-17,-9,9,9,7,2,9,-1,-8,3,-4,-5,0,-5,-1,-2,-10,-3,0,-5,0,4,-3,16,-5,-4,5,-8,-3,1,-5,-14,-18,0,-9,10,6,18,3,-7,-1,-10,-6,-10,-5,-9,-9,-12,-10,-13,26,9,4,15,2,3,-7,-2,11,11,-6,4,7,-1,-6,-7,-14,-9,6,14,10,7,-15,-12,-3,1,-3,-4,7,-5,-13,-5,-3,-2,-11,23,9,-3,-6,5,8,-2,-3,-4,8,1,4,5,-7,-6,8,18,-4,1,-3,4,1,-4,-8,-5,9,7,6,7,-4,-9,1,7,-1,-1,-4,16,-4,-13,2,8,15,10,-8,5,4,-9,-1,18,11,8,6,-9,2,4,3,1,-3,2,-5,-6,-3,1,15,25,3,10,3,-2,-7,-8,-6,-18,-10,-1,-10,-15,1,12,24,7,16,8,-6,8,-5,-9,7,-6,-3,-20,-13,3,1,1,22,-6,7,9,6,4,4,13,5,5,13,-12,5,9,1,7,9,-8,-14,0,9,2,11,14,13,5,-3,7,-3,1,5,6,7,9,-10,-13,-15,-8,7,8,4,-1,5,0,-1,1,-6,0,3,-5,-15,-6,-11,1,-14,-3,-4,-9,-4,-3,-2,7,4,-4,-11,14,-1,2,-1,3,-8,-16,-4,8,13,-7,-5,13,-1,6,-17,9,3,2,-13,-3,-12,-3,-6,-8,4,-5,-5,5,-2,-5,-5,10,7,0,-4,-1,1,-9,-8,-8,-14,-2,-14,-16,-10,5,0,10,0,-1,5,5,-7,-12,-3,-6,-13,-13,-11,-11,-6,-8,2,};

class Neuron {

	int* w;
	int s;
	int m;

public:

	Neuron (int m=256) : m(m), s(50) {
		w=new int [m];
	}

	~Neuron() {
		delete[] w;
	}

	void changeWeight(int d, int * x) {
		for (int i=0; i<m; i++)
			w[i]+=(d*x[i]);
	}

	int adder (int * x) {
		int nec=0;
		for (int i=0; i<m; i++)
			nec+=(x[i]*w[i]);
		return nec;
	}

	int activator (int nec) {
		return 1 ? (nec>=s) : 0; 
	}

	int transfer (int *x) {
		return activator (adder (x));
	}


	friend class Perceptron;
};

class Perceptron {
	
	Neuron * neurons;
	int n,m;

	bool equal (int *a, int *b){
		for (int i=0; i<n; i++) {
			if (a[i]!=b[i]) return false;
		}
	return true;
	}

public:

	Perceptron (int n=10, int m=256) : n(n), m(m) {
		neurons = new Neuron[n];
	}

	~ Perceptron () {
		delete[] neurons;
	}

	int* recognize (int * x) {
		int * y=new int[10];
		for (int i=0; i<n; i++)
			y[i]=neurons[i].transfer(x);
		return y;
	}

	void initWeight() {
		for (int i=0; i<n; i++)
			for (int j=0; j<m; j++)
			neurons[i].w[j]=weight[i][j];
	}

	bool teach (int * x, int * y) {
		int dist;
		int * t = recognize(x);
		bool f=false;
		while (!equal (t,y)) {
			for (int i=0; i<n; i++) {
				dist=y[i]-t[i];
				neurons[i].changeWeight(dist,x);
				f=true;
				delete[] t;
				t=recognize(x);
			}
		}
		delete[] t;
		return f;
	}
	
	
};



void CreateImage16x16(bool ** matr,int m, int n){
	int xtop[3]={-1}, xbottom[3]={-1}, yleft[3]={-1}, yright[3]={-1};
	int k=0;
	bool lf=false;
	for (int j=0; j<n; j++){
		int cnt=0;
		for (int i=0; i<m; i++){
			if (matr[i][j]==0) cnt++;}
		if (!lf)
			if (cnt<m-1) { yleft[k]=j; lf=true; }
		if (lf)
			if ((cnt==m-1)||(cnt==m)) {yright[k]=j; lf=false; k++;}
	}
	int N=k;
	for (int k=0; k<N; k++){
		bool tf=false;
		for (int i=0; i<m; i++){
			int cnt=0;
			for (int j=yleft[k]; j<yright[k]; j++)
				if (matr[i][j]==0) cnt++;
			if (!tf) 
				if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
			if (tf)
				if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
		}
	}
	switch (N) {
		case 1 : { if ((yright[0]-yleft[0])>2*(xbottom[0]-xtop[0])) {
					int alg=(yright[0]-yleft[0])/3;
					yright[2]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[1]=xbottom[0];
					xbottom[2]=xbottom[0];
					N=3;
					int h=xbottom[0];
					for (int k=0; k<N; k++){
					bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					}
				 }
				 else if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					 int alg=(yright[0]-yleft[0])/2;
					 yright[1]=yright[0];
					 yright[0]=yleft[0]+alg;
					 yleft[1]=yright[0];
					 xbottom[1]=xbottom[0];
					 N=2;
					 int h=xbottom[0];
					 for (int k=0; k<N; k++){
					    bool tf=false;
						for (int i=xtop[0]; i<h; i++){
							int cnt=0;
							for (int j=yleft[k]; j<yright[k]; j++)
								if (matr[i][j]==0) cnt++;
							if (!tf) 
								if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
							if (tf)
								if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
						}
					 }
				 }
				 break;}
		case 2 : {if ((yright[0]-yleft[0])>(xbottom[0]-xtop[0])+10) {
					int alg=(yright[0]-yleft[0])/2;
					yleft[2]=yleft[1];
					yright[2]=yright[1];
					xbottom[2]=xbottom[1];
					xtop[2]=xtop[1];
					yright[1]=yright[0];
					yright[0]=yleft[0]+alg;
					yleft[1]=yright[0];
					xbottom[1]=xbottom[0];
						N=3;
						int h=xbottom[0];
						for (int k=0; k<2; k++){
							bool tf=false;
							for (int i=xtop[0]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 else if ((yright[1]-yleft[1])>(xbottom[1]-xtop[1])+10) {
					int alg=(yright[1]-yleft[1])/2;
					yright[2]=yright[1];
					yright[1]=yleft[1]+alg;
					yleft[2]=yright[1];
					xbottom[2]=xbottom[1];
						N=3;
						int h=xbottom[1];
						for (int k=1; k<3; k++){
							bool tf=false;
							for (int i=xtop[1]; i<h; i++){
								int cnt=0;
								for (int j=yleft[k]; j<yright[k]; j++)
									if (matr[i][j]==0) cnt++;
								if (!tf) 
									if (cnt<(yright[k]-yleft[k])) {xtop[k]=i; tf=true; }
								if (tf)
									if (cnt==(yright[k]-yleft[k])) {xbottom[k]=i; tf=false; break;}
							}
						}
					}
				 break;}
		default : break; 
	}

	for (int k=0; k<N; k++) {
		XY[0].x=0;
		XY[16].x=xbottom[k]-xtop[k];
		XY[8].x=XY[16].x/2;
		XY[4].x=XY[8].x/2;
		XY[2].x=XY[4].x/2;
		XY[1].x=XY[2].x/2;
		XY[3].x=(XY[4].x+XY[2].x)/2;
		XY[6].x=(XY[8].x+XY[4].x)/2;
		XY[5].x=(XY[6].x+XY[4].x)/2;
		XY[7].x=(XY[8].x+XY[6].x)/2;
		XY[12].x=(XY[16].x+XY[8].x)/2;
		XY[10].x=(XY[12].x+XY[8].x)/2;
		XY[14].x=(XY[16].x+XY[12].x)/2;
		XY[9].x=(XY[10].x+XY[8].x)/2;
		XY[11].x=(XY[12].x+XY[10].x)/2;
		XY[13].x=(XY[14].x+XY[12].x)/2;
		XY[15].x=(XY[16].x+XY[14].x)/2;
		
		XY[0].y=0;
		XY[16].y=yright[k]-yleft[k];
		XY[8].y=XY[16].y/2;
		XY[4].y=XY[8].y/2;
		XY[2].y=XY[4].y/2;
		XY[1].y=XY[2].y/2;
		XY[3].y=(XY[4].y+XY[2].y)/2;
		XY[6].y=(XY[8].y+XY[4].y)/2;
		XY[5].y=(XY[6].y+XY[4].y)/2;
		XY[7].y=(XY[8].y+XY[6].y)/2;
		XY[12].y=(XY[16].y+XY[8].y)/2;
		XY[10].y=(XY[12].y+XY[8].y)/2;
		XY[14].y=(XY[16].y+XY[12].y)/2;
		XY[9].y=(XY[10].y+XY[8].y)/2;
		XY[11].y=(XY[12].y+XY[10].y)/2;
		XY[13].y=(XY[14].y+XY[12].y)/2;
		XY[15].y=(XY[16].y+XY[14].y)/2;
		
		int* Result=new int [256];
		

		for (int kx=0; kx<16; kx++)
			for (int ky=0; ky<16; ky++){
				int nSymbol=0;
				for (int i=xtop[k]+XY[kx].x; i<xtop[k]+XY[kx+1].x;i++){	
					for (int j=yleft[k]+XY[ky].y; j<yleft[k]+XY[ky+1].y; j++)
						{if (matr[i][j]==1) nSymbol++;}	
				}
				
					if (nSymbol>0) 
						Result[(kx*16)+ky]=1;
					else 
						Result[(kx*16)+ky]=-1;
			}
			
			int sc=0; bool fl=true;
			for (int i=0; i<16; i++){	
				if ((Result[i]==1)&&(Result[i+15*16]==1)) sc++;
				if ((Result[i*16]==1)&&(Result[16*i+15]==1)) sc++;
			}
            
			if (sc==32) { 
				yleft[k]+=XY[1].y;
				yright[k]-=(XY[16].y-XY[15].y);
				xtop[k]+=XY[1].x;
				xbottom[k]-=(XY[16].x-XY[15].x);
				int mm=xbottom[k]-xtop[k]+2;
				int nn=yright[k]-yleft[k]+2;
				bool ** Hell=new bool *[mm];
				for (int i=0; i<xbottom[k]-xtop[k]+2; i++)
					Hell[i]=new bool[nn];
				for (int i=0; i<mm; i++)
					for (int j=0; j<nn; j++)
						Hell[i][j]=0; 
				for (int i=1; i<mm-2; i++)
					for (int j=1; j<nn-2; j++)
						Hell[i][j]=matr[xtop[k]+i-1][yleft[k]+j-1];


				fl=false;
				CreateImage16x16(Hell,mm,nn);
				for (int i=0; i<mm; i++)
					delete[] Hell[i];
				delete[] Hell;

				}
			
			if (fl) {
				Q.push(Result);
			
			}		
			
			
			
			
	}
		
		
}



int main()
{  
	
	bool** matr=new bool* [MaxN];
	for (int i=0; i<MaxN; i++)
		matr[i]=new bool[MaxN];

	for(int ii=0; ii<MaxN; ii++)
		for (int jj=0; jj<MaxN; jj++)
			matr[ii][jj]=0;

	

	char k;
	bool fb=true;
	bool fw=true;
	int l=0;
	int j=0;
	int N=0;
	int M=0;
	int s=0;
	while(fw){
		scanf("%c",&k);
		switch(k) {
			case '#' : {matr[l][j]=1; j++; fb=false; break;}
			case '@' : {matr[l][j]=1; j++; fb=false; break;}
			case '\n': {l++; N=j; j=0; s=0; break;}
			default : {matr[l][j]=0; j++; s++; break;}
		}
		if ((s==N)&&(!fb)){M=l; fw=false; }

	}

    	
	CreateImage16x16(matr,++M,N);

	Perceptron P;
	P.initWeight();
	
	while (!Q.empty()) {
		int * e=Q.front();
		int * t=P.recognize(e);
		for (int i=0; i<10; i++){
			if (t[i]==1) {
				cout<<i; i=10; 
			}
		}
		delete[] t;
		Q.pop();
	}
	
	
	for (int i=0; i<MaxN; i++)
		delete[] matr[i];
	delete[] matr;

					
	return 0;
}

